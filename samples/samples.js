(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

},{}],3:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],4:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],5:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],10:[function(require,module,exports){
/*
 * packedbuffer.js - represent a packed buffer of bytes
 * 
 * Copyright Â© 2014 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * @constructor
 * Represents a binary buffer of unsigned bytes that will be parsed in various ways. The buffer 
 * can be decoded by reading various lengths of bytes and interpretting them as longs
 * or unsigned bytes, etc. The bytes are interpretted in big-endian (network) format.
 * @param {string} buffer the binary buffer represented as a string
 */
var PackedBuffer = function (buffer) {
	this.buffer = buffer;
	this.index = 0;
};

/**
 * Return the specified number of signed long integers from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return as many longs as are available in the rest of the
 * buffer.
 * 
 * @param {number} num The number of longs to return
 * @returns {Array.<number>} the array of signed long integers
 */
PackedBuffer.prototype.getLongs = function(num) {
	var result = undefined;
	if (this.buffer && this.index < this.buffer.length) {
		result = [];
		for (var i = 0; i < num && this.index+3 < this.buffer.length; i++) {
			var longnum = this.buffer[this.index] << 24 | 
				this.buffer[this.index+1] << 16 | 
				this.buffer[this.index+2] << 8 | 
				this.buffer[this.index+3];
			result.push(longnum);
			this.index += 4;
		}
	}
	return result;
};

/**
 * Return a signed long integer from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return a long if it is available in the buffer, otherwise
 * it will return undefined.
 * 
 * @returns {number} the long at the current point in the buffer, or undefined if
 * there is not enough bytes left in the buffer to form a long
 */
PackedBuffer.prototype.getLong = function() {
	var longs = this.getLongs(1);
	if (longs && longs.length > 0) {
		return longs[0];
	}
	return undefined;
};

/**
 * Return the specified number of signed byte integers from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return as many bytes as are available in the rest of the
 * buffer.
 * 
 * @param {number|undefined} num The number of bytes to return
 * @returns {Array.<number>} the array of signed byte integers
 */
PackedBuffer.prototype.getBytes = function(num) {
	var result = undefined;
	if (this.buffer && this.index < this.buffer.length) {
		result = [];
		for (var i = 0; i < num && this.index < this.buffer.length; i++) {
			var bytenum = this.buffer[this.index++];
			if (bytenum & 0x80) {
				bytenum -= 0x100;
			}
			result.push(bytenum);
		}
	}
	return result;
};

/**
 * Return a signed byte integer from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return a byte if it is available in the buffer, otherwise
 * it will return undefined.
 * 
 * @returns {number} the byte at the current point in the buffer, or undefined if
 * there is not enough bytes left in the buffer to form a byte
 */
PackedBuffer.prototype.getByte = function() {
	var bytes = this.getBytes(1);
	if (bytes && bytes.length > 0) {
		return bytes[0];
	}
	return undefined;
};

/**
 * Return the specified number of unsigned byte integers from the current location in
 * the buffer as an array of numbers and advance the current pointer in the buffer.
 * This method will only return as many bytes as are available in the rest of the
 * buffer.
 * 
 * @param {number} num The number of bytes to return
 * @returns {Array.<number>} the array of unsigned byte integers
 */
PackedBuffer.prototype.getUnsignedBytes = function(num) {
	var result = undefined;
	if (this.buffer && this.index < this.buffer.length) {
		result = [];
		for (var i = 0; i < num && this.index < this.buffer.length; i++) {
			result.push(this.buffer[this.index++]);
		}
	}
	return result;
	
};

/**
 * Return a string made out of the given number of bytes and convert
 * from UTF-8 to UTF-16.
 * 
 * @param {number} num The number of bytes to make a string out of
 * @returns {string} a string made out of the given bytes
 */
PackedBuffer.prototype.getString = function(num) {
	var arr = this.getUnsignedBytes(num);
	var str = "";
	for (var i = 0; i < arr.length; i++) {
		str += String.fromCharCode(arr[i]);
	}
	return str;
	
};

/**
 * Advance the current pointer in the buffer by the specified number of
 * bytes in the string.
 * 
 * @param {number} num The number of bytes to skip
 */
PackedBuffer.prototype.skip = function(num) {
	this.index += num;
};

module.exports = PackedBuffer;
},{}],55:[function(require,module,exports){


var PathResolverFactory = module.exports = function() {
	this.paths = {};
	this.pathNames = [];
};

PathResolverFactory.prototype = {
	addPath: function(inName, inPath) {
		this.paths[inName] = inPath;
		this.pathNames.push(inName);
		this.pathNames.sort(function(a, b) {
			return b.length - a.length;
		});
		return inPath;
	},
	addPaths: function(inPaths) {
		if (inPaths) {
			for (var n in inPaths) {
				this.addPath(n, inPaths[n]);
			}
		}
	},
	includeTrailingSlash: function(inPath) {
		return (inPath && inPath.slice(-1) !== "/") ? inPath + "/" : inPath;
	},
	// replace macros of the form $pathname with the mapped value of paths.pathname
	rewrite: function (inPath) {
		var working, its = this.includeTrailingSlash, paths = this.paths;
		var fn = function(macro, name) {
			working = true;
			return its(paths[name]) || '';
		};
		var result = inPath;
		do {
			working = false;
			for (var i=0; i<this.pathNames.length; i++) {
				var regex = new RegExp("\\$(" + this.pathNames[i] + ")(\\/)?", "g");
				result = result.replace(regex, fn);
			}
		} while (working);
		return result;
	}
};
},{}],99:[function(require,module,exports){
(function (global){
/*jshint node:true */
'use strict';

module.exports = (global.enyo && global.enyo.options) || {};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],276:[function(require,module,exports){
/**
* {@link enyo.Spotlight.Accelerator} provides logic for accelerating and
* throttling cursor movement.
*
* @typedef {Object} enyo.Spotlight.Accelerator
*
* @class enyo.Spotlight.Accelerator
* @public
*/
module.exports = function (Spotlight) {

    //* @protected
    /*************************************************************/

    var _isAccelerating = false,
        _nSkipped = 0,
        _nTime = 0,
        _nKey = 0,
        _bCanceled = false;

    /**
    * Controls the frequency with which the cursor will "freeze". While frozen,
    * the current spotted item cannot change, and all events are directed to it.
    *
    * @type {Array}
    * @default [3, 3, 3, 2, 2, 2, 1]
    * @public
    */
    this.frequency = [3, 3, 3, 2, 2, 2, 1];

    /**
    * Called from {@link enyo.Spotlight}, with the current keydown event and
    * Spotlight's callback, which will be called when the event is allowed
    * through.
    *
    * @param  {Object} oEvent - The current event to validate.
    * @param  {Function} fCallback - The callback to execute.
    * @param  {Object} oContext - The callback's execution context.
    * @returns {Boolean}
    * @public
    */
    this.processKey = function(oEvent, fCallback, oContext) {
        switch (oEvent.type) {
            case 'keydown':
            case 'pagehold':
            case 'pageholdpulse':
                if (oEvent.keyCode != _nKey) {
                    this.reset();
                    _nTime = (new Date()).getTime();
                    _nKey = oEvent.keyCode;
                    return fCallback.apply(oContext, [oEvent]);
                } else if (_bCanceled) {

                    // Prevent skipped keydown events from bubbling
                    oEvent.preventDefault();
                    return true;
                } else {
                    var nElapsedTime = (new Date()).getTime() - _nTime,
                        nSeconds = Math.floor(nElapsedTime / 1000),
                        nToSkip = 0;

                    nSeconds = nSeconds > this.frequency.length - 1 ? this.frequency.length - 1 : nSeconds;

                    nToSkip = this.frequency[nSeconds] - 1;
                    if (nToSkip < 0) {
                        nToSkip = 0;
                    }

                    _isAccelerating = !(nSeconds === 0 && _nSkipped === 0);

                    if (_nSkipped >= nToSkip) {
                        _nSkipped = 0;
                        return fCallback.apply(oContext, [oEvent]);
                    } else {
                        _nSkipped++;
                        oEvent.preventDefault(); // Prevent skipped keydown events from bubbling
                        return true;
                    }
                }
                break;
            case 'keyup':
            case 'pagerelease':
                this.reset();
                return fCallback.apply(oContext, [oEvent]);
        }
    };


    /**
    * Resets values for Spotlight.
    *
    * @public
    */
    this.reset = function() {
        _nSkipped = 0;
        _nTime = 0;
        _nKey = 0;
        _bCanceled = false;
        _isAccelerating = false;
    };

    /**
    * Cancels the accelerator.
    *
    * @public
    */
    this.cancel = function() {
        _bCanceled = true;
    };

    /**
    * Verifies that the accelerator is active.
    *
    * @returns {Boolean} `true` if the accelerator is active; otherwise, `false`.
    * @public
    */
    this.isAccelerating = function() {
        return _isAccelerating;
    };
};

},{}],278:[function(require,module,exports){
/**
* {@link enyo.Spotlight.Muter} provides methods for working with muted controls.
* By default, when a control is muted, it does not have the `'spotlight'` CSS class
* applied to its DOM node, and does not appear as highlighted when it has Spotlight
* focus.
*
* @typedef {Object} enyo.Spotlight.Muter definition
*
* @class enyo.Spotlight.Muter
* @public
*/
module.exports = function (Spotlight) {
    var _oMutes = {},
        _nMutes = 0;

    /**
    * Mutes a control.
    *
    * @param  {Object} oSender - The control to be muted.
    * @public
    */
    this.addMuteReason = function(oSender) {
        if (typeof _oMutes[oSender.id] != 'undefined') {
            return;
        }

        if (_nMutes === 0) {
            var oCurrent = Spotlight.getCurrent();
            if (oCurrent) {
                Spotlight.unhighlight(oCurrent);
            }
        }

        _oMutes[oSender.id] = 1;
        _nMutes++;
    };

    /**
    * Un-mutes a muted control.
    *
    * @param  {Object} oSender - The control to be un-muted.
    * @public
    */
    this.removeMuteReason = function(oSender) {
        if (typeof _oMutes[oSender.id] == 'undefined') {
            return;
        }

        delete _oMutes[oSender.id];
        _nMutes--;

        if (_nMutes === 0) {
            var oCurrent = Spotlight.getCurrent();
            if (oCurrent) {
                Spotlight.highlight(oCurrent, true);
            }
        }
    };

    /**
    * Determines whether Spotlight muter is currently in use.
    *
    * @type {Function}
    * @returns {Boolean} `true` if there is at least one currently muted control;
    * otherwise, `false`.
    * @public
    */
    this.isMuted = function() {
        return _nMutes > 0;
    };
};

},{}],279:[function(require,module,exports){
/**
* {@link enyo.Spotlight.NearestNeighbor} contains logic to identify the nearest
* neighboring object for the object that currently has focus.
*
* @typedef {Object} enyo.Spotlight.NearestNeighbor definition
*
* @class enyo.Spotlight.NearestNeighbor
* @public
*/
module.exports = function (Spotlight) {

    /**
    * Determines whether a control overlaps multiple planes.
    *
    * @param  {String} sDirection - The direction of acceleration.
    * @param  {Object} oBounds1 - Initial bounds.
    * @param  {Object} oBounds2 - Final bounds.
    * @param  {Boolean} bCenterCheck - Whether to check for the center of the bounds.
    * @returns {Boolean}
    * @private
    */
    var _isInHalfPlane = function(sDirection, oBounds1, oBounds2, bCenterCheck) {
            if (bCenterCheck) {
                switch (sDirection) {
                    case 'UP':
                        return oBounds1.top + oBounds1.height / 2 > oBounds2.top + oBounds2.height / 2;
                    case 'DOWN':
                        return oBounds1.top + oBounds1.height / 2 < oBounds2.top + oBounds2.height / 2;
                    case 'LEFT':
                        return oBounds1.left + oBounds1.width / 2 > oBounds2.left + oBounds2.width / 2;
                    case 'RIGHT':
                        return oBounds1.left + oBounds1.width / 2 < oBounds2.left + oBounds2.width / 2;
                }
            } else {
                switch (sDirection) {
                    case 'UP':
                        return oBounds1.top >= oBounds2.top + oBounds2.height - 1;
                    case 'DOWN':
                        return oBounds1.top + oBounds1.height - 1 <= oBounds2.top;
                    case 'LEFT':
                        return oBounds1.left >= oBounds2.left + oBounds2.width - 1;
                    case 'RIGHT':
                        return oBounds1.left + oBounds1.width - 1 <= oBounds2.left;
                }
            }
        },

        /**
        * Checks to see which control has higher precedence for spottability.
        *
        * @param  {String} sDirection - The direction of acceleration.
        * @param  {Object} oBounds1 - Initial bounds.
        * @param  {Object} oBounds2 - Final bounds.
        * @returns {Number}
        * @private
        */
        _getAdjacentControlPrecedence = function(sDirection, oBounds1, oBounds2) {
            var oPoints = _getAdjacentControlPoints(sDirection, oBounds1, oBounds2);
            return _getPrecedenceValue(oPoints, sDirection);
        },

        /**
        * Retrieves the adjacent axis control points based on direction of acceleration.
        *
        * @param  {String} sDirection - The direction of acceleration.
        * @param  {Object} oBounds1 - Initial bounds.
        * @param  {Object} oBounds2 - Final bounds.
        * @returns {Number}
        * @private
        */
        _getAdjacentControlPoints = function(sDirection, oBounds1, oBounds2) {
            switch (sDirection) {
                case 'UP':
                case 'DOWN':
                    return _getYAxisPoints(sDirection, oBounds1, oBounds2);
                case 'LEFT':
                case 'RIGHT':
                    return _getXAxisPoints(sDirection, oBounds1, oBounds2);
            }
        },

        /**
        * Retrieves the `y`-axis points for the specified bounds, dependent on
        * direction of acceleration.
        *
        * @param  {String} sDirection - The direction of acceleration.
        * @param  {Object} oBounds1 - Initial bounds.
        * @param  {Object} oBounds2 - Final bounds.
        * @returns {Number}
        * @private
        */
        _getYAxisPoints = function(sDirection, oBounds1, oBounds2) {
            var x1, x2, y1, y2;

            y1 = (sDirection === 'UP') ? oBounds1.top : oBounds1.top + oBounds1.height;

            y2 = (sDirection === 'UP') ? oBounds2.top + oBounds2.height : oBounds2.top;

            if (oBounds1.left < oBounds2.left) {
                if (oBounds1.left + oBounds1.width <= oBounds2.left) {
                    x1 = oBounds1.left + oBounds1.width + 1;
                    x2 = oBounds2.left;
                } else {
                    x1 = oBounds2.left;
                    x2 = oBounds2.left;
                }
            } else {
                if (oBounds1.left >= oBounds2.left + oBounds2.width) {
                    x1 = oBounds1.left;
                    x2 = oBounds2.left + oBounds2.width + 1;
                } else {
                    x1 = oBounds1.left;
                    x2 = oBounds1.left;
                }
            }

            return [{
                x: x1,
                y: y1
            }, {
                x: x2,
                y: y2
            }];
        },

        /**
        * Retrieves the `x`-axis points for the specified bounds, dependent on
        * direction of acceleration.
        *
        * @param  {String} sDirection - The direction of acceleration.
        * @param  {Object} oBounds1 - Initial bounds.
        * @param  {Object} oBounds2 - Final bounds.
        * @returns {Number}
        * @private
        */
        _getXAxisPoints = function(sDirection, oBounds1, oBounds2) {
            var x1, x2, y1, y2;

            x1 = (sDirection === 'LEFT') ? oBounds1.left : oBounds1.left + oBounds1.width;

            x2 = (sDirection === 'LEFT') ? oBounds2.left + oBounds2.width : oBounds2.left;

            if (oBounds1.top < oBounds2.top) {
                if (oBounds1.top + oBounds1.height <= oBounds2.top) {
                    y1 = oBounds1.top + oBounds1.height + 1;
                    y2 = oBounds2.top;
                } else {
                    y1 = oBounds2.top;
                    y2 = oBounds2.top;
                }
            } else {
                if (oBounds1.top >= oBounds2.top + oBounds2.height) {
                    y1 = oBounds1.top;
                    y2 = oBounds2.top + oBounds2.height + 1;
                } else {
                    y1 = oBounds1.top;
                    y2 = oBounds1.top;
                }
            }

            return [{
                x: x1,
                y: y1
            }, {
                x: x2,
                y: y2
            }];
        },

        /**
        * Calculates precedence value for the given set of axis points and
        * direction of acceleration.
        *
        * @param  {Object} oPoints - Axis points to be evaluated.
        * @param  {Object} sDirection - The direction of acceleration.
        * @returns {Number} The precedence value.
        * @private
        */
        _getPrecedenceValue = function(oPoints, sDirection) {
            var delta = _getDelta(oPoints[0], oPoints[1]),
                slope = _getSlope(delta, sDirection),
                angle = _getAngle(slope),
                distance = _getDistance(delta);

            return angle > 90 ? 0 : 1 / (angle * Math.pow(distance, 4));
        },

        /**
        * Retrieves the difference between points.
        *
        * @param  {Object} point1 - Initial point.
        * @param  {Object} point2 - Destination point.
        * @returns {Object}
        * @private
        */
        _getDelta = function(point1, point2) {
            return {
                dx: Math.abs(point2.x - point1.x),
                dy: Math.abs(point2.y - point1.y)
            };
        },

        /**
        * Retrieves the distance from the specified bounds to the center point.
        *
        * @param  {Object} oBounds1 - Initial bounds.
        * @param  {Object} oBounds2 - Destination bounds.
        * @returns {Object}
        * @private
        */
        _getCenterToCenterDistance = function(oBounds1, oBounds2) {
            var oCenter1 = {
                    x: oBounds1.left + oBounds1.width / 2,
                    y: oBounds1.top + oBounds1.height / 2
                },
                oCenter2 = {
                    x: oBounds2.left + oBounds2.width / 2,
                    y: oBounds2.top + oBounds2.height / 2
                },
                oDelta = _getDelta(oCenter1, oCenter2),
                nDistance = _getDistance(oDelta);

            return nDistance;
        },

        /**
        * Retrieves the slope of the angle.
        *
        * @param  {Object} delta - Initial bounds.
        * @param  {String} sDirection - Destination bounds.
        * @returns {Number} The slope value.
        * @private
        */
        _getSlope = function(delta, sDirection) {
            switch (sDirection) {
                case 'UP':
                case 'DOWN':
                    return delta.dx / delta.dy;
                case 'LEFT':
                case 'RIGHT':
                    return delta.dy / delta.dx;
            }
        },

        /**
        * Retrieves the distance between delta points.
        *
        * @param  {Object} delta - Initial bounds.
        * @returns {Number}
        * @private
        */
        _getDistance = function(delta) {
            return Math.pow(delta.dx * delta.dx + delta.dy * delta.dy, 0.5) || 0.1;
        },

        /**
        * Retrieves the distance between angle based on slope.
        *
        * @param  {Number} nSlope - Slope used to determine angle.
        * @returns {Number}
        * @private
        */
        _getAngle = function(nSlope) {
            return Math.atan(nSlope) * 180 / Math.PI || 0.1;
        },

        /**
        * Calculates nearest neighbor based on bounds and acceleration direction.
        *
        * @param  {Object} o - Object used to determine if it is a neighbor.
        * @param  {Number} sDirection - The direction of acceleration
        * @param  {Number} oBounds1 - Originating bounds.
        * @param  {Number} oControl - The current control.
        * @returns {Number}
        * @private
        */
        _calculateNearestNeighbor = function(o, sDirection, oBounds1, oControl) {
            var n,
                oBounds2,
                nPrecedence,
                nDistance,
                oSibling = null,
                oBestMatch = null,
                nBestMatch = 0,
                nBestDistance = 0,
                nLen = o.length;

            for (n = 0; n < nLen; n++) {
                oSibling = o[n];
                if (oControl && oSibling === oControl) {
                    continue;
                }

                oBounds2 = oSibling.getAbsoluteBounds();

                // If control is in half plane specified by direction
                if (_isInHalfPlane(sDirection, oBounds1, oBounds2)) {
                    // Find control with highest precedence to the direction
                    nPrecedence = _getAdjacentControlPrecedence(sDirection, oBounds1, oBounds2);
                    if (nPrecedence > nBestMatch) {
                        nBestMatch = nPrecedence;
                        oBestMatch = oSibling;
                        nBestDistance = _getCenterToCenterDistance(oBounds1, oBounds2);
                    } else if (nPrecedence == nBestMatch) {
                        nDistance = _getCenterToCenterDistance(oBounds1, oBounds2);
                        if (nBestDistance > nDistance) {
                            nBestMatch = nPrecedence;
                            oBestMatch = oSibling;
                            nBestDistance = nDistance;
                        }
                    }
                }
            }
            return oBestMatch;
        };

    /**
    * Gets the nearest neighbor of the pointer.
    *
    * @param  {Object} oRoot - The root component.
    * @param  {String} sDirection - The direction in which to spot the next control.
    * @param  {Number} nPositionX - The `x` coordinate of the pointer.
    * @param  {Number} nPositionY - The `y` coordinate of the pointer.
    * @returns {Object} The nearest neighbor of the pointer.
    * @public
    */
    this.getNearestPointerNeighbor = function(oRoot, sDirection, nPositionX, nPositionY) {
        var oBounds = {
                left: nPositionX,
                top: nPositionY,
                width: 1,
                height: 1
            },
            o = Spotlight.getChildren(oRoot, true);

        return _calculateNearestNeighbor(o, sDirection, oBounds);
    };

    /**
    * Gets the nearest neighbor of a control.
    *
    * @param  {String} sDirection - The direction in which to spot the next control.
    * @param  {Object} oControl - The control whose nearest neighbor is to be
    * determined.
    * @returns {Object} The nearest neighbor of the control.
    * @public
    */
    this.getNearestNeighbor = function(sDirection, oControl) {
        sDirection = sDirection.toUpperCase();
        oControl = oControl || Spotlight.getCurrent();

        // Check to see if default direction is specified
        var oNeighbor = Spotlight.Util.getDefaultDirectionControl(sDirection, oControl);
		if (oNeighbor) {
			if (Spotlight.isSpottable(oNeighbor)) {
				return oNeighbor;
			} else {
				oNeighbor = Spotlight.getFirstChild(oNeighbor);
				if (oNeighbor && Spotlight.isSpottable(oNeighbor)) { 
					return oNeighbor;
				}
			}
		}

        // If default control in the direction of navigation is not specified, calculate it

        var o = Spotlight.getSiblings(oControl),
            oBounds;

        // If the control is container, the nearest neighbor is calculated based on the bounds
        // of last focused child of container.
        if (Spotlight.isContainer(oControl)) {
            oControl = Spotlight.Container.getLastFocusedChild(oControl) || oControl;
        }

        oBounds = oControl.getAbsoluteBounds();

        return _calculateNearestNeighbor(o.siblings, sDirection, oBounds, oControl);
    };
};

},{}],280:[function(require,module,exports){
/**
 * {@link enyo.Spotlight.Scrolling} contains logic relating to mousewheel events.
 *
 * @typedef {Object} enyo.Spotlight.Scrolling definition
 *
 * @class enyo.Spotlight.Scrolling
 * @public
 */

module.exports = function (Spotlight) {
    //* @protected
    /*************************************************************/

    var _nDelta = 0;

    /**
    * Scroll event is fired every `this.frequency` mousewheel points.
    *
    * @type {Number}
    * @public
    */
    this.frequency = 40;

    /**
    * Determines string component id to push.
    *
    * @param  {Object} oEvent - The current event.
    * @param  {Function} fCallback - The callback function.
    * @param  {Object} oContext - The execution context for the callback.
    * @public
    */
    this.processMouseWheel = function(oEvent, fCallback, oContext) {
        _nDelta += oEvent.wheelDeltaY;

        if (_nDelta >= this.frequency) {
            _nDelta = 0;
            return fCallback.apply(oContext, [oEvent, true]);
        } else if (_nDelta <= -this.frequency) {
            _nDelta = 0;
            return fCallback.apply(oContext, [oEvent, false]);
        }
    };
};

},{}],2:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff
var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding) {
  var self = this
  if (!(self instanceof Buffer)) return new Buffer(subject, encoding)

  var type = typeof subject
  var length

  if (type === 'number') {
    length = +subject
  } else if (type === 'string') {
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) {
    // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data)) subject = subject.data
    length = +subject.length
  } else {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (length > kMaxLength) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum size: 0x' +
      kMaxLength.toString(16) + ' bytes')
  }

  if (length < 0) length = 0
  else length >>>= 0 // coerce to uint32

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    self = Buffer._augment(new Uint8Array(length)) // eslint-disable-line consistent-this
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    self.length = length
    self._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    self._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++) {
        self[i] = subject.readUInt8(i)
      }
    } else {
      for (i = 0; i < length; i++) {
        self[i] = ((subject[i] % 256) + 256) % 256
      }
    }
  } else if (type === 'string') {
    self.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT) {
    for (i = 0; i < length; i++) {
      self[i] = 0
    }
  }

  if (length > 0 && length <= Buffer.poolSize) self.parent = rootParent

  return self
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, totalLength) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function byteLength (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function toString (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0

  if (length < 0 || offset < 0 || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) >>> 0 & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) >>> 0 & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(
      this, value, offset, byteLength,
      Math.pow(2, 8 * byteLength - 1) - 1,
      -Math.pow(2, 8 * byteLength - 1)
    )
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkInt(
      this, value, offset, byteLength,
      Math.pow(2, 8 * byteLength - 1) - 1,
      -Math.pow(2, 8 * byteLength - 1)
    )
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, target_start, start, end) {
  var self = this // source

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (target_start >= target.length) target_start = target.length
  if (!target_start) target_start = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || self.length === 0) return 0

  // Fatal error conditions
  if (target_start < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= self.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - target_start < end - start) {
    end = target.length - target_start + start
  }

  var len = end - start

  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []
  var i = 0

  for (; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (leadSurrogate) {
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        } else {
          // valid surrogate pair
          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
          leadSurrogate = null
        }
      } else {
        // no lead yet

        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else {
          // valid lead
          leadSurrogate = codePoint
          continue
        }
      }
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      leadSurrogate = null
    }

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x200000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":3,"ieee754":4,"is-array":5}],7:[function(require,module,exports){
(function (process,global){
/*
 * ilibglobal.js - define the ilib name space
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @namespace The global namespace that contains all ilib functions and classes.
 */
var ilib = ilib || {};

/**
 * Return the current version of ilib.
 * 
 * @static
 * @return {string} a version string for this instance of ilib
 */
ilib.getVersion = function () {
    // increment this for each release
    return "10.0"
    ;
};

/**
 * Place where resources and such are eventually assigned.
 */
ilib.data = {
    norm: {
        nfc: {},
        nfd: {},
        nfkd: {},
        ccc: {}
    },
    zoneinfo: {
        "Etc/UTC":{"o":"0:0","f":"UTC"},
        "local":{"f":"local"}
    },
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_c: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_l: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_m: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_p: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_z: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ scriptToRange: null,
    /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */ dateformats: null
};

if (typeof(window) !== 'undefined') {
    window["ilib"] = ilib;
}

// export ilib for use as a module in nodejs
if (typeof(exports) !== 'undefined') {
    exports.ilib = ilib;
}

ilib.pseudoLocales = ["zxx-XX"];

/**
 * Sets the pseudo locale. Pseudolocalization (or pseudo-localization) is used for testing
 * internationalization aspects of software. Instead of translating the text of the software
 * into a foreign language, as in the process of localization, the textual elements of an application
 * are replaced with an altered version of the original language.These specific alterations make
 * the original words appear readable, but include the most problematic characteristics of 
 * the world's languages: varying length of text or characters, language direction, and so on.
 * Regular Latin pseudo locale: eu-ES and RTL pseudo locale: ps-AF
 * 
 * @param {string|undefined|null} localename the locale specifier for the pseudo locale
 */
ilib.setAsPseudoLocale = function (localename) {
   if (localename) {
	   ilib.pseudoLocales.push(localename)
   }
};

/**
 * Reset the list of pseudo locales back to the default single locale of zxx-XX.
 */
ilib.clearPseudoLocales = function() {
	ilib.pseudoLocales = ["zxx-XX"];
};

/**
 * Return the name of the platform
 * @private
 * @static
 * @return {string} string naming the platform
 */
ilib._getPlatform = function () {
    if (!ilib._platform) {
        if (typeof(environment) !== 'undefined') {
            ilib._platform = "rhino";
        } else if (typeof(process) !== 'undefined' || typeof(require) !== 'undefined') {
            ilib._platform = "nodejs";
        } else if (typeof(window) !== 'undefined') {
            ilib._platform = (typeof(PalmSystem) !== 'undefined') ? "webos" : "browser";
        } else {
            ilib._platform = "unknown";
        }
    }    
    return ilib._platform;
};

/**
 * Return true if the global variable is defined on this platform.
 * @private
 * @static
 * @return {boolean} true if the global variable is defined on this platform, false otherwise
 */
ilib._isGlobal = function(name) {
    switch (ilib._getPlatform()) {
        case "rhino":
            var top = (function() {
              return (typeof global === 'object') ? global : this;
            })();
            return typeof(top[name]) !== undefined;
        case "nodejs":
            var root = typeof(global) !== 'undefined' ? global : this;
            return root && typeof(root[name]) !== undefined;
            
        default:
            return typeof(window[name]) !== undefined;
    }
};

/**
 * Sets the default locale for all of ilib. This locale will be used
 * when no explicit locale is passed to any ilib class. If the default
 * locale is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the locale "en-US".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @static
 * @param {string|undefined|null} spec the locale specifier for the default locale
 */
ilib.setLocale = function (spec) {
    if (typeof(spec) === 'string' || !spec) {
        ilib.locale = spec;
    }
    // else ignore other data types, as we don't have the dependencies
    // to look into them to find a locale
};

/**
 * Return the default locale for all of ilib if one has been set. This 
 * locale will be used when no explicit locale is passed to any ilib 
 * class. If the default
 * locale is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the locale "en-US".<p>
 * 
 * Depends directive: !depends ilibglobal.js 
 * 
 * @static
 * @return {string} the locale specifier for the default locale
 */
ilib.getLocale = function () {
    if (typeof(ilib.locale) !== 'string') {
        if (typeof(navigator) !== 'undefined' && typeof(navigator.language) !== 'undefined') {
            // running in a browser
            ilib.locale = navigator.language;  // FF/Opera/Chrome/Webkit
            if (!ilib.locale) {
                // IE on Windows
                var lang = typeof(navigator.browserLanguage) !== 'undefined' ? 
                    navigator.browserLanguage : 
                    (typeof(navigator.userLanguage) !== 'undefined' ? 
                        navigator.userLanguage : 
                        (typeof(navigator.systemLanguage) !== 'undefined' ?
                            navigator.systemLanguage :
                            undefined));
                if (typeof(lang) !== 'undefined' && lang) {
                    // for some reason, MS uses lower case region tags
                    ilib.locale = lang.substring(0,3) + lang.substring(3,5).toUpperCase();
                }
            }
        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.locales) !== 'undefined') {
            // webOS
            if (typeof(PalmSystem.locales.UI) != 'undefined' && PalmSystem.locales.UI.length > 0) {
                ilib.locale = PalmSystem.locales.UI;
            }
        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {
            // running under rhino
            if (typeof(environment.user.language) === 'string' && environment.user.language.length > 0) {
                ilib.locale = environment.user.language;
                if (typeof(environment.user.country) === 'string' && environment.user.country.length > 0) {
                    ilib.locale += '-' + environment.user.country;
                }
            }
        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {
            // running under nodejs
            var lang = process.env.LANG || process.env.LC_ALL;
            // the LANG variable on unix is in the form "lang_REGION.CHARSET"
            // where language and region are the correct ISO codes separated by
            // an underscore. This translate it back to the BCP-47 form.
            if (lang && lang !== 'undefined') {
                ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();
            }
        }
             
        ilib.locale = typeof(ilib.locale) === 'string' ? ilib.locale : 'en-US';
    }
    return ilib.locale;
};

/**
 * Sets the default time zone for all of ilib. This time zone will be used when
 * no explicit time zone is passed to any ilib class. If the default time zone
 * is not set, ilib will attempt to use the time zone of the
 * environment it is running in, if it can find that. If not, it will
 * default to the the UTC zone "Etc/UTC".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @static
 * @param {string} tz the name of the time zone to set as the default time zone
 */
ilib.setTimeZone = function (tz) {
    ilib.tz = tz || ilib.tz;
};

/**
 * Return the default time zone for all of ilib if one has been set. This 
 * time zone will be used when no explicit time zone is passed to any ilib 
 * class. If the default time zone
 * is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the the zone "local".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @static
 * @return {string} the default time zone for ilib
 */
ilib.getTimeZone = function() {
    if (typeof(ilib.tz) === 'undefined') {
        if (typeof(navigator) !== 'undefined' && typeof(navigator.timezone) !== 'undefined') {
            // running in a browser
            if (navigator.timezone.length > 0) {
                ilib.tz = navigator.timezone;
            }
        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.timezone) !== 'undefined') {
            // running in webkit on webOS
            if (PalmSystem.timezone.length > 0) {
                ilib.tz = PalmSystem.timezone;
            }
        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {
            // running under rhino
            if (typeof(environment.user.timezone) !== 'undefined' && environment.user.timezone.length > 0) {
                ilib.tz = environment.user.timezone;
            }
        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {
            // running in nodejs
            if (process.env.TZ && process.env.TZ !== "undefined") {
                ilib.tz = process.env.TZ;
            }
        }
        
        ilib.tz = ilib.tz || "local"; 
    }

    return ilib.tz;
};

/**
 * Defines the interface for the loader class for ilib. The main method of the
 * loader object is loadFiles(), which loads a set of requested locale data files
 * from where-ever it is stored.
 * @interface
 */
ilib.Loader = function() {};

/**
 * Load a set of files from where-ever it is stored.<p>
 * 
 * This is the main function define a callback function for loading missing locale 
 * data or resources.
 * If this copy of ilib is assembled without including the required locale data
 * or resources, then that data can be lazy loaded dynamically when it is 
 * needed by calling this method. Each ilib class will first
 * check for the existence of data under ilib.data, and if it is not there, 
 * it will attempt to load it by calling this method of the laoder, and then place
 * it there.<p>
 * 
 * Suggested implementations of this method might load files 
 * directly from disk under nodejs or rhino, or within web pages, to load 
 * files from the server with XHR calls.<p>
 * 
 * The first parameter to this method, paths, is an array of relative paths within 
 * the ilib dir structure for the 
 * requested data. These paths will already have the locale spec integrated 
 * into them, so no further tweaking needs to happen to load the data. Simply
 * load the named files. The second
 * parameter tells the loader whether to load the files synchronously or asynchronously.
 * If the sync parameters is false, then the onLoad function must also be specified.
 * The third parameter gives extra parameters to the loader passed from the calling
 * code. This may contain any property/value pairs.  The last parameter, callback,
 * is a callback function to call when all of the data is finishing loading. Make
 * sure to call the callback with the context of "this" so that the caller has their 
 * context back again.<p>
 * 
 * The loader function must be able to operate either synchronously or asychronously. 
 * If the loader function is called with an undefined callback function, it is
 * expected to load the data synchronously, convert it to javascript
 * objects, and return the array of json objects as the return value of the 
 * function. If the loader 
 * function is called with a callback function, it may load the data 
 * synchronously or asynchronously (doesn't matter which) as long as it calls
 * the callback function with the data converted to a javascript objects
 * when it becomes available. If a particular file could not be loaded, the 
 * loader function should put undefined into the corresponding entry in the
 * results array. 
 * Note that it is important that all the data is loaded before the callback
 * is called.<p>
 * 
 * An example implementation for nodejs might be:
 * 
 * <pre>
 * var fs = require("fs");
 * 
 * var myLoader = function() {};
 * myLoader.prototype = new ilib.Loader();
 * myLoader.prototype.constructor = myLoader;
 * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {
 *    if (sync) {
 *        var ret = [];
 *        // synchronous load -- just return the result
 *        paths.forEach(function (path) {
 *            var json = fs.readFileSync(path, "utf-8");
 *            ret.push(json ? JSON.parse(json) : undefined);
 *        });
 *        
 *        return ret;
 *    }
 *    this.callback = callback;
 *
 *    // asynchronous
 *    this.results = [];
 *    this._loadFilesAsync(paths);
 * }
 * myLoader.prototype._loadFilesAsync = function (paths) {
 *    if (paths.length > 0) {
 *        var file = paths.shift();
 *        fs.readFile(file, "utf-8", function(err, json) {
 *            this.results.push(err ? undefined : JSON.parse(json));
 *            // call self recursively so that the callback is only called at the end
 *            // when all the files are loaded sequentially
 *            if (paths.length > 0) {
 *                this._loadFilesAsync(paths);
 *            } else {
 *                this.callback(this.results);
 *            }
 *        });
 *     }
 * }
 * 
 * // bind to "this" so that "this" is relative to your own instance
 * ilib.setLoaderCallback(new myLoader());
 * </pre>

 * @param {Array.<string>} paths An array of paths to load from wherever the files are stored 
 * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously
 * @param {Object} params an object with any extra parameters for the loader. These can be 
 * anything. The caller of the ilib class passes these parameters in. Presumably, the code that
 * calls ilib and the code that provides the loader are together and can have a private 
 * agreement between them about what the parameters should contain.
 * @param {function(Object)} callback function to call when the files are all loaded. The 
 * parameter of the callback function is the contents of the files.
 */
ilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};

/**
 * Return all files available for loading using this loader instance.
 * This method returns an object where the properties are the paths to
 * directories where files are loaded from and the values are an array
 * of strings containing the relative paths under the directory of each
 * file that can be loaded.<p>
 * 
 * Example:
 *  <pre>
 *  {
 *      "/usr/share/javascript/ilib/locale": [
 *          "dateformats.json",
 *          "aa/dateformats.json",
 *            "af/dateformats.json",
 *            "agq/dateformats.json",
 *            "ak/dateformats.json",
 *            ...
 *          "zxx/dateformats.json"
 *      ]
 *  }
 *  </pre>
 * @returns {Object} a hash containing directory names and
 * paths to file that can be loaded by this loader 
 */
ilib.Loader.prototype.listAvailableFiles = function() {};

/**
 * Return true if the file in the named path is available for loading using
 * this loader. The path may be given as an absolute path, in which case
 * only that file is checked, or as a relative path, in which case, the
 * relative path may appear underneath any of the directories that the loader
 * knows about.
 * @returns {boolean} true if the file in the named path is available for loading, and
 * false otherwise
 */
ilib.Loader.prototype.isAvailable = function(path) {};

/**
 * Set the custom loader used to load ilib's locale data in your environment. 
 * The instance passed in must implement the ilib.Loader interface. See the
 * ilib.Loader class documentation for more information about loaders. 
 * 
 * @static
 * @param {ilib.Loader} loader class to call to access the requested data.
 * @return {boolean} true if the loader was installed correctly, or false
 * if not
 */
ilib.setLoaderCallback = function(loader) {
    // only a basic check
    if ((typeof(loader) === 'object' && loader instanceof ilib.Loader) || 
            typeof(loader) === 'function' || typeof(loader) === 'undefined') {
        // console.log("setting callback loader to " + (loader ? loader.name : "undefined"));
        ilib._load = loader;
        return true;
    }
    return false;
};

/*
 * locale.js - Locale specifier definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * @class
 * Create a new locale instance. Locales are specified either with a specifier string 
 * that follows the BCP-47 convention (roughly: "language-region-script-variant") or 
 * with 4 parameters that specify the language, region, variant, and script individually.<p>
 * 
 * The language is given as an ISO 639-1 two-letter, lower-case language code. You
 * can find a full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>
 * 
 * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can
 * find a full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>
 * 
 * The variant is any string that does not contain a dash which further differentiates
 * locales from each other.<p>
 * 
 * The script is given as the ISO 15924 four-letter script code. In some locales,
 * text may be validly written in more than one script. For example, Serbian is often
 * written in both Latin and Cyrillic, though not usually mixed together. You can find a
 * full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/ISO_15924#List_of_codes">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>
 * 
 * As an example in ilib, the script can be used in the date formatter. Dates formatted 
 * in Serbian could have day-of-week names or month names written in the Latin
 * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same
 * as sr-SR so the script code "Latn" can be left off of the locale spec.<p> 
 * 
 * Each part is optional, and an empty string in the specifier before or after a 
 * dash or as a parameter to the constructor denotes an unspecified value. In this
 * case, many of the ilib functions will treat the locale as generic. For example
 * the locale "en-" is equivalent to "en" and to "en--" and denotes a locale
 * of "English" with an unspecified region and variant, which typically matches
 * any region or variant.<p>
 * 
 * Without any arguments to the constructor, this function returns the locale of
 * the host Javascript engine.<p>
 * 
 * Depends directive: !depends locale.js
 * 
 * @constructor
 * @param {?string|ilib.Locale=} language the ISO 639 2-letter code for the language, or a full 
 * locale spec in BCP-47 format, or another ilib.Locale instance to copy from
 * @param {string=} region the ISO 3166 2-letter code for the region
 * @param {string=} variant the name of the variant of this locale, if any
 * @param {string=} script the ISO 15924 code of the script for this locale, if any
 */
ilib.Locale = function(language, region, variant, script) {
	if (typeof(region) === 'undefined') {
		var spec = language || ilib.getLocale();
		if (typeof(spec) === 'string') {
			var parts = spec.split('-');
	        for ( var i = 0; i < parts.length; i++ ) {
	        	if (ilib.Locale._isLanguageCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.language = parts[i];
	        	} else if (ilib.Locale._isRegionCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.region = parts[i];
	        	} else if (ilib.Locale._isScriptCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.script = parts[i];
	        	} else {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.variant = parts[i];
	        	}
	        }
	        this.language = this.language || undefined;
	        this.region = this.region || undefined;
	        this.script = this.script || undefined;
	        this.variant = this.variant || undefined;
		} else if (typeof(spec) === 'object') {
	        this.language = spec.language || undefined;
	        this.region = spec.region || undefined;
	        this.script = spec.script || undefined;
	        this.variant = spec.variant || undefined;
		}
	} else {
		if (language) {
			language = language.trim();
			this.language = language.length > 0 ? language.toLowerCase() : undefined;
		} else {
			this.language = undefined;
		}
		if (region) {
			region = region.trim();
			this.region = region.length > 0 ? region.toUpperCase() : undefined;
		} else {
			this.region = undefined;
		}
		if (variant) {
			variant = variant.trim();
			this.variant = variant.length > 0 ? variant : undefined;
		} else {
			this.variant = undefined;
		}
		if (script) {
			script = script.trim();
			this.script = script.length > 0 ? script : undefined;
		} else {
			this.script = undefined;
		}
	}
	this._genSpec();
};

// from http://en.wikipedia.org/wiki/ISO_3166-1
ilib.Locale.a2toa3regmap = {
	"AF": "AFG",
	"AX": "ALA",
	"AL": "ALB",
	"DZ": "DZA",
	"AS": "ASM",
	"AD": "AND",
	"AO": "AGO",
	"AI": "AIA",
	"AQ": "ATA",
	"AG": "ATG",
	"AR": "ARG",
	"AM": "ARM",
	"AW": "ABW",
	"AU": "AUS",
	"AT": "AUT",
	"AZ": "AZE",
	"BS": "BHS",
	"BH": "BHR",
	"BD": "BGD",
	"BB": "BRB",
	"BY": "BLR",
	"BE": "BEL",
	"BZ": "BLZ",
	"BJ": "BEN",
	"BM": "BMU",
	"BT": "BTN",
	"BO": "BOL",
	"BQ": "BES",
	"BA": "BIH",
	"BW": "BWA",
	"BV": "BVT",
	"BR": "BRA",
	"IO": "IOT",
	"BN": "BRN",
	"BG": "BGR",
	"BF": "BFA",
	"BI": "BDI",
	"KH": "KHM",
	"CM": "CMR",
	"CA": "CAN",
	"CV": "CPV",
	"KY": "CYM",
	"CF": "CAF",
	"TD": "TCD",
	"CL": "CHL",
	"CN": "CHN",
	"CX": "CXR",
	"CC": "CCK",
	"CO": "COL",
	"KM": "COM",
	"CG": "COG",
	"CD": "COD",
	"CK": "COK",
	"CR": "CRI",
	"CI": "CIV",
	"HR": "HRV",
	"CU": "CUB",
	"CW": "CUW",
	"CY": "CYP",
	"CZ": "CZE",
	"DK": "DNK",
	"DJ": "DJI",
	"DM": "DMA",
	"DO": "DOM",
	"EC": "ECU",
	"EG": "EGY",
	"SV": "SLV",
	"GQ": "GNQ",
	"ER": "ERI",
	"EE": "EST",
	"ET": "ETH",
	"FK": "FLK",
	"FO": "FRO",
	"FJ": "FJI",
	"FI": "FIN",
	"FR": "FRA",
	"GF": "GUF",
	"PF": "PYF",
	"TF": "ATF",
	"GA": "GAB",
	"GM": "GMB",
	"GE": "GEO",
	"DE": "DEU",
	"GH": "GHA",
	"GI": "GIB",
	"GR": "GRC",
	"GL": "GRL",
	"GD": "GRD",
	"GP": "GLP",
	"GU": "GUM",
	"GT": "GTM",
	"GG": "GGY",
	"GN": "GIN",
	"GW": "GNB",
	"GY": "GUY",
	"HT": "HTI",
	"HM": "HMD",
	"VA": "VAT",
	"HN": "HND",
	"HK": "HKG",
	"HU": "HUN",
	"IS": "ISL",
	"IN": "IND",
	"ID": "IDN",
	"IR": "IRN",
	"IQ": "IRQ",
	"IE": "IRL",
	"IM": "IMN",
	"IL": "ISR",
	"IT": "ITA",
	"JM": "JAM",
	"JP": "JPN",
	"JE": "JEY",
	"JO": "JOR",
	"KZ": "KAZ",
	"KE": "KEN",
	"KI": "KIR",
	"KP": "PRK",
	"KR": "KOR",
	"KW": "KWT",
	"KG": "KGZ",
	"LA": "LAO",
	"LV": "LVA",
	"LB": "LBN",
	"LS": "LSO",
	"LR": "LBR",
	"LY": "LBY",
	"LI": "LIE",
	"LT": "LTU",
	"LU": "LUX",
	"MO": "MAC",
	"MK": "MKD",
	"MG": "MDG",
	"MW": "MWI",
	"MY": "MYS",
	"MV": "MDV",
	"ML": "MLI",
	"MT": "MLT",
	"MH": "MHL",
	"MQ": "MTQ",
	"MR": "MRT",
	"MU": "MUS",
	"YT": "MYT",
	"MX": "MEX",
	"FM": "FSM",
	"MD": "MDA",
	"MC": "MCO",
	"MN": "MNG",
	"ME": "MNE",
	"MS": "MSR",
	"MA": "MAR",
	"MZ": "MOZ",
	"MM": "MMR",
	"NA": "NAM",
	"NR": "NRU",
	"NP": "NPL",
	"NL": "NLD",
	"NC": "NCL",
	"NZ": "NZL",
	"NI": "NIC",
	"NE": "NER",
	"NG": "NGA",
	"NU": "NIU",
	"NF": "NFK",
	"MP": "MNP",
	"NO": "NOR",
	"OM": "OMN",
	"PK": "PAK",
	"PW": "PLW",
	"PS": "PSE",
	"PA": "PAN",
	"PG": "PNG",
	"PY": "PRY",
	"PE": "PER",
	"PH": "PHL",
	"PN": "PCN",
	"PL": "POL",
	"PT": "PRT",
	"PR": "PRI",
	"QA": "QAT",
	"RE": "REU",
	"RO": "ROU",
	"RU": "RUS",
	"RW": "RWA",
	"BL": "BLM",
	"SH": "SHN",
	"KN": "KNA",
	"LC": "LCA",
	"MF": "MAF",
	"PM": "SPM",
	"VC": "VCT",
	"WS": "WSM",
	"SM": "SMR",
	"ST": "STP",
	"SA": "SAU",
	"SN": "SEN",
	"RS": "SRB",
	"SC": "SYC",
	"SL": "SLE",
	"SG": "SGP",
	"SX": "SXM",
	"SK": "SVK",
	"SI": "SVN",
	"SB": "SLB",
	"SO": "SOM",
	"ZA": "ZAF",
	"GS": "SGS",
	"SS": "SSD",
	"ES": "ESP",
	"LK": "LKA",
	"SD": "SDN",
	"SR": "SUR",
	"SJ": "SJM",
	"SZ": "SWZ",
	"SE": "SWE",
	"CH": "CHE",
	"SY": "SYR",
	"TW": "TWN",
	"TJ": "TJK",
	"TZ": "TZA",
	"TH": "THA",
	"TL": "TLS",
	"TG": "TGO",
	"TK": "TKL",
	"TO": "TON",
	"TT": "TTO",
	"TN": "TUN",
	"TR": "TUR",
	"TM": "TKM",
	"TC": "TCA",
	"TV": "TUV",
	"UG": "UGA",
	"UA": "UKR",
	"AE": "ARE",
	"GB": "GBR",
	"US": "USA",
	"UM": "UMI",
	"UY": "URY",
	"UZ": "UZB",
	"VU": "VUT",
	"VE": "VEN",
	"VN": "VNM",
	"VG": "VGB",
	"VI": "VIR",
	"WF": "WLF",
	"EH": "ESH",
	"YE": "YEM",
	"ZM": "ZMB",
	"ZW": "ZWE"
};


ilib.Locale.a1toa3langmap = {
	"ab": "abk",
	"aa": "aar",
	"af": "afr",
	"ak": "aka",
	"sq": "sqi",
	"am": "amh",
	"ar": "ara",
	"an": "arg",
	"hy": "hye",
	"as": "asm",
	"av": "ava",
	"ae": "ave",
	"ay": "aym",
	"az": "aze",
	"bm": "bam",
	"ba": "bak",
	"eu": "eus",
	"be": "bel",
	"bn": "ben",
	"bh": "bih",
	"bi": "bis",
	"bs": "bos",
	"br": "bre",
	"bg": "bul",
	"my": "mya",
	"ca": "cat",
	"ch": "cha",
	"ce": "che",
	"ny": "nya",
	"zh": "zho",
	"cv": "chv",
	"kw": "cor",
	"co": "cos",
	"cr": "cre",
	"hr": "hrv",
	"cs": "ces",
	"da": "dan",
	"dv": "div",
	"nl": "nld",
	"dz": "dzo",
	"en": "eng",
	"eo": "epo",
	"et": "est",
	"ee": "ewe",
	"fo": "fao",
	"fj": "fij",
	"fi": "fin",
	"fr": "fra",
	"ff": "ful",
	"gl": "glg",
	"ka": "kat",
	"de": "deu",
	"el": "ell",
	"gn": "grn",
	"gu": "guj",
	"ht": "hat",
	"ha": "hau",
	"he": "heb",
	"hz": "her",
	"hi": "hin",
	"ho": "hmo",
	"hu": "hun",
	"ia": "ina",
	"id": "ind",
	"ie": "ile",
	"ga": "gle",
	"ig": "ibo",
	"ik": "ipk",
	"io": "ido",
	"is": "isl",
	"it": "ita",
	"iu": "iku",
	"ja": "jpn",
	"jv": "jav",
	"kl": "kal",
	"kn": "kan",
	"kr": "kau",
	"ks": "kas",
	"kk": "kaz",
	"km": "khm",
	"ki": "kik",
	"rw": "kin",
	"ky": "kir",
	"kv": "kom",
	"kg": "kon",
	"ko": "kor",
	"ku": "kur",
	"kj": "kua",
	"la": "lat",
	"lb": "ltz",
	"lg": "lug",
	"li": "lim",
	"ln": "lin",
	"lo": "lao",
	"lt": "lit",
	"lu": "lub",
	"lv": "lav",
	"gv": "glv",
	"mk": "mkd",
	"mg": "mlg",
	"ms": "msa",
	"ml": "mal",
	"mt": "mlt",
	"mi": "mri",
	"mr": "mar",
	"mh": "mah",
	"mn": "mon",
	"na": "nau",
	"nv": "nav",
	"nb": "nob",
	"nd": "nde",
	"ne": "nep",
	"ng": "ndo",
	"nn": "nno",
	"no": "nor",
	"ii": "iii",
	"nr": "nbl",
	"oc": "oci",
	"oj": "oji",
	"cu": "chu",
	"om": "orm",
	"or": "ori",
	"os": "oss",
	"pa": "pan",
	"pi": "pli",
	"fa": "fas",
	"pl": "pol",
	"ps": "pus",
	"pt": "por",
	"qu": "que",
	"rm": "roh",
	"rn": "run",
	"ro": "ron",
	"ru": "rus",
	"sa": "san",
	"sc": "srd",
	"sd": "snd",
	"se": "sme",
	"sm": "smo",
	"sg": "sag",
	"sr": "srp",
	"gd": "gla",
	"sn": "sna",
	"si": "sin",
	"sk": "slk",
	"sl": "slv",
	"so": "som",
	"st": "sot",
	"az": "azb",
	"es": "spa",
	"su": "sun",
	"sw": "swa",
	"ss": "ssw",
	"sv": "swe",
	"ta": "tam",
	"te": "tel",
	"tg": "tgk",
	"th": "tha",
	"ti": "tir",
	"bo": "bod",
	"tk": "tuk",
	"tl": "tgl",
	"tn": "tsn",
	"to": "ton",
	"tr": "tur",
	"ts": "tso",
	"tt": "tat",
	"tw": "twi",
	"ty": "tah",
	"ug": "uig",
	"uk": "ukr",
	"ur": "urd",
	"uz": "uzb",
	"ve": "ven",
	"vi": "vie",
	"vo": "vol",
	"wa": "wln",
	"cy": "cym",
	"wo": "wol",
	"fy": "fry",
	"xh": "xho",
	"yi": "yid",
	"yo": "yor",
	"za": "zha",
	"zu": "zul"
};

/**
 * Tell whether or not the str does not start with a lower case ASCII char.
 * @private
 * @param {string} str the char to check
 * @return {boolean} true if the char is not a lower case ASCII char
 */
ilib.Locale._notLower = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 97 || ch > 122;
};

/**
 * Tell whether or not the str does not start with an upper case ASCII char.
 * @private
 * @param {string} str the char to check
 * @return {boolean} true if the char is a not an upper case ASCII char
 */
ilib.Locale._notUpper = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 65 || ch > 90;
};

/**
 * Tell whether or not the str does not start with a digit char.
 * @private
 * @param {string} str the char to check
 * @return {boolean} true if the char is a not an upper case ASCII char
 */
ilib.Locale._notDigit = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 48 || ch > 57;
};

/**
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 639 language code.
 * 
 * @private
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isLanguageCode = function(str) {
	if (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {
		return false;
	}

	for (var i = 0; i < str.length; i++) {
		if (ilib.Locale._notLower(str.charAt(i))) {
			return false;
		}
	}
	
	return true;
};

/**
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 3166 2-letter region code or M.49 3-digit region code.
 * 
 * @private
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isRegionCode = function (str) {
	if (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {
		return false;
	}
	
	if (str.length === 2) {
		for (var i = 0; i < str.length; i++) {
			if (ilib.Locale._notUpper(str.charAt(i))) {
				return false;
			}
		}
	} else {
		for (var i = 0; i < str.length; i++) {
			if (ilib.Locale._notDigit(str.charAt(i))) {
				return false;
			}
		}
	}
	
	return true;
};

/**
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 639 language code.
 * 
 * @private
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isScriptCode = function(str)
{
	if (typeof(str) === 'undefined' || str.length !== 4 || ilib.Locale._notUpper(str.charAt(0))) {
		return false;
	}
	
	for (var i = 1; i < 4; i++) {
		if (ilib.Locale._notLower(str.charAt(i))) {
			return false;
		}
	}
	
	return true;
};

/**
 * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2
 * region code. If the given alpha2 code is not found, this function returns its
 * argument unchanged.
 * @static
 * @param {string|undefined} alpha2 the alpha2 code to map
 * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2
 * parameter if the alpha2 value is not found
 */
ilib.Locale.regionAlpha2ToAlpha3 = function(alpha2) {
	return ilib.Locale.a2toa3regmap[alpha2] || alpha2;
};

/**
 * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1
 * language code. If the given alpha1 code is not found, this function returns its
 * argument unchanged.
 * @static
 * @param {string|undefined} alpha1 the alpha1 code to map
 * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1
 * parameter if the alpha1 value is not found
 */
ilib.Locale.languageAlpha1ToAlpha3 = function(alpha1) {
	return ilib.Locale.a1toa3langmap[alpha1] || alpha1;
};

ilib.Locale.prototype = {
	/**
	 * @private
	 */
	_genSpec: function () {
		this.spec = this.language || "";
		
		if (this.script) {
			if (this.spec.length > 0) {
				this.spec += "-";
			}
			this.spec += this.script;
		}
		
		if (this.region) {
			if (this.spec.length > 0) {
				this.spec += "-";
			}
			this.spec += this.region;
		}
		
		if (this.variant) {
			if (this.spec.length > 0) {
				this.spec += "-";
			}
			this.spec += this.variant;
		}
	},

	/**
	 * Return the ISO 639 language code for this locale. 
	 * @return {string|undefined} the language code for this locale 
	 */
	getLanguage: function() {
		return this.language;
	},
	
	/**
	 * Return the language of this locale as an ISO-639-alpha3 language code
	 * @return {string|undefined} the alpha3 language code of this locale
	 */
	getLanguageAlpha3: function() {
		return ilib.Locale.languageAlpha1ToAlpha3(this.language);
	},
	
	/**
	 * Return the ISO 3166 region code for this locale.
	 * @return {string|undefined} the region code of this locale
	 */
	getRegion: function() {
		return this.region;
	},
	
	/**
	 * Return the region of this locale as an ISO-3166-alpha3 region code
	 * @return {string|undefined} the alpha3 region code of this locale
	 */
	getRegionAlpha3: function() {
		return ilib.Locale.regionAlpha2ToAlpha3(this.region);
	},
	
	/**
	 * Return the ISO 15924 script code for this locale
	 * @return {string|undefined} the script code of this locale
	 */
	getScript: function () {
		return this.script;
	},
	
	/**
	 * Return the variant code for this locale
	 * @return {string|undefined} the variant code of this locale, if any
	 */
	getVariant: function() {
		return this.variant;
	},
	
	/**
	 * Return the whole locale specifier as a string.
	 * @return {string} the locale specifier
	 */
	getSpec: function() {
		return this.spec;
	},
	
	/**
	 * Express this locale object as a string. Currently, this simply calls the getSpec
	 * function to represent the locale as its specifier.
	 * 
	 * @return {string} the locale specifier
	 */
	toString: function() {
		return this.getSpec();
	},
	
	/**
	 * Return true if the the other locale is exactly equal to the current one.
	 * @return {boolean} whether or not the other locale is equal to the current one 
	 */
	equals: function(other) {
		return this.language === other.language &&
			this.region === other.region &&
			this.script === other.script &&
			this.variant === other.variant;
	},

	/**
	 * Return true if the current locale is the special pseudo locale.
	 * @return {boolean} true if the current locale is the special pseudo locale
	 */
	isPseudo: function () {
		var localeName = this.language + "-" + this.region;
		return ilib.pseudoLocales.indexOf(localeName) > -1;
	}
};

// static functions
/**
 * @private
 */
ilib.Locale.locales = [
	
];

/**
 * Return the list of available locales that this iLib file was assembled
 * with. The list that this file was assembled with may be much smaller
 * than the list of all available locales in the iLib repository. The
 * assembly tool will automatically fill in the list.
 * 
 * @return {Array.<string>} this is an array of locale specs for which 
 * this iLib file has locale data for
 */
ilib.Locale.getAvailableLocales = function () {
	return ilib.Locale.locales;
};

/*
 * localeinfo.js - Encode locale-specific defaults
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data localeinfo

/**
 * @class
 * Create a new locale info instance. Locale info instances give information about
 * the default settings for a particular locale. These settings may be overridden
 * by various parts of the code, and should be used as a fall-back setting of last
 * resort. <p>
 * 
 * The optional options object holds extra parameters if they are necessary. The
 * current list of supported options are:
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the locale info object is fully 
 * loaded. When the onLoad option is given, the localeinfo object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * If this copy of ilib is pre-assembled and all the data is already available, 
 * or if the data was already previously loaded, then this constructor will call
 * the onLoad callback immediately when the initialization is done. 
 * If the onLoad option is not given, this class will only attempt to load any
 * missing locale data synchronously.
 * 
 * Depends directive: !depends localeinfo.js
 * 
 * @constructor
 * @see {ilib.setLoaderCallback} for information about registering a loader callback
 * function
 * @param {ilib.Locale|string=} locale the locale for which the info is sought, or undefined for
 * @param {Object=} options the locale for which the info is sought, or undefined for
 * the current locale
 */
ilib.LocaleInfo = function(locale, options) {
	var sync = true,
	    loadParams = undefined;
	
	/* these are all the defaults. Essentially, en-US */
	/**
	  @private 
	  @type {{
		scripts:Array.<string>,
		timezone:string,
		units:string,
		calendar:string,
		clock:string,
		currency:string,
		firstDayOfWeek:number,
		unitfmt: {long:string,short:string},
		numfmt:Object.<{
			currencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,
			script:string,
			decimalChar:string,
			groupChar:string,
			prigroupSize:number,
			secgroupSize:number,
			negativenumFmt:string,
			pctFmt:string,
			negativepctFmt:string,
			pctChar:string,
			roundingMode:string,
			exponential:string,
			digits:string
		}>
	  }}
	*/
	this.info = ilib.LocaleInfo.defaultInfo;
	
	switch (typeof(locale)) {
		case "string":
			this.locale = new ilib.Locale(locale);
			break;
		default:
		case "undefined":
			this.locale = new ilib.Locale();
			break;
		case "object":
			this.locale = locale;
			break;
	}
	
	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.LocaleInfo.cache) {
		ilib.LocaleInfo.cache = {};
	}

	ilib.loadData({
		object: ilib.LocaleInfo, 
		locale: this.locale, 
		name: "localeinfo.json", 
		sync: sync, 
		loadParams: loadParams, 
		callback: ilib.bind(this, function (info) {
			if (!info) {
				info = ilib.LocaleInfo.defaultInfo;
				var spec = this.locale.getSpec().replace(/-/g, "_");
				ilib.LocaleInfo.cache[spec] = info;
			}
			this.info = info;
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

ilib.LocaleInfo.defaultInfo = /** @type {{
	scripts:Array.<string>,
	timezone:string,
	units:string,
	calendar:string,
	clock:string,
	currency:string,
	firstDayOfWeek:number,
	unitfmt: {long:string,short:string},
	numfmt:Object.<{
		currencyFormats:Object.<{
			common:string,
			commonNegative:string,
			iso:string,
			isoNegative:string
		}>,
		script:string,
		decimalChar:string,
		groupChar:string,
		prigroupSize:number,
		secgroupSize:number,
		negativenumFmt:string,
		pctFmt:string,
		negativepctFmt:string,
		pctChar:string,
		roundingMode:string,
		exponential:string,
		digits:string
	}>
}}*/ ilib.data.localeinfo;
ilib.LocaleInfo.defaultInfo = ilib.LocaleInfo.defaultInfo || {
	"scripts": ["Latn"],
    "timezone": "Etc/UTC",
    "units": "metric",
    "calendar": "gregorian",
    "clock": "24",
    "currency": "USD",
    "firstDayOfWeek": 1,
    "numfmt": {
        "currencyFormats": {
            "common": "{s}{n}",
            "commonNegative": "{s}-{n}",
            "iso": "{s}{n}",
            "isoNegative": "{s}-{n}"
        },
        "script": "Latn",
        "decimalChar": ",",
        "groupChar": ".",
        "prigroupSize": 3,
        "secgroupSize": 0,
        "pctFmt": "{n}%",
        "negativepctFmt": "-{n}%",
        "pctChar": "%",
        "roundingMode": "halfdown",
        "exponential": "e",
        "digits": ""
    }
};

ilib.LocaleInfo.prototype = {
    /**
     * Return the name of the locale's language in English.
     * @returns {string} the name of the locale's language in English
     */
    getLanguageName: function () {
    	return this.info["language.name"];	
    },
    
    /**
     * Return the name of the locale's region in English. If the locale
     * has no region, this returns undefined.
     * 
     * @returns {string|undefined} the name of the locale's region in English
     */
    getRegionName: function () {
    	return this.info["region.name"];	
    },

    /**
	 * Return whether this locale commonly uses the 12- or the 24-hour clock.
	 *  
	 * @returns {string} "12" if the locale commonly uses a 12-hour clock, or "24"
	 * if the locale commonly uses a 24-hour clock. 
	 */
	getClock: function() {
		return this.info.clock;
	},

	/**
	 * Return the locale that this info object was created with.
	 * @returns {ilib.Locale} The locale spec of the locale used to construct this info instance
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the name of the measuring system that is commonly used in the given locale.
	 * Valid values are "uscustomary", "imperial", and "metric".
	 * 
	 * @returns {string} The name of the measuring system commonly used in the locale
	 */
	getUnits: function () {
		return this.info.units;
	},
        
        getUnitFormat: function () {
                return this.info.unitfmt;
        },
	
	/**
	 * Return the name of the calendar that is commonly used in the given locale.
	 * 
	 * @returns {string} The name of the calendar commonly used in the locale
	 */
	getCalendar: function () {
		return this.info.calendar;
	},
	
	/**
	 * Return the day of week that starts weeks in the current locale. Days are still
	 * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars 
	 * should be displayed and weeks calculated with the day of week returned from this 
	 * function as the first day of the week.
	 * 
	 * @returns {number} the day of the week that starts weeks in the current locale.
	 */
	getFirstDayOfWeek: function () {
		return this.info.firstDayOfWeek;
	},
	
	/**
	 * Return the default time zone for this locale. Many locales span across multiple
	 * time zones. In this case, the time zone with the largest population is chosen
	 * to represent the locale. This is obviously not that accurate, but then again,
	 * this method's return value should only be used as a default anyways.
	 * @returns {string} the default time zone for this locale.
	 */
	getTimeZone: function () {
		return this.info.timezone;
	},
	
	/**
	 * Return the decimal separator for formatted numbers in this locale.
	 * @returns {string} the decimal separator char
	 */
	getDecimalSeparator: function () {
		return this.info.numfmt.decimalChar;
	},
	
	/**
	 * Return the decimal separator for formatted numbers in this locale for native script.
	 * @returns {string} the decimal separator char
	 */
	getNativeDecimalSeparator: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.decimalChar) || this.info.numfmt.decimalChar;
	},
	
	/**
	 * Return the separator character used to separate groups of digits on the 
	 * integer side of the decimal character.
	 * @returns {string} the grouping separator char
	 */
	getGroupingSeparator: function () {
		return this.info.numfmt.groupChar;
	},

	/**
	 * Return the separator character used to separate groups of digits on the 
	 * integer side of the decimal character for the native script if present other than the default script.
	 * @returns {string} the grouping separator char
	 */
	getNativeGroupingSeparator: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.groupChar) || this.info.numfmt.groupChar;
	},
	
	/**
	 * Return the minimum number of digits grouped together on the integer side 
	 * for the first (primary) group. 
	 * In western European cultures, groupings are in 1000s, so the number of digits
	 * is 3. 
	 * @returns {number} the number of digits in a primary grouping, or 0 for no grouping
	 */
	getPrimaryGroupingDigits: function () {
		return (typeof(this.info.numfmt.prigroupSize) !== 'undefined' && this.info.numfmt.prigroupSize) || 0;
	},

	/**
	 * Return the minimum number of digits grouped together on the integer side
	 * for the second or more (secondary) group.<p>
	 *   
	 * In western European cultures, all groupings are by 1000s, so the secondary
	 * size should be 0 because there is no secondary size. In general, if this 
	 * method returns 0, then all groupings are of the primary size.<p> 
	 * 
	 * For some other cultures, the first grouping (primary)
	 * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be
	 * written as: "1,00,000".
	 * 
	 * @returns {number} the number of digits in a secondary grouping, or 0 for no 
	 * secondary grouping. 
	 */
	getSecondaryGroupingDigits: function () {
		return this.info.numfmt.secgroupSize || 0;
	},

	/**
	 * Return the format template used to format percentages in this locale.
	 * @returns {string} the format template for formatting percentages
	 */
	getPercentageFormat: function () {
		return this.info.numfmt.pctFmt;
	},

	/**
	 * Return the format template used to format percentages in this locale
	 * with negative amounts.
	 * @returns {string} the format template for formatting percentages
	 */
	getNegativePercentageFormat: function () {
		return this.info.numfmt.negativepctFmt;
	},

	/**
	 * Return the symbol used for percentages in this locale.
	 * @returns {string} the symbol used for percentages in this locale
	 */
	getPercentageSymbol: function () {
		return this.info.numfmt.pctChar || "%";
	},

	/**
	 * Return the symbol used for exponential in this locale.
	 * @returns {string} the symbol used for exponential in this locale
	 */
	getExponential: function () {
		return this.info.numfmt.exponential;
	},

	/**
	 * Return the symbol used for exponential in this locale for native script.
	 * @returns {string} the symbol used for exponential in this locale for native script
	 */
	getNativeExponential: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.exponential) || this.info.numfmt.exponential;
	},

	/**
	 * Return the symbol used for percentages in this locale for native script.
	 * @returns {string} the symbol used for percentages in this locale for native script
	 */
	getNativePercentageSymbol: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.pctChar) || this.info.numfmt.pctChar || "%";
	
	},
	/**
	 * Return the format template used to format negative numbers in this locale.
	 * @returns {string} the format template for formatting negative numbers
	 */
	getNegativeNumberFormat: function () { 
		return this.info.numfmt.negativenumFmt;
	},
	
	/**
	 * Return an object containing the format templates for formatting currencies
	 * in this locale. The object has a number of properties in it that each are
	 * a particular style of format. Normally, this contains a "common" and an "iso"
	 * style, but may contain others in the future.
	 * @returns {Object} an object containing the format templates for currencies
	 */
	getCurrencyFormats: function () {
		return this.info.numfmt.currencyFormats;
	},
	
	/**
	 * Return the currency that is legal in the locale, or which is most commonly 
	 * used in regular commerce.
	 * @returns {string} the ISO 4217 code for the currency of this locale
	 */
	getCurrency: function () {
		return this.info.currency;
	},
	
	/**
	 * Return a string that describes the style of digits used by this locale.
	 * Possible return values are:
	 * <ul>
	 * <li><i>western</i> - uses the regular western 10-based digits 0 through 9
	 * <li><i>optional</i> - native 10-based digits exist, but in modern usage,
	 * this locale most often uses western digits
	 * <li><i>native</i> - native 10-based native digits exist and are used
	 * regularly by this locale
	 * <li><i>custom</i> - uses native digits by default that are not 10-based
	 * </ul>
	 * @returns {string} string that describes the style of digits used in this locale
	 */
	getDigitsStyle: function () {
		if (this.info.numfmt.useNative) {
			return "native";
		}
		if (typeof(this.info.native_numfmt) !== 'undefined') {
			return "optional";
		}
		return "western";
	},
	
	/**
	 * Return the digits of the default script if they are defined.
	 * If not defined, the default should be the regular "Arabic numerals"
	 * used in the Latin script. (0-9)
	 * @returns {string|undefined} the digits used in the default script 
	 */
	getDigits: function () {
		return this.info.numfmt.digits;
	},
	
	/**
	 * Return the digits of the native script if they are defined. 
	 * @returns {string|undefined} the digits used in the default script 
	 */
	getNativeDigits: function () {
		return (this.info.numfmt.useNative && this.info.numfmt.digits) || (this.info.native_numfmt && this.info.native_numfmt.digits);
	},
	
	/**
	 * If this locale typically uses a different type of rounding for numeric
	 * formatting other than halfdown, especially for currency, then it can be 
	 * specified in the localeinfo. If the locale uses the default, then this 
	 * method returns undefined. The locale's rounding method overrides the 
	 * rounding method for the currency itself, which can sometimes shared 
	 * between various locales so it is less specific.
	 * @returns {string} the name of the rounding mode typically used in this
	 * locale, or "halfdown" if the locale does not override the default
	 */
	getRoundingMode: function () {
		return this.info.numfmt.roundingMode;
	},
	
	/**
	 * Return the default script used to write text in the language of this 
	 * locale. Text for most languages is written in only one script, but there
	 * are some languages where the text can be written in a number of scripts,
	 * depending on a variety of things such as the region, ethnicity, religion, 
	 * etc. of the author. This method returns the default script for the
	 * locale, in which the language is most commonly written.<p> 
	 * 
	 * The script is returned as an ISO 15924 4-letter code.
	 * 
	 * @returns {string} the ISO 15924 code for the default script used to write
	 * text in this locale 
	 */
	getDefaultScript: function() {
		return (this.info.scripts) ? this.info.scripts[0] : "Latn";
	},
	
	/**
	 * Return the script used for the current locale. If the current locale
	 * explicitly defines a script, then this script is returned. If not, then 
	 * the default script for the locale is returned.
	 * 
	 * @see ilib.LocaleInfo.getDefaultScript
	 * @returns {string} the ISO 15924 code for the script used to write
	 * text in this locale
	 */
	getScript: function() {
		return this.locale.getScript() || this.getDefaultScript(); 
	},
	
	/**
	 * Return an array of script codes which are used to write text in the current
	 * language. Text for most languages is written in only one script, but there
	 * are some languages where the text can be written in a number of scripts,
	 * depending on a variety of things such as the region, ethnicity, religion, 
	 * etc. of the author. This method returns an array of script codes in which 
	 * the language is commonly written.
	 * 
	 * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used 
	 * to write text in this language
	 */
	getAllScripts: function() {
		return this.info.scripts || ["Latn"];
	}
};

/*
 * date.js - Represent a date in any calendar. This class is subclassed for each calendar.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends ilibglobal.js localeinfo.js */

/**
 * @class
 * Construct a new date object. Each parameter is a numeric value, but its 
 * accepted range can vary depending on the subclass of this date. For example,
 * Gregorian months can be from 1 to 12, whereas months in the Hebrew calendar
 * can be from 1 to 13.<p>
 * 
 * Note that this really calls the newInstance factory method underneath in 
 * order to instantiate the correct subclass of ilib.Date.
 * 
 * Depends directive: !depends date.js
 * 
 * @constructor
 * @param {Object=} options The date components to initialize this date with
 */
ilib.Date = function(options) {
	if (!options || typeof(options.noinstance) === 'undefined') {
		return ilib.Date.newInstance(options);
	}
};

/**
 * Factory method to create a new instance of a date subclass.<p>
 * 
 * The options parameter can be an object that contains the following
 * properties:
 * 
 * <ul>
 * <li><i>type</i> - specify the type/calendar of the date desired. The
 * list of valid values changes depending on which calendars are 
 * defined. When assembling your iliball.js, include those date type 
 * you wish to use in your program or web page, and they will register 
 * themselves with this factory method. The "gregorian",
 * and "julian" calendars are all included by default, as they are the
 * standard calendars for much of the world. If not specified, the type
 * of the date returned is the one that is appropriate for the locale.
 * This property may also be given as "calendar" instead of "type".
 * </ul>
 * 
 * The options object is also passed down to the date constructor, and 
 * thus can contain the the properties as the date object being instantiated.
 * See the documentation for {@link ilib.Date.GregDate}, and other
 * subclasses for more details on other parameter that may be passed in.<p>
 * 
 * Please note that if you do not give the type parameter, this factory
 * method will create a date object that is appropriate for the calendar
 * that is most commonly used in the specified or current ilib locale. 
 * For example, in Thailand, the most common calendar is the Thai solar 
 * calendar. If the current locale is "th-TH" (Thai for Thailand) and you 
 * use this factory method to construct a new date without specifying the
 * type, it will automatically give you back an instance of 
 * {@link ilib.Date.ThaiSolarDate}. This is convenient because you do not 
 * need to know which locales use which types of dates. In fact, you 
 * should always use this factory method to make new date instances unless
 * you know that you specifically need a date in a particular calendar.<p>
 * 
 * Also note that when you pass in the date components such as year, month,
 * day, etc., these components should be appropriate for the given date
 * being instantiated. That is, in our Thai example in the previous
 * paragraph, the year and such should be given as a Thai solar year, not
 * the Gregorian year that you get from the Javascript Date class. In
 * order to initialize a date instance when you don't know what subclass
 * will be instantiated for the locale, use a parameter such as "unixtime" 
 * or "julianday" which are unambiguous and based on UTC time, instead of
 * the year/month/date date components. The date components for that UTC 
 * time will be calculated and the time zone offset will be automatically 
 * factored in.
 *  
 * @param {Object=} options options controlling the construction of this instance, or
 * undefined to use the default options
 * @return {ilib.Date} an instance of a calendar object of the appropriate type 
 */
ilib.Date.newInstance = function(options) {
	var locale = options && options.locale,
		type = options && (options.type || options.calendar),
		cons;

	if (!locale) {
		locale = new ilib.Locale();	// default locale
	}
	
	if (!type) {
		var info = new ilib.LocaleInfo(locale);
		type = info.getCalendar();
	}

	cons = ilib.Date._constructors[type];
	
	// pass the same options through to the constructor so the subclass
	// has the ability to do something with if it needs to
	return cons && new cons(options);
};

/**
 * Convert JavaScript Date objects and other types into native ilib Dates. This accepts any
 * string or number that can be translated by the JavaScript Date class,
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)
 * any JavaScript Date classed object, any ilib.Date subclass, an ilib.JulianDay object, an object
 * containing the normal options to initialize an ilib.Date instance, or null (will 
 * return null or undefined if input is null or undefined). Normal output is 
 * a standard native subclass of the ilib Date object as appropriate for the locale.
 * 
 * @static
 * @private
 * @param  {ilib.Date|Object|ilib.JulianDay|Date|string|number=} inDate The input date object, string or Number.
 * @param  {ilib.String|string=} timezone timezone to use if a new date object is created
 * @return {ilib.Date|null|undefined} an ilib.Date subclass equivalent to the given inDate
 */
ilib.Date._dateToIlib = function(inDate, timezone) {
	if (typeof(inDate) === 'undefined' || inDate === null) {
		return inDate;
	}
	if (inDate instanceof ilib.Date) {
		return inDate;
	}
	if (inDate instanceof Date) {
		return ilib.Date.newInstance({
			unixtime: inDate.getTime(),
			timezone: timezone
		});
	}
	if (inDate instanceof ilib.JulianDay) {
		return ilib.Date.newInstance({
			jd: inDate,
			timezone: timezone
		});
	}
	if (typeof(inDate) === 'number') {
		return ilib.Date.newInstance({
			unixtime: inDate,
			timezone: timezone
		});
	}
	if (typeof(inDate) === 'object') {
		return ilib.Date.newInstance(inDate);
	}
	if (typeof(inDate) === 'string') {
		inDate = new Date(inDate);
	}
	return ilib.Date.newInstance({
		unixtime: inDate.getTime(),
		timezone: timezone
	});
};

/* place for the subclasses to put their constructors so that the factory method
 * can find them. Do this to add your date after it's defined: 
 * ilib.Date._constructors["mytype"] = ilib.Date.MyTypeConstructor;
 */
ilib.Date._constructors = {};

ilib.Date.prototype = {
	getType: function() {
		return "ilib.Date";
	},
	
	/**
	 * Return the unix time equivalent to this date instance. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This 
	 * method only returns a valid number for dates between midnight, 
	 * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when 
	 * the unix time runs out. If this instance encodes a date outside of that range, 
	 * this method will return -1. For date types that are not Gregorian, the point 
	 * in time represented by this date object will only give a return value if it
	 * is in the correct range in the Gregorian calendar as given previously.
	 * 
	 * @return {number} a number giving the unix time, or -1 if the date is outside the
	 * valid unix time range
	 */
	getTime: function() {
		return this.rd.getTime(); 
	},
	
	/**
	 * Return the extended unix time equivalent to this Gregorian date instance. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time
	 * (or the type "time_t" in C/C++) is only encoded with an unsigned 32 bit integer, and thus 
	 * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above 
	 * 32 bits and the Date object allows you to encode up to 100 million days worth of time 
	 * after Jan 1, 1970, and even more interestingly, 100 million days worth of time before
	 * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended 
	 * range. If this instance encodes a date outside of that range, this method will return
	 * NaN.
	 * 
	 * @return {number} a number giving the extended unix time, or Nan if the date is outside 
	 * the valid extended unix time range
	 */
	getTimeExtended: function() {
		return this.rd.getTimeExtended();
	},

	/**
	 * Set the time of this instance according to the given unix time. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * @param {number} millis the unix time to set this date to in milliseconds 
	 */
	setTime: function(millis) {
		this.rd = this.newRd({
			unixtime: millis,
			cal: this.cal
		});
		this._calcDateComponents();
	},
	
	getDays: function() {
		return this.day;
	},
	getMonths: function() {
		return this.month;
	},
	getYears: function() {
		return this.year;
	},
	getHours: function() {
		return this.hour;
	},
	getMinutes: function() {
		return this.minute;
	},
	getSeconds: function() {
		return this.second;
	},
	getMilliseconds: function() {
		return this.millisecond;
	},

	setDays: function(day) {
		this.day = parseInt(day, 10) || 1;
		this.rd._setDateComponents(this);
	},
	setMonths: function(month) {
		this.month = parseInt(month, 10) || 1;
		this.rd._setDateComponents(this);
	},
	setYears: function(year) {
		this.year = parseInt(year, 10) || 0;
		this.rd._setDateComponents(this);
	},
	
	setHours: function(hour) {
		this.hour = parseInt(hour, 10) || 0;
		this.rd._setDateComponents(this);
	},
	setMinutes: function(minute) {
		this.minute = parseInt(minute, 10) || 0;
		this.rd._setDateComponents(this);
	},
	setSeconds: function(second) {
		this.second = parseInt(second, 10) || 0;
		this.rd._setDateComponents(this);
	},
	setMilliseconds: function(milli) {
		this.millisecond = parseInt(milli, 10) || 0;
		this.rd._setDateComponents(this);
	},
	
	/**
	 * Return a new date instance in the current calendar that represents the first instance 
	 * of the given day of the week before the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week before the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	before: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.before(dow, this.offset),
			timezone: this.timezone
		});
	},
	
	/**
	 * Return a new date instance in the current calendar that represents the first instance 
	 * of the given day of the week after the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week after the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	after: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.after(dow, this.offset),
			timezone: this.timezone
		});
	},

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week on or before the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week on or before the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	onOrBefore: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.onOrBefore(dow, this.offset),
			timezone: this.timezone
		});
	},

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week on or after the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week on or after the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	onOrAfter: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.onOrAfter(dow, this.offset),
			timezone: this.timezone
		});
	},
	
	/**
	 * Return a Javascript Date object that is equivalent to this date
	 * object.
	 * 
	 * @return {Date|undefined} a javascript Date object
	 */
	getJSDate: function() {
		var unix = this.rd.getTimeExtended();
		return isNaN(unix) ? undefined : new Date(unix); 
	},
	
	/**
	 * Return the Rata Die (fixed day) number of this date.
	 * 
	 * @protected
	 * @return {number} the rd date as a number
	 */
	getRataDie: function() {
		return this.rd.getRataDie();
	},
	
	/**
	 * Set the date components of this instance based on the given rd.
	 * @protected
	 * @param {number} rd the rata die date to set
	 */
	setRd: function (rd) {
		this.rd = this.newRd({
			rd: rd,
			cal: this.cal
		});
		this._calcDateComponents();
	},
	
	/**
	 * Return the Julian Day equivalent to this calendar date as a number.
	 * 
	 * @return {number} the julian date equivalent of this date
	 */
	getJulianDay: function() {
		return this.rd.getJulianDay();
	},
	
	/**
	 * Set the date of this instance using a Julian Day.
	 * @param {number|ilib.JulianDay} date the Julian Day to use to set this date
	 */
	setJulianDay: function (date) {
		this.rd = this.newRd({
			julianday: (typeof(date) === 'object') ? date.getDate() : date,
			cal: this.cal
		});
		this._calcDateComponents();
	},

	/**
	 * Return the time zone associated with this date, or 
	 * undefined if none was specified in the constructor.
	 * 
	 * @return {string|undefined} the name of the time zone for this date instance
	 */
	getTimeZone: function() {
		return this.timezone || "local";
	},
	
	/**
	 * Set the time zone associated with this date.
	 * @param {string=} tzName the name of the time zone to set into this date instance,
	 * or "undefined" to unset the time zone 
	 */
	setTimeZone: function (tzName) {
		if (!tzName || tzName === "") {
			// same as undefining it
			this.timezone = undefined;
			this.tz = undefined;
		} else if (typeof(tzName) === 'string') {
			this.timezone = tzName;
			this.tz = undefined;
			// assuming the same UTC time, but a new time zone, now we have to 
			// recalculate what the date components are
			this._calcDateComponents();
		}
	},
	
	/**
	 * Return the rd number of the first Sunday of the given ISO year.
	 * @protected
	 * @param {number} year the year for which the first Sunday is being sought
	 * @return {number} the rd of the first Sunday of the ISO year
	 */
	firstSunday: function (year) {
		var firstDay = this.newRd({
			year: year,
			month: 1,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisecond: 0,
			cal: this.cal
		});
		var firstThu = this.newRd({
			rd: firstDay.onOrAfter(4),
			cal: this.cal
		});
		return firstThu.before(0);
	},
	
	/**
	 * Return the ISO 8601 week number in the current year for the current date. The week
	 * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some
	 * calendars.
	 * 
	 * @return {number} the week number for the current date
	 */
	getWeekOfYear: function() {
		var rd = Math.floor(this.rd.getRataDie());
		var year = this._calcYear(rd + this.offset);
		var yearStart = this.firstSunday(year);
		var nextYear;
		
		// if we have a January date, it may be in this ISO year or the previous year
		if (rd < yearStart) {
			yearStart = this.firstSunday(year-1);
		} else {
			// if we have a late December date, it may be in this ISO year, or the next year
			nextYear = this.firstSunday(year+1);
			if (rd >= nextYear) {
				yearStart = nextYear;
			}
		}
		
		return Math.floor((rd-yearStart)/7) + 1;
	},
	
	/**
	 * Return the ordinal number of the week within the month. The first week of a month is
	 * the first one that contains 4 or more days in that month. If any days precede this
	 * first week, they are marked as being in week 0. This function returns values from 0
	 * through 6.<p>
	 * 
	 * The locale is a required parameter because different locales that use the same 
	 * Gregorian calendar consider different days of the week to be the beginning of
	 * the week. This can affect the week of the month in which some days are located.
	 * 
	 * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out 
	 * the first day of the week
	 * @return {number} the ordinal number of the week within the current month
	 */
	getWeekOfMonth: function(locale) {
		var li = new ilib.LocaleInfo(locale);
		
		var first = this.newRd({
			year: this._calcYear(this.rd.getRataDie()+this.offset),
			month: this.getMonths(),
			day: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisecond: 0,
			cal: this.cal
		});
		var weekStart = first.onOrAfter(li.getFirstDayOfWeek());
		
		if (weekStart - first.getRataDie() > 3) {
			// if the first week has 4 or more days in it of the current month, then consider
			// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
			// one week earlier.
			weekStart -= 7;
		}
		return Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;
	}
};

/*
 * util/utils.js - Core utility routines
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * If Function.prototype.bind does not exist in this JS engine, this
 * function reimplements it in terms of older JS functions.
 * bind() doesn't exist in many older browsers.
 * 
 * @param {Object} scope object that the method should operate on
 * @param {function(...)} method method to call
 * @return {function(...)|undefined} function that calls the given method 
 * in the given scope with all of its arguments properly attached, or
 * undefined if there was a problem with the arguments
 */
ilib.bind = function(scope, method/*, bound arguments*/){
	if (!scope || !method) {
		return undefined;
	}
	
	/** @protected 
	 * @param {Arguments} inArrayLike
	 * @param {number=} inOffset
	 */
	function cloneArray(inArrayLike, inOffset) {
		var arr = [];
		for(var i = inOffset || 0, l = inArrayLike.length; i<l; i++){
			arr.push(inArrayLike[i]);
		}
		return arr;
	}

	if (typeof(method) === 'function') {
		var func, args = cloneArray(arguments, 2);
		if (typeof(method.bind) === 'function') {
			func = method.bind.apply(method, [scope].concat(args));
		} else {
			func = function() {
				var nargs = cloneArray(arguments);
				// invoke with collected args
				return method.apply(scope, args.concat(nargs));
			};
		}
		return func;
	}
	return undefined;
};

/**
 * Merge the properties of object2 into object1 in a deep manner and return a merged
 * object. If the property exists in both objects, the value in object2 will overwrite 
 * the value in object1. If a property exists in object1, but not in object2, its value
 * will not be touched. If a property exists in object2, but not in object1, it will be 
 * added to the merged result.<p>
 * 
 * Name1 and name2 are for creating debug output only. They are not necessary.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {*} object1 the object to merge into
 * @param {*} object2 the object to merge
 * @param {boolean=} replace if true, replace the array elements in object1 with those in object2.
 * If false, concatenate array elements in object1 with items in object2.
 * @param {string=} name1 name of the object being merged into
 * @param {string=} name2 name of the object being merged in
 * @return {Object} the merged object
 */
ilib.merge = function (object1, object2, replace, name1, name2) {
	var prop = undefined,
		newObj = {};
	for (prop in object1) {
		if (prop && typeof(object1[prop]) !== 'undefined') {
			newObj[prop] = object1[prop];
		}
	}
	for (prop in object2) {
		if (prop && typeof(object2[prop]) !== 'undefined') {
			if (object1[prop] instanceof Array && object2[prop] instanceof Array) {
				if (typeof(replace) !== 'boolean' || !replace) {
					newObj[prop] = new Array();
					newObj[prop] = newObj[prop].concat(object1[prop]);
					newObj[prop] = newObj[prop].concat(object2[prop]);
				} else {
					newObj[prop] = object2[prop];
				}
			} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {
				newObj[prop] = ilib.merge(object1[prop], object2[prop], replace);
			} else {
				// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily
				if (name1 && name2 && newObj[prop] == object2[prop]) {
					console.log("Property " + prop + " in " + name1 + " is being overridden by the same value in " + name2);
				}
				newObj[prop] = object2[prop];
			}
		}
	}
	return newObj;
};

/**
 * Find and merge all the locale data for a particular prefix in the given locale
 * and return it as a single javascript object. This merges the data in the 
 * correct order:
 * 
 * <ol>
 * <li>shared data (usually English)
 * <li>data for language
 * <li>data for language + region
 * <li>data for language + region + script
 * <li>data for language + region + script + variant
 * </ol>
 * 
 * It is okay for any of the above to be missing. This function will just skip the 
 * missing data. However, if everything except the shared data is missing, this 
 * function returns undefined, allowing the caller to go and dynamically load the
 * data instead.
 *  
 * @param {string} prefix prefix under ilib.data of the data to merge
 * @param {ilib.Locale} locale locale of the data being sought
 * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.
 * If false, concatenate array elements in object1 with items in object2.
 * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,
 * merge all the relevant locale data together.
 * @return {Object?} the merged locale data
 */
ilib.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {
	var data = undefined;
	var loc = locale || new ilib.Locale();
	var foundLocaleData = false;
	var property = prefix;
	var mostSpecific;

	data = ilib.data[prefix] || {};

	mostSpecific = data;

	if (loc.getLanguage()) {
		property = prefix + '_' + loc.getLanguage();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}
	
	if (loc.getRegion()) {
		property = prefix + '_' + loc.getRegion();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}
	
	if (loc.getLanguage()) {
		property = prefix + '_' + loc.getLanguage();
		
		if (loc.getScript()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = ilib.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}
		
		if (loc.getRegion()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = ilib.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}		
	}
	
	if (loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}

	if (loc.getLanguage() && loc.getScript() && loc.getRegion()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}

	if (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}

	if (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}
	
	return foundLocaleData ? (returnOne ? mostSpecific : data) : undefined;
};

/**
 * Return an array of relative path names for the
 * files that represent the data for the given locale.<p>
 * 
 * Note that to prevent the situation where a directory for
 * a language exists next to the directory for a region where
 * the language code and region code differ only by case, the 
 * plain region directories are located under the special 
 * "undefined" language directory which has the ISO code "und".
 * The reason is that some platforms have case-insensitive 
 * file systems, and you cannot have 2 directories with the 
 * same name which only differ by case. For example, "es" is
 * the ISO 639 code for the language "Spanish" and "ES" is
 * the ISO 3166 code for the region "Spain", so both the
 * directories cannot exist underneath "locale". The region
 * therefore will be loaded from "und/ES" instead.<p>  
 * 
 * <h4>Variations</h4>
 * 
 * With only language and region specified, the following
 * sequence of paths will be generated:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/region
 * </pre>
 * 
 * With only language and script specified:<p>
 * 
 * <pre>
 * language
 * language/script
 * </pre>
 * 
 * With only script and region specified:<p>
 * 
 * <pre>
 * und/region  
 * </pre>
 * 
 * With only region and variant specified:<p>
 * 
 * <pre>
 * und/region
 * region/variant
 * </pre>
 * 
 * With only language, script, and region specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/script
 * language/region
 * language/script/region
 * </pre>
 * 
 * With only language, region, and variant specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/region
 * region/variant
 * language/region/variant
 * </pre>
 * 
 * With all parts specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/script
 * language/region
 * region/variant
 * language/script/region
 * language/region/variant
 * language/script/region/variant
 * </pre>
 * 
 * @param {ilib.Locale} locale load the files for this locale
 * @param {string?} name the file name of each file to load without
 * any path
 * @return {Array.<string>} An array of relative path names
 * for the files that contain the locale data
 */
ilib.getLocFiles = function(locale, name) {
	var dir = "";
	var files = [];
	var filename = name || "resources.json";
	var loc = locale || new ilib.Locale();
	
	var language = loc.getLanguage();
	var region = loc.getRegion();
	var script = loc.getScript();
	var variant = loc.getVariant();
	
	files.push(filename); // generic shared file
	
	if (language) {
		dir = language + "/";
		files.push(dir + filename);
	}
	
	if (region) {
		dir = "und/" + region + "/";
		files.push(dir + filename);
	}
	
	if (language) {
		if (script) {
			dir = language + "/" + script + "/";
			files.push(dir + filename);
		}
		if (region) {
			dir = language + "/" + region + "/";
			files.push(dir + filename);
		}
	}
	
	if (region && variant) {
		dir = "und/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}

	if (language && script && region) {
		dir = language + "/" + script + "/" + region + "/";
		files.push(dir + filename);
	}

	if (language && region && variant) {
		dir = language + "/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}

	if (language && script && region && variant) {
		dir = language + "/" + script + "/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}
	
	return files;
};

/**
 * Return true if the given object has no properties.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {Object} obj the object to check
 * @return {boolean} true if the given object has no properties, false otherwise
 */
ilib.isEmpty = function (obj) {
	var prop = undefined;
	
	if (!obj) {
		return true;
	}
	
	for (prop in obj) {
		if (prop && typeof(obj[prop]) !== 'undefined') {
			return false;
		}
	}
	return true;
};


/**
 * @private
 */
ilib.hashCode = function(obj) {
	var hash = 0;
	
	function addHash(hash, newValue) {
		// co-prime numbers creates a nicely distributed hash
		hash *= 65543;
		hash += newValue;
		hash %= 2147483647; 
		return hash;
	}
	
	function stringHash(str) {
		var hash = 0;
		for (var i = 0; i < str.length; i++) {
			hash = addHash(hash, str.charCodeAt(i));
		}
		return hash;
	}
	
	switch (typeof(obj)) {
		case 'undefined':
			hash = 0;
			break;
		case 'string':
			hash = stringHash(obj);
			break;
		case 'function':
		case 'number':
		case 'xml':
			hash = stringHash(String(obj));
			break;
		case 'boolean':
			hash = obj ? 1 : 0;
			break;
		case 'object':
			var props = [];
			for (var p in obj) {
				if (obj.hasOwnProperty(p)) {
					props.push(p);
				}
			}
			// make sure the order of the properties doesn't matter
			props.sort();
			for (var i = 0; i < props.length; i++) {
				hash = addHash(hash, stringHash(props[i]));
				hash = addHash(hash, ilib.hashCode(obj[props[i]]));
			}
			break;
	}
	
	return hash;
};


/**
 * Load data using the new loader object or via the old function callback.
 * @private
 */
ilib._callLoadData = function (files, sync, params, callback) {
	// console.log("ilib._callLoadData called");
	if (typeof(ilib._load) === 'function') {
		// console.log("ilib._callLoadData: calling as a regular function");
		return ilib._load(files, sync, params, callback);
	} else if (typeof(ilib._load) === 'object' && ilib._load instanceof ilib.Loader) {
		// console.log("ilib._callLoadData: calling as an object");
		return ilib._load.loadFiles(files, sync, params, callback);
	}
	
	// console.log("ilib._callLoadData: not calling. Type is " + typeof(ilib._load) + " and instanceof says " + (ilib._load instanceof ilib.Loader));
	return undefined;
};

/**
 * Find locale data or load it in. If the data with the given name is preassembled, it will
 * find the data in ilib.data. If the data is not preassembled but there is a loader function,
 * this function will call it to load the data. Otherwise, the callback will be called with
 * undefined as the data. This function will create a cache under the given class object.
 * If data was successfully loaded, it will be set into the cache so that future access to 
 * the same data for the same locale is much quicker.<p>
 * 
 * The parameters can specify any of the following properties:<p>
 * 
 * <ul>
 * <li><i>name</i> - String. The name of the file being loaded. Default: resources.json
 * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.
 * <li><i>locale</i> - ilib.Locale. The locale for which data is loaded. Default is the current locale.
 * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.
 * <li><i>type</i> - String. Type of file to load. This can be "json" or "other" type. Default: "json" 
 * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays
 * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent 
 * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  
 * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function
 * <li><i>sync</i> - boolean. Whether or not to load the data synchronously
 * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.
 * Data is not returned from this method, so a callback function is mandatory.
 * </ul>
 * 
 * @param {Object} params Parameters configuring how to load the files (see above)
 */
ilib.loadData = function(params) {
	var name = "resources.json",
		object = undefined, 
		locale = new ilib.Locale(ilib.getLocale()), 
		sync = false, 
		type = undefined,
		loadParams = {},
		callback = undefined,
		nonlocale = false,
		replace = false,
		basename;
	
	if (!params || typeof(params.callback) !== 'function') {
		return;
	}

	if (params.name) {
		name = params.name;
	}
	if (params.object) {
		object = params.object;
	}
	if (params.locale) {
		locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
	}			
	if (params.type) {
		type = params.type;
	}
	if (params.loadParams) {
		loadParams = params.loadParams;
	}
	if (params.sync) {
		sync = params.sync;
	}
	if (params.nonlocale) {
		nonlocale = !!params.nonlocale;
	}
	if (typeof(params.replace) === 'boolean') {
		replace = params.replace;
	}
	
	callback = params.callback;
	
	if (object && !object.cache) {
		object.cache = {};
	}
	
	if (!type) {
		var dot = name.lastIndexOf(".");
		type = (dot !== -1) ? name.substring(dot+1) : "text";
	}

	var spec = ((!nonlocale && locale.getSpec().replace(/-/g, '_')) || "root") + "," + name + "," + String(ilib.hashCode(loadParams));
	if (!object || typeof(object.cache[spec]) === 'undefined') {
		var data, returnOne = (loadParams && loadParams.returnOne);
		
		if (type === "json") {
			// console.log("type is json");
			basename = name.substring(0, name.lastIndexOf("."));
			if (nonlocale) {
				basename = basename.replace(/\//g, '.').replace(/[\\\+\-]/g, "_");
				data = ilib.data[basename];
			} else {
				data = ilib.mergeLocData(basename, locale, replace, returnOne);
			}
			if (data) {
				// console.log("found assembled data");
				if (object) {
					object.cache[spec] = data;
				}
				callback(data);
				return;
			}
		}
		
		// console.log("ilib._load is " + typeof(ilib._load));
		if (typeof(ilib._load) !== 'undefined') {
			// the data is not preassembled, so attempt to load it dynamically
			var files = nonlocale ? [ name || "resources.json" ] : ilib.getLocFiles(locale, name);
			if (type !== "json") {
				loadParams.returnOne = true;
			}
			
			ilib._callLoadData(files, sync, loadParams, ilib.bind(this, function(arr) {
				if (type === "json") {
					data = ilib.data[basename] || {};
					for (var i = 0; i < arr.length; i++) {
						if (typeof(arr[i]) !== 'undefined') {
							data = loadParams.returnOne ? arr[i] : ilib.merge(data, arr[i], replace);
						}
					}
					
					if (object) {
						object.cache[spec] = data;
					}
					callback(data);
				} else {
					var i = arr.length-1; 
					while (i > -1 && !arr[i]) {
						i--;
					}
					if (i > -1) {
						if (object) {
							object.cache[spec] = arr[i];
						}
						callback(arr[i]);
					} else {
						callback(undefined);
					}
				}
			}));
		} else {
			// no data other than the generic shared data
			if (type === "json") {
				data = ilib.data[basename];
			}
			if (object && data) {
				object.cache[spec] = data;
			}
			callback(data);
		}
	} else {
		callback(object.cache[spec]);
	}
};

/*
 * util/math.js - Misc math utility routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Return the sign of the given number. If the sign is negative, this function
 * returns -1. If the sign is positive or zero, this function returns 1.
 * @static
 * @param {number} num the number to test
 * @return {number} -1 if the number is negative, and 1 otherwise
 */
ilib.signum = function (num) {
	var n = num;
	if (typeof(num) === 'string') {
		n = parseInt(num, 10);
	} else if (typeof(num) !== 'number') {
		return 1;
	}
	return (n < 0) ? -1 : 1;
};


/**
 * @protected
 */
ilib._roundFnc = {
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	floor: function (num) {
		return Math.floor(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	ceiling: function (num) {
		return Math.ceil(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	down: function (num) {
		return (num < 0) ? Math.ceil(num) : Math.floor(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	up: function (num) {
		return (num < 0) ? Math.floor(num) : Math.ceil(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfup: function (num) {
		return (num < 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfdown: function (num) {
		return (num < 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfeven: function (num) {
		return (Math.floor(num) % 2 === 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfodd: function (num) {
		return (Math.floor(num) % 2 !== 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	}
};

/**
 * Do a proper modulo function. The Javascript % operator will give the truncated
 * division algorithm, but for calendrical calculations, we need the Euclidean
 * division algorithm where the remainder of any division, whether the dividend
 * is negative or not, is always a positive number in the range [0, modulus).<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {number} dividend the number being divided
 * @param {number} modulus the number dividing the dividend. This should always be a positive number.
 * @return the remainder of dividing the dividend by the modulus.  
 */
ilib.mod = function (dividend, modulus) {
	if (modulus == 0) {
		return 0;
	}
	var x = dividend % modulus;
	return (x < 0) ? x + modulus : x;
};

/**
 * Do a proper adjusted modulo function. The Javascript % operator will give the truncated
 * division algorithm, but for calendrical calculations, we need the Euclidean
 * division algorithm where the remainder of any division, whether the dividend
 * is negative or not, is always a positive number in the range (0, modulus]. The adjusted
 * modulo function differs from the regular modulo function in that when the remainder is
 * zero, the modulus should be returned instead.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {number} dividend the number being divided
 * @param {number} modulus the number dividing the dividend. This should always be a positive number.
 * @return the remainder of dividing the dividend by the modulus.  
 */
ilib.amod = function (dividend, modulus) {
	if (modulus == 0) {
		return 0;
	}
	var x = dividend % modulus;
	return (x <= 0) ? x + modulus : x;
};

/*
 * strings.js - ilib string subclass definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js util/utils.js locale.js util/math.js

// !data plurals

/**
 * @class
 * Create a new string instance. This string inherits from the Javascript
 * String class, and adds two more methods, fmt and fmtChoice. It can be
 * used anywhere that a normal Javascript string is used. The formatting
 * methods are of course most useful when localizing strings in an app
 * or web site in combination with the ilib.ResBundle class.<p>
 * 
 * Depends directive: !depends strings.js
 * 
 * @constructor
 * @param {string|ilib.String=} string initialize this instance with this string 
 */
ilib.String = function (string) {
	if (typeof(string) === 'object') {
		if (string instanceof ilib.String) {
			this.str = string.str;	
		} else {
			this.str = string.toString();
		}
	} else if (typeof(string) === 'string') {
		this.str = new String(string);
	} else {
		this.str = "";
	}
	this.length = this.str.length;
	this.cpLength = -1;
	this.localeSpec = ilib.getLocale();
};

/**
 * Return true if the given character is a Unicode surrogate character,
 * either high or low.
 * 
 * @private
 * @static
 * @param {string} ch character to check
 * @return {boolean} true if the character is a surrogate
 */
ilib.String._isSurrogate = function (ch) {
	var n = ch.charCodeAt(0);
	return ((n >= 0xDC00 && n <= 0xDFFF) || (n >= 0xD800 && n <= 0xDBFF));
};

/**
 * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid 
 * UCS-4 Unicode character, including supplementary characters. Standard Javascript
 * only supports supplementary characters using the UTF-16 encoding, which has 
 * values in the range 0x0000-0xFFFF. String.fromCharCode() will only
 * give you a string containing 16-bit characters, and will not properly convert 
 * the code point for a supplementary character (which has a value > 0xFFFF) into 
 * two UTF-16 surrogate characters. Instead, it will just just give you whatever
 * single character happens to be the same as your code point modulo 0x10000, which
 * is almost never what you want.<p> 
 * 
 * Similarly, that means if you use String.charCodeAt()
 * you will only retrieve a 16-bit value, which may possibly be a single
 * surrogate character that is part of a surrogate pair representing a character
 * in the supplementary plane. It will not give you a code point. Use 
 * ilib.String.codePointAt() to access code points in a string, or use 
 * an iterator to walk through the code points in a string. 
 * 
 * @static
 * @param {number} codepoint UCS-4 code point to convert to a character
 * @return {string} a string containing the character represented by the codepoint
 */
ilib.String.fromCodePoint = function (codepoint) {
	if (codepoint < 0x10000) {
		return String.fromCharCode(codepoint);
	} else {
		var high = Math.floor(codepoint / 0x10000) - 1;
		var low = codepoint & 0xFFFF;
		
		return String.fromCharCode(0xD800 | ((high & 0x000F) << 6) |  ((low & 0xFC00) >> 10)) +
			String.fromCharCode(0xDC00 | (low & 0x3FF));
	}
};

/**
 * Convert the character or the surrogate pair at the given
 * index into the intrinsic Javascript string to a Unicode 
 * UCS-4 code point.
 * 
 * @param {string} str string to get the code point from
 * @param {number} index index into the string
 * @return {number} code point of the character at the
 * given index into the string
 */
ilib.String.toCodePoint = function(str, index) {
	if (!str || str.length === 0) {
		return -1;
	}
	var code = -1, high = str.charCodeAt(index);
	if (high >= 0xD800 && high <= 0xDBFF) {
		if (str.length > index+1) {
			var low = str.charCodeAt(index+1);
			if (low >= 0xDC00 && low <= 0xDFFF) {
				code = (((high & 0x3C0) >> 6) + 1) << 16 |
					(((high & 0x3F) << 10) | (low & 0x3FF));
			}
		}
	} else {
		code = high;
	}
	
	return code;
};

/**
 * Load the plural the definitions of plurals for the locale.
 * @param {boolean=} sync
 * @param {ilib.Locale|string=} locale
 * @param {Object=} loadParams
 * @param {function(*)=} onLoad
 */
ilib.String.loadPlurals = function (sync, locale, loadParams, onLoad) {
	var loc;
	if (locale) {
		loc = (typeof(locale) === 'string') ? new ilib.Locale(locale) : locale;
	} else {
		loc = new ilib.Locale(ilib.getLocale());
	}
	var spec = loc.getLanguage();
	if (!ilib.data["plurals_" + spec]) {
		ilib.loadData({
			name: "plurals.json",
			object: ilib.String,
			locale: loc,
			sync: sync,
			loadParams: loadParams,
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(plurals) {
				if (!plurals) {
					ilib.String.cache[spec] = {};
				}
				ilib.data["plurals_" + spec] = plurals || {};
				if (onLoad && typeof(onLoad) === 'function') {
					onLoad(ilib.data["plurals_" + spec]);
				}
			})
		});
	} else {
		if (onLoad && typeof(onLoad) === 'function') {
			onLoad(ilib.data["plurals_" + spec]);
		}
	}
};

/**
 * @private
 * @static
 */
ilib.String._fncs = {
	/**
	 * @private
	 * @param {Object} obj
	 * @return {string|undefined}
	 */
	firstProp: function (obj) {
		for (var p in obj) {
			if (p && obj[p]) {
				return p;
			}
		}
		return undefined; // should never get here
	},
	
	/**
	 * @private
	 * @param {Object} obj
	 * @param {number} n
	 * @return {?}
	 */
	getValue: function (obj, n) {
		if (typeof(obj) === 'object') {
			var subrule = ilib.String._fncs.firstProp(obj);
			return ilib.String._fncs[subrule](obj[subrule], n);
		} else if (typeof(obj) === 'string') {
			return n;
		} else {
			return obj;
		}
	},
	
	/**
	 * @private
	 * @param {number} n
	 * @param {Array.<number|Array.<number>>} range
	 * @return {boolean}
	 */
	matchRangeContinuous: function(n, range) {
		for (var num in range) {
			if (typeof(num) !== 'undefined' && typeof(range[num]) !== 'undefined') {
				var obj = /** @type {Object|null|undefined} */ range[num];
				if (typeof(obj) === 'number') {
					if (n === range[num]) {
						return true;
					}
				} else if (Object.prototype.toString.call(obj) === '[object Array]') {
					if (n >= obj[0] && n <= obj[1]) {
						return true;
					}
				}
			}
		}
		return false;
	},

	/**
	 * @private
	 * @param {number} n
	 * @param {Array.<number|Array.<number>>} range
	 * @return {boolean}
	 */
	matchRange: function(n, range) {
		if (Math.floor(n) !== n) {
			return false;
		}
		return ilib.String._fncs.matchRangeContinuous(n, range);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	is: function(rule, n) {
		var left = ilib.String._fncs.getValue(rule[0], n);
		var right = ilib.String._fncs.getValue(rule[1], n);
		return left == right;
		// return ilib.String._fncs.getValue(rule[0]) == ilib.String._fncs.getValue(rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	isnot: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) != ilib.String._fncs.getValue(rule[1], n);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	inrange: function(rule, n) {
		return ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	notin: function(rule, n) {
		return !ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	within: function(rule, n) {
		return ilib.String._fncs.matchRangeContinuous(ilib.String._fncs.getValue(rule[0], n), rule[1]);		
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {number}
	 */
	mod: function(rule, n) {
		return ilib.mod(ilib.String._fncs.getValue(rule[0], n), ilib.String._fncs.getValue(rule[1], n));
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {number}
	 */
	n: function(rule, n) {
		return n;
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	or: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) || ilib.String._fncs.getValue(rule[1], n);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	and: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) && ilib.String._fncs.getValue(rule[1], n);
	}
};

ilib.String.prototype = {
	/**
	 * Return the length of this string in characters. This function defers to the regular
	 * Javascript string class in order to perform the length function. Please note that this
	 * method is a real method, whereas the length property of Javascript strings is 
	 * implemented by native code and appears as a property.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("this is a string");
	 * console.log("String is " + str._length() + " characters long.");
	 * </pre>
	 * @private
	 */
	_length: function () {
		return this.str.length;
	},
	
	/**
	 * Format this string instance as a message, replacing the parameters with 
	 * the given values.<p>
	 * 
	 * The string can contain any text that a regular Javascript string can
	 * contain. Replacement parameters have the syntax:
	 * 
	 * <pre>
	 * {name}
	 * </pre>
	 * 
	 * Where "name" can be any string surrounded by curly brackets. The value of 
	 * "name" is taken from the parameters argument.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("There are {num} objects.");
	 * console.log(str.format({
	 *   num: 12
	 * });
	 * </pre>
	 * 
	 * Would give the output:
	 * 
	 * <pre>
	 * There are 12 objects.
	 * </pre>
	 * 
	 * If a property is missing from the parameter block, the replacement
	 * parameter substring is left untouched in the string, and a different
	 * set of parameters may be applied a second time. This way, different
	 * parts of the code may format different parts of the message that they
	 * happen to know about.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("There are {num} objects in the {container}.");
	 * console.log(str.format({
	 *   num: 12
	 * });
	 * </pre>
	 * 
	 * Would give the output:<p>
	 * 
	 * <pre>
	 * There are 12 objects in the {container}.
	 * </pre>
	 * 
	 * The result can then be formatted again with a different parameter block that
	 * specifies a value for the container property.
	 * 
	 * @param params a Javascript object containing values for the replacement 
	 * parameters in the current string
	 * @return a new ilib.String instance with as many replacement parameters filled
	 * out as possible with real values.
	 */
	format: function (params) {
		var formatted = this.str;
		if (params) {
			var regex;
			for (var p in params) {
				if (typeof(params[p]) !== 'undefined') {
					regex = new RegExp("\{"+p+"\}", "g");
					formatted = formatted.replace(regex, params[p]);
				}
			}
		}
		return formatted.toString();
	},
	
	/**
	 * Format a string as one of a choice of strings dependent on the value of
	 * a particular argument index.<p>
	 * 
	 * The syntax of the choice string is as follows. The string contains a
	 * series of choices separated by a vertical bar character "|". Each choice
	 * has a value or range of values to match followed by a hash character "#"
	 * followed by the string to use if the variable matches the criteria.<p>
	 * 
	 * Example string:
	 * 
	 * <pre>
	 * var num = 2;
	 * var str = new ilib.String("0#There are no objects.|1#There is one object.|2#There are {number} objects.");
	 * console.log(str.formatChoice(num, {
	 *   number: num
	 * }));
	 * </pre>
	 * 
	 * Gives the output:
	 * 
	 * <pre>
	 * "There are 2 objects."
	 * </pre>
	 * 
	 * The strings to format may contain replacement variables that will be formatted
	 * using the format() method above and the params argument as a source of values
	 * to use while formatting those variables.<p>
	 * 
	 * If the criterion for a particular choice is empty, that choice will be used
	 * as the default one for use when none of the other choice's criteria match.<p>
	 * 
	 * Example string:
	 * 
	 * <pre>
	 * var num = 22;
	 * var str = new ilib.String("0#There are no objects.|1#There is one object.|#There are {number} objects.");
	 * console.log(str.formatChoice(num, {
	 *   number: num
	 * }));
	 * </pre>
	 * 
	 * Gives the output:
	 * 
	 * <pre>
	 * "There are 22 objects."
	 * </pre>
	 * 
	 * If multiple choice patterns can match a given argument index, the first one 
	 * encountered in the string will be used. If no choice patterns match the 
	 * argument index, then the default choice will be used. If there is no default
	 * choice defined, then this method will return an empty string.<p>
	 * 
	 * <b>Special Syntax</b><p>
	 * 
	 * For any choice format string, all of the patterns in the string should be
	 * of a single type: numeric, boolean, or string/regexp. The type of the 
	 * patterns is determined by the type of the argument index parameter.<p>
	 * 
	 * If the argument index is numeric, then some special syntax can be used 
	 * in the patterns to match numeric ranges.<p>
	 * 
	 * <ul>
	 * <li><i>&gt;x</i> - match any number that is greater than x 
	 * <li><i>&gt;=x</i> - match any number that is greater than or equal to x
	 * <li><i>&lt;x</i> - match any number that is less than x
	 * <li><i>&lt;=x</i> - match any number that is less than or equal to x
	 * <li><i>start-end</i> - match any number in the range [start,end)
	 * <li><i>zero</i> - match any number in the class "zero". (See below for
	 * a description of number classes.)
	 * <li><i>one</i> - match any number in the class "one"
	 * <li><i>two</i> - match any number in the class "two"
	 * <li><i>few</i> - match any number in the class "few"
	 * <li><i>many</i> - match any number in the class "many"
	 * </ul>
	 * 
	 * A number class defines a set of numbers that receive a particular syntax
	 * in the strings. For example, in Slovenian, integers ending in the digit
	 * "1" are in the "one" class, including 1, 21, 31, ... 101, 111, etc.
	 * Similarly, integers ending in the digit "2" are in the "two" class. 
	 * Integers ending in the digits "3" or "4" are in the "few" class, and
	 * every other integer is handled by the default string.<p>
	 * 
	 * The definition of what numbers are included in a class is locale-dependent.
	 * They are defined in the data file plurals.json. If your string is in a
	 * different locale than the default for ilib, you should call the setLocale()
	 * method of the string instance before calling this method.<p> 
	 * 
	 * <b>Other Pattern Types</b><p>
	 * 
	 * If the argument index is a boolean, the string values "true" and "false" 
	 * may appear as the choice patterns.<p>
	 * 
	 * If the argument index is of type string, then the choice patterns may contain
	 * regular expressions, or static strings as degenerate regexps.
	 * 
	 * @param {*} argIndex The index into the choice array of the current parameter
	 * @param {Object} params The hash of parameter values that replace the replacement 
	 * variables in the string
	 * @throws "syntax error in choice format pattern: " if there is a syntax error
	 * @return {string} the formatted string
	 */
	formatChoice: function(argIndex, params) {
		var choices = this.str.split("|");
		var type = typeof(argIndex);
		var limits = [];
		var strings = [];
		var i;
		var parts;
		var limit;
		var arg;
		var result = undefined;
		var defaultCase = "";
	
		if (this.str.length === 0) {
			// nothing to do
			return "";
		}
		
		// first parse all the choices
		for (i = 0; i < choices.length; i++) {		
			parts = choices[i].split("#");		
			if (parts.length > 2) {
				limits[i] = parts[0];
				parts = parts.shift();			
				strings[i] = parts.join("#");
			} else if (parts.length === 2) {
				limits[i] = parts[0];
				strings[i] = parts[1];
			} else {
				// syntax error
				throw "syntax error in choice format pattern: " + choices[i];
			}		
		}
		
		// then apply the argument index
		for (i = 0; i < limits.length; i++) {
			if (limits[i].length === 0) {
				// this is default case
				defaultCase = new ilib.String(strings[i]);			
			} else {
				switch (type) {
					case 'number':
						arg = parseInt(argIndex, 10);
											
						if (limits[i].substring(0,2) === "<=") {						
							limit = parseFloat(limits[i].substring(2));
							if (arg <= limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].substring(0,2) === ">=") {						
							limit = parseFloat(limits[i].substring(2));
							if (arg >= limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].charAt(0) === "<") {						
							limit = parseFloat(limits[i].substring(1));
							if (arg < limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].charAt(0) === ">") {						
							limit = parseFloat(limits[i].substring(1));
							if (arg > limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else {
							this.locale = this.locale || new ilib.Locale(this.localeSpec);
							switch (limits[i]) {
								case "zero":
								case "one":
								case "two":
								case "few":
								case "many":
									// CLDR locale-dependent number classes
									var ruleset = ilib.data["plurals_" + this.locale.getLanguage()];
									if (ruleset) {
										var rule = ruleset[limits[i]];
										if (ilib.String._fncs.getValue(rule, arg)) {
											result = new ilib.String(strings[i]);
											i = limits.length;
										}
									}
									break;
								default:
									var dash = limits[i].indexOf("-");
									if (dash !== -1) {							
										// range
										var start = limits[i].substring(0, dash);
										var end = limits[i].substring(dash+1);							
										if (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {								
											result = new ilib.String(strings[i]);
											i = limits.length;
										}
									} else if (arg === parseInt(limits[i], 10)) {							
										// exact amount
										result = new ilib.String(strings[i]);
										i = limits.length;
									}
									break;
							}
						}
						break;
					case 'boolean':					
						if (limits[i] === "true" && argIndex === true) {						
							result = new ilib.String(strings[i]);
							i = limits.length;
						} else if (limits[i] === "false" && argIndex === false) {						
							result = new ilib.String(strings[i]);
							i = limits.length;
						}
						break;
					case 'string':					
						var regexp = new RegExp(limits[i], "i");
						if (regexp.test(argIndex)) {
							result = new ilib.String(strings[i]);
							i = limits.length;
						}
						break;
					case 'object':
						throw "syntax error: fmtChoice parameter for the argument index cannot be an object";
				}
			}
		}
		
		if (!result) {		
			result = defaultCase || new ilib.String("");
		}
		
		result = result.format(params);
		
		return result.toString();
	},
	
	// delegates
	/**
	 * Same as String.toString()
	 * @return {string} this instance as regular Javascript string
	 */
	toString: function () {
		return this.str.toString();
	},
	
	/**
	 * Same as String.valueOf()
	 * @return {string} this instance as a regular Javascript string
	 */
	valueOf: function () {
		return this.str.valueOf();
	},
	
	/**
	 * Same as String.charAt()
	 * @param {number} index the index of the character being sought
	 * @return {ilib.String} the character at the given index
	 */
	charAt: function(index) {
		return new ilib.String(this.str.charAt(index));
	},
	
	/**
	 * Same as String.charCodeAt(). This only reports on 
	 * 2-byte UCS-2 Unicode values, and does not take into
	 * account supplementary characters encoded in UTF-16.
	 * If you would like to take account of those characters,
	 * use codePointAt() instead.
	 * @param {number} index the index of the character being sought
	 * @return {number} the character code of the character at the 
	 * given index in the string 
	 */
	charCodeAt: function(index) {
		return this.str.charCodeAt(index);
	},
	
	/**
	 * Same as String.concat()
	 * @param {string} strings strings to concatenate to the current one
	 * @return {ilib.String} a concatenation of the given strings
	 */
	concat: function(strings) {
		return new ilib.String(this.str.concat(strings));
	},
	
	/**
	 * Same as String.indexOf()
	 * @param {string} searchValue string to search for
	 * @param {number} start index into the string to start searching, or
	 * undefined to search the entire string
	 * @return {number} index into the string of the string being sought,
	 * or -1 if the string is not found 
	 */
	indexOf: function(searchValue, start) {
		return this.str.indexOf(searchValue, start);
	},
	
	/**
	 * Same as String.lastIndexOf()
	 * @param {string} searchValue string to search for
	 * @param {number} start index into the string to start searching, or
	 * undefined to search the entire string
	 * @return {number} index into the string of the string being sought,
	 * or -1 if the string is not found 
	 */
	lastIndexOf: function(searchValue, start) {
		return this.str.lastIndexOf(searchValue, start);
	},
	
	/**
	 * Same as String.match()
	 * @param {string} regexp the regular expression to match
	 * @return {Array.<string>} an array of matches
	 */
	match: function(regexp) {
		return this.str.match(regexp);
	},
	
	/**
	 * Same as String.replace()
	 * @param {string} searchValue a regular expression to search for
	 * @param {string} newValue the string to replace the matches with
	 * @return {ilib.String} a new string with all the matches replaced
	 * with the new value
	 */
	replace: function(searchValue, newValue) {
		return new ilib.String(this.str.replace(searchValue, newValue));
	},
	
	/**
	 * Same as String.search()
	 * @param {string} regexp the regular expression to search for
	 * @return {number} position of the match, or -1 for no match
	 */
	search: function(regexp) {
		return this.str.search(regexp);
	},
	
	/**
	 * Same as String.slice()
	 * @param {number} start first character to include in the string
	 * @param {number} end include all characters up to, but not including
	 * the end character
	 * @return {ilib.String} a slice of the current string
	 */
	slice: function(start, end) {
		return new ilib.String(this.str.slice(start, end));
	},
	
	/**
	 * Same as String.split()
	 * @param {string} separator regular expression to match to find
	 * separations between the parts of the text
	 * @param {number} limit maximum number of items in the final 
	 * output array. Any items beyond that limit will be ignored.
	 * @return {Array.<string>} the parts of the current string split 
	 * by the separator
	 */
	split: function(separator, limit) {
		return this.str.split(separator, limit);
	},
	
	/**
	 * Same as String.substr()
	 * @param {number} start the index of the character that should 
	 * begin the returned substring
	 * @param {number} length the number of characters to return after
	 * the start character.
	 * @return {ilib.String} the requested substring 
	 */
	substr: function(start, length) {
		return new ilib.String(this.str.substr(start, length));
	},
	
	/**
	 * Same as String.substring()
	 * @param {number} from the index of the character that should 
	 * begin the returned substring
	 * @param {number} to the index where to stop the extraction. If
	 * omitted, extracts the rest of the string
	 * @return {ilib.String} the requested substring 
	 */
	substring: function(from, to) {
		return this.str.substring(from, to);
	},
	
	/**
	 * Same as String.toLowerCase(). Note that this method is
	 * not locale-sensitive. 
	 * @return {ilib.String} a string with the first character
	 * lower-cased
	 */
	toLowerCase: function() {
		return this.str.toLowerCase();
	},
	
	/**
	 * Same as String.toUpperCase(). Note that this method is
	 * not locale-sensitive. Use toLocaleUpperCase() instead
	 * to get locale-sensitive behaviour. 
	 * @return {ilib.String} a string with the first character
	 * upper-cased
	 */
	toUpperCase: function() {
		return this.str.toUpperCase();
	},
	
	/**
	 * Convert the character or the surrogate pair at the given
	 * index into the string to a Unicode UCS-4 code point.
	 * @protected
	 * @param {number} index index into the string
	 * @return {number} code point of the character at the
	 * given index into the string
	 */
	_toCodePoint: function (index) {
		return ilib.String.toCodePoint(this.str, index);
	},
	
	/**
	 * Call the callback with each character in the string one at 
	 * a time, taking care to step through the surrogate pairs in 
	 * the UTF-16 encoding properly.<p>
	 * 
	 * The standard Javascript String's charAt() method only
	 * returns a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index to charAt() is pointing to a low- or 
	 * high-surrogate character,
	 * it will return the surrogate character rather 
	 * than the the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode. This function will call the callback with the full
	 * character, making sure to join two  
	 * surrogates into one character in the supplementary planes
	 * where necessary.<p>
	 * 
	 * @param {function(string)} callback a callback function to call with each
	 * full character in the current string
	 */
	forEach: function(callback) {
		if (typeof(callback) === 'function') {
			var it = this.charIterator();
			while (it.hasNext()) {
				callback(it.next());
			}
		}
	},

	/**
	 * Call the callback with each numeric code point in the string one at 
	 * a time, taking care to step through the surrogate pairs in 
	 * the UTF-16 encoding properly.<p>
	 * 
	 * The standard Javascript String's charCodeAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index to charCodeAt() is pointing to a low- or 
	 * high-surrogate character,
	 * it will return the code point of the surrogate character rather 
	 * than the code point of the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode. This function will call the callback with the full
	 * code point of each character, making sure to join two  
	 * surrogates into one code point in the supplementary planes.<p>
	 * 
	 * @param {function(string)} callback a callback function to call with each
	 * code point in the current string
	 */
	forEachCodePoint: function(callback) {
		if (typeof(callback) === 'function') {
			var it = this.iterator();
			while (it.hasNext()) {
				callback(it.next());
			}
		}
	},

	/**
	 * Return an iterator that will step through all of the characters
	 * in the string one at a time and return their code points, taking 
	 * care to step through the surrogate pairs in UTF-16 encoding 
	 * properly.<p>
	 * 
	 * The standard Javascript String's charCodeAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index is pointing to a low- or high-surrogate character,
	 * it will return a code point of the surrogate character rather 
	 * than the code point of the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode.<p>
	 * 
	 * The iterator instance returned has two methods, hasNext() which
	 * returns true if the iterator has more code points to iterate through,
	 * and next() which returns the next code point as a number.<p>
	 * 
	 * @return {Object} an iterator 
	 * that iterates through all the code points in the string
	 */
	iterator: function() {
		/**
		 * @constructor
		 */
		function _iterator (istring) {
			this.index = 0;
			this.hasNext = function () {
				return (this.index < istring.str.length);
			};
			this.next = function () {
				if (this.index < istring.str.length) {
					var num = istring._toCodePoint(this.index);
					this.index += ((num > 0xFFFF) ? 2 : 1);
				} else {
					num = -1;
				}
				return num;
			};
		};
		return new _iterator(this);
	},

	/**
	 * Return an iterator that will step through all of the characters
	 * in the string one at a time, taking 
	 * care to step through the surrogate pairs in UTF-16 encoding 
	 * properly.<p>
	 * 
	 * The standard Javascript String's charAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index is pointing to a low- or high-surrogate character,
	 * it will return that surrogate character rather 
	 * than the surrogate pair which represents a character 
	 * in the supplementary planes.<p>
	 * 
	 * The iterator instance returned has two methods, hasNext() which
	 * returns true if the iterator has more characters to iterate through,
	 * and next() which returns the next character.<p>
	 * 
	 * @return {Object} an iterator 
	 * that iterates through all the characters in the string
	 */
	charIterator: function() {
		/**
		 * @constructor
		 */
		function _chiterator (istring) {
			this.index = 0;
			this.hasNext = function () {
				return (this.index < istring.str.length);
			};
			this.next = function () {
				var ch;
				if (this.index < istring.str.length) {
					ch = istring.str.charAt(this.index);
					if (ilib.String._isSurrogate(ch) && 
							this.index+1 < istring.str.length && 
							ilib.String._isSurrogate(istring.str.charAt(this.index+1))) {
						this.index++;
						ch += istring.str.charAt(this.index);
					}
					this.index++;
				}
				return ch;
			};
		};
		return new _chiterator(this);
	},
	
	/**
	 * Return the code point at the given index when the string is viewed 
	 * as an array of code points. If the index is beyond the end of the
	 * array of code points or if the index is negative, -1 is returned.
	 * @param {number} index index of the code point 
	 * @return {number} code point of the character at the given index into
	 * the string
	 */
	codePointAt: function (index) {
		if (index < 0) {
			return -1;
		}
		var count,
			it = this.iterator(),
			ch;
		for (count = index; count >= 0 && it.hasNext(); count--) {
			ch = it.next();
		}
		return (count < 0) ? ch : -1;
	},
	
	/**
	 * Set the locale to use when processing choice formats. The locale
	 * affects how number classes are interpretted. In some cultures,
	 * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	 * in yet others, "few" maps to "any integer that ends in the digits
	 * 3 or 4".
	 * @param {ilib.Locale|string} locale locale to use when processing choice
	 * formats with this string
	 * @param {boolean=} sync [optional] whether to load the locale data synchronously 
	 * or not
	 * @param {Object=} loadParams [optional] parameters to pass to the loader function
	 * @param {function(*)=} onLoad [optional] function to call when the loading is done
	 */
	setLocale: function (locale, sync, loadParams, onLoad) {
		if (typeof(locale) === 'object') {
			this.locale = locale;
		} else {
			this.localeSpec = locale;
			this.locale = new ilib.Locale(locale);
		}
		
		ilib.String.loadPlurals(typeof(sync) !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);
	},

	/**
	 * Return the locale to use when processing choice formats. The locale
	 * affects how number classes are interpretted. In some cultures,
	 * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	 * in yet others, "few" maps to "any integer that ends in the digits
	 * 3 or 4".
	 * @return {string} localespec to use when processing choice
	 * formats with this string
	 */
	getLocale: function () {
		return (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();
	},

	/**
	 * Return the number of code points in this string. This may be different
	 * than the number of characters, as the UTF-16 encoding that Javascript
	 * uses for its basis returns surrogate pairs separately. Two 2-byte 
	 * surrogate characters together make up one character/code point in 
	 * the supplementary character planes. If your string contains no
	 * characters in the supplementary planes, this method will return the
	 * same thing as the length() method.
	 * @return {number} the number of code points in this string
	 */
	codePointLength: function () {
		if (this.cpLength === -1) {
			var it = this.iterator();
			this.cpLength = 0;
			while (it.hasNext()) { 
				this.cpLength++;
				it.next();
			};
		}
		return this.cpLength;	
	}
};
/*
 * calendar.js - Represent a calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends
ilibglobal.js
locale.js
localeinfo.js
*/

/**
 * Interface that all calendars must implement.
 * 
 * Depends directive: !depends calendar.js
 * 
 * @interface
 * @protected
 */
ilib.Cal = function() {
};

/**
 * Factory method to create a new instance of a calendar subclass.<p>
 * 
 * The options parameter can be an object that contains the following
 * properties:
 * 
 * <ul>
 * <li><i>type</i> - specify the type of the calendar desired. The
 * list of valid values changes depending on which calendars are 
 * defined. When assembling your iliball.js, include those calendars 
 * you wish to use in your program or web page, and they will register 
 * themselves with this factory method. The "official", "gregorian",
 * and "julian" calendars are all included by default, as they are the
 * standard calendars for much of the world.
 * <li><i>locale</i> - some calendars vary depending on the locale.
 * For example, the "official" calendar transitions from a Julian-style
 * calendar to a Gregorian-style calendar on a different date for
 * each country, as the governments of those countries decided to
 * adopt the Gregorian calendar at different times. 
 * </ul>
 * 
 * If a locale is specified, but no type, then the calendar that is default for
 * the locale will be instantiated and returned. If neither the type nor
 * the locale are specified, then the calendar for the default locale will
 * be used. 
 * 
 * @param {Object=} options options controlling the construction of this instance, or
 * undefined to use the default options
 * @return {ilib.Cal} an instance of a calendar object of the appropriate type
 */
ilib.Cal.newInstance = function (options) {
	var locale = options && options.locale,
	type = options && options.type,
	cons;

	if (!locale) {
		locale = new ilib.Locale();	// default locale
	}
	
	if (!type) {
		var info = new ilib.LocaleInfo(locale);
		type = info.getCalendar();
	}
	
	cons = ilib.Cal._constructors[type];
	
	// pass the same options through to the constructor so the subclass
	// has the ability to do something with if it needs to
	return cons && new cons(options);
};

/* place for the subclasses to put their constructors so that the factory method
 * can find them. Do this to add your calendar after it's defined: 
 * ilib.Cal._constructors["mytype"] = ilib.Cal.MyTypeConstructor;
 */
ilib.Cal._constructors = {};

/**
 * Return an array of known calendar types that the factory method can instantiate.
 * 
 * @return {Array.<string>} an array of calendar types
 */
ilib.Cal.getCalendars = function () {
	var arr = [],
		c;
	
	for (c in ilib.Cal._constructors) {
		if (c && ilib.Cal._constructors[c]) {
			arr.push(c); // code like a pirate
		}
	}
	
	return arr;
};

ilib.Cal.prototype = {
	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	getType: function() {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @return {number} The number of months in the given year
	 */
	getNumMonths: function(year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	getMonLength: function(month, year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return true if the given year is a leap year in this calendar.
	 * The year parameter may be given as a number.
	 * 
	 * @param {number} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	isLeapYear: function(year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	}
};

/*
 * julianday.js - A Julian date object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends locale.js */

/**
 * @class
 * A Julian Day class. A Julian Day is a date based on the Julian Day count
 * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. 
 * Do not confuse it with a date in the Julian calendar, which it has very
 * little in common with. The naming is unfortunately close, and comes from history.<p>
 * 
 * Depends directive: !depends julianday.js
 * 
 * @constructor
 * @param {number} num the Julian Day expressed as a floating point number 
 */
ilib.JulianDay = function(num) {
	this.jd = num;
	this.days = Math.floor(this.jd);
	this.frac = num - this.days;
};

ilib.JulianDay.prototype = {
	/**
	 * Return the integral portion of this Julian Day instance. This corresponds to
	 * the number of days since the beginning of the epoch.
	 * 
	 * @return {number} the integral portion of this Julian Day
	 */
	getDays: function() {
		return this.days;
	},
	
	/**
	 * Set the date of this Julian Day instance.
	 * 
	 * @param {number} days the julian date expressed as a floating point number
	 */
	setDays: function(days) {
		this.days = Math.floor(days);
		this.jd = this.days + this.frac;
	},
	
	/**
	 * Return the fractional portion of this Julian Day instance. This portion 
	 * corresponds to the time of day for the instance.
	 */
	getDayFraction: function() {
		return this.frac;
	},
	
	/**
	 * Set the fractional part of the Julian Day. The fractional part represents
	 * the portion of a fully day. Julian dates start at noon, and proceed until
	 * noon of the next day. That would mean midnight is represented as a fractional
	 * part of 0.5.
	 * 
	 * @param {number} fraction The fractional part of the Julian date
	 */
	setDayFraction: function(fraction) {
		var t = Math.floor(fraction);
		this.frac = fraction - t;
		this.jd = this.days + this.frac;
	},
	
	/** 
	 * Return the Julian Day expressed as a floating point number.
	 * @return {number} the Julian Day as a number
	 */
	getDate: function () {
		return this.jd;
	},
	
	/**
	 * Set the date of this Julian Day instance.
	 * 
	 * @param {number} num the numeric Julian Day to set into this instance
	 */
	setDate: function (num) {
		this.jd = num;
	},
	
	/**
	 * Add an offset to the current date instance. The offset should be expressed in
	 * terms of Julian days. That is, each integral unit represents one day of time, and
	 * fractional part represents a fraction of a regular 24-hour day.
	 * 
	 * @param {number} offset an amount to add (or subtract) to the current result instance.
	 */
	addDate: function(offset) {
		if (typeof(offset) === 'number') {
			this.jd += offset;
			this.days = Math.floor(this.jd);
			this.frac = this.jd - this.days;
		}
	}
};

/*
 * gregorian.js - Represent a Gregorian calendar object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js util/math.js */

/**
 * @class
 * Construct a new Gregorian calendar object. This class encodes information about
 * a Gregorian calendar.<p>
 * 
 * Depends directive: !depends gregorian.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Gregorian = function() {
	this.type = "gregorian";
};

/**
 * the lengths of each month 
 * @private
 * @const
 * @type Array.<number> 
 */
ilib.Cal.Gregorian.monthLengths = [
	31,  /* Jan */
	28,  /* Feb */
	31,  /* Mar */
	30,  /* Apr */
	31,  /* May */
	30,  /* Jun */
	31,  /* Jul */
	31,  /* Aug */
	30,  /* Sep */
	31,  /* Oct */
	30,  /* Nov */
	31   /* Dec */
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 * @return {number} The number of months in the given year
 */
ilib.Cal.Gregorian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Gregorian.prototype.getMonLength = function(month, year) {
	if (month !== 2 || !this.isLeapYear(year)) {
		return ilib.Cal.Gregorian.monthLengths[month-1];
	} else {
		return 29;
	}
};

/**
 * Return true if the given year is a leap year in the Gregorian calendar.
 * The year parameter may be given as a number, or as a GregDate object.
 * @param {number|ilib.Date.GregDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Gregorian.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.getYears());
	var centuries = ilib.mod(y, 400);
	return (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Gregorian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Gregorian.prototype.newDateInstance = function (options) {
	return new ilib.Date.GregDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["gregorian"] = ilib.Cal.Gregorian;

/*
 * ratadie.js - Represent the RD date number in the calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
util/utils.js
util/math.js
julianday.js 
*/

/**
 * @class
 * Construct a new RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>cycle</i> - any integer giving the number of 60-year cycle in which the date is located.
 * If the cycle is not given but the year is, it is assumed that the year parameter is a fictitious 
 * linear count of years since the beginning of the epoch, much like other calendars. This linear
 * count is never used. If both the cycle and year are given, the year is wrapped to the range 0 
 * to 60 and treated as if it were a year in the regular 60-year cycle.
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
 * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used
 * in the Hebrew calendar. 
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends ratadie.js
 * 
 * @private
 * @constructor
 * @param {Object=} params parameters that govern the settings and behaviour of this RD date
 */
ilib.Date.RataDie = function(params) {
	if (params) {
		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date); // maybe a string initializer?
			}
			this._setTime(date.getTime());
		} else if (typeof(params.unixtime) !== 'undefined') {
			this._setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) !== 'undefined') {
			// JD time is defined to be UTC
			this._setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond || params.parts || params.cycle) {
			this._setDateComponents(params);
		} else if (typeof(params.rd) !== 'undefined') {
			this.rd = (typeof(params.rd) === 'object' && params.rd instanceof ilib.Date.RataDie) ? params.rd.rd : params.rd;
		}
	}
	
	/**
	 * @type {number} the Rata Die number of this date for this calendar type
	 */
	if (typeof(this.rd) === 'undefined') {
		var now = new Date();
		this._setTime(now.getTime());
	}
};

/**
 * @private
 * @const
 * @type {number}
 */
ilib.Date.RataDie.gregorianEpoch = 1721424.5;

ilib.Date.RataDie.prototype = {
	/**
	 * @protected
	 * @const
	 * @type {number}
	 * the difference between a zero Julian day and the zero Gregorian date. 
	 */
	epoch: ilib.Date.RataDie.gregorianEpoch,
	
	/**
	 * Set the RD of this instance according to the given unix time. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970.
	 *
	 * @protected
	 * @param {number} millis the unix time to set this date to in milliseconds 
	 */
	_setTime: function(millis) {
		// 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)
		this._setJulianDay(2440587.5 + millis / 86400000);
	},

	/**
	 * Set the date of this instance using a Julian Day.
	 * @protected
	 * @param {number} date the Julian Day to use to set this date
	 */
	_setJulianDay: function (date) {
		var jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date;
		// round to the nearest millisecond
		this.rd = ilib._roundFnc.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;
	},

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @protected
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	_onOrBefore: function(rd, dayOfWeek) {
		return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 2, 7);
	},
	
	/**
	 * Return the rd number of the particular day of the week on or before the current rd.
	 * eg. The Sunday on or before the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the rd of the day of the week
	 */
	onOrBefore: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd + offset, dayOfWeek) - offset;
	},
	
	/**
	 * Return the rd number of the particular day of the week on or before the current rd.
	 * eg. The Sunday on or before the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the reference date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the day of the week
	 */
	onOrAfter: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd+6+offset, dayOfWeek) - offset;
	},
	
	/**
	 * Return the rd number of the particular day of the week before the current rd.
	 * eg. The Sunday before the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the reference date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the day of the week
	 */
	before: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd-1+offset, dayOfWeek) - offset;
	},
	
	/**
	 * Return the rd number of the particular day of the week after the current rd.
	 * eg. The Sunday after the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the reference date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the day of the week
	 */
	after: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd+7+offset, dayOfWeek) - offset;
	},

	/**
	 * Return the unix time equivalent to this Gregorian date instance. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only
	 * returns a valid number for dates between midnight, Jan 1, 1970 and  
	 * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
	 * encodes a date outside of that range, this method will return -1.
	 * 
	 * @return {number} a number giving the unix time, or -1 if the date is outside the
	 * valid unix time range
	 */
	getTime: function() {
		// earlier than Jan 1, 1970
		// or later than Jan 19, 2038 at 3:14:07am
		var jd = this.getJulianDay();
		if (jd < 2440587.5 || jd > 2465442.634803241) { 
			return -1;
		}
	
		// avoid the rounding errors in the floating point math by only using
		// the whole days from the rd, and then calculating the milliseconds directly
		return Math.round((jd - 2440587.5) * 86400000);
	},

	/**
	 * Return the extended unix time equivalent to this Gregorian date instance. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970 UTC. Traditionally unix time
	 * (or the type "time_t" in C/C++) is only encoded with a unsigned 32 bit integer, and thus 
	 * runs out on Jan 19, 2038. However, most Javascript engines encode numbers well above 
	 * 32 bits and the Date object allows you to encode up to 100 million days worth of time 
	 * after Jan 1, 1970, and even more interestingly 100 million days worth of time before
	 * Jan 1, 1970 as well. This method returns the number of milliseconds in that extended 
	 * range. If this instance encodes a date outside of that range, this method will return
	 * NaN.
	 * 
	 * @return {number} a number giving the extended unix time, or NaN if the date is outside 
	 * the valid extended unix time range
	 */
	getTimeExtended: function() {
		var jd = this.getJulianDay();
		
		// test if earlier than Jan 1, 1970 - 100 million days
		// or later than Jan 1, 1970 + 100 million days
		if (jd < -97559412.5 || jd > 102440587.5) { 
			return NaN;
		}
	
		// avoid the rounding errors in the floating point math by only using
		// the whole days from the rd, and then calculating the milliseconds directly
		return Math.round((jd - 2440587.5) * 86400000);
	},

	/**
	 * Return the Julian Day equivalent to this calendar date as a number.
	 * This returns the julian day in UTC.
	 * 
	 * @return {number} the julian date equivalent of this date
	 */
	getJulianDay: function() {
		return this.rd + this.epoch;
	},

	/**
	 * Return the Rata Die (fixed day) number of this RD date.
	 * 
	 * @return {number} the rd date as a number
	 */
	getRataDie: function() {
		return this.rd;
	}
};

/*
 * gregratadie.js - Represent the RD date number in the Gregorian calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js
calendar/gregorian.js
calendar/ratadie.js
util/utils.js
util/math.js
julianday.js 
*/

/**
 * @class
 * Construct a new Gregorian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Gregorian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends gregratadie.js
 * 
 * @private
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date
 */
ilib.Date.GregRataDie = function(params) {
	this.cal = params && params.cal || new ilib.Cal.Gregorian();
	/** @type {number|undefined} */
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.GregRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.GregRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.GregRataDie.prototype.constructor = ilib.Date.GregRataDie;

/**
 * the cumulative lengths of each month, for a non-leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.GregRataDie.cumMonthLengths = [
    0,   /* Jan */
	31,  /* Feb */
	59,  /* Mar */
	90,  /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365
];

/**
 * the cumulative lengths of each month, for a leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.GregRataDie.cumMonthLengthsLeap = [
	0,   /* Jan */
	31,  /* Feb */
	60,  /* Mar */
	91,  /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366
];

/**
 * Calculate the Rata Die (fixed day) number of the given date.
 * 
 * @private
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.GregRataDie.prototype._setDateComponents = function(date) {
	var year = parseInt(date.year, 10) || 0;
	var month = parseInt(date.month, 10) || 1;
	var day = parseInt(date.day, 10) || 1;
	var hour = parseInt(date.hour, 10) || 0;
	var minute = parseInt(date.minute, 10) || 0;
	var second = parseInt(date.second, 10) || 0;
	var millisecond = parseInt(date.millisecond, 10) || 0;

	var years = 365 * (year - 1) +
		Math.floor((year-1)/4) -
		Math.floor((year-1)/100) +
		Math.floor((year-1)/400);
	
	var dayInYear = (month > 1 ? ilib.Date.GregRataDie.cumMonthLengths[month-1] : 0) +
		day +
		(ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);
	var rdtime = (hour * 3600000 +
		minute * 60000 +
		second * 1000 +
		millisecond) / 
		86400000; 
	/*
	debug("getRataDie: converting " +  JSON.stringify(this));
	debug("getRataDie: year is " +  years);
	debug("getRataDie: day in year is " +  dayInYear);
	debug("getRataDie: rdtime is " +  rdtime);
	debug("getRataDie: rd is " +  (years + dayInYear + rdtime));
	*/
	
	/**
	 * @type {number|undefined} the RD number of this Gregorian date
	 */
	this.rd = years + dayInYear + rdtime;
};

/**
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @private
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.GregRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek, 7);
};

/*
 * timezone.js - Definition of a time zone class
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js
localeinfo.js
util/utils.js
util/math.js
calendar/gregratadie.js
*/

// !data localeinfo zoneinfo

/**
 * @class
 * Create a time zone instance. 
 * 
 * This class reports and transforms
 * information about particular time zones.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>id</i> - The id of the requested time zone such as "Europe/London" or 
 * "America/Los_Angeles". These are taken from the IANA time zone database. (See
 * http://www.iana.org/time-zones for more information.) <p>
 * 
 * There is one special 
 * time zone that is not taken from the IANA database called simply "local". In
 * this case, this class will attempt to discover the current time zone and
 * daylight savings time settings by calling standard Javascript classes to 
 * determine the offsets from UTC. 
 * 
 * <li><i>locale</i> - The locale for this time zone.
 * 
 * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in
 * number of minutes (negative is west, positive is east).
 * 
 * <li><i>onLoad</i> - a callback function to call when the data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the data is loaded, the onLoad function is called with the current 
 * instance as a parameter. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * There is currently no way in the ECMAscript
 * standard to tell which exact time zone is currently in use. Choosing the
 * id "locale" or specifying an explicit offset will not give a specific time zone, 
 * as it is impossible to tell with certainty which zone the offsets 
 * match.<p>
 * 
 * When the id "local" is given or the offset option is specified, this class will
 * have the following behaviours:
 * <ul>
 * <li>The display name will always be given as the RFC822 style, no matter what
 * style is requested
 * <li>The id will also be returned as the RFC822 style display name
 * <li>When the offset is explicitly given, this class will assume the time zone 
 * does not support daylight savings time, and the offsets will be calculated 
 * the same way year round.
 * <li>When the offset is explicitly given, the inDaylightSavings() method will 
 * always return false.
 * <li>When the id "local" is given, this class will attempt to determine the 
 * daylight savings time settings by examining the offset from UTC on Jan 1
 * and June 1 of the current year. If they are different, this class assumes
 * that the local time zone uses DST. When the offset for a particular date is
 * requested, it will use the built-in Javascript support to determine the 
 * offset for that date.
 * </ul> 
 * 
 * If a more specific time zone is 
 * needed with display names and known start/stop times for DST, use the "id" 
 * property instead to specify the time zone exactly. You can perhaps ask the
 * user which time zone they prefer so that your app does not need to guess.<p>
 * 
 * If the id and the offset are both not given, the default time zone for the 
 * locale is retrieved from
 * the locale info. If the locale is not specified, the default locale for the
 * library is used.<p>
 * 
 * Because this class was designed for use in web sites, and the vast majority
 * of dates and times being formatted are recent date/times, this class is simplified
 * by not implementing historical time zones. That is, when governments change the 
 * time zone rules for a particular zone, only the latest such rule is implemented 
 * in this class. That means that determining the offset for a date that is prior 
 * to the last change may give the wrong result. Historical time zone calculations
 * may be implemented in a later version of iLib if there is enough demand for it,
 * but it would entail a much larger set of time zone data that would have to be
 * loaded.  
 * 
 * Depends directive: !depends timezone.js
 * 
 * @constructor
 * @param {Object} options Options guiding the construction of this time zone instance
 */
ilib.TimeZone = function(options) {
	this.sync = true;
	this.locale = new ilib.Locale();
	this.isLocal = false;
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.id) {
			var id = options.id.toString();
			if (id === 'local') {
				this.isLocal = true;
				
				// use standard Javascript Date to figure out the time zone offsets
				var now = new Date(), 
					jan1 = new Date(now.getFullYear(), 0, 1),  // months in std JS Date object are 0-based
					jun1 = new Date(now.getFullYear(), 5, 1);
				
				// Javascript's method returns the offset backwards, so we have to
				// take the negative to get the correct offset
				this.offsetJan1 = -jan1.getTimezoneOffset();
				this.offsetJun1 = -jun1.getTimezoneOffset();
				// the offset of the standard time for the time zone is always the one that is closest 
				// to negative infinity of the two, no matter whether you are in the northern or southern 
				// hemisphere, east or west
				this.offset = Math.min(this.offsetJan1, this.offsetJun1);
			}
			this.id = id;
		} else if (options.offset) {
			this.offset = (typeof(options.offset) === 'string') ? parseInt(options.offset, 10) : options.offset;
			this.id = this.getDisplayName(undefined, undefined);
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = !!options.sync;
		}
		
		this.loadParams = options.loadParams;
		this.onLoad = options.onLoad;
	}

	//console.log("timezone: locale is " + this.locale);
	
	if (!this.id) {
		new ilib.LocaleInfo(this.locale, {
			sync: this.sync,
			onLoad: ilib.bind(this, function (li) {
				this.id = li.getTimeZone() || "Etc/UTC";
				this._loadtzdata();
			})
		});
	} else {
		this._loadtzdata();
	}

	//console.log("localeinfo is: " + JSON.stringify(this.locinfo));
	//console.log("id is: " + JSON.stringify(this.id));
};

/*
 * Explanation of the compressed time zone info properties.
 * {
 *     "o": "8:0",      // offset from UTC
 *     "f": "W{c}T",    // standard abbreviation. For time zones that observe DST, the {c} replacement is replaced with the 
 *                      // letter in the e.c or s.c properties below 
 *     "e": {           // info about the end of DST
 *         "j": 78322.5 // Julian day when the transition happens. Either specify the "j" property or all of the "m", "r", and 
 *                      // "t" properties, but not both sets.
 *         "m": 3,      // month that it ends
 *         "r": "l0",   // rule for the day it ends "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7". 
 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
 *         "t": "2:0",  // time of day that the DST turns off, hours:minutes
 *         "c": "S"     // character to replace into the abbreviation for standard time 
 *     },
 *     "s": {           // info about the start of DST
 *         "j": 78189.5 // Julian day when the transition happens. Either specify the "j" property or all of the "m", "r", and 
 *                      // "t" properties, but not both sets.
 *         "m": 10,     // month that it starts
 *         "r": "l0",   // rule for the day it starts "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7".
 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
 *         "t": "2:0",  // time of day that the DST turns on, hours:minutes
 *         "v": "1:0",  // amount of time saved in hours:minutes
 *         "c": "D"     // character to replace into the abbreviation for daylight time
 *     },
 *     "c": "AU",       // ISO code for the country that contains this time zone
 *     "n": "W. Australia {c} Time"
 *                      // long English name of the zone. The {c} replacement is for the word "Standard" or "Daylight" as appropriate
 * }
 */
ilib.TimeZone.prototype._loadtzdata = function () {
	// console.log("id is: " + JSON.stringify(this.id));
	// console.log("zoneinfo is: " + JSON.stringify(ilib.data.zoneinfo[this.id]));
	if (!ilib.data.zoneinfo[this.id] && typeof(this.offset) === 'undefined') {
		ilib.loadData({
			object: ilib.TimeZone, 
			nonlocale: true,	// locale independent 
			name: "zoneinfo/" + this.id + ".json", 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (tzdata) {
				if (tzdata && !ilib.isEmpty(tzdata)) {
					ilib.data.zoneinfo[this.id] = tzdata;
				}
				this._initZone();
			})
		});
	} else {
		this._initZone();
	}
};

ilib.TimeZone.prototype._initZone = function() {
	/** 
	 * @private
	 * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}} 
	 */
	this.zone = ilib.data.zoneinfo[this.id];
	if (!this.zone && typeof(this.offset) === 'undefined') {
		this.id = "Etc/UTC";
		this.zone = ilib.data.zoneinfo[this.id];
	}
	
	this._calcDSTSavings();
	
	if (typeof(this.offset) === 'undefined' && this.zone.o) {
		var offsetParts = this._offsetStringToObj(this.zone.o);
		/**
		 * @private
		 * @type {number} raw offset from UTC without DST, in minutes
		 */
		this.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * ilib.signum(offsetParts.h || 0);
	}
	
	if (this.onLoad && typeof(this.onLoad) === 'function') {
		this.onLoad(this);
	}
};

ilib.data.timezone = {};

/**
 * Return an array of available zone ids that the constructor knows about.
 * The country parameter is optional. If it is not given, all time zones will
 * be returned. If it specifies a country code, then only time zones for that
 * country will be returned.
 * 
 * @param {string} country country code for which time zones are being sought
 * @return {Array.<string>} an array of zone id strings
 */
ilib.TimeZone.getAvailableIds = function (country) {
	var tz, ids = [];
	
	if (!ilib.data.timezone.list) {
		ilib.data.timezone.list = [];
		if (ilib._load instanceof ilib.Loader) {
			var hash = ilib._load.listAvailableFiles();
			for (var dir in hash) {
				var files = hash[dir];
				if (typeof(files) === 'object' && files instanceof Array) {
					files.forEach(function (filename) {
						if (filename && filename.match(/^zoneinfo/)) {
							ilib.data.timezone.list.push(filename.replace(/^zoneinfo\//, "").replace(/\.json$/, ""));
						}
					});
				}
			}
		} else {
			for (tz in ilib.data.zoneinfo) {
				if (ilib.data.zoneinfo[tz]) {
					ilib.data.timezone.list.push(tz);
				}
			}
		}
	}
	
	if (!country) {
		// special zone meaning "the local time zone according to the JS engine we are running upon"
		ids.push("local");
		for (tz in ilib.data.timezone.list) {
			if (ilib.data.timezone.list[tz]) {
				ids.push(ilib.data.timezone.list[tz]);
			}
		}
	} else {
		if (!ilib.data.zoneinfo.zonetab) {
			ilib.loadData({
				object: ilib.TimeZone, 
				nonlocale: true,	// locale independent 
				name: "zoneinfo/zonetab.json", 
				sync: true, 
				callback: ilib.bind(this, function (tzdata) {
					if (tzdata) {
						ilib.data.zoneinfo.zonetab = tzdata;
					}
				})
			});
		}
		ids = ilib.data.zoneinfo.zonetab[country];
	}
	
	return ids;
};

/**
 * Return the id used to uniquely identify this time zone.
 * @return {string} a unique id for this time zone
 */
ilib.TimeZone.prototype.getId = function () {
	return this.id.toString();
};

/**
 * Return the abbreviation that is used for the current time zone on the given date.
 * The date may be in DST or during standard time, and many zone names have different
 * abbreviations depending on whether or not the date is falls within DST.<p>
 * 
 * There are two styles that are supported:
 * 
 * <ol>
 * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such 
 * as "CET" for "Central European Time" or "PDT" for "Pacific Daylight Time"
 * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more
 * explicitly what the offset is from UTC
 * <li>long - returns the long name of the zone in English
 * </ol>
 *  
 * @param {ilib.Date=} date a date to determine if it is in daylight time or standard time
 * @param {string=} style one of "standard" or "rfc822". Default if not specified is "standard"
 * @return {string} the name of the time zone, abbreviated according to the style 
 */
ilib.TimeZone.prototype.getDisplayName = function (date, style) {
	style = (this.isLocal || typeof(this.zone) === 'undefined') ? "rfc822" : (style || "standard");
	switch (style) {
		default:
		case 'standard':
			if (this.zone.f && this.zone.f !== "zzz") {
				if (this.zone.f.indexOf("{c}") !== -1) {
					var letter = "";
					letter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c; 
					var temp = new ilib.String(this.zone.f);
					return temp.format({c: letter || ""});
				}
				return this.zone.f;
			} 
			var temp = "GMT" + this.zone.o;
			if (this.inDaylightTime(date)) {
				temp += "+" + this.zone.s.v;
			}
			return temp;
			break;
		case 'rfc822':
			var offset = this.getOffset(date), // includes the DST if applicable
				ret = "UTC",
				hour = offset.h || 0,
				minute = offset.m || 0;
			
			if (hour !== 0) {
				ret += (hour > 0) ? "+" : "-";
				if (Math.abs(hour) < 10) {
					ret += "0";
				}
				ret += (hour < 0) ? -hour : hour;
				if (minute < 10) {
					ret += "0";
				}
				ret += minute;
			}
			return ret; 
		case 'long':
			if (this.zone.n) {
				if (this.zone.n.indexOf("{c}") !== -1) {
					var str = this.inDaylightTime(date) ? "Daylight" : "Standard"; 
					var temp = new ilib.String(this.zone.n);
					return temp.format({c: str || ""});
				}
				return this.zone.n;
			}
			var temp = "GMT" + this.zone.o;
			if (this.inDaylightTime(date)) {
				temp += "+" + this.zone.s.v;
			}
			return temp;
			break;
	}
};

/**
 * Convert the offset string to an object with an h, m, and possibly s property
 * to indicate the hours, minutes, and seconds.
 * 
 * @private
 * @param {string} str the offset string to convert to an object
 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at 
 * the given date/time, in hours, minutes, and seconds
 */
ilib.TimeZone.prototype._offsetStringToObj = function (str) {
	var offsetParts = (typeof(str) === 'string') ? str.split(":") : [],
		ret = {h:0},
		temp;
	
	if (offsetParts.length > 0) {
		ret.h = parseInt(offsetParts[0], 10);
		if (offsetParts.length > 1) {
			temp = parseInt(offsetParts[1], 10);
			if (temp) {
				ret.m = temp;
			}
			if (offsetParts.length > 2) {
				temp = parseInt(offsetParts[2], 10);
				if (temp) {
					ret.s = temp;
				}
			}
		}
	}

	return ret;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving.
 * @param {ilib.Date=} date the date for which the offset is needed
 * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at 
 * the given date/time, in hours, minutes, and seconds  
 */
ilib.TimeZone.prototype.getOffset = function (date) {
	if (!date) {
		return this.getRawOffset();
	}
	var offset = this.getOffsetMillis(date)/60000;
	
	var hours = ilib._roundFnc.down(offset/60),
		minutes = Math.abs(offset) - Math.abs(hours)*60;

	var ret = {
		h: hours
	};
	if (minutes != 0) {
		ret.m = minutes;
	}
	return ret;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time expressed in 
 * milliseconds. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving. Negative numbers indicate offsets west
 * of UTC and conversely, positive numbers indicate offset east of UTC.
 *  
 * @param {ilib.Date=} date the date for which the offset is needed, or null for the
 * present date
 * @return {number} the number of milliseconds of offset from UTC that the given date is
 */
ilib.TimeZone.prototype.getOffsetMillis = function (date) {
	var ret;
	
	// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
	// well if we are in the overlap time at the end of DST
	if (this.isLocal && typeof(date.dst) === 'undefined') {
		var d = (!date) ? new Date() : new Date(date.getTime());
		return -d.getTimezoneOffset() * 60000;
	} 
	
	ret = this.offset;
	
	if (date && this.inDaylightTime(date)) {
		ret += this.dstSavings;
	}
	
	return ret * 60000;
};

/**
 * Return the offset in milliseconds when the date has an RD number in wall
 * time rather than in UTC time.
 * @protected
 * @param date the date to check in wall time
 * @returns {number} the number of milliseconds of offset from UTC that the given date is
 */
ilib.TimeZone.prototype._getOffsetMillisWallTime = function (date) {
	var ret;
	
	ret = this.offset;
	
	if (date && this.inDaylightTime(date, true)) {
		ret += this.dstSavings;
	}
	
	return ret * 60000;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving.
 * @param {ilib.Date=} date the date for which the offset is needed
 * @return {string} the offset for the zone at the given date/time as a string in the 
 * format "h:m:s" 
 */
ilib.TimeZone.prototype.getOffsetStr = function (date) {
	var offset = this.getOffset(date),
		ret;
	
	ret = offset.h;
	if (typeof(offset.m) !== 'undefined') {
		ret += ":" + offset.m;
		if (typeof(offset.s) !== 'undefined') {
			ret += ":" + offset.s;
		}
	} else {
		ret += ":0";
	}
	
	return ret;
};

/**
 * Gets the offset from UTC for this time zone.
 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from 
 * UTC for this time zone, in hours, minutes, and seconds 
 */
ilib.TimeZone.prototype.getRawOffset = function () {
	var hours = ilib._roundFnc.down(this.offset/60),
		minutes = Math.abs(this.offset) - Math.abs(hours)*60;
	
	var ret = {
		h: hours
	};
	if (minutes != 0) {
		ret.m = minutes;
	}
	return ret;
};

/**
 * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers
 * indicate zones west of UTC, and positive numbers indicate zones east of UTC.
 * 
 * @return {number} an number giving the offset from 
 * UTC for this time zone in milliseconds 
 */
ilib.TimeZone.prototype.getRawOffsetMillis = function () {
	return this.offset * 60000;
};

/**
 * Gets the offset from UTC for this time zone without DST savings.
 * @return {string} the offset from UTC for this time zone, in the format "h:m:s" 
 */
ilib.TimeZone.prototype.getRawOffsetStr = function () {
	var off = this.getRawOffset();
	return off.h + ":" + (off.m || "0");
};

/**
 * Return the amount of time in hours:minutes that the clock is advanced during
 * daylight savings time.
 * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the 
 * clock advances for DST in hours, minutes, and seconds 
 */
ilib.TimeZone.prototype.getDSTSavings = function () {
	if (this.isLocal) {
		// take the absolute because the difference in the offsets may be positive or
		// negative, depending on the hemisphere
		var savings = Math.abs(this.offsetJan1 - this.offsetJun1);
		var hours = ilib._roundFnc.down(savings/60),
			minutes = savings - hours*60;
		return {
			h: hours,
			m: minutes
		};
	} else if (this.zone && this.zone.s) {
		return this._offsetStringToObj(this.zone.s.v);	// this.zone.start.savings
	}
	return {h:0};
};

/**
 * Return the amount of time in hours:minutes that the clock is advanced during
 * daylight savings time.
 * @return {string} the amount of time that the clock advances for DST in the
 * format "h:m:s"
 */
ilib.TimeZone.prototype.getDSTSavingsStr = function () {
	if (this.isLocal) {
		var savings = this.getDSTSavings();
		return savings.h + ":" + savings.m;
	} else if (typeof(this.offset) !== 'undefined' && this.zone && this.zone.s) {
		return this.zone.s.v;	// this.zone.start.savings
	}
	return "0:0";
};

/**
 * return the rd of the start of DST transition for the given year
 * @protected
 * @param {Object} rule set of rules
 * @param {number} year year to check
 * @return {number} the rd of the start of DST for the year
 */
ilib.TimeZone.prototype._calcRuleStart = function (rule, year) {
	var type = "=", 
		weekday = 0, 
		day, 
		refDay, 
		cal, 
		hour = 0, 
		minute = 0, 
		second = 0,
		time,
		i;
	
	if (typeof(rule.j) !== 'undefined') {
		refDay = new ilib.Date.GregRataDie({
			julianday: rule.j
		});
	} else {
		if (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {
			cal = ilib.Cal.newInstance({type: "gregorian"});
			type = rule.r.charAt(0);
			weekday = parseInt(rule.r.substring(1), 10);
			day = (type === 'l') ? cal.getMonLength(rule.m, year) : 1;
			//console.log("_calcRuleStart: Calculating the " + 
			//		(rule.r.charAt(0) == 'f' ? "first " : "last ") + weekday + 
			//		" of month " + rule.m);
		} else {
			i = rule.r.indexOf('<');
			if (i == -1) {
				i = rule.r.indexOf('>');
			}
			
			if (i != -1) {
				type = rule.r.charAt(i);
				weekday = parseInt(rule.r.substring(0, i), 10);
				day = parseInt(rule.r.substring(i+1), 10); 
				//console.log("_calcRuleStart: Calculating the " + weekday + 
				//		type + day + " of month " + rule.m);
			} else {
				day = parseInt(rule.r, 10);
				//console.log("_calcRuleStart: Calculating the " + day + " of month " + rule.m);
			}
		}
	
		if (rule.t) {
			time = rule.t.split(":");
			hour = parseInt(time[0], 10);
			if (time.length > 1) {
				minute = parseInt(time[1], 10);
				if (time.length > 2) {
					second = parseInt(time[2], 10);
				}
			}
		}
		//console.log("calculating rd of " + year + "/" + rule.m + "/" + day);
		refDay = new ilib.Date.GregRataDie({
			year: year, 
			month: rule.m, 
			day: day, 
			hour: hour, 
			minute: minute, 
			second: second
		});
	}
	//console.log("refDay is " + JSON.stringify(refDay));
	var d = refDay.getRataDie();
	
	switch (type) {
		case 'l':
		case '<':
			//console.log("returning " + refDay.onOrBefore(rd, weekday));
			d = refDay.onOrBefore(weekday); 
			break;
		case 'f':
		case '>':
			//console.log("returning " + refDay.onOrAfterRd(rd, weekday));
			d = refDay.onOrAfter(weekday); 
			break;
	}
	return d;
};

/**
 * @private
 */
ilib.TimeZone.prototype._calcDSTSavings = function () {
	var saveParts = this.getDSTSavings();
	
	/**
	 * @private
	 * @type {number} savings in minutes when DST is in effect 
	 */
	this.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * ilib.signum(saveParts.h || 0);
};

/**
 * @private
 */
ilib.TimeZone.prototype._getDSTStartRule = function (year) {
	// TODO: update this when historic/future zones are supported
	return this.zone.s;
};

/**
 * @private
 */
ilib.TimeZone.prototype._getDSTEndRule = function (year) {
	// TODO: update this when historic/future zones are supported
	return this.zone.e;
};

/**
 * Returns whether or not the given date is in daylight saving time for the current
 * zone. Note that daylight savings time is observed for the summer. Because
 * the seasons are reversed, daylight savings time in the southern hemisphere usually
 * runs from the end of the year through New Years into the first few months of the
 * next year. This method will correctly calculate the start and end of DST for any
 * location.
 * 
 * @param {ilib.Date=} date a date for which the info about daylight time is being sought,
 * or undefined to tell whether we are currently in daylight savings time
 * @param {boolean=} wallTime if true, then the given date is in wall time. If false or
 * undefined, it is in the usual UTC time.
 * @return {boolean} true if the given date is in DST for the current zone, and false
 * otherwise.
 */
ilib.TimeZone.prototype.inDaylightTime = function (date, wallTime) {
	var rd, startRd, endRd;

	if (this.isLocal) {
		// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
		// well if we are in the overlap time at the end of DST, so we have to work around that
		// problem by adding in the savings ourselves
		var offset = 0;
		if (typeof(date.dst) !== 'undefined' && !date.dst) {
			offset = this.dstSavings * 60000;
		}
		
		var d = new Date(date ? date.getTimeExtended() + offset: undefined);
		// the DST offset is always the one that is closest to positive infinity, no matter 
		// if you are in the northern or southern hemisphere, east or west
		var dst = Math.max(this.offsetJan1, this.offsetJun1);
		return (-d.getTimezoneOffset() === dst);
	}
	
	if (!date) {
		date = new ilib.Date.GregDate(); // right now
	} else if (!(date instanceof ilib.Date.GregDate)) {
		// convert to Gregorian so that we can tell if it is in DST or not
		date = new ilib.Date.GregDate({
			julianday: date.getJulianDay(),
			timezone: date.getTimeZone()
		});
	}
	
	// if we aren't using daylight time in this zone for the given year, then we are 
	// not in daylight time
	if (!this.useDaylightTime(date.year)) {
		return false;
	}
	
	// this should be a Gregorian RD number now, in UTC
	rd = date.rd.getRataDie();
	
	// these calculate the start/end in local wall time
	var startrule = this._getDSTStartRule(date.year);
	var endrule = this._getDSTEndRule(date.year);
	startRd = this._calcRuleStart(startrule, date.year);
	endRd = this._calcRuleStart(endrule, date.year);
	
	if (wallTime) {
		// rd is in wall time, so we have to make sure to skip the missing time
		// at the start of DST when standard time ends and daylight time begins
		startRd += this.dstSavings/1440;
	} else {
		// rd is in UTC, so we have to convert the start/end to UTC time so 
		// that they can be compared directly to the UTC rd number of the date
		
		// when DST starts, time is standard time already, so we only have
		// to subtract the offset to get to UTC and not worry about the DST savings
		startRd -= this.offset/1440;  
		
		// when DST ends, time is in daylight time already, so we have to
		// subtract the DST savings to get back to standard time, then the
		// offset to get to UTC
		endRd -= (this.offset + this.dstSavings)/1440;
	}
	
	// In the northern hemisphere, the start comes first some time in spring (Feb-Apr), 
	// then the end some time in the fall (Sept-Nov). In the southern
	// hemisphere, it is the other way around because the seasons are reversed. Standard
	// time is still in the winter, but the winter months are May-Aug, and daylight 
	// savings time usually starts Aug-Oct of one year and runs through Mar-May of the 
	// next year.
	if (rd < endRd && endRd - rd <= this.dstSavings/1440 && typeof(date.dst) === 'boolean') {
		// take care of the magic overlap time at the end of DST
		return date.dst;
	}
	if (startRd < endRd) {
		// northern hemisphere
		return (rd >= startRd && rd < endRd) ? true : false;
	} 
	// southern hemisphere
	return (rd >= startRd || rd < endRd) ? true : false;
};

/**
 * Returns true if this time zone switches to daylight savings time at some point
 * in the year, and false otherwise.
 * @param {number} year Whether or not the time zone uses daylight time in the given year. If
 * this parameter is not given, the current year is assumed.
 * @return {boolean} true if the time zone uses daylight savings time
 */
ilib.TimeZone.prototype.useDaylightTime = function (year) {
	
	// this zone uses daylight savings time iff there is a rule defining when to start
	// and when to stop the DST
	return (this.isLocal && this.offsetJan1 !== this.offsetJun1) ||
		(typeof(this.zone) !== 'undefined' && 
		typeof(this.zone.s) !== 'undefined' && 
		typeof(this.zone.e) !== 'undefined');
};

/**
 * Returns the ISO 3166 code of the country for which this time zone is defined.
 * @return {string} the ISO 3166 code of the country for this zone
 */
ilib.TimeZone.prototype.getCountry = function () {
	return this.zone.c;
};
/*
 * resources.js - Resource bundle definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js localeinfo.js strings.js util/utils.js

// !data pseudomap

/**
 * @class
 * Create a new resource bundle instance. The resource bundle loads strings
 * appropriate for a particular locale and provides them via the getString 
 * method.<p>
 * 
 * The options object may contain any (or none) of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - The locale of the strings to load. If not specified, the default
 * locale is the the default for the web page or app in which the bundle is 
 * being loaded.
 * 
 * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default
 * base name is "resources".
 * 
 * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are 
 * "xml", "html", "text", or "raw". The default is "text". If the type is "xml" or "html",
 * then XML/HTML entities and tags are not pseudo-translated. During a real translation, 
 * HTML character entities are translated to their corresponding characters in a source
 * string before looking that string up in the translations. Also, the characters "<", ">",
 * and "&" are converted to entities again in the output, but characters are left as they
 * are. If the type is "xml", "html", or "text" types, then the replacement parameter names
 * are not pseudo-translated as well so that the output can be used for formatting with 
 * the ilib.String class. If the type is raw, all characters are pseudo-translated, 
 * including replacement parameters as well as XML/HTML tags and entities.
 * 
 * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to 
 * automatically lengthen the string to simulate "long" languages such as German
 * or French. This is a boolean value. Default is false.
 * 
 * <li><i>missing</i> - what to do when a resource is missing. The choices are:
 * <ul>
 *   <li><i>source</i> - return the source string unchanged
 *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the
 *   script of the locale if the mapping is available, or just the default Latin 
 *   pseudo-translation if not
 *   <li><i>empty</i> - return the empty string 
 * </ul>
 * The default behaviour is the same as before, which is to return the source string
 * unchanged.
 * 
 * <li><i>onLoad</i> - a callback function to call when the resources are fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * The locale option may be given as a locale spec string or as an 
 * ilib.Locale object. If the locale option is not specified, then strings for
 * the default locale will be loaded.<p> 
 * 
 * The name option can be used to put groups of strings together in a
 * single bundle. The strings will then appear together in a JS object in
 * a JS file that can be included before the ilib.<p>
 * 
 * A resource bundle with a particular name is actually a set of bundles
 * that are each specific to a language, a language plus a region, etc. 
 * All bundles with the same base name should
 * contain the same set of source strings, but with different translations for 
 * the given locale. The user of the bundle does not need to be aware of 
 * the locale of the bundle, as long as it contains values for the strings 
 * it needs.<p>
 * 
 * Strings in bundles for a particular locale are inherited from parent bundles
 * that are more generic. In general, the hierarchy is as follows (from 
 * least locale-specific to most locale-specific):
 * 
 * <ol>
 * <li> language
 * <li> region
 * <li> language_script
 * <li> language_region
 * <li> region_variant
 * <li> language_script_region
 * <li> language_region_variant
 * <li> language_script_region_variant
 * </ol>
 * 
 * That is, if the translation for a string does not exist in the current
 * locale, the more-generic parent locale is searched for the string. In the
 * worst case scenario, the string is not found in the base locale's strings. 
 * In this case, the missing option guides this class on what to do. If
 * the missing option is "source", then the original source is returned as 
 * the translation. If it is "empty", the empty string is returned. If it
 * is "pseudo", then the pseudo-translated string that is appropriate for
 * the default script of the locale is returned.<p> 
 * 
 * This allows developers to create code with new or changed strings in it and check in that
 * code without waiting for the translations to be done first. The translated
 * version of the app or web site will still function properly, but will show 
 * a spurious untranslated string here and there until the translations are 
 * done and also checked in.<p>   
 *  
 * The base is whatever language your developers use to code in. For
 * a German web site, strings in the source code may be written in German 
 * for example. Often this base is English, as many web sites are coded in
 * English, but that is not required.<p>
 * 
 * The strings can be extracted with the ilib localization tool (which will be
 * shipped at some future time.) Once the strings
 * have been translated, the set of translated files can be generated with the
 * same tool. The output from the tool can be used as input to the ResBundle
 * object. It is up to the web page or app to make sure the JS file that defines
 * the bundle is included before creating the ResBundle instance.<p>
 * 
 * A special locale "zxx-XX" is used as the pseudo-translation locale because
 * zxx means "no linguistic information" in the ISO 639 standard, and the region 
 * code XX is defined to be user-defined in the ISO 3166 standard. 
 * Pseudo-translation is a locale where the translations are generated on
 * the fly based on the contents of the source string. Characters in the source 
 * string are replaced with other characters and returned. 
 * 
 * Example. If the source string is:
 * 
 * <pre>
 * "This is a string"
 * </pre>
 * 
 * then the pseudo-translated version might look something like this: 
 * 
 * <pre>
 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä"
 * </pre>
 * <p>
 * 
 * Pseudo-translation can be used to test that your app or web site is translatable
 * before an actual translation has happened. These bugs can then be fixed 
 * before the translation starts, avoiding an explosion of bugs later when
 * each language's tester registers the same bug complaining that the same 
 * string is not translated. When pseudo-localizing with
 * the Latin script, this allows the strings to be readable in the UI in the 
 * source language (if somewhat funky-looking), 
 * so that a tester can easily verify that the string is properly externalized 
 * and loaded from a resource bundle without the need to be able to read a
 * foreign language.<p> 
 * 
 * If one of a list of script tags is given in the pseudo-locale specifier, then the
 * pseudo-localization can map characters to very rough transliterations of
 * characters in the given script. For example, zxx-Hebr-XX maps strings to
 * Hebrew characters, which can be used to test your UI in a right-to-left
 * language to catch bidi bugs before a translation is done. Currently, the
 * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),
 * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly
 * specified in the locale spec, or if the script is not supported,
 * then the default mapping maps Latin base characters to accented versions of
 * those Latin characters as in the example above.
 *  
 * When the "lengthen" property is set to true in the options, the 
 * pseudotranslation code will add digits to the end of the string to simulate
 * the lengthening that occurs when translating to other languages. The above 
 * example will come out like this:
 * 
 * <pre>
 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä76543210"
 * </pre>
 * 
 * The string is lengthened according to the length of the source string. If
 * the source string is less than 20 characters long, the string is lengthened 
 * by 50%. If the source string is 20-40 
 * characters long, the string is lengthened by 33%. If te string is greater
 * than 40 characters long, the string is lengthened by 20%.<p>
 * 
 * The pseudotranslation always ends a string with the digit "0". If you do
 * not see the digit "0" in the UI for your app, you know that truncation
 * has occurred, and the number you see at the end of the string tells you 
 * how many characters were truncated.<p>
 * 
 * Depends directive: !depends resources.js
 * 
 * @constructor
 * @param {?Object} options Options controlling how the bundle is created
 */
ilib.ResBundle = function (options) {
	var lookupLocale, spec;
	
	this.locale = new ilib.Locale();	// use the default locale
	this.baseName = "strings";
	this.type = "text";
	this.loadParams = {};
	this.missing = "source";
	this.sync = true;
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? 
					new ilib.Locale(options.locale) :
					options.locale;
		}
		if (options.name) {
			this.baseName = options.name;
		}
		if (options.type) {
			this.type = options.type;
		}
		this.lengthen = options.lengthen || false;
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			this.loadParams = options.loadParams;
		}
		if (typeof(options.missing) !== 'undefined') {
			if (options.missing === "pseudo" || options.missing === "empty") {
				this.missing = options.missing;
			}
		}
	}
	
	this.map = {};

	if (!ilib.ResBundle[this.baseName]) {
		ilib.ResBundle[this.baseName] = {};
	}

	lookupLocale = this.locale.isPseudo() ? new ilib.Locale("en-US") : this.locale;

	ilib.loadData({
		object: ilib.ResBundle[this.baseName], 
		locale: lookupLocale, 
		name: this.baseName + ".json", 
		sync: this.sync, 
		loadParams: this.loadParams, 
		callback: ilib.bind(this, function (map) {
			if (!map) {
				map = ilib.data[this.baseName] || {};
				spec = lookupLocale.getSpec().replace(/-/g, '_');
				ilib.ResBundle[this.baseName].cache[spec] = map;
			}
			this.map = map;
			if (this.locale.isPseudo()) {
				if (!ilib.ResBundle.pseudomap) {
					ilib.ResBundle.pseudomap = {};
				}
	
				this._loadPseudo(this.locale, options.onLoad);
			} else if (this.missing === "pseudo") {
				if (!ilib.ResBundle.pseudomap) {
					ilib.ResBundle.pseudomap = {};
				}
	
				new ilib.LocaleInfo(this.locale, {
					sync: this.sync,
					loadParams: this.loadParams,
					onLoad: ilib.bind(this, function (li) {
						var pseudoLocale = new ilib.Locale("zxx", "XX", undefined, li.getDefaultScript());
						this._loadPseudo(pseudoLocale, options.onLoad);
					})
				});
			} else {
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			}
		})
	});

	// console.log("Merged resources " + this.locale.toString() + " are: " + JSON.stringify(this.map));
	//if (!this.locale.isPseudo() && ilib.isEmpty(this.map)) {
	//	console.log("Resources for bundle " + this.baseName + " locale " + this.locale.toString() + " are not available.");
	//}
};

ilib.ResBundle.defaultPseudo = ilib.data.pseudomap || {
	"a": "Ã ",
	"e": "Ã«",
	"i": "Ã­",
	"o": "Ãµ",
	"u": "Ã¼",
	"y": "Ã¿",
	"A": "Ã",
	"E": "Ã",
	"I": "Ã",
	"O": "Ã",
	"U": "Ã",
	"Y": "Å¶"
};

ilib.ResBundle.prototype = {
    /**
     * @protected
     */
    _loadPseudo: function (pseudoLocale, onLoad) {
		ilib.loadData({
			object: ilib.ResBundle.pseudomap, 
			locale: pseudoLocale, 
			name: "pseudomap.json", 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (map) {
				if (!map || ilib.isEmpty(map)) {
					map = ilib.ResBundle.defaultPseudo;
					var spec = pseudoLocale.getSpec().replace(/-/g, '_');
					ilib.ResBundle.pseudomap.cache[spec] = map;
				}
				this.pseudomap = map;
				if (typeof(onLoad) === 'function') {
					onLoad(this);
				}	
			})
		});
    },
    
	/**
	 * Return the locale of this resource bundle.
	 * @return {ilib.Locale} the locale of this resource bundle object 
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the name of this resource bundle. This corresponds to the name option
	 * given to the constructor.
	 * @return {string} name of the the current instance
	 */
	getName: function () {
		return this.baseName;
	},
	
	/**
	 * Return the type of this resource bundle. This corresponds to the type option
	 * given to the constructor.
	 * @return {string} type of the the current instance
	 */
	getType: function () {
		return this.type;
	},

	/*
	 * @private
	 * Pseudo-translate a string
	 */
	pseudo: function (str) {
		if (!str) {
			return undefined;
		}
		var ret = "", i;
		for (i = 0; i < str.length; i++) {
			if (this.type !== "raw") {
				if (this.type === "html" || this.type === "xml") {
					if (str.charAt(i) === '<') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== '>') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i++);
						}
					} else if (str.charAt(i) === '&') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i++);
						}
					}
				}
				if (i < str.length) { 
					if (str.charAt(i) === '{') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== '}') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i);
						}
					} else {
						ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
					}
				}
			} else {
				ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
			}
		}
		if (this.lengthen) {
			var add;
			if (ret.length <= 20) {
				add = Math.round(ret.length / 2);
			} else if (ret.length > 20 && ret.length <= 40) {
				add = Math.round(ret.length / 3);
			} else {
				add = Math.round(ret.length / 5);
			}
			for (i = add-1; i >= 0; i--) {
				ret += (i % 10);
			}
		}
		if (this.locale.getScript() === "Hans" || this.locale.getScript() === "Hant" ||
				this.locale.getScript() === "Hani" ||
				this.locale.getScript() === "Hrkt" || this.locale.getScript() === "Jpan" ||
				this.locale.getScript() === "Hira" || this.locale.getScript() === "Kana" ) {
			// simulate Asian languages by getting rid of all the spaces
			ret = ret.replace(/ /g, "");
		}
		return ret;
	},
	
	/*
	 * @private
	 * Escape html characters in the output.
	 */
	escapeXml: function (str) {
		str = str.replace(/&/g, '&amp;');
		str = str.replace(/</g, '&lt;');
		str = str.replace(/>/g, '&gt;');
		return str;
	},

	/*
	 * @private
	 * @param {string} str the string to unescape
	 */
	unescapeXml: function (str) {
		str = str.replace(/&amp;/g, '&');
		str = str.replace(/&lt;/g, '<');
		str = str.replace(/&gt;/g, '>');
		return str;
	},
	
	/*
	 * @private
	 * Create a key name out of a source string. All this does so far is 
	 * compress sequences of white space into a single space on the assumption
	 * that this doesn't really change the meaning of the string, and therefore
	 * all such strings that compress to the same thing should share the same
	 * translation.
	 * @param {string} source the source string to make a key out of
	 */
	makeKey: function (source) {
		var key = source.replace(/\s+/gm, ' ');
		return (this.type === "xml" || this.type === "html") ? this.unescapeXml(key) : key;
	},
	
	/**
	 * Return a localized string. If the string is not found in the loaded set of
	 * resources, the original source string is returned. If the key is not given,
	 * then the source string itself is used as the key. In the case where the 
	 * source string is used as the key, the whitespace is compressed down to 1 space
	 * each, and the whitespace at the beginning and end of the string is trimmed.<p>
	 * 
	 * The escape mode specifies what type of output you are escaping the returned
	 * string for. Modes are similar to the types: 
	 * 
	 * <ul>
	 * <li>"html" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;
	 * <li>"xml" -- currently same as "html" mode
	 * <li>"js" -- prevents breaking Javascript syntax by backslash escaping all quote and 
	 * double-quote characters
	 * <li>"attribute" -- meant for HTML attribute values. Currently this is the same as
	 * "js" escape mode.
	 * <li>"default" -- use the type parameter from the constructor as the escape mode as well
	 * <li>"none" or undefined -- no escaping at all.
	 * </ul>
	 * 
	 * The type parameter of the constructor specifies what type of strings this bundle
	 * is operating upon. This allows pseudo-translation and automatic key generation
	 * to happen properly by telling this class how to parse the string. The escape mode 
	 * for this method is different in that it specifies how this string will be used in 
	 * the calling code and therefore how to escape it properly.<p> 
	 * 
	 * For example, a section of Javascript code may be constructing an HTML snippet in a 
	 * string to add to the web page. In this case, the type parameter in the constructor should
	 * be "html" so that the source string can be parsed properly, but the escape mode should
	 * be "js" so that the output string can be used in Javascript without causing syntax
	 * errors.
	 * 
	 * @param {?string=} source the source string to translate
	 * @param {?string=} key optional name of the key, if any
	 * @param {?string=} escapeMode escape mode, if any
	 * @return {ilib.String|undefined} the translation of the given source/key or undefined 
	 * if the translation is not found and the source is undefined 
	 */
	getString: function (source, key, escapeMode) {
		if (!source && !key) return new ilib.String("");

		var trans;
		if (this.locale.isPseudo()) {
			var str = source ? source : this.map[key];
			trans = this.pseudo(str || key);
		} else {
			var keyName = key || this.makeKey(source);
			if (typeof(this.map[keyName]) !== 'undefined') {
				trans = this.map[keyName];
			} else if (this.missing === "pseudo") {
				trans = this.pseudo(source || key);
			} else if (this.missing === "empty") {
				trans = "";
			} else {
				trans = source;
			}
		}

		if (escapeMode && escapeMode !== "none") {
			if (escapeMode == "default") {
				escapeMode = this.type;
			}
			if (escapeMode === "xml" || escapeMode === "html") {
				trans = this.escapeXml(trans);
			} else if (escapeMode == "js" || escapeMode === "attribute") {
				trans = trans.replace(/'/g, "\\\'").replace(/"/g, "\\\"");
			}
		}
		if (trans === undefined) {
			return undefined;
		} else {
			var ret = new ilib.String(trans);
			ret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback
			return ret;
		}
	},
	
	/**
	 * Return true if the current bundle contains a translation for the given key and
	 * source. The
	 * getString method will always return a string for any given key and source 
	 * combination, so it cannot be used to tell if a translation exists. Either one
	 * or both of the source and key must be specified. If both are not specified,
	 * this method will return false.
	 * 
	 * @param {?string=} source source string to look up
	 * @param {?string=} key key to look up
	 * @return {boolean} true if this bundle contains a translation for the key, and 
	 * false otherwise
	 */
	containsKey: function(source, key) {
		if (typeof(source) === 'undefined' && typeof(key) === 'undefined') {
			return false;
		}
		
		var keyName = key || this.makeKey(source);
		return typeof(this.map[keyName]) !== 'undefined';
	},
	
	/**
	 * Return the merged resources as an entire object. When loading resources for a
	 * locale that are not just a set of translated strings, but instead an entire 
	 * structured javascript object, you can gain access to that object via this call. This method
	 * will ensure that all the of the parts of the object are correct for the locale.<p>
	 * 
	 * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where 
	 * <i>name</i> is the base name for this set of resources. Then, it successively 
	 * merges objects in the base data using progressively more locale-specific data. 
	 * It loads it in this order from <i>ilib.data</i>:
	 * 
	 * <ol>
	 * <li> language
	 * <li> region
	 * <li> language_script
	 * <li> language_region
	 * <li> region_variant
	 * <li> language_script_region
	 * <li> language_region_variant
	 * <li> language_script_region_variant
	 * </ol>
	 * 
	 * For dynamically loaded data, the code attempts to load the same sequence as
	 * above, but with slash path separators instead of underscores.<p>
	 *  
	 * Loading the resources this way allows the program to share resources between all
	 * locales that share a common language, region, or script. As a 
	 * general rule-of-thumb, resources should be as generic as possible in order to
	 * cover as many locales as possible.
	 * 
	 * @return {Object} returns the object that is the basis for this resources instance
	 */
	getResObj: function () {
		return this.map;
	}
};

/*
 * util/jsutils.js - Misc utilities to work around Javascript engine differences
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Perform a shallow copy of the source object to the target object. This only 
 * copies the assignments of the source properties to the target properties, 
 * but not recursively from there.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @static
 * @param {Object} source the source object to copy properties from
 * @param {Object} target the target object to copy properties into
 */
ilib.shallowCopy = function (source, target) {
	var prop = undefined;
	if (source && target) {
		for (prop in source) {
			if (prop !== undefined && typeof(source[prop]) !== 'undefined') {
				target[prop] = source[prop];
			}
		}
	}
};

/** [Need Comment]
 * 
 */
ilib.deepCopy = function(from, to) {
	var prop;

	for (prop in from) {
		if (prop) {
			if (typeof(from[prop]) === 'object') {
				to[prop] ={};
				ilib.deepCopy(from[prop], to[prop]);
			} else {
				to[prop] = from[prop];
			}
		}
	}
	return to;
};

/**
 * Map a string to the given set of alternate characters. If the target set
 * does not contain a particular character in the input string, then that
 * character will be copied to the output unmapped.
 * 
 * @static
 * @param {string} str a string to map to an alternate set of characters
 * @param {Array.<string>|Object} map a mapping to alternate characters
 * @return {string} the source string where each character is mapped to alternate characters
 */
ilib.mapString = function (str, map) {
	var mapped = "";
	if (map && str) {
		for (var i = 0; i < str.length; i++) {
			var c = str.charAt(i); // TODO use a char iterator?
			mapped += map[c] || c; 
		}
	} else {
		mapped = str;
	}
	return mapped;
};

/**
 * Check if an object is a member of the given array. If this javascript engine
 * support indexOf, it is used directly. Otherwise, this function implements it
 * itself. The idea is to make sure that you can use the quick indexOf if it is
 * available, but use a slower implementation in older engines as well.
 * 
 * @static
 * @param {Array.<Object>} array array to search
 * @param {Object} obj object being sought. This should be of the same type as the
 * members of the array being searched. If not, this function will not return
 * any results.
 * @return {number} index of the object in the array, or -1 if it is not in the array.
 */
ilib.indexOf = function(array, obj) {
	if (!array || !obj) {
		return -1;
	}
	if (typeof(array.indexOf) === 'function') {
		return array.indexOf(obj);
	} else {
		for (var i = 0; i < array.length; i++) {
	        if (array[i] === obj) {
	            return i;
	        }
	    }
	    return -1;
	}
};

/**
 * @static
 * Convert a string into the hexadecimal representation
 * of the Unicode characters in that string.
 * 
 * @param {string} string The string to convert
 * @param {number=} limit the number of digits to use to represent the character (1 to 8)
 * @return {string} a hexadecimal representation of the
 * Unicode characters in the input string
 */
ilib.toHexString = function(string, limit) {
	var i, 
		result = "", 
		lim = (limit && limit < 9) ? limit : 4;
	
	if (!string) {
		return "";
	}
	for (i = 0; i < string.length; i++) {
		var ch = string.charCodeAt(i).toString(16);
		result += "00000000".substring(0, lim-ch.length) + ch;
	}
	return result.toUpperCase();
};

/*
 * datefmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
resources.js 
calendar.js
localeinfo.js
timezone.js
calendar/gregorian.js
util/jsutils.js
*/

// !data dateformats sysres

/**
 * @class
 * Create a new date formatter instance. The date formatter is immutable once
 * it is created, but can format as many different dates as needed with the same
 * options. Create different date formatter instances for different purposes
 * and then keep them cached for use later if you have more than one date to
 * format.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the date/time. If the locale is
 * not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>calendar</i> - the type of calendar to use for this format. The value should
 * be a sting containing the name of the calendar. Currently, the supported
 * types are "gregorian", "julian", "arabic", "hebrew", or "chinese". If the
 * calendar is not specified, then the default calendar for the locale is used. When the
 * calendar type is specified, then the format method must be called with an instance of
 * the appropriate date type. (eg. Gregorian calendar means that the format method must 
 * be called with a GregDate instance.)
 *  
 * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone
 * instance or a time zone specifier from the IANA list of time zone database names 
 * (eg. "America/Los_Angeles"), 
 * the string "local", or a string specifying the offset in RFC 822 format. The IANA
 * list of time zone names can be viewed at 
 * <a href="http://en.wikipedia.org/wiki/List_of_tz_database_time_zones">this page</a>.
 * If the time zone is given as "local", the offset from UTC as given by
 * the Javascript system is used. If the offset is given as an RFC 822 style offset
 * specifier, it will parse that string and use the resulting offset. If the time zone
 * is not specified, the
 * default time zone for the locale is used. If both the date object and this formatter
 * instance contain time zones and those time zones are different from each other, the 
 * formatter will calculate the offset between the time zones and subtract it from the 
 * date before formatting the result for the current time zone. The theory is that a date
 * object that contains a time zone specifies a specific instant in time that is valid
 * around the world, whereas a date object without one is a local time and can only be
 * used for doing things in the local time zone of the user.
 * 
 * <li><i>type</i> - Specify whether this formatter should format times only, dates only, or
 * both times and dates together. Valid values are "time", "date", and "datetime". Note that
 * in some locales, the standard format uses the order "time followed by date" and in others, 
 * the order is exactly opposite, so it is better to create a single "datetime" formatter 
 * than it is to create a time formatter and a date formatter separately and concatenate the 
 * results. A "datetime" formatter will get the order correct for the locale.<p>
 * 
 * The default type if none is specified in with the type option is "date".
 * 
 * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the 
 * formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.
 * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.
 * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual 
 * components may still be abbreviated
 * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual 
 * components are spelled out completely
 * </ul>
 * 
 * eg. The "short" format for an en_US date may be "MM/dd/yy", whereas the long format might be "d MMM, yyyy". In the long
 * format, the month name is textual instead of numeric and is longer, the year is 4 digits instead of 2, and the format 
 * contains slightly more spaces and formatting characters.<p>
 * 
 * Note that the length parameter does not specify which components are to be formatted. Use the "date" and the "time"
 * properties to specify the components. Also, very few of the components of a time format differ according to the length,
 * so this property has little to no affect on time formatting.
 * 
 * <li><i>date</i> - This property tells
 * which components of a date format to use. For example,
 * sometimes you may wish to format a date that only contains the month and date
 * without the year, such as when displaying a person's yearly birthday. The value
 * of this property allows you to specify only those components you want to see in the
 * final output, ordered correctly for the locale. <p>
 * 
 * Valid values are:
 * 
 * <ul>
 * <li><i>dmwy</i> - format all components, weekday, date, month, and year
 * <li><i>dmy</i> - format only date, month, and year
 * <li><i>dmw</i> - format only weekday, date, and month
 * <li><i>dm</i> - format only date and month
 * <li><i>my</i> - format only month and year
 * <li><i>dw</i> - format only the weekday and date
 * <li><i>d</i> - format only the date
 * <li><i>m</i> - format only the month, in numbers for shorter lengths, and letters for 
 * longer lengths
 * <li><i>n</i> - format only the month, in letters only for all lengths
 * <li><i>y</i> - format only the year
 * </ul>
 * Default components, if this property is not specified, is "dmy". This property may be specified
 * but has no affect if the current formatter is for times only.
 * 
 * <li><i>time</i> - This property gives which components of a time format to use. The time will be formatted 
 * correctly for the locale with only the time components requested. For example, a clock might only display 
 * the hour and minute and not need the seconds or the am/pm component. In this case, the time property should be set 
 * to "hm". <p>
 * 
 * Valid values for this property are:
 * 
 * <ul>
 * <li><i>ahmsz</i> - format the hours, minutes, seconds, am/pm (if using a 12 hour clock), and the time zone
 * <li><i>ahms</i> - format the hours, minutes, seconds, and am/pm (if using a 12 hour clock)
 * <li><i>hmsz</i> - format the hours, minutes, seconds, and the time zone
 * <li><i>hms</i> - format the hours, minutes, and seconds
 * <li><i>ahmz</i> - format the hours, minutes, am/pm (if using a 12 hour clock), and the time zone
 * <li><i>ahm</i> - format the hours, minutes, and am/pm (if using a 12 hour clock)
 * <li><i>hmz</i> - format the hours, minutes, and the time zone
 * <li><i>ah</i> - format only the hours and am/pm if using a 12 hour clock
 * <li><i>hm</i> - format only the hours and minutes
 * <li><i>ms</i> - format only the minutes and seconds
 * <li><i>h</i> - format only the hours
 * <li><i>m</i> - format only the minutes
 * <li><i>s</i> - format only the seconds
 * </ul>
 * 
 * If you want to format a length of time instead of a particular instant
 * in time, use the duration formatter object (ilib.DurFmt) instead because this
 * formatter is geared towards instants. A date formatter will make sure that each component of the 
 * time is within the normal range
 * for that component. That is, the minutes will always be between 0 and 59, no matter
 * what is specified in the date to format. A duration format will allow the number
 * of minutes to exceed 59 if, for example, you were displaying the length of
 * a movie of 198 minutes.<p>
 * 
 * Default value if this property is not specified is "hma".
 * 
 * <li><i>clock</i> - specify that the time formatter should use a 12 or 24 hour clock. 
 * Valid values are "12" and "24".<p>
 * 
 * In some locales, both clocks are used. For example, in en_US, the general populace uses
 * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or 
 * scientific writing, it is more common to use a 24 hour clock. This property allows you to
 * construct a formatter that overrides the default for the locale.<p>
 * 
 * If this property is not specified, the default is to use the most widely used convention
 * for the locale.
 *  
 * <li><i>template</i> - use the given template string as a fixed format when formatting 
 * the date/time. Valid codes to use in a template string are as follows:
 * 
 * <ul>
 * <li><i>a</i> - am/pm marker
 * <li><i>d</i> - 1 or 2 digit date of month, not padded
 * <li><i>dd</i> - 1 or 2 digit date of month, 0 padded to 2 digits
 * <li><i>O</i> - ordinal representation of the date of month (eg. "1st", "2nd", etc.)
 * <li><i>D</i> - 1 to 3 digit day of year
 * <li><i>DD</i> - 1 to 3 digit day of year, 0 padded to 2 digits
 * <li><i>DDD</i> - 1 to 3 digit day of year, 0 padded to 3 digits
 * <li><i>M</i> - 1 or 2 digit month number, not padded
 * <li><i>MM</i> - 1 or 2 digit month number, 0 padded to 2 digits
 * <li><i>N</i> - 1 character month name abbreviation
 * <li><i>NN</i> - 2 character month name abbreviation
 * <li><i>MMM</i> - 3 character month month name abbreviation
 * <li><i>MMMM</i> - fully spelled out month name
 * <li><i>yy</i> - 2 digit year
 * <li><i>yyyy</i> - 4 digit year
 * <li><i>E</i> - day-of-week name, abbreviated to a single character
 * <li><i>EE</i> - day-of-week name, abbreviated to a max of 2 characters
 * <li><i>EEE</i> - day-of-week name, abbreviated to a max of 3 characters
 * <li><i>EEEE</i> - day-of-week name fully spelled out 
 * <li><i>G</i> - era designator
 * <li><i>w</i> - week number in year
 * <li><i>ww</i> - week number in year, 0 padded to 2 digits
 * <li><i>W</i> - week in month
 * <li><i>h</i> - hour (1 to 12)
 * <li><i>hh</i> - hour (1 to 12), 0 padded to 2 digits
 * <li><i>k</i> - hour (1 to 24)
 * <li><i>kk</i> - hour (1 to 24), 0 padded to 2 digits
 * <li><i>H</i> - hour (0 to 23)
 * <li><i>HH</i> - hour (0 to 23), 0 padded to 2 digits
 * <li><i>K</i> - hour (0 to 11)
 * <li><i>KK</i> - hour (0 to 11), 0 padded to 2 digits
 * <li><i>m</i> - minute in hour
 * <li><i>mm</i> - minute in hour, 0 padded to 2 digits
 * <li><i>s</i> - second in minute
 * <li><i>ss</i> - second in minute, 0 padded to 2 digits
 * <li><i>S</i> - millisecond (1 to 3 digits)
 * <li><i>SSS</i> - millisecond, 0 padded to 3 digits
 * <li><i>z</i> - general time zone
 * <li><i>Z</i> - RFC 822 time zone
 * </ul>
 * 
 * <li><i>useNative</i> - the flag used to determine whether to use the native script settings 
 * for formatting the numbers.
 *
 * <li><i>meridiems</i> - string that specifies what style of meridiems to use with this 
 * format. The choices are "default" and "chinese". The "default" style is the simple AM/PM,
 * and the "chinese" style uses 7 different meridiems corresponding to the various parts of 
 * the day. The default if not specified is "default", even for the Chinese locales. 
 *
 * <li><i>onLoad</i> - a callback function to call when the date format object is fully 
 * loaded. When the onLoad option is given, the DateFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Any substring containing letters within single or double quotes will be used 
 * as-is in the final output and will not be interpretted for codes as above.<p>
 * 
 * Example: a date format in Spanish might be given as: "'El' d. 'de' MMMM", where
 * the 'El' and the 'de' are left as-is in the output because they are quoted. Typical 
 * output for this example template might be, "El 5. de Mayo".
 * 
 * The following options will be used when formatting a date/time with an explicit
 * template:
 * 
 * <ul>
 * <li>locale - the locale is only used for 
 * translations of things like month names or day-of-week names.
 * <li>calendar - used to translate a date instance into date/time component values 
 * that can be formatted into the template
 * <li>timezone - used to figure out the offset to add or subtract from the time to
 * get the final time component values
 * <li>clock - used to figure out whether to format times with a 12 or 24 hour clock.
 * If this option is specified, it will override the hours portion of a time format.
 * That is, "hh" is switched with "HH" and "kk" is switched with "KK" as appropriate. 
 * If this option is not specified, the 12/24 code in the template will dictate whether 
 * to use the 12 or 24 clock, and the 12/24 default in the locale will be ignored.
 * </ul>
 * 
 * All other options will be ignored and their corresponding getter methods will
 * return the empty string.<p>
 * 
 * Depends directive: !depends datefmt.js
 * 
 * @constructor
 * @param {Object} options options governing the way this date formatter instance works
 */
ilib.DateFmt = function(options) {
	var arr, i, bad, 
		sync = true, 
		loadParams = undefined;
	
	this.locale = new ilib.Locale();
	this.type = "date";
	this.length = "s";
	this.dateComponents = "dmy";
	this.timeComponents = "ahm";
	this.meridiems = "default";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.type) {
			if (options.type === 'date' || options.type === 'time' || options.type === 'datetime') {
				this.type = options.type;
			}
		}
		
		if (options.calendar) {
			this.calName = options.calendar;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				// only use the first char to save space in the json files
				this.length = options.length.charAt(0);
			}
		}
		
		if (options.date) {
			arr = options.date.split("");
			arr.sort(function (left, right) {
				return (left < right) ? -1 : ((right < left) ? 1 : 0);
			});
			bad = false;
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== 'd' && arr[i] !== 'm' && arr[i] !== 'y' && arr[i] !== 'w' && arr[i] !== 'n') {
					bad = true;
					break;
				}
			}
			if (!bad) {
				this.dateComponents = arr.join("");
			}
		}

		if (options.time) {
			arr = options.time.split("");
			arr.sort(function (left, right) {
				return (left < right) ? -1 : ((right < left) ? 1 : 0);
			});
			this.badTime = false;
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== 'h' && arr[i] !== 'm' && arr[i] !== 's' && arr[i] !== 'a' && arr[i] !== 'z') {
					this.badTime = true;
					break;
				}
			}
			if (!this.badTime) {
				this.timeComponents = arr.join("");
			}
		}
		
		if (options.clock && (options.clock === '12' || options.clock === '24')) {
			this.clock = options.clock;
		}
		
		if (options.template) {
			// many options are not useful when specifying the template directly, so zero
			// them out.
			this.type = "";
			this.length = "";
			this.dateComponents = "";
			this.timeComponents = "";
			
			this.template = options.template;
		}
		
		if (options.timezone) {
			if (options.timezone instanceof ilib.TimeZone) {
				this.tz = options.timezone;
			} else {
				this.tz = new ilib.TimeZone({
					locale: this.locale, 
					id: options.timezone
				});
			}
		} else if (options.locale) {
			// if an explicit locale was given, then get the time zone for that locale
			this.tz = new ilib.TimeZone({
				locale: this.locale
			});
		} // else just assume time zone "local"
		
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		
		if (typeof(options.meridiems) !== 'undefined' && options.meridiems === "chinese") {
			this.meridiems = options.meridiems;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync === true);
		}
		
		loadParams = options.loadParams;
	}

	if (!ilib.DateFmt.cache) {
		ilib.DateFmt.cache = {};
	}

	new ilib.LocaleInfo(this.locale, {
		sync: sync,
		loadParams: loadParams, 
		onLoad: ilib.bind(this, function (li) {
			this.locinfo = li;
			
			// get the default calendar name from the locale, and if the locale doesn't define
			// one, use the hard-coded gregorian as the last resort
			this.calName = this.calName || this.locinfo.getCalendar() || "gregorian";
			this.cal = ilib.Cal.newInstance({
				type: this.calName
			});
			if (!this.cal) {
				this.cal = new ilib.Cal.Gregorian();
			}

			/*
			if (this.timeComponents &&
					(this.clock === '24' || 
					(!this.clock && this.locinfo.getClock() === "24"))) {
				// make sure we don't have am/pm in 24 hour mode unless the user specifically
				// requested it in the time component option
				this.timeComponents = this.timeComponents.replace("a", "");
			}
			*/

			// load the strings used to translate the components
			new ilib.ResBundle({
				locale: this.locale,
				name: "sysres",
				sync: sync,
				loadParams: loadParams, 
				onLoad: ilib.bind(this, function (rb) {
					this.sysres = rb;
					
					if (!this.template) {
						ilib.loadData({
							object: ilib.DateFmt, 
							locale: this.locale, 
							name: "dateformats.json", 
							sync: sync, 
							loadParams: loadParams, 
							callback: ilib.bind(this, function (formats) {
								if (!formats) {
									formats = ilib.data.dateformats || ilib.DateFmt.defaultFmt;
									var spec = this.locale.getSpec().replace(/-/g, '_');
									ilib.DateFmt.cache[spec] = formats;
								}
								if (typeof(this.clock) === 'undefined') {
									// default to the locale instead
									this.clock = this.locinfo.getClock();
								}
								this._initTemplate(formats);
								this._massageTemplate();
								if (options && typeof(options.onLoad) === 'function') {
									options.onLoad(this);
								}
							})
						});
					} else {
						this._massageTemplate();
						if (options && typeof(options.onLoad) === 'function') {
							options.onLoad(this);
						}
					}
				})
			});	
		})
	});
};

// used in getLength
ilib.DateFmt.lenmap = {
	"s": "short",
	"m": "medium",
	"l": "long",
	"f": "full"
};

ilib.DateFmt.zeros = "0000";

ilib.DateFmt.defaultFmt = {
	"gregorian": {
		"order": "{date} {time}",
		"date": {
			"dmwy": "EEE d/MM/yyyy",
			"dmy": "d/MM/yyyy",
			"dmw": "EEE d/MM",
			"dm": "d/MM",
			"my": "MM/yyyy",
			"dw": "EEE d",
			"d": "dd",
			"m": "MM",
			"y": "yyyy",
			"n": "NN",
			"w": "EEE"
		},
		"time": {
			"12": "h:mm:ssa",
			"24": "H:mm:ss"
		},
		"range": {
			"c00": "{st} - {et}, {sd}/{sm}/{sy}",
			"c01": "{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",
			"c02": "{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",
			"c03": "{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}",
			"c10": "{sd}-{ed}/{sm}/{sy}",
			"c11": "{sd}/{sm} - {ed}/{em} {sy}",
			"c12": "{sd}/{sm}/{sy} - {ed}/{em}/{ey}",
			"c20": "{sm}/{sy} - {em}/{ey}",
			"c30": "{sy} - {ey}"
		}
	},
	"islamic": "gregorian",
	"hebrew": "gregorian",
	"julian": "gregorian",
	"buddhist": "gregorian",
	"persian": "gregorian",
	"persian-algo": "gregorian",
	"han": "gregorian"
};

/**
* @static
* @private
*/
ilib.DateFmt.monthNameLenMap = {
	"short" : "N",
	"medium": "NN",
	"long":   "MMM",
	"full":   "MMMM"
};

/**
* @static
* @private
*/
ilib.DateFmt.weekDayLenMap = {
	"short" : "E",
	"medium": "EE",
	"long":   "EEE",
	"full":   "EEEE"
};

ilib.DateFmt.prototype = {
	/**
	 * @protected
	 */
	_initTemplate: function (formats) {
		if (formats[this.calName]) {
			/** 
			 * @private
			 * @type {{order:(string|{s:string,m:string,l:string,f:string}),date:Object.<string, (string|{s:string,m:string,l:string,f:string})>,time:Object.<string,(string|{s:string,m:string,l:string,f:string})>,range:Object.<string, (string|{s:string,m:string,l:string,f:string})>}}
			 */
			this.formats = formats[this.calName];
			if (typeof(this.formats) === "string") {
				// alias to another calendar type
				this.formats = formats[this.formats];
			}
			
			this.template = "";
			
			switch (this.type) {
				case "datetime":
					this.template = (this.formats && this._getLengthFormat(this.formats.order, this.length)) || "{date} {time}";
					this.template = this.template.replace("{date}", this._getFormat(this.formats.date, this.dateComponents, this.length) || "");
					this.template = this.template.replace("{time}", this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length) || "");
					break;
				case "date":
					this.template = this._getFormat(this.formats.date, this.dateComponents, this.length);
					break;
				case "time":
					this.template = this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length);
					break;
			}
		} else {
			throw "No formats available for calendar " + this.calName + " in locale " + this.locale.toString();
		}
	},
	
	/**
	 * @protected
	 */
	_massageTemplate: function () {
		var i;
		
		if (this.clock && this.template) {
			// explicitly set the hours to the requested type
			var temp = "";
			switch (this.clock) {
				case "24":
					for (i = 0; i < this.template.length; i++) {
						if (this.template.charAt(i) == "'") {
							temp += this.template.charAt(i++);
							while (i < this.template.length && this.template.charAt(i) !== "'") {
								temp += this.template.charAt(i++);
							}
							if (i < this.template.length) {
								temp += this.template.charAt(i);
							}
						} else if (this.template.charAt(i) == 'K') {
							temp += 'k';
						} else if (this.template.charAt(i) == 'h') {
							temp += 'H';
						} else {
							temp += this.template.charAt(i);
						}
					}
					this.template = temp;
					break;
				case "12":
					for (i = 0; i < this.template.length; i++) {
						if (this.template.charAt(i) == "'") {
							temp += this.template.charAt(i++);
							while (i < this.template.length && this.template.charAt(i) !== "'") {
								temp += this.template.charAt(i++);
							}
							if (i < this.template.length) {
								temp += this.template.charAt(i);
							}
						} else if (this.template.charAt(i) == 'k') {
							temp += 'K';
						} else if (this.template.charAt(i) == 'H') {
							temp += 'h';
						} else {
							temp += this.template.charAt(i);
						}
					}
					this.template = temp;
					break;
			}
		}
		
		// tokenize it now for easy formatting
		this.templateArr = this._tokenize(this.template);

		var digits;
		// set up the mapping to native or alternate digits if necessary
		if (typeof(this.useNative) === "boolean") {
			if (this.useNative) {
				digits = this.locinfo.getNativeDigits();
				if (digits) {
					this.digits = digits;
				}
			}
		} else if (this.locinfo.getDigitsStyle() === "native") {
			digits = this.locinfo.getNativeDigits();
			if (digits) {
				this.useNative = true;
				this.digits = digits;
			}
		}
	},
    
	/**
	 * Convert the template into an array of date components separated by formatting chars.
	 * @protected
	 * @param {string} template Format template to tokenize into components
	 * @return {Array.<string>} a tokenized array of date format components
	 */
	_tokenize: function (template) {
		var i = 0, start, ch, letter, arr = [];
		
		// console.log("_tokenize: tokenizing template " + template);
		if (template) {
			while (i < template.length) {
				ch = template.charAt(i);
				start = i;
				if (ch === "'") {
					// console.log("found quoted string");
					i++;
					// escaped string - push as-is, then dequote later
					while (i < template.length && template.charAt(i) !== "'") {
						i++;
					}
					if (i < template.length) {
						i++;	// grab the other quote too
					}
				} else if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
					letter = template.charAt(i);
					// console.log("found letters " + letter);
					while (i < template.length && ch === letter) {
						ch = template.charAt(++i);
					}
				} else {
					// console.log("found other");
					while (i < template.length && ch !== "'" && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
						ch = template.charAt(++i);
					}
				}
				arr.push(template.substring(start,i));
				// console.log("start is " + start + " i is " + i + " and substr is " + template.substring(start,i));
			}
		}
		return arr;
	},
                          
	/**
	 * @protected
	 * @param {Object.<string, (string|{s:string,m:string,l:string,f:string})>} obj Object to search
	 * @param {string} components Format components to search
	 * @param {string} length Length of the requested format
	 * @return {string|undefined} the requested format
	 */
	_getFormat: function getFormat(obj, components, length) {
		if (typeof(components) !== 'undefined' && obj[components]) {
			return this._getLengthFormat(obj[components], length);
		}
		return undefined;
	},

	/**
	 * @protected
	 * @param {(string|{s:string,m:string,l:string,f:string})} obj Object to search
	 * @param {string} length Length of the requested format
	 * @return {(string|undefined)} the requested format
	 */
	_getLengthFormat: function getLengthFormat(obj, length) {
		if (typeof(obj) === 'string') {
			return obj;
		} else if (obj[length]) {
			return obj[length];
		}
		return undefined;
	},

	/**
	 * Return the locale used with this formatter instance.
	 * @return {ilib.Locale} the ilib.Locale instance for this formatter
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return the template string that is used to format date/times for this
	 * formatter instance. This will work, even when the template property is not explicitly 
	 * given in the options to the constructor. Without the template option, the constructor 
	 * will build the appropriate template according to the options and use that template
	 * in the format method. 
	 * 
	 * @return {string} the format template for this formatter
	 */
	getTemplate: function() {
		return this.template;
	},
	
	/**
	 * Return the type of this formatter. The type is a string that has one of the following
	 * values: "time", "date", "datetime".
	 * @return {string} the type of the formatter
	 */
	getType: function() {
		return this.type;
	},
	
	/**
	 * Return the name of the calendar used to format date/times for this
	 * formatter instance.
	 * @return {string} the name of the calendar used by this formatter
	 */
	getCalendar: function () {
		return this.cal.getType();
	},
	
	/**
	 * Return the length used to format date/times in this formatter. This is either the
	 * value of the length option to the constructor, or the default value.
	 * 
	 * @return {string} the length of formats this formatter returns
	 */
	getLength: function () {
		return ilib.DateFmt.lenmap[this.length] || "";
	},
	
	/**
	 * Return the date components that this formatter formats. This is either the 
	 * value of the date option to the constructor, or the default value. If this
	 * formatter is a time-only formatter, this method will return the empty 
	 * string. The date component letters may be specified in any order in the 
	 * constructor, but this method will reorder the given components to a standard 
	 * order.
	 * 
	 * @return {string} the date components that this formatter formats
	 */
	getDateComponents: function () {
		return this.dateComponents || "";
	},

	/**
	 * Return the time components that this formatter formats. This is either the 
	 * value of the time option to the constructor, or the default value. If this
	 * formatter is a date-only formatter, this method will return the empty 
	 * string. The time component letters may be specified in any order in the 
	 * constructor, but this method will reorder the given components to a standard 
	 * order.
	 * 
	 * @return {string} the time components that this formatter formats
	 */
	getTimeComponents: function () {
		return this.timeComponents || "";
	},

	/**
	 * Return the time zone used to format date/times for this formatter
	 * instance.
	 * @return a string naming the time zone
	 */
	getTimeZone: function () {
		// Lazy load the time zone. If it wasn't explicitly set up before, set 
		// it up now, but use the 
		// default TZ for the locale. This way, if the caller never uses the
		// time zone in their format, we never have to load up a TimeZone
		// instance into this formatter.
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: ilib.getTimeZone()});
		}
		return this.tz;
	},
	/**
	 * Return the clock option set in the constructor. If the clock option was
	 * not given, the default from the locale is returned instead.
	 * @return {string} "12" or "24" depending on whether this formatter uses
	 * the 12-hour or 24-hour clock
	 */
	getClock: function () {
		return this.clock || this.locinfo.getClock();
	},
	
	/**
	 * @private
	 */
	_getTemplate: function (prefix, calendar) {
		if (calendar !== "gregorian") {
			return prefix + "-" + calendar;
		}
		return prefix;
	},

	/**
	 * Returns an array of the months of the year, formatted to the optional length specified.
	 * i.e. ...getMonthsOfYear() OR ...getMonthsOfYear({length: "short"})
	 * <p>
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>length</i> - length of the names of the months being sought. This may be one of
	 * "short", "medium", "long", or "full"
	 * <li><i>date</i> - retrieve the names of the months in the date of the given date
	 * <li><i>year</i> - retrieve the names of the months in the given year. In some calendars,
	 * the months have different names depending if that year is a leap year or not.
	 * </ul>
	 * 
	 * @param  {Object=} options an object-literal that contains any of the above properties
	 * @return {Array} an array of the names of all of the months of the year in the current calendar
	 */
	getMonthsOfYear: function(options) {
		var length = (options && options.length) || this.getLength(),
			template = ilib.DateFmt.monthNameLenMap[length],
			months = [undefined],
			date,
			monthCount;
		
		if (options) {
			if (options.date) {
				date = ilib.Date._dateToIlib(options.date); 	
			}
			
			if (options.year) {
				date = ilib.Date.newInstance({year: options.year, month: 1, day: 1, type: this.cal.getType()});
			}
		}
		
		if (!date) {
			date = this.cal.newDateInstance();
		}

		monthCount = this.cal.getNumMonths(date.getYears());
		for (var i = 1; i <= monthCount; i++) {
			months[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();
		}
		return months;
	},

	/**
	 * Returns an array of the days of the week, formatted to the optional length specified.
	 * i.e. ...getDaysOfWeek() OR ...getDaysOfWeek({length: "short"})
	 * <p>
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>length</i> - length of the names of the months being sought. This may be one of
	 * "short", "medium", "long", or "full"
	 * </ul>
	 * @param  {Object=} options an object-literal that contains one key 
	 *                   "length" with the standard length strings
	 * @return {Array} an array of all of the names of the days of the week
	 */
	getDaysOfWeek: function(options) {
		var length = (options && options.length) || this.getLength(),
			template = ilib.DateFmt.weekDayLenMap[length],
			days = [];
		for (var i = 0; i < 7; i++) {
			days[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();
		}
		return days;
	},

	
	/**
	 * Convert this formatter to a string representation by returning the
	 * format template. This method delegates to getTemplate.
	 * 
	 * @return {string} the format template
	 */
	toString: function() {
		return this.getTemplate();
	},
	
	/*
	 * @private
	 * Left pad the str to the given length of digits with zeros
	 * @param {string} str the string to pad
	 * @param {number} length the desired total length of the output string, padded 
	 */
	_pad: function (str, length) {
		if (typeof(str) !== 'string') {
			str = "" + str;
		}
		var start = 0;
		if (str.charAt(0) === '-') {
			start++;
		}
		return (str.length >= length+start) ? str : str.substring(0, start) + ilib.DateFmt.zeros.substring(0,length-str.length+start) + str.substring(start);
	},
	
	/*
	 * @private
	 * Format a date according to a sequence of components. 
	 * @param {ilib.Date} date a date/time object to format
	 * @param {Array.<string>} templateArr an array of components to format
	 * @return {string} the formatted date
	 */
	_formatTemplate: function (date, templateArr) {
		var i, key, temp, tz, str = "";
		for (i = 0; i < templateArr.length; i++) {
			switch (templateArr[i]) {
				case 'd':
					str += (date.day || 1);
					break;
				case 'dd':
					str += this._pad(date.day || "1", 2);
					break;
				case 'yy':
					temp = "" + ((date.year || 0) % 100);
					str += this._pad(temp, 2);
					break;
				case 'yyyy':
					str += this._pad(date.year || "0", 4);
					break;
				case 'M':
					str += (date.month || 1);
					break;
				case 'MM':
					str += this._pad(date.month || "1", 2);
					break;

				case 'h':
					temp = (date.hour || 0) % 12;
					if (temp == 0) {
						temp = "12";
					}
					str += temp; 
					break;
				case 'hh':
					temp = (date.hour || 0) % 12;
					if (temp == 0) {
						temp = "12";
					}
					str += this._pad(temp, 2);
					break;
				case 'K':
					temp = (date.hour || 0) % 12;
					str += temp; 
					break;
				case 'KK':
					temp = (date.hour || 0) % 12;
					str += this._pad(temp, 2);
					break;

				case 'H':
					str += (date.hour || "0");
					break;
				case 'HH':
					str += this._pad(date.hour || "0", 2);
					break;
				case 'k':
					str += (date.hour == 0 ? "24" : date.hour);
					break;
				case 'kk':
					temp = (date.hour == 0 ? "24" : date.hour);
					str += this._pad(temp, 2);
					break;

				case 'm':
					str += (date.minute || "0");
					break;
				case 'mm':
					str += this._pad(date.minute || "0", 2);
					break;
				case 's':
					str += (date.minute || "0");
					break;
				case 'ss':
					str += this._pad(date.second || "0", 2);
					break;
				case 'S':
					str += (date.millisecond || "0");
					break;
				case 'SSS':
					str += this._pad(date.millisecond || "0", 3);
					break;

				case 'N':
				case 'NN':
				case 'MMM':
				case 'MMMM':
					key = templateArr[i] + (date.month || 1);
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;

				case 'E':
				case 'EE':
				case 'EEE':
				case 'EEEE':
					key = templateArr[i] + date.getDayOfWeek();
					//console.log("finding " + key + " in the resources");
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;
					
				case 'a':
					if (this.meridiems === "chinese") {
						if (date.hour < 6) {
							key = "azh0";	// before dawn
						} else if (date.hour < 9) {
							key = "azh1";	// morning
						} else if (date.hour < 12) {
							key = "azh2";	// late morning/day before noon
						} else if (date.hour < 13) {
							key = "azh3";	// noon hour/midday
						} else if (date.hour < 18) {
							key = "azh4";	// afternoon
						} else if (date.hour < 21) {
							key = "azh5";	// evening time/dusk
						} else {
							key = "azh6";	// night time
						}
					} else {
						key = date.hour < 12 ? "a0" : "a1";
					}
					//console.log("finding " + key + " in the resources");
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;
					
				case 'w':
					str += date.getWeekOfYear();
					break;
				case 'ww':
					str += this._pad(date.getWeekOfYear(), 2);
					break;

				case 'D':
					str += date.getDayOfYear();
					break;
				case 'DD':
					str += this._pad(date.getDayOfYear(), 2);
					break;
				case 'DDD':
					str += this._pad(date.getDayOfYear(), 3);
					break;
				case 'W':
					str += date.getWeekOfMonth(this.locale);
					break;

				case 'G':
					key = "G" + date.getEra();
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;

				case 'O':
					temp = this.sysres.getString("1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th", "ordinalChoice");
					str += temp.formatChoice(date.day, {num: date.day});
					break;
					
				case 'z': // general time zone
					tz = this.getTimeZone(); // lazy-load the tz
					str += tz.getDisplayName(date, "standard");
					break;
				case 'Z': // RFC 822 time zone
					tz = this.getTimeZone(); // lazy-load the tz
					str += tz.getDisplayName(date, "rfc822");
					break;

				default:
					str += templateArr[i].replace(/'/g, "");
					break;
			}
		}

		if (this.digits) {
			str = ilib.mapString(str, this.digits);
		}
		return str;
	},
	
	/**
	 * Format a particular date instance according to the settings of this
	 * formatter object. The type of the date instance being formatted must 
	 * correspond exactly to the calendar type with which this formatter was 
	 * constructed. If the types are not compatible, this formatter will
	 * produce bogus results.
	 * 
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} dateLike a date-like object to format
	 * @return {string} the formatted version of the given date instance
	 */
	format: function (dateLike) {
		var thisZoneName = this.tz && this.tz.getId() || "local";

		var date = ilib.Date._dateToIlib(dateLike, thisZoneName);
		
		if (!date.getCalendar || !(date instanceof ilib.Date)) {
			throw "Wrong date type passed to ilib.DateFmt.format()";
		}
		
		var dateZoneName = date.timezone || "local";
		
		// convert to the time zone of this formatter before formatting
		if (dateZoneName !== thisZoneName || date.getCalendar() !== this.calName) {
			// console.log("Differing time zones date: " + dateZoneName + " and fmt: " + thisZoneName + ". Converting...");
			// this will recalculate the date components based on the new time zone
			// and/or convert a date in another calendar to the current calendar before formatting it
			var newDate = ilib.Date.newInstance({
				type: this.calName,
				timezone: thisZoneName,
				julianday: date.getJulianDay()
			});
			
			date = newDate;
		}
		return this._formatTemplate(date, this.templateArr);
	},
	
	/**
	 * Return a string that describes a date relative to the given 
	 * reference date. The string returned is text that for the locale that
	 * was specified when the formatter instance was constructed.<p>
	 * 
	 * The date can be in the future relative to the reference date or in
	 * the past, and the formatter will generate the appropriate string.<p>
	 * 
	 * The text used to describe the relative reference depends on the length
	 * of time between the date and the reference. If the time was in the
	 * past, it will use the "ago" phrase, and in the future, it will use
	 * the "in" phrase. Examples:<p>
	 * 
	 * <ul>
	 * <li>within a minute: either "X seconds ago" or "in X seconds"
	 * <li>within an hour: either "X minutes ago" or "in X minutes"
	 * <li>within a day: either "X hours ago" or "in X hours"
	 * <li>within 2 weeks: either "X days ago" or "in X days"
	 * <li>within 12 weeks (~3 months): either "X weeks ago" or "in X weeks"
	 * <li>within two years: either "X months ago" or "in X months"
	 * <li>longer than 2 years: "X years ago" or "in X years"
	 * </ul>
	 * 
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} reference a date that the date parameter should be relative to
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} date a date being formatted
	 * @throws "Wrong calendar type" when the start or end dates are not the same
	 * calendar type as the formatter itself
	 * @return {string} the formatted relative date
	 */
	formatRelative: function(reference, date) {
		reference = ilib.Date._dateToIlib(reference);
		date = ilib.Date._dateToIlib(date);
		
		var referenceRd, dateRd, fmt, time, diff, num;
		
		if (typeof(reference) !== 'object' || !reference.getCalendar || reference.getCalendar() !== this.calName ||
			typeof(date) !== 'object' || !date.getCalendar || date.getCalendar() !== this.calName) {
			throw "Wrong calendar type";
		}
		
		referenceRd = reference.getRataDie();
		dateRd = date.getRataDie();
		
		if (dateRd < referenceRd) {
			diff = referenceRd - dateRd;
			fmt = this.sysres.getString("{duration} ago");
		} else {
			diff = dateRd - referenceRd;
			fmt = this.sysres.getString("in {duration}");
		}
		
		if (diff < 0.000694444) {
			num = Math.round(diff * 86400);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}s");
					break;
				case 'm':
					time = this.sysres.getString("1#1 se|#{num} sec");
					break;
				case 'l':
					time = this.sysres.getString("1#1 sec|#{num} sec");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 second|#{num} seconds");
					break;
			}
		} else if (diff < 0.041666667) {
			num = Math.round(diff * 1440);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}m", "durationShortMinutes");
					break;
				case 'm':
					time = this.sysres.getString("1#1 mi|#{num} min");
					break;
				case 'l':
					time = this.sysres.getString("1#1 min|#{num} min");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 minute|#{num} minutes");
					break;
			}
		} else if (diff < 1) {
			num = Math.round(diff * 24);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}h");
					break;
				case 'm':
					time = this.sysres.getString("1#1 hr|#{num} hrs", "durationMediumHours");
					break;
				case 'l':
					time = this.sysres.getString("1#1 hr|#{num} hrs");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 hour|#{num} hours");
					break;
			}
		} else if (diff < 14) {
			num = Math.round(diff);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}d");
					break;
				case 'm':
					time = this.sysres.getString("1#1 dy|#{num} dys");
					break;
				case 'l':
					time = this.sysres.getString("1#1 day|#{num} days", "durationLongDays");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 day|#{num} days");
					break;
			}
		} else if (diff < 84) {
			num = Math.round(diff/7);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}w");
					break;
				case 'm':
					time = this.sysres.getString("1#1 wk|#{num} wks", "durationMediumWeeks");
					break;
				case 'l':
					time = this.sysres.getString("1#1 wk|#{num} wks");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 week|#{num} weeks");
					break;
			}
		} else if (diff < 730) {
			num = Math.round(diff/30.4);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}m", "durationShortMonths");
					break;
				case 'm':
					time = this.sysres.getString("1#1 mo|#{num} mos");
					break;
				case 'l':
					time = this.sysres.getString("1#1 mon|#{num} mons");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 month|#{num} months");
					break;
			}
		} else {
			num = Math.round(diff/365);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}y");
					break;
				case 'm':
					time = this.sysres.getString("1#1 yr|#{num} yrs", "durationMediumYears");
					break;
				case 'l':
					time = this.sysres.getString("1#1 yr|#{num} yrs");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 year|#{num} years");
					break;
			}
		}
		return fmt.format({duration: time.formatChoice(num, {num: num})});
	}
};

/*
 * datefmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
calendar.js
localeinfo.js
timezone.js
datefmt.js
calendar/gregorian.js
util/jsutils.js
*/

// !data dateformats sysres

/**
 * @class
 * Create a new date range formatter instance. The date range formatter is immutable once
 * it is created, but can format as many different date ranges as needed with the same
 * options. Create different date range formatter instances for different purposes
 * and then keep them cached for use later if you have more than one range to
 * format.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the date/times in the range. If the 
 * locale is not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>calendar</i> - the type of calendar to use for this format. The value should
 * be a sting containing the name of the calendar. Currently, the supported
 * types are "gregorian", "julian", "arabic", "hebrew", or "chinese". If the
 * calendar is not specified, then the default calendar for the locale is used. When the
 * calendar type is specified, then the format method must be called with an instance of
 * the appropriate date type. (eg. Gregorian calendar means that the format method must 
 * be called with a GregDate instance.)
 *  
 * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone
 * instance or a time zone specifier string in RFC 822 format. If not specified, the
 * default time zone for the locale is used.
 * 
 * <li><i>length</i> - Specify the length of the format to use as a string. The length 
 * is the approximate size of the formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.
 * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.
 * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual 
 * components may still be abbreviated. (eg. "Tue" instead of "Tuesday")
 * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual 
 * components are spelled out completely.
 * </ul>
 * 
 * eg. The "short" format for an en_US range may be "MM/yy - MM/yy", whereas the long format might be 
 * "MMM, yyyy - MMM, yyyy". In the long format, the month name is textual instead of numeric 
 * and is longer, the year is 4 digits instead of 2, and the format contains slightly more 
 * spaces and formatting characters.<p>
 * 
 * Note that the length parameter does not specify which components are to be formatted. The
 * components that are formatted depend on the length of time in the range.
 * 
 * <li><i>clock</i> - specify that formatted times should use a 12 or 24 hour clock if the
 * format happens to include times. Valid values are "12" and "24".<p>
 * 
 * In some locales, both clocks are used. For example, in en_US, the general populace uses
 * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or 
 * scientific writing, it is more common to use a 24 hour clock. This property allows you to
 * construct a formatter that overrides the default for the locale.<p>
 * 
 * If this property is not specified, the default is to use the most widely used convention
 * for the locale.
 * <li>onLoad - a callback function to call when the date range format object is fully 
 * loaded. When the onLoad option is given, the DateRngFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends daterangefmt.js
 * 
 * @constructor
 * @param {Object} options options governing the way this date range formatter instance works
 */
ilib.DateRngFmt = function(options) {
	var sync = true;
	var loadParams = undefined;
	this.locale = new ilib.Locale();
	this.length = "s";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.calendar) {
			this.calName = options.calendar;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				// only use the first char to save space in the json files
				this.length = options.length.charAt(0);
			}
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		loadParams = options.loadParams;
	}
	
	var opts = {};
	ilib.shallowCopy(options, opts);
	opts.sync = sync;
	opts.loadParams = loadParams;
	
	/**
	 * @private
	 */
	opts.onLoad = ilib.bind(this, function (fmt) {
		this.dateFmt = fmt;
		if (fmt) {
			this.locinfo = this.dateFmt.locinfo;

			// get the default calendar name from the locale, and if the locale doesn't define
			// one, use the hard-coded gregorian as the last resort
			this.calName = this.calName || this.locinfo.getCalendar() || "gregorian";
			this.cal = ilib.Cal.newInstance({
				type: this.calName
			});
			if (!this.cal) {
				this.cal = new ilib.Cal.Gregorian();
			}
			
			this.timeTemplate = this.dateFmt._getFormat(this.dateFmt.formats.time[this.dateFmt.clock], this.dateFmt.timeComponents, this.length) || "hh:mm";
			this.timeTemplateArr = this.dateFmt._tokenize(this.timeTemplate);
			
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		}
	});

	// delegate a bunch of the formatting to this formatter
	new ilib.DateFmt(opts);
};

ilib.DateRngFmt.prototype = {
	/**
	 * Return the locale used with this formatter instance.
	 * @return {ilib.Locale} the ilib.Locale instance for this formatter
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return the name of the calendar used to format date/times for this
	 * formatter instance.
	 * @return {string} the name of the calendar used by this formatter
	 */
	getCalendar: function () {
		return this.dateFmt.getCalendar();
	},
	
	/**
	 * Return the length used to format date/times in this formatter. This is either the
	 * value of the length option to the constructor, or the default value.
	 * 
	 * @return {string} the length of formats this formatter returns
	 */
	getLength: function () {
		return ilib.DateFmt.lenmap[this.length] || "";
	},
	
	/**
	 * Return the time zone used to format date/times for this formatter
	 * instance.
	 * @return {ilib.TimeZone} a string naming the time zone
	 */
	getTimeZone: function () {
		return this.dateFmt.getTimeZone();
	},
	
	/**
	 * Return the clock option set in the constructor. If the clock option was
	 * not given, the default from the locale is returned instead.
	 * @return {string} "12" or "24" depending on whether this formatter uses
	 * the 12-hour or 24-hour clock
	 */
	getClock: function () {
		return this.dateFmt.getClock();
	},
	
	/**
	 * Format a date/time range according to the settings of the current
	 * formatter. The range is specified as being from the "start" date until
	 * the "end" date. <p>
	 * 
	 * The template that the date/time range uses depends on the
	 * length of time between the dates, on the premise that a long date range
	 * which is too specific is not useful. For example, when giving
	 * the dates of the 100 Years War, in most situations it would be more 
	 * appropriate to format the range as "1337 - 1453" than to format it as 
	 * "10:37am November 9, 1337 - 4:37pm July 17, 1453", as the latter format 
	 * is much too specific given the length of time that the range represents.
	 * If a very specific, but long, date range really is needed, the caller 
	 * should format two specific dates separately and put them 
	 * together as you might with other normal strings.<p>
	 * 
	 * The format used for a date range contains the following date components,
	 * where the order of those components is rearranged and the component values 
	 * are translated according to each locale:
	 * 
	 * <ul>
	 * <li>within 3 days: the times of day, dates, months, and years
	 * <li>within 730 days (2 years): the dates, months, and years
	 * <li>within 3650 days (10 years): the months and years
	 * <li>longer than 10 years: the years only 
	 * </ul>
	 * 
	 * In general, if any of the date components share a value between the
	 * start and end date, that component is only given once. For example,
	 * if the range is from November 15, 2011 to November 26, 2011, the 
	 * start and end dates both share the same month and year. The 
	 * range would then be formatted as "November 15-26, 2011". <p>
	 * 
	 * If you want to format a length of time instead of a particular range of
	 * time (for example, the length of an event rather than the specific start time
	 * and end time of that event), then use a duration formatter instance 
	 * (ilib.DurFmt) instead. The formatRange method will make sure that each component 
	 * of the date/time is within the normal range for that component. For example, 
	 * the minutes will always be between 0 and 59, no matter what is specified in 
	 * the date to format, because that is the normal range for minutes. A duration 
	 * format will allow the number of minutes to exceed 59. For example, if you 
	 * were displaying the length of a movie that is 198 minutes long, the minutes
	 * component of a duration could be 198.<p>
	 * 
	 * @param {ilib.Date} start the starting date/time of the range. This must be of 
	 * the same calendar type as the formatter itself. 
	 * @param {ilib.Date} end the ending date/time of the range. This must be of the 
	 * same calendar type as the formatter itself.
	 * @throws "Wrong calendar type" when the start or end dates are not the same
	 * calendar type as the formatter itself
	 * @return {string} a date range formatted for the locale
	 */
	format: function (start, end) {
		var startRd, endRd, fmt = "", yearTemplate, monthTemplate, dayTemplate;
		
		if (typeof(start) !== 'object' || !start.getCalendar || start.getCalendar() !== this.calName ||
			typeof(end) !== 'object' || !end.getCalendar || end.getCalendar() !== this.calName) {
			throw "Wrong calendar type";
		}
		
		startRd = start.getRataDie();
		endRd = end.getRataDie();
		
		// 
		// legend:
		// c00 - difference is less than 3 days. Year, month, and date are same, but time is different
		// c01 - difference is less than 3 days. Year and month are same but date and time are different
		// c02 - difference is less than 3 days. Year is same but month, date, and time are different. (ie. it straddles a month boundary)
		// c03 - difference is less than 3 days. Year, month, date, and time are all different. (ie. it straddles a year boundary)
		// c10 - difference is less than 2 years. Year and month are the same, but date is different.
		// c11 - difference is less than 2 years. Year is the same, but month, date, and time are different.
		// c12 - difference is less than 2 years. All fields are different. (ie. straddles a year boundary)
		// c20 - difference is less than 10 years. All fields are different.
		// c30 - difference is more than 10 years. All fields are different.
		//
		
		if (endRd - startRd < 3) {
			if (start.year === end.year) {
				if (start.month === end.month) {
					if (start.day === end.day) {
						fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c00", this.length));
					} else {
						fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c01", this.length));
					}
				} else {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c02", this.length));
				}
			} else {
				fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c03", this.length));
			}
		} else if (endRd - startRd < 730) {
			if (start.year === end.year) {
				if (start.month === end.month) {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c10", this.length));
				} else {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c11", this.length));
				}
			} else {
				fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c12", this.length));
			}
		} else if (endRd - startRd < 3650) {
			fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c20", this.length));
		} else {
			fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c30", this.length));
		}

		yearTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "y", this.length) || "yyyy");
		monthTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "m", this.length) || "MM");
		dayTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "d", this.length) || "dd");
		
		/*
		console.log("fmt is " + fmt.toString());
		console.log("year template is " + yearTemplate);
		console.log("month template is " + monthTemplate);
		console.log("day template is " + dayTemplate);
		*/
		
		return fmt.format({
			sy: this.dateFmt._formatTemplate(start, yearTemplate),
			sm: this.dateFmt._formatTemplate(start, monthTemplate),
			sd: this.dateFmt._formatTemplate(start, dayTemplate),
			st: this.dateFmt._formatTemplate(start, this.timeTemplateArr),
			ey: this.dateFmt._formatTemplate(end, yearTemplate),
			em: this.dateFmt._formatTemplate(end, monthTemplate),
			ed: this.dateFmt._formatTemplate(end, dayTemplate),
			et: this.dateFmt._formatTemplate(end, this.timeTemplateArr)
		});
	}
};

/*
 * util/search.js - Misc search utility routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Binary search a sorted array for a particular target value.
 * If the exact value is not found, it returns the index of the smallest 
 * entry that is greater than the given target value.<p> 
 * 
 * The comparator
 * parameter is a function that knows how to compare elements of the 
 * array and the target. The function should return a value greater than 0
 * if the array element is greater than the target, a value less than 0 if
 * the array element is less than the target, and 0 if the array element 
 * and the target are equivalent.<p>
 * 
 * If the comparator function is not specified, this function assumes
 * the array and the target are numeric values and should be compared 
 * as such.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @static
 * @param {*} target element being sought 
 * @param {Array} arr the array being searched
 * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries
 * in the array  
 * @return the index of the array into which the value would fit if 
 * inserted, or -1 if given array is not an array or the target is not 
 * a number
 */
ilib.bsearch = function(target, arr, comparator) {
	if (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined') {
		return -1;
	}
	
	var high = arr.length - 1,
		low = 0,
		mid = 0,
		value,
		cmp = comparator || ilib.bsearch.numbers;
	
	while (low <= high) {
		mid = Math.floor((high+low)/2);
		value = cmp(arr[mid], target);
		if (value > 0) {
			high = mid - 1;
		} else if (value < 0) {
			low = mid + 1;
		} else {
			return mid;
		}
	}
	
	return low;
};

/**
 * Returns whether or not the given element is greater than, less than,
 * or equal to the given target.<p>
 * 
 * @private
 * @static
 * @param {number} element the element being tested
 * @param {number} target the target being sought
 */
ilib.bsearch.numbers = function(element, target) {
	return element - target;
};

/**
 * Do a bisection search of a function for a particular target value.<p> 
 * 
 * The function to search is a function that takes a numeric parameter, 
 * does calculations, and returns gives a numeric result. The 
 * function should should be smooth and not have any discontinuities 
 * between the low and high values of the parameter.
 *  
 * Depends directive: !depends utils.js
 * 
 * @static
 * @param {number} target value being sought
 * @param {number} low the lower bounds to start searching
 * @param {number} high the upper bounds to start searching
 * @param {number} precision minimum precision to support. Use 0 if you want to use the default.
 * @param {?function(number)=} func function to search 
 * @return an approximation of the input value to the function that gives the desired
 * target output value, correct to within the error range of Javascript floating point 
 * arithmetic, or NaN if there was some error
 */
ilib.bisectionSearch = function(target, low, high, precision, func) {
	if (typeof(target) !== 'number' || 
			typeof(low) !== 'number' || 
			typeof(high) !== 'number' || 
			typeof(func) !== 'function') {
		return NaN;
	}
	
	var mid = 0,
		value,
		pre = precision > 0 ? precision : 1e-13;
	
	function compareSignificantDigits(a, b) {
		var leftParts = a.toExponential().split('e');
		var rightParts = b.toExponential().split('e');
		var left = new Number(leftParts[0]);
		var right = new Number(rightParts[0]);
		
		return leftParts[1] === rightParts[1] && Math.abs(left - right) < pre; 
	}
	
	do {
		mid = (high+low)/2;
		value = func(mid);
		if (value > target) {
			high = mid;
		} else if (value < target) {
			low = mid;
		}
	} while (high - low > pre);
	
	return mid;
};


/*
 * gregoriandate.js - Represent a date in the Gregorian calendar
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/utils.js
util/search.js
util/math.js
localeinfo.js 
julianday.js
calendar/gregratadie.js
timezone.js
*/

/**
 * @class
 * Construct a new Gregorian date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>dst</i> - boolean used to specify whether the given time components are
 * intended to be in daylight time or not. This is only used in the overlap
 * time when transitioning from DST to standard time, and the time components are 
 * ambiguous. Otherwise at all other times of the year, this flag is ignored.
 * If you specify the date using unix time (UTC) or a julian day, then the time is
 * already unambiguous and this flag does not need to be specified.
 * <p>
 * For example, in the US, the transition out of daylight savings time 
 * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls 
 * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as 
 * "Nov 2, 2014 1:30am", then there are two 1:30am times in that day, and you would 
 * have to give the standard flag to indicate which of those two you mean. 
 * (dst=true means daylight time, dst=false means standard time).   
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this gregorian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this gregorian date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale.
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Gregorian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends gregoriandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date
 */
ilib.Date.GregDate = function(params) {
	this.cal = new ilib.Cal.Gregorian();
	this.timezone = "local";

	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone.toString();
		}
		
		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			this.year = parseInt(params.year, 10) || 0;
			this.month = parseInt(params.month, 10) || 1;
			this.day = parseInt(params.day, 10) || 1;
			this.hour = parseInt(params.hour, 10) || 0;
			this.minute = parseInt(params.minute, 10) || 0;
			this.second = parseInt(params.second, 10) || 0;
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			this.rd = this.newRd(params);
			
			// add the time zone offset to the rd to convert to UTC
			this.offset = 0;
			if (this.timezone === "local" && typeof(params.dst) === 'undefined') {
				// if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean
				// in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this
				// case, use the ilib calculations below, which can distinguish between the two properly
				var d = new Date(this.year, this.month-1, this.day, this.hour, this.minute, this.second, this.millisecond);
				this.offset = -d.getTimezoneOffset() / 1440;
			} else {
				if (!this.tz) {
					this.tz = new ilib.TimeZone({id: this.timezone});
				}
				// getOffsetMillis requires that this.year, this.rd, and this.dst 
				// are set in order to figure out which time zone rules apply and 
				// what the offset is at that point in the year
				this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			}
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	} 

	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.GregDate.prototype = new ilib.Date({noinstance: true});
ilib.Date.GregDate.prototype.parent = ilib.Date;
ilib.Date.GregDate.prototype.constructor = ilib.Date.GregDate;

/**
 * Return a new RD for this date type using the given params.
 * @private
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.GregDate.prototype.newRd = function (params) {
	return new ilib.Date.GregRataDie(params);
};

/**
 * Calculates the Gregorian year for a given rd number.
 * @private
 * @static
 */
ilib.Date.GregDate._calcYear = function(rd) {
	var days400,
		days100,
		days4,
		years400,
		years100,
		years4,
		years1,
		year;

	years400 = Math.floor((rd - 1) / 146097);
	days400 = ilib.mod((rd - 1), 146097);
	years100 = Math.floor(days400 / 36524);
	days100 = ilib.mod(days400, 36524);
	years4 = Math.floor(days100 / 1461);
	days4 = ilib.mod(days100, 1461);
	years1 = Math.floor(days4 / 365);
	
	year = 400 * years400 + 100 * years100 + 4 * years4 + years1;
	if (years100 !== 4 && years1 !== 4) {
		year++;
	}
	return year;
};

/**
 * @private
 */
ilib.Date.GregDate.prototype._calcYear = function(rd) {
	return ilib.Date.GregDate._calcYear(rd);
};

/**
 * Calculate the date components for the current time zone
 * @private
 */
ilib.Date.GregDate.prototype._calcDateComponents = function () {
	if (this.timezone === "local" && this.rd.getRataDie() >= 719163 && this.rd.getRataDie() <= 744018.134803241) {
		// console.log("using js Date to calculate offset");
		// use the intrinsic JS Date object to do the tz conversion for us, which 
		// guarantees that it follows the system tz database settings 
		var d = new Date(this.rd.getTime());
	
		/**
		 * Year in the Gregorian calendar.
		 * @type number
		 */
		this.year = d.getFullYear();
		
		/**
		 * The month number, ranging from 1 (January) to 12 (December).
		 * @type number
		 */
		this.month = d.getMonth()+1;
		
		/**
		 * The day of the month. This ranges from 1 to 31.
		 * @type number
		 */
		this.day = d.getDate();
		
		/**
		 * The hour of the day. This can be a number from 0 to 23, as times are
		 * stored unambiguously in the 24-hour clock.
		 * @type number
		 */
		this.hour = d.getHours();
		
		/**
		 * The minute of the hours. Ranges from 0 to 59.
		 * @type number
		 */
		this.minute = d.getMinutes();
		
		/**
		 * The second of the minute. Ranges from 0 to 59.
		 * @type number
		 */
		this.second = d.getSeconds();
		
		/**
		 * The millisecond of the second. Ranges from 0 to 999.
		 * @type number
		 */
		this.millisecond = d.getMilliseconds();
		
		this.offset = -d.getTimezoneOffset() / 1440;
	} else {
		// console.log("using ilib to calculate offset. tz is " + this.timezone);
		// console.log("GregDate._calcDateComponents: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
		if (typeof(this.offset) === "undefined") {
			// console.log("calculating offset");
			this.year = this._calcYear(this.rd.getRataDie());
			
			// now offset the RD by the time zone, then recalculate in case we were 
			// near the year boundary
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			this.offset = this.tz.getOffsetMillis(this) / 86400000;
		// } else {
			// console.log("offset is already defined somehow. type is " + typeof(this.offset));
			// console.trace("Stack is this one");
		}
		// console.log("offset is " + this.offset);
		var rd = this.rd.getRataDie();
		if (this.offset !== 0) {
			rd += this.offset;
		}
		this.year = this._calcYear(rd);
		
		var yearStartRd = this.newRd({
			year: this.year,
			month: 1,
			day: 1,
			cal: this.cal
		});
		
		// remainder is days into the year
		var remainder = rd - yearStartRd.getRataDie() + 1;
		
		var cumulative = ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, this.year) ? 
			ilib.Date.GregRataDie.cumMonthLengthsLeap : 
			ilib.Date.GregRataDie.cumMonthLengths; 
		
		this.month = ilib.bsearch(Math.floor(remainder), cumulative);
		remainder = remainder - cumulative[this.month-1];
		
		this.day = Math.floor(remainder);
		remainder -= this.day;
		// now convert to milliseconds for the rest of the calculation
		remainder = Math.round(remainder * 86400000);
		
		this.hour = Math.floor(remainder/3600000);
		remainder -= this.hour * 3600000;
		
		this.minute = Math.floor(remainder/60000);
		remainder -= this.minute * 60000;
		
		this.second = Math.floor(remainder/1000);
		remainder -= this.second * 1000;
		
		this.millisecond = Math.floor(remainder);
	}
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.GregDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	return ilib.mod(rd, 7);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and 
 * December 31st is 365 in regular years, or 366 in leap years.
 * @return {number} the ordinal day of the year
 */
ilib.Date.GregDate.prototype.getDayOfYear = function() {
	var cumulativeMap = this.cal.isLeapYear(this.year) ? 
		ilib.Date.GregRataDie.cumMonthLengthsLeap : 
		ilib.Date.GregRataDie.cumMonthLengths; 
		
	return cumulativeMap[this.month-1] + this.day;
};

/**
 * Return the era for this date as a number. The value for the era for Gregorian 
 * calendars is -1 for "before the common era" (BCE) and 1 for "the common era" (CE). 
 * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar, 
 * there is a year 0, so any years that are negative or zero are BCE. In the Julian
 * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to 
 * 1.
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.GregDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.GregDate.prototype.getCalendar = function() {
	return "gregorian";
};

// register with the factory method
ilib.Date._constructors["gregorian"] = ilib.Date.GregDate;
/*
 * thaisolar.js - Represent a Thai solar calendar object.
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js calendar/gregorian.js util/utils.js util/math.js */

/**
 * @class
 * Construct a new Thai solar calendar object. This class encodes information about
 * a Thai solar calendar.<p>
 * 
 * Depends directive: !depends thaisolar.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.ThaiSolar = function() {
	this.type = "thaisolar";
};

ilib.Cal.ThaiSolar.prototype = new ilib.Cal.Gregorian();
ilib.Cal.ThaiSolar.prototype.parent = ilib.Cal.Gregorian;
ilib.Cal.ThaiSolar.prototype.constructor = ilib.Cal.ThaiSolar;

/**
 * Return true if the given year is a leap year in the Thai solar calendar.
 * The year parameter may be given as a number, or as a ThaiSolarDate object.
 * @param {number|ilib.Date.ThaiSolarDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.ThaiSolar.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.getYears());
	y -= 543;
	var centuries = ilib.mod(y, 400);
	return (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.ThaiSolar.prototype.newDateInstance = function (options) {
	return new ilib.Date.ThaiSolarDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["thaisolar"] = ilib.Cal.ThaiSolar;
/*
 * thaisolardate.js - Represent a date in the ThaiSolar calendar
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/jsutils.js
*/

/**
 * @class
 * Construct a new Thai solar date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this Thai solar date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * </ul>
 *
 * If the constructor is called with another Thai solar date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends thaisolardate.js
 * 
 * @constructor
 * @extends ilib.Date.GregDate
 * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date
 */
ilib.Date.ThaiSolarDate = function(params) {
	var p = params;
	if (params) {
		// there is 198327 days difference between the Thai solar and 
		// Gregorian epochs which is equivalent to 543 years
		p = {};
		ilib.shallowCopy(params, p);
		if (typeof(p.year) !== 'undefined') {
			p.year -= 543;	
		}
		if (typeof(p.rd) !== 'undefined') {
			p.rd -= 198327;
		}
	}
	this.rd = undefined; // clear these out so that the GregDate constructor can set it
	this.offset = undefined;
	//console.log("ThaiSolarDate.constructor: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	ilib.Date.GregDate.call(this, p);
	this.cal = new ilib.Cal.ThaiSolar();
	// make sure the year is set correctly
	if (params && typeof(params.year) !== 'undefined') {
		this.year = parseInt(params.year, 10);
	}
};

ilib.Date.ThaiSolarDate.prototype = new ilib.Date.GregDate();
ilib.Date.ThaiSolarDate.prototype.parent = ilib.Date.GregDate.prototype;
ilib.Date.ThaiSolarDate.prototype.constructor = ilib.Date.ThaiSolarDate;

/**
 * the difference between a zero Julian day and the zero Thai Solar date.
 * This is some 543 years before the start of the Gregorian epoch. 
 * @private
 * @const
 * @type number
 */
ilib.Date.ThaiSolarDate.epoch = 1523097.5;

/**
 * Calculate the date components for the current time zone
 * @protected
 */
ilib.Date.ThaiSolarDate.prototype._calcDateComponents = function () {
	// there is 198327 days difference between the Thai solar and 
	// Gregorian epochs which is equivalent to 543 years
	// console.log("ThaiSolarDate._calcDateComponents: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	this.parent._calcDateComponents.call(this);
	this.year += 543;
};

/**
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @protected
 * @return {number} the rd date as a number
 */
ilib.Date.ThaiSolarDate.prototype.getRataDie = function() {
	// there is 198327 days difference between the Thai solar and 
	// Gregorian epochs which is equivalent to 543 years
	return this.rd.getRataDie() + 198327;
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.before = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.before(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.after = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.after(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.onOrBefore = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.onOrBefore(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.onOrAfter = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.onOrAfter(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.ThaiSolarDate.prototype.getCalendar = function() {
	return "thaisolar";
};

//register with the factory method
ilib.Date._constructors["thaisolar"] = ilib.Date.ThaiSolarDate;


/*
 * astro.js - Static functions to support astronomical calculations
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends
ilibglobal.js
date.js
calendar/gregoriandate.js
calendar/gregratadie.js
*/

// !data astro

/*
 * These routines were derived from a public domain set of JavaScript 
 * functions for positional astronomy by John Walker of Fourmilab, 
 * September 1999.
 */

/**
 * Load in all the data needed for astrological calculations.
 * 
 * @param {boolean} sync
 * @param {*} loadParams
 * @param {function(*)|undefined} callback
 */
ilib.Date.initAstro = function(sync, loadParams, callback) {
	if (!ilib.data.astro) {
		ilib.loadData({
			name: "astro.json", // countries in their own language 
			locale: "-", // only need to load the root file 
			nonLocale: true,
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, /** @type function() */ function(astroData) {
				/** 
				 * @type {{
				 *  	_EquinoxpTerms:Array.<number>, 
				 *  	_JDE0tab1000:Array.<number>, 
				 *  	_JDE0tab2000:Array.<number>, 
				 *  	_deltaTtab:Array.<number>,
				 *  	_oterms:Array.<number>,
				 *  	_nutArgMult:Array.<number>, 
				 *  	_nutArgCoeff:Array.<number>, 
				 *  	_nutCoeffA:Array.<number>,
				 *  	_nutCoeffB:Array.<number>,
				 *  	_coeff19th:Array.<number>,
				 *  	_coeff18th:Array.<number>,
				 *  	_solarLongCoeff:Array.<number>, 
				 *  	_solarLongMultipliers:Array.<number>, 
				 *  	_solarLongAddends:Array.<number>, 
				 *  	_meanMoonCoeff:Array.<number>,
				 *  	_elongationCoeff:Array.<number>,
				 *  	_solarAnomalyCoeff:Array.<number>,
				 *  	_lunarAnomalyCoeff:Array.<number>,
				 *  	_moonFromNodeCoeff:Array.<number>,
				 *  	_eCoeff:Array.<number>,
				 *  	_lunarElongationLongCoeff:Array.<number>,
				 *  	_solarAnomalyLongCoeff:Array.<number>,
				 *  	_lunarAnomalyLongCoeff:Array.<number>,
				 *  	_moonFromNodeLongCoeff:Array.<number>,
				 *  	_sineCoeff:Array.<number>,
				 *  	_nmApproxCoeff:Array.<number>,
				 *  	_nmCapECoeff:Array.<number>,
				 *  	_nmSolarAnomalyCoeff:Array.<number>,
				 *  	_nmLunarAnomalyCoeff:Array.<number>,
				 *  	_nmMoonArgumentCoeff:Array.<number>,
				 *  	_nmCapOmegaCoeff:Array.<number>,
				 *  	_nmEFactor:Array.<number>,
				 *  	_nmSolarCoeff:Array.<number>,
				 *  	_nmLunarCoeff:Array.<number>,
				 *  	_nmMoonCoeff:Array.<number>,
				 *  	_nmSineCoeff:Array.<number>,
				 *  	_nmAddConst:Array.<number>,
				 *  	_nmAddCoeff:Array.<number>,
				 *  	_nmAddFactor:Array.<number>,
				 *  	_nmExtra:Array.<number>
				 *  }}
				 */ 	
			 	ilib.data.astro = astroData;
				if (callback && typeof(callback) === 'function') {
					callback(astroData);
				}
			})
		});
	} else {
		if (callback && typeof(callback) === 'function') {
			callback(ilib.data.astro);
		}
	}
};

/**
 * Convert degrees to radians.
 * 
 * @static
 * @param {number} d angle in degrees
 * @return {number} angle in radians 
 */
ilib.Date._dtr = function(d) {
	return (d * Math.PI) / 180.0;
};

/**
 * Convert radians to degrees.
 * 
 * @static
 * @param {number} r angle in radians
 * @return {number} angle in degrees 
 */
ilib.Date._rtd = function(r) {
	return (r * 180.0) / Math.PI;
};

/**
 * Return the cosine of an angle given in degrees.
 * @static
 * @param {number} d angle in degrees
 * @return {number} cosine of the angle.
 */  
ilib.Date._dcos = function(d) {
	return Math.cos(ilib.Date._dtr(d));
};

/**
 * Return the sine of an angle given in degrees.
 * @static
 * @param {number} d angle in degrees
 * @return {number} sine of the angle.
 */  
ilib.Date._dsin = function(d) {
	return Math.sin(ilib.Date._dtr(d));
};

/**
 * Return the tan of an angle given in degrees.
 * @static
 * @param {number} d angle in degrees
 * @return {number} tan of the angle.
 */  
ilib.Date._dtan = function(d) {
	return Math.tan(ilib.Date._dtr(d));
};

/**
 * Range reduce angle in degrees.
 * 
 * @static
 * @param {number} a angle to reduce
 * @return {number} the reduced angle  
 */
ilib.Date._fixangle = function(a) {
	return a - 360.0 * (Math.floor(a / 360.0));
};

/**
 * Range reduce angle in radians.
 * 
 * @static
 * @param {number} a angle to reduce
 * @return {number} the reduced angle  
 */
ilib.Date._fixangr = function(a) {
	return a - (2 * Math.PI) * (Math.floor(a / (2 * Math.PI)));
};

/**
 * Determine the Julian Ephemeris Day of an equinox or solstice.  The "which" 
 * argument selects the item to be computed:
 * 
 * <ul>
 * <li>0   March equinox
 * <li>1   June solstice
 * <li>2   September equinox
 * <li>3   December solstice
 * </ul>
 * 
 * @static
 * @param {number} year Gregorian year to calculate for
 * @param {number} which Which equinox or solstice to calculate
 */
ilib.Date._equinox = function(year, which) {
	var deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;

	/*  Initialize terms for mean equinox and solstices.  We
	    have two sets: one for years prior to 1000 and a second
	    for subsequent years.  */

	if (year < 1000) {
		JDE0tab = ilib.data.astro._JDE0tab1000;
		Y = year / 1000;
	} else {
		JDE0tab = ilib.data.astro._JDE0tab2000;
		Y = (year - 2000) / 1000;
	}

	JDE0 = JDE0tab[which][0] + (JDE0tab[which][1] * Y)
			+ (JDE0tab[which][2] * Y * Y) + (JDE0tab[which][3] * Y * Y * Y)
			+ (JDE0tab[which][4] * Y * Y * Y * Y);

	//document.debug.log.value += "JDE0 = " + JDE0 + "\n";

	T = (JDE0 - 2451545.0) / 36525;
	//document.debug.log.value += "T = " + T + "\n";
	W = (35999.373 * T) - 2.47;
	//document.debug.log.value += "W = " + W + "\n";
	deltaL = 1 + (0.0334 * ilib.Date._dcos(W)) + (0.0007 * ilib.Date._dcos(2 * W));
	//document.debug.log.value += "deltaL = " + deltaL + "\n";

	//  Sum the periodic terms for time T

	S = 0;
	j = 0;
	for (i = 0; i < 24; i++) {
		S += ilib.data.astro._EquinoxpTerms[j]
				* ilib.Date._dcos(ilib.data.astro._EquinoxpTerms[j + 1] + (ilib.data.astro._EquinoxpTerms[j + 2] * T));
		j += 3;
	}

	//document.debug.log.value += "S = " + S + "\n";
	//document.debug.log.value += "Corr = " + ((S * 0.00001) / deltaL) + "\n";

	JDE = JDE0 + ((S * 0.00001) / deltaL);

	return JDE;
};

/* 
 * The table of observed Delta T values at the beginning of
 * years from 1620 through 2014 as found in astro.json is taken from
 * http://www.staff.science.uu.nl/~gent0113/deltat/deltat.htm
 * and
 * ftp://maia.usno.navy.mil/ser7/deltat.data
 */

/**  
 * Determine the difference, in seconds, between dynamical time and universal time.
 * 
 * @static
 * @param {number} year to calculate the difference for
 * @return {number} difference in seconds between dynamical time and universal time  
 */
ilib.Date._deltat = function (year) {
	var dt, f, i, t;

	if ((year >= 1620) && (year <= 2014)) {
		i = Math.floor(year - 1620);
		f = (year - 1620) - i; /* Fractional part of year */
		dt = ilib.data.astro._deltaTtab[i] + ((ilib.data.astro._deltaTtab[i + 1] - ilib.data.astro._deltaTtab[i]) * f);
	} else {
		t = (year - 2000) / 100;
		if (year < 948) {
			dt = 2177 + (497 * t) + (44.1 * t * t);
		} else {
			dt = 102 + (102 * t) + (25.3 * t * t);
			if ((year > 2000) && (year < 2100)) {
				dt += 0.37 * (year - 2100);
			}
		}
	}
	return dt;
};

/**
 * Calculate the obliquity of the ecliptic for a given
 * Julian date.  This uses Laskar's tenth-degree
 * polynomial fit (J. Laskar, Astronomy and
 * Astrophysics, Vol. 157, page 68 [1986]) which is
 * accurate to within 0.01 arc second between AD 1000
 * and AD 3000, and within a few seconds of arc for
 * +/-10000 years around AD 2000.  If we're outside the
 * range in which this fit is valid (deep time) we
 * simply return the J2000 value of the obliquity, which
 * happens to be almost precisely the mean.
 * 
 * @static
 * @param {number} jd Julian Day to calculate the obliquity for
 * @return {number} the obliquity
 */
ilib.Date._obliqeq = function (jd) {
	var eps, u, v, i;

 	v = u = (jd - 2451545.0) / 3652500.0;

 	eps = 23 + (26 / 60.0) + (21.448 / 3600.0);

 	if (Math.abs(u) < 1.0) {
 		for (i = 0; i < 10; i++) {
 			eps += (ilib.data.astro._oterms[i] / 3600.0) * v;
 			v *= u;
 		}
 	}
 	return eps;
};

/**
 * Return the position of the sun.  We return
 * intermediate values because they are useful in a
 * variety of other contexts.
 * @static
 * @param {number} jd find the position of sun on this Julian Day
 * @return {Object} the position of the sun and many intermediate
 * values
 */
ilib.Date._sunpos = function(jd) {
	var ret = {}, 
		T, T2, T3, Omega, epsilon, epsilon0;

	T = (jd - 2451545.0) / 36525.0;
	//document.debug.log.value += "Sunpos.  T = " + T + "\n";
	T2 = T * T;
	T3 = T * T2;
	ret.meanLongitude = ilib.Date._fixangle(280.46646 + 36000.76983 * T + 0.0003032 * T2);
	//document.debug.log.value += "ret.meanLongitude = " + ret.meanLongitude + "\n";
	ret.meanAnomaly = ilib.Date._fixangle(357.52911 + (35999.05029 * T) - 0.0001537 * T2 - 0.00000048 * T3);
	//document.debug.log.value += "ret.meanAnomaly = " + ret.meanAnomaly + "\n";
	ret.eccentricity = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2;
	//document.debug.log.value += "e = " + e + "\n";
	ret.equationOfCenter = ((1.914602 - 0.004817 * T - 0.000014 * T2) * ilib.Date._dsin(ret.meanAnomaly))
			+ ((0.019993 - 0.000101 * T) * ilib.Date._dsin(2 * ret.meanAnomaly))
			+ (0.000289 * ilib.Date._dsin(3 * ret.meanAnomaly));
	//document.debug.log.value += "ret.equationOfCenter = " + ret.equationOfCenter + "\n";
	ret.sunLongitude = ret.meanLongitude + ret.equationOfCenter;
	//document.debug.log.value += "ret.sunLongitude = " + ret.sunLongitude + "\n";
	//ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;
	//document.debug.log.value += "ret.sunAnomaly = " + ret.sunAnomaly + "\n";
	// ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * ilib.Date._dcos(ret.sunAnomaly)));
	//document.debug.log.value += "ret.sunRadius = " + ret.sunRadius + "\n";
	Omega = 125.04 - (1934.136 * T);
	//document.debug.log.value += "Omega = " + Omega + "\n";
	ret.apparentLong = ret.sunLongitude + (-0.00569) + (-0.00478 * ilib.Date._dsin(Omega));
	//document.debug.log.value += "ret.apparentLong = " + ret.apparentLong + "\n";
	epsilon0 = ilib.Date._obliqeq(jd);
	//document.debug.log.value += "epsilon0 = " + epsilon0 + "\n";
	epsilon = epsilon0 + (0.00256 * ilib.Date._dcos(Omega));
	//document.debug.log.value += "epsilon = " + epsilon + "\n";
	//ret.rightAscension = ilib.Date._fixangle(ilib.Date._rtd(Math.atan2(ilib.Date._dcos(epsilon0) * ilib.Date._dsin(ret.sunLongitude), ilib.Date._dcos(ret.sunLongitude))));
	//document.debug.log.value += "ret.rightAscension = " + ret.rightAscension + "\n";
	// ret.declination = ilib.Date._rtd(Math.asin(ilib.Date._dsin(epsilon0) * ilib.Date._dsin(ret.sunLongitude)));
	////document.debug.log.value += "ret.declination = " + ret.declination + "\n";
	ret.inclination = ilib.Date._fixangle(23.4392911 - 0.013004167 * T - 0.00000016389 * T2 + 0.0000005036 * T3);
	ret.apparentRightAscension = ilib.Date._fixangle(ilib.Date._rtd(Math.atan2(ilib.Date._dcos(epsilon) * ilib.Date._dsin(ret.apparentLong), ilib.Date._dcos(ret.apparentLong))));
	//document.debug.log.value += "ret.apparentRightAscension = " + ret.apparentRightAscension + "\n";
	//ret.apparentDeclination = ilib.Date._rtd(Math.asin(ilib.Date._dsin(epsilon) * ilib.Date._dsin(ret.apparentLong)));
	//document.debug.log.value += "ret.apparentDecliation = " + ret.apparentDecliation + "\n";

	// Angular quantities are expressed in decimal degrees
	return ret;
};

/**
 * Calculate the nutation in longitude, deltaPsi, and obliquity, 
 * deltaEpsilon for a given Julian date jd. Results are returned as an object
 * giving deltaPsi and deltaEpsilon in degrees.
 * 
 * @static
 * @param {number} jd calculate the nutation of this Julian Day
 * @return {Object} the deltaPsi and deltaEpsilon of the nutation
 */
ilib.Date._nutation = function(jd) {
	var i, j, 
		t = (jd - 2451545.0) / 36525.0, 
		t2, t3, to10, 
		ta = [], 
		dp = 0, 
		de = 0, 
		ang,
		ret = {};

	t3 = t * (t2 = t * t);

	/*
	 * Calculate angles. The correspondence between the elements of our array
	 * and the terms cited in Meeus are:
	 * 
	 * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \Omega
	 * 
	 */

	ta[0] = ilib.Date._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);
	ta[1] = ilib.Date._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);
	ta[2] = ilib.Date._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);
	ta[3] = ilib.Date._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);
	ta[4] = ilib.Date._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);

	/*
	 * Range reduce the angles in case the sine and cosine functions don't do it
	 * as accurately or quickly.
	 */

	for (i = 0; i < 5; i++) {
		ta[i] = ilib.Date._fixangr(ta[i]);
	}

	to10 = t / 10.0;
	for (i = 0; i < 63; i++) {
		ang = 0;
		for (j = 0; j < 5; j++) {
			if (ilib.data.astro._nutArgMult[(i * 5) + j] != 0) {
				ang += ilib.data.astro._nutArgMult[(i * 5) + j] * ta[j];
			}
		}
		dp += (ilib.data.astro._nutArgCoeff[(i * 4) + 0] + ilib.data.astro._nutArgCoeff[(i * 4) + 1] * to10) * Math.sin(ang);
		de += (ilib.data.astro._nutArgCoeff[(i * 4) + 2] + ilib.data.astro._nutArgCoeff[(i * 4) + 3] * to10) * Math.cos(ang);
	}

	/*
	 * Return the result, converting from ten thousandths of arc seconds to
	 * radians in the process.
	 */

	ret.deltaPsi = dp / (3600.0 * 10000.0);
	ret.deltaEpsilon = de / (3600.0 * 10000.0);

	return ret;
};

/**
 * Returns the equation of time as a fraction of a day.
 * 
 * @static
 * @param {number} jd the Julian Day of the day to calculate for
 * @return {number} the equation of time for the given day  
 */
ilib.Date._equationOfTime = function(jd) {
	var alpha, deltaPsi, E, epsilon, L0, tau, pos;

	// 2451545.0 is the Julian day of J2000 epoch
	// 365250.0 is the number of days in a Julian millenium
	tau = (jd - 2451545.0) / 365250.0;
	//console.log("equationOfTime.  tau = " + tau);
	L0 = 280.4664567 + (360007.6982779 * tau) + (0.03032028 * tau * tau)
			+ ((tau * tau * tau) / 49931)
			+ (-((tau * tau * tau * tau) / 15300))
			+ (-((tau * tau * tau * tau * tau) / 2000000));
	//console.log("L0 = " + L0);
	L0 = ilib.Date._fixangle(L0);
	//console.log("L0 = " + L0);
	pos = ilib.Date._sunpos(jd);
	alpha = pos.apparentRightAscension;
	//console.log("alpha = " + alpha);
	var nut = ilib.Date._nutation(jd);
	deltaPsi = nut.deltaPsi;
	//console.log("deltaPsi = " + deltaPsi);
	epsilon = ilib.Date._obliqeq(jd) + nut.deltaEpsilon;
	//console.log("epsilon = " + epsilon);
	//console.log("L0 - 0.0057183 = " + (L0 - 0.0057183));
	//console.log("L0 - 0.0057183 - alpha = " + (L0 - 0.0057183 - alpha));
	//console.log("deltaPsi * cos(epsilon) = " + deltaPsi * ilib.Date._dcos(epsilon));
	
	E = L0 - 0.0057183 - alpha + deltaPsi * ilib.Date._dcos(epsilon);
	// if alpha and L0 are in different quadrants, then renormalize
	// so that the difference between them is in the right range
	if (E > 180) {
		E -= 360;
	}
	//console.log("E = " + E);
	// E = E - 20.0 * (Math.floor(E / 20.0));
	E = E * 4;
	//console.log("Efixed = " + E);
	E = E / (24 * 60);
	//console.log("Eday = " + E);

	return E;
};

/**
 * @private
 * @static
 */
ilib.Date._poly = function(x, coefficients) {
	var result = coefficients[0];
	var xpow = x;
	for (var i = 1; i < coefficients.length; i++) {
		result += coefficients[i] * xpow;
		xpow *= x;
	}
	return result;
};

/**
 * Calculate the UTC RD from the local RD given "zone" number of minutes
 * worth of offset.
 * 
 * @static
 * @param {number} local RD of the locale time, given in any calendar
 * @param {number} zone number of minutes of offset from UTC for the time zone 
 * @return {number} the UTC equivalent of the local RD
 */
ilib.Date._universalFromLocal = function(local, zone) {
	return local - zone / 1440;
};

/**
 * Calculate the local RD from the UTC RD given "zone" number of minutes
 * worth of offset.
 * 
 * @static
 * @param {number} local RD of the locale time, given in any calendar
 * @param {number} zone number of minutes of offset from UTC for the time zone 
 * @return {number} the UTC equivalent of the local RD
 */
ilib.Date._localFromUniversal = function(local, zone) {
	return local + zone / 1440;
};

/**
 * @private
 * @static
 * @param {number} c julian centuries of the date to calculate
 * @return {number} the aberration
 */
ilib.Date._aberration = function(c) {
	return 9.74e-05 * ilib.Date._dcos(177.63 + 35999.01847999999 * c) - 0.005575;
};

/**
 * @private
 *
ilib.data.astro._nutCoeffA = [124.90, -1934.134, 0.002063];
ilib.data.astro._nutCoeffB = [201.11, 72001.5377, 0.00057];
*/

/**
 * @private
 * @static
 * @param {number} c julian centuries of the date to calculate
 * @return {number} the nutation for the given julian century in radians
 */
ilib.Date._nutation2 = function(c) {
	var a = ilib.Date._poly(c, ilib.data.astro._nutCoeffA);
	var b = ilib.Date._poly(c, ilib.data.astro._nutCoeffB);
	// return -0.0000834 * ilib.Date._dsin(a) - 0.0000064 * ilib.Date._dsin(b);
	return -0.004778 * ilib.Date._dsin(a) - 0.0003667 * ilib.Date._dsin(b);
};


/**
 * @static
 * @private
 */
ilib.Date._ephemerisCorrection = function(jd) {
	var year = ilib.Date.GregDate._calcYear(jd - 1721424.5);
	
	if (1988 <= year && year <= 2019) {
		return (year - 1933) / 86400;
	}
	
	if (1800 <= year && year <= 1987) {
		var jul1 = new ilib.Date.GregRataDie({
			year: year,
			month: 7,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0
		});
		// 693596 is the rd of Jan 1, 1900
		var theta = (jul1.getRataDie() - 693596) / 36525;
		return ilib.Date._poly(theta, (1900 <= year) ? ilib.data.astro._coeff19th : ilib.data.astro._coeff18th);
	}
	
	if (1620 <= year && year <= 1799) {
		year -= 1600;
		return (196.58333 - 4.0675 * year + 0.0219167 * year * year) / 86400;
	}
	
	// 660724 is the rd of Jan 1, 1810
	var jan1 = new ilib.Date.GregRataDie({
		year: year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0
	});
	// var x = 0.5 + (jan1.getRataDie() - 660724);
	var x = 0.5 + (jan1.getRataDie() - 660724);
	
	return ((x * x / 41048480) - 15) / 86400;
};

/**
 * @static
 * @private
 */
ilib.Date._ephemerisFromUniversal = function(jd) {
	return jd + ilib.Date._ephemerisCorrection(jd);
};

/**
 * @static
 * @private
 */
ilib.Date._universalFromEphemeris = function(jd) {
	return jd - ilib.Date._ephemerisCorrection(jd);
};

/**
 * @static
 * @private
 */
ilib.Date._julianCenturies = function(jd) {
	// 2451545.0 is the Julian day of J2000 epoch
	// 730119.5 is the Gregorian RD of J2000 epoch
	// 36525.0 is the number of days in a Julian century
	return (ilib.Date._ephemerisFromUniversal(jd) - 2451545.0) / 36525.0;
};

/**
 * Calculate the solar longitude
 * 
 * @static
 * @param {number} jd julian day of the date to calculate the longitude for 
 * @return {number} the solar longitude in degrees
 */
ilib.Date._solarLongitude = function(jd) {
	var c = ilib.Date._julianCenturies(jd),
		longitude = 0,
		len = ilib.data.astro._solarLongCoeff.length,
		row;
	
	for (var i = 0; i < len; i++) {
		longitude += ilib.data.astro._solarLongCoeff[i] * 
			ilib.Date._dsin(ilib.data.astro._solarLongAddends[i] + ilib.data.astro._solarLongMultipliers[i] * c);
	}
	longitude *= 5.729577951308232e-06;
	longitude += 282.77718340000001 + 36000.769537439999 * c;
	longitude += ilib.Date._aberration(c) + ilib.Date._nutation2(c);
	return ilib.Date._fixangle(longitude);
};

/**
 * @static
 * @protected
 * @param {number} jd
 * @return {number}
 */
ilib.Date._lunarLongitude = function (jd) {
	var c = ilib.Date._julianCenturies(jd),
	    meanMoon = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._meanMoonCoeff)),
	    elongation = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._elongationCoeff)),
	    solarAnomaly = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._solarAnomalyCoeff)),
	    lunarAnomaly = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._lunarAnomalyCoeff)),
	    moonNode = ilib.Date._fixangle(ilib.Date._poly(c, ilib.data.astro._moonFromNodeCoeff)),
	    e = ilib.Date._poly(c, ilib.data.astro._eCoeff);
	
	var sum = 0;
	for (var i = 0; i < ilib.data.astro._lunarElongationLongCoeff.length; i++) {
		var x = ilib.data.astro._solarAnomalyLongCoeff[i];

		sum += ilib.data.astro._sineCoeff[i] * Math.pow(e, Math.abs(x)) * 
			ilib.Date._dsin(ilib.data.astro._lunarElongationLongCoeff[i] * elongation + x * solarAnomaly + 
				ilib.data.astro._lunarAnomalyLongCoeff[i] * lunarAnomaly + 
				ilib.data.astro._moonFromNodeLongCoeff[i] * moonNode);
	}
	var longitude = sum / 1000000;
	var venus = 3958.0 / 1000000 * ilib.Date._dsin(119.75 + c * 131.84899999999999);
	var jupiter = 318.0 / 1000000 * ilib.Date._dsin(53.090000000000003 + c * 479264.28999999998);
	var flatEarth = 1962.0 / 1000000 * ilib.Date._dsin(meanMoon - moonNode);
	
	return ilib.Date._fixangle(meanMoon + longitude + venus + jupiter + flatEarth + ilib.Date._nutation2(c));
};

/**
 * @static
 * @param {number} n
 * @return {number} julian day of the n'th new moon
 */
ilib.Date._newMoonTime = function(n) {
	var k = n - 24724;
	var c = k / 1236.8499999999999;
	var approx = ilib.Date._poly(c, ilib.data.astro._nmApproxCoeff);
	var capE = ilib.Date._poly(c, ilib.data.astro._nmCapECoeff);
	var solarAnomaly = ilib.Date._poly(c, ilib.data.astro._nmSolarAnomalyCoeff);
	var lunarAnomaly = ilib.Date._poly(c, ilib.data.astro._nmLunarAnomalyCoeff);
	var moonArgument = ilib.Date._poly(c, ilib.data.astro._nmMoonArgumentCoeff);
	var capOmega = ilib.Date._poly(c, ilib.data.astro._nmCapOmegaCoeff);
	var correction = -0.00017 * ilib.Date._dsin(capOmega);
	for (var i = 0; i < ilib.data.astro._nmSineCoeff.length; i++) {
		correction = correction + ilib.data.astro._nmSineCoeff[i] * Math.pow(capE, ilib.data.astro._nmEFactor[i]) * 
		ilib.Date._dsin(ilib.data.astro._nmSolarCoeff[i] * solarAnomaly + 
				ilib.data.astro._nmLunarCoeff[i] * lunarAnomaly + 
				ilib.data.astro._nmMoonCoeff[i] * moonArgument);
	}
	var additional = 0;
	for (var i = 0; i < ilib.data.astro._nmAddConst.length; i++) {
		additional = additional + ilib.data.astro._nmAddFactor[i] * 
		ilib.Date._dsin(ilib.data.astro._nmAddConst[i] + ilib.data.astro._nmAddCoeff[i] * k);
	}
	var extra = 0.000325 * ilib.Date._dsin(ilib.Date._poly(c, ilib.data.astro._nmExtra));
	return ilib.Date._universalFromEphemeris(approx + correction + extra + additional + ilib.Date.RataDie.gregorianEpoch);
};

/**
 * @static
 * @param {number} jd
 * @return {number}
 */
ilib.Date._lunarSolarAngle = function(jd) {
	var lunar = ilib.Date._lunarLongitude(jd);
	var solar = ilib.Date._solarLongitude(jd)
	return ilib.Date._fixangle(lunar - solar);
};

/**
 * @static
 * @param {number} jd
 * @return {number}
 */
ilib.Date._newMoonBefore = function (jd) {
	var phase = ilib.Date._lunarSolarAngle(jd);
	// 11.450086114414322 is the julian day of the 0th full moon
	// 29.530588853000001 is the average length of a month
	var guess = Math.round((jd - 11.450086114414322 - ilib.Date.RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360) - 1;
	var current, last;
	current = last = ilib.Date._newMoonTime(guess);
	while (current < jd) {
		guess++;
		last = current;
		current = ilib.Date._newMoonTime(guess);
	}
	return last;
};

/**
 * @static
 * @param {number} jd
 * @return {number}
 */
ilib.Date._newMoonAtOrAfter = function (jd) {
	var phase = ilib.Date._lunarSolarAngle(jd);
	// 11.450086114414322 is the julian day of the 0th full moon
	// 29.530588853000001 is the average length of a month
	var guess = Math.round((jd - 11.450086114414322 - ilib.Date.RataDie.gregorianEpoch) / 29.530588853000001 - phase / 360);
	var current;
	while ((current = ilib.Date._newMoonTime(guess)) < jd) {
		guess++;
	}
	return current;
};

/**
 * @static
 * @param {number} jd JD to calculate from
 * @param {number} longitude longitude to seek 
 * @returns {number} the JD of the next time that the solar longitude 
 * is a multiple of the given longitude
 */
ilib.Date._nextSolarLongitude = function(jd, longitude) {
	var rate = 365.242189 / 360.0;
	var tau = jd + rate * ilib.Date._fixangle(longitude - ilib.Date._solarLongitude(jd));
	var start = Math.max(jd, tau - 5.0);
	var end = tau + 5.0;
	
	return ilib.bisectionSearch(0, start, end, 1e-6, function (l) {
		return 180 - ilib.Date._fixangle(ilib.Date._solarLongitude(l) - longitude);
	});
};

/**
 * Floor the julian day to midnight of the current julian day.
 * 
 * @static
 * @protected
 * @param {number} jd the julian to round
 * @return {number} the jd floored to the midnight of the julian day
 */
ilib.Date._floorToJD = function(jd) {
	return Math.floor(jd - 0.5) + 0.5;
};

/**
 * Floor the julian day to midnight of the current julian day.
 * 
 * @static
 * @protected
 * @param {number} jd the julian to round
 * @return {number} the jd floored to the midnight of the julian day
 */
ilib.Date._ceilToJD = function(jd) {
	return Math.ceil(jd + 0.5) - 0.5;
};

/*
 * persratadie.js - Represent a rata die date in the Persian calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js
util/utils.js
util/math.js
calendar/ratadie.js
calendar/astro.js
calendar/gregoriandate.js
*/

/**
 * Construct a new Persian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Persian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends persiandate.js
 * 
 * @private
 * @class
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date
 */
ilib.Date.PersAstroRataDie = function(params) {
	this.rd = undefined;
	ilib.Date.initAstro(
		params && typeof(params.sync) === 'boolean' ? params.sync : true,
		params && params.loadParams,
		ilib.bind(this, function (x) {
			ilib.Date.RataDie.call(this, params);
			if (params && typeof(params.callback) === 'function') {
				params.callback(this);
			}
		})
	);
};

ilib.Date.PersAstroRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.PersAstroRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.PersAstroRataDie.prototype.constructor = ilib.Date.PersAstroRataDie;

/**
 * The difference between a zero Julian day and the first Persian date
 * @private
 * @const
 * @type number
 */
ilib.Date.PersAstroRataDie.prototype.epoch = 1948319.5;

/**
 * @protected 
 */
ilib.Date.PersAstroRataDie.prototype._tehranEquinox = function(year) {
    var equJED, equJD, equAPP, equTehran, dtTehran, eot;

    //  March equinox in dynamical time
    equJED = ilib.Date._equinox(year, 0);

    //  Correct for delta T to obtain Universal time
    equJD = equJED - (ilib.Date._deltat(year) / (24 * 60 * 60));

    //  Apply the equation of time to yield the apparent time at Greenwich
    eot = ilib.Date._equationOfTime(equJED) * 360;
    eot = (eot - 20 * Math.floor(eot/20)) / 360;
    equAPP = equJD + eot;

    /*  
     * Finally, we must correct for the constant difference between
     * the Greenwich meridian and the time zone standard for Iran 
     * Standard time, 52 degrees 30 minutes to the East.
     */

    dtTehran = 52.5 / 360;
    equTehran = equAPP + dtTehran;

    return equTehran;
};

/**
 * Calculate the year based on the given Julian day.
 * @protected
 * @param {number} jd the Julian day to get the year for
 * @return {{year:number,equinox:number}} the year and the last equinox
 */
ilib.Date.PersAstroRataDie.prototype._getYear = function(jd) {
	var gd = new ilib.Date.GregDate({julianday: jd});
    var guess = gd.getYears() - 2,
    	nexteq,
    	ret = {};

    //ret.equinox = Math.floor(this._tehranEquinox(guess));
    ret.equinox = this._tehranEquinox(guess);
	while (ret.equinox > jd) {
	    guess--;
	    // ret.equinox = Math.floor(this._tehranEquinox(guess));
	    ret.equinox = this._tehranEquinox(guess);
	}
	nexteq = ret.equinox - 1;
	// if the equinox falls after noon, then the day after that is the start of the 
	// next year, so truncate the JD to get the noon of the day before the day with 
	//the equinox on it, then add 0.5 to get the midnight of that day 
	while (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {
	    ret.equinox = nexteq;
	    guess++;
	    // nexteq = Math.floor(this._tehranEquinox(guess));
	    nexteq = this._tehranEquinox(guess);
	}
	
	// Mean solar tropical year is 365.24219878 days
	ret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;
	
	return ret;
};

/**
 * Calculate the Rata Die (fixed day) number of the given date from the
 * date components.
 *
 * @protected
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.PersAstroRataDie.prototype._setDateComponents = function(date) {
    var adr, guess, jd;

    // Mean solar tropical year is 365.24219878 days 
    guess = this.epoch + 1 + 365.24219878 * (date.year - 2);
    adr = {year: date.year - 1, equinox: 0};

    while (adr.year < date.year) {
        adr = this._getYear(guess);
        guess = adr.equinox + (365.24219878 + 2);
    }

    jd = Math.floor(adr.equinox) +
            ((date.month <= 7) ?
                ((date.month - 1) * 31) :
                (((date.month - 1) * 30) + 6)
            ) +
    	    (date.day - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight
    
	jd += (date.hour * 3600000 +
			date.minute * 60000 +
			date.second * 1000 +
			date.millisecond) /
			86400000;

    this.rd = jd - this.epoch;
};

/**
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @private
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.PersAstroRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 3, 7);
};

/*
 * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends 
calendar/astro.js 
calendar.js 
locale.js 
date.js 
julianday.js 
util/utils.js
calendar/persratadie.js 
*/

/**
 * @class
 * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes 
 * information about a Persian calendar. This class differs from the 
 * Persian calendar in that the leap years are calculated based on the
 * astronomical observations of the sun in Teheran, instead of calculating
 * the leap years based on a regular cyclical rhythm algorithm.<p>
 * 
 * Depends directive: !depends persianastro.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Persian = function() {
	this.type = "persian";
};

/**
 * @private
 * @const
 * @type Array.<number> 
 * the lengths of each month 
 */
ilib.Cal.Persian.monthLengths = [
	31,  // Farvardin
	31,  // Ordibehesht
	31,  // Khordad
	31,  // Tir
	31,  // Mordad
	31,  // Shahrivar
	30,  // Mehr
	30,  // Aban
	30,  // Azar
	30,  // Dey
	30,  // Bahman
	29   // Esfand
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 * @return {number} The number of months in the given year
 */
ilib.Cal.Persian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Persian.prototype.getMonLength = function(month, year) {
	if (month !== 12 || !this.isLeapYear(year)) {
		return ilib.Cal.Persian.monthLengths[month-1];
	} else {
		// Month 12, Esfand, has 30 days instead of 29 in leap years
		return 30;
	}
};

/**
 * Return true if the given year is a leap year in the Persian astronomical calendar.
 * @param {number} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Persian.prototype.isLeapYear = function(year) {
	var rdNextYear = new ilib.Date.PersAstroRataDie({
		cal: this,
		year: year + 1,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	var rdThisYear = new ilib.Date.PersAstroRataDie({
		cal: this,
		year: year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	}); 
    return (rdNextYear.getRataDie() - rdThisYear.getRataDie()) > 365;
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Persian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Persian.prototype.newDateInstance = function (options) {
	return new ilib.Date.PersDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["persian"] = ilib.Cal.Persian;

/*
 * persianastrodate.js - Represent a date in the Persian astronomical (Hijjri) calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js
calendar/persratadie.js
calendar/persianastro.js 
util/utils.js
util/search.js
util/math.js
localeinfo.js 
julianday.js 
*/

// !data astro

/**
 * @class
 * 
 * Construct a new Persian astronomical date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this persian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this persian date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale.
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Persian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends persiandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Persian date
 */
ilib.Date.PersDate = function(params) {
	this.cal = new ilib.Cal.Persian();
	this.timezone = "local";
	
	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone;
		}
	}
	
	ilib.Date.initAstro(
		params && typeof(params.sync) === 'boolean' ? params.sync : true,
		params && params.loadParams,
		ilib.bind(this, function (x) {
			if (params && (params.year || params.month || params.day || params.hour ||
					params.minute || params.second || params.millisecond)) {
				/**
				 * Year in the Persian calendar.
				 * @type number
				 */
				this.year = parseInt(params.year, 10) || 0;

				/**
				 * The month number, ranging from 1 to 12
				 * @type number
				 */
				this.month = parseInt(params.month, 10) || 1;

				/**
				 * The day of the month. This ranges from 1 to 31.
				 * @type number
				 */
				this.day = parseInt(params.day, 10) || 1;
				
				/**
				 * The hour of the day. This can be a number from 0 to 23, as times are
				 * stored unambiguously in the 24-hour clock.
				 * @type number
				 */
				this.hour = parseInt(params.hour, 10) || 0;

				/**
				 * The minute of the hours. Ranges from 0 to 59.
				 * @type number
				 */
				this.minute = parseInt(params.minute, 10) || 0;

				/**
				 * The second of the minute. Ranges from 0 to 59.
				 * @type number
				 */
				this.second = parseInt(params.second, 10) || 0;

				/**
				 * The millisecond of the second. Ranges from 0 to 999.
				 * @type number
				 */
				this.millisecond = parseInt(params.millisecond, 10) || 0;
				
				/**
				 * The day of the year. Ranges from 1 to 366.
				 * @type number
				 */
				this.dayOfYear = parseInt(params.dayOfYear, 10);

				if (typeof(params.dst) === 'boolean') {
					this.dst = params.dst;
				}
				
				this.rd = this.newRd(this);
				
				// add the time zone offset to the rd to convert to UTC
				if (!this.tz) {
					this.tz = new ilib.TimeZone({id: this.timezone});
				}
				// getOffsetMillis requires that this.year, this.rd, and this.dst 
				// are set in order to figure out which time zone rules apply and 
				// what the offset is at that point in the year
				this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
				if (this.offset !== 0) {
					this.rd = this.newRd({
						rd: this.rd.getRataDie() - this.offset
					});
				}
			}
			
			if (!this.rd) {
				this.rd = this.newRd(params);
				this._calcDateComponents();
			}
			
			if (params && typeof(params.onLoad) === 'function') {
				params.onLoad(this);
			}
		})
	);
};

ilib.Date.PersDate.prototype = new ilib.Date({noinstance: true});
ilib.Date.PersDate.prototype.parent = ilib.Date;
ilib.Date.PersDate.prototype.constructor = ilib.Date.PersDate;

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a non-leap year 
 */
ilib.Date.PersDate.cumMonthLengths = [
    0,    // Farvardin
	31,   // Ordibehesht
	62,   // Khordad
	93,   // Tir
	124,  // Mordad
	155,  // Shahrivar
	186,  // Mehr
	216,  // Aban
	246,  // Azar
	276,  // Dey
	306,  // Bahman
	336,  // Esfand
	366
];

/**
 * Return a new RD for this date type using the given params.
 * @protected
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.PersDate.prototype.newRd = function (params) {
	return new ilib.Date.PersAstroRataDie(params);
};

/**
 * Return the year for the given RD
 * @protected
 * @param {number} rd RD to calculate from 
 * @returns {number} the year for the RD
 */
ilib.Date.PersDate.prototype._calcYear = function(rd) {
	var julianday = rd + this.rd.epoch;
	return this.rd._getYear(julianday).year;
};

/**
 * @private
 * Calculate date components for the given RD date.
 */
ilib.Date.PersDate.prototype._calcDateComponents = function () {
	var remainder,
		rd = this.rd.getRataDie();
	
	this.year = this._calcYear(rd);
	
	if (typeof(this.offset) === "undefined") {
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		this.offset = this.tz.getOffsetMillis(this) / 86400000;
	}
	
	if (this.offset !== 0) {
		rd += this.offset;
		this.year = this._calcYear(rd);
	}
	
	//console.log("PersDate.calcComponent: calculating for rd " + rd);
	//console.log("PersDate.calcComponent: year is " + ret.year);
	var yearStart = this.newRd({
		year: this.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	remainder = rd - yearStart.getRataDie() + 1;
	
	this.dayOfYear = remainder;
	
	//console.log("PersDate.calcComponent: remainder is " + remainder);
	
	this.month = ilib.bsearch(Math.floor(remainder), ilib.Date.PersDate.cumMonthLengths);
	remainder -= ilib.Date.PersDate.cumMonthLengths[this.month-1];
	
	//console.log("PersDate.calcComponent: month is " + this.month + " and remainder is " + remainder);
	
	this.day = Math.floor(remainder);
	remainder -= this.day;
	
	//console.log("PersDate.calcComponent: day is " + this.day + " and remainder is " + remainder);
	
	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	this.hour = Math.floor(remainder/3600000);
	remainder -= this.hour * 3600000;
	
	this.minute = Math.floor(remainder/60000);
	remainder -= this.minute * 60000;
	
	this.second = Math.floor(remainder/1000);
	remainder -= this.second * 1000;
	
	this.millisecond = remainder;
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.PersDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.getRataDie());
	return ilib.mod(rd-3, 7);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and 
 * December 31st is 365 in regular years, or 366 in leap years.
 * @return {number} the ordinal day of the year
 */
ilib.Date.PersDate.prototype.getDayOfYear = function() {
	return ilib.Date.PersDate.cumMonthLengths[this.month-1] + this.day;
};

/**
 * Return the era for this date as a number. The value for the era for Persian 
 * calendars is -1 for "before the persian era" (BP) and 1 for "the persian era" (anno 
 * persico or AP). 
 * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, 
 * there is a year 0, so any years that are negative or zero are BP.
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.PersDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.PersDate.prototype.getCalendar = function() {
	return "persian";
};

// register with the factory method
ilib.Date._constructors["persian"] = ilib.Date.PersDate;
/*
 * ctype.js - Character type definitions
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js util/search.js

// !data ctype

/**
 * Provides a set of static routines that return information about characters.
 * These routines emulate the C-library ctype functions. The characters must be 
 * encoded in utf-16, as no other charsets are currently supported. Only the first
 * character of the given string is tested.
 * @namespace
 */
ilib.CType = {
	/**
	 * Actual implementation for withinRange. Searches the given object for ranges.
	 * The range names are taken from the Unicode range names in 
	 * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt
	 * 
	 * <ul>
	 * <li>Cn - Unassigned
	 * <li>Lu - Uppercase_Letter
	 * <li>Ll - Lowercase_Letter
	 * <li>Lt - Titlecase_Letter
	 * <li>Lm - Modifier_Letter
	 * <li>Lo - Other_Letter
	 * <li>Mn - Nonspacing_Mark
	 * <li>Me - Enclosing_Mark
	 * <li>Mc - Spacing_Mark
	 * <li>Nd - Decimal_Number
	 * <li>Nl - Letter_Number
	 * <li>No - Other_Number
	 * <li>Zs - Space_Separator
	 * <li>Zl - Line_Separator
	 * <li>Zp - Paragraph_Separator
	 * <li>Cc - Control
	 * <li>Cf - Format
	 * <li>Co - Private_Use
	 * <li>Cs - Surrogate
	 * <li>Pd - Dash_Punctuation
	 * <li>Ps - Open_Punctuation
	 * <li>Pe - Close_Punctuation
	 * <li>Pc - Connector_Punctuation
	 * <li>Po - Other_Punctuation
	 * <li>Sm - Math_Symbol
	 * <li>Sc - Currency_Symbol
	 * <li>Sk - Modifier_Symbol
	 * <li>So - Other_Symbol
	 * <li>Pi - Initial_Punctuation
	 * <li>Pf - Final_Punctuation
	 * </ul>
	 * 
	 * @protected
	 * @param {number} num code point of the character to examine
	 * @param {string} rangeName the name of the range to check
	 * @param {Object} obj object containing the character range data
	 * @return {boolean} true if the first character is within the named
	 * range
	 */
	_inRange: function(num, rangeName, obj) {
		var range, i;
		if (num < 0 || !rangeName || !obj) {
			return false;
		}
		
		range = obj[rangeName];
		if (!range) {
			return false;
		}
		
		var compare = function(singlerange, target) {
			if (singlerange.length === 1) {
				return singlerange[0] - target;
			} else {
				return target < singlerange[0] ? singlerange[0] - target :
					(target > singlerange[1] ? singlerange[1] - target : 0);
			}
		};
		var result = ilib.bsearch(num, range, compare);
		return result < range.length && compare(range[result], num) === 0;
	},
	
	/**
	 * Return whether or not the first character is within the named range
	 * of Unicode characters. The valid list of range names are taken from 
	 * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,
	 * including those supported in Javascript via UTF-16. Currently, this method 
	 * supports the following range names:
	 * 
	 * <ul>
	 * <li><i>ascii</i> - basic ASCII
	 * <li><i>latin</i> - Latin, Latin Extended Additional, Latin Extended-C, Latin Extended-D
	 * <li><i>armenian</i>
	 * <li><i>greek</i> - Greek, Greek Extended
	 * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B
	 * <li><i>georgian</i> - Georgian, Georgian Supplement
	 * <li><i>glagolitic</i>
	 * <li><i>gothic</i>
	 * <li><i>ogham</i>
	 * <li><i>oldpersian</i>
	 * <li><i>runic</i>
	 * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement
	 * <li><i>phonetic</i>
	 * <li><i>modifiertone</i> - Modifier Tone Letters
	 * <li><i>spacing</i>
	 * <li><i>diacritics</i>
	 * <li><i>halfmarks</i> - Combining Half Marks
	 * <li><i>small</i> - Small Form Variants
	 * <li><i>bamum</i> - Bamum, Bamum Supplement
	 * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A
	 * <li><i>nko</i>
	 * <li><i>osmanya</i>
	 * <li><i>tifinagh</i>
	 * <li><i>val</i>
	 * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A, 
	 * Arabic Presentation Forms-B
	 * <li><i>carlan</i>
	 * <li><i>hebrew</i>
	 * <li><i>mandaic</i>
	 * <li><i>samaritan</i>
	 * <li><i>syriac</i>
	 * <li><i>mongolian</i>
	 * <li><i>phagspa</i>
	 * <li><i>tibetan</i>
	 * <li><i>bengali</i>
	 * <li><i>devanagari</i> - Devanagari, Devanagari Extended
	 * <li><i>gujarati</i>
	 * <li><i>gurmukhi</i>
	 * <li><i>kannada</i>
	 * <li><i>lepcha</i>
	 * <li><i>limbu</i>
	 * <li><i>malayalam</i>
	 * <li><i>meetaimayek</i>
	 * <li><i>olchiki</i>
	 * <li><i>oriya</i>
	 * <li><i>saurashtra</i>
	 * <li><i>sinhala</i>
	 * <li><i>sylotinagri</i> - Syloti Nagri
	 * <li><i>tamil</i>
	 * <li><i>telugu</i>
	 * <li><i>thaana</i>
	 * <li><i>vedic</i>
	 * <li><i>batak</i>
	 * <li><i>balinese</i>
	 * <li><i>buginese</i>
	 * <li><i>cham</i>
	 * <li><i>javanese</i>
	 * <li><i>kayahli</i>
	 * <li><i>khmer</i>
	 * <li><i>lao</i>
	 * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A
	 * <li><i>newtailue</i>
	 * <li><i>rejang</i>
	 * <li><i>sundanese</i>
	 * <li><i>taile</i>
	 * <li><i>taitham</i>
	 * <li><i>taiviet</i>
	 * <li><i>thai</i>
	 * <li><i>buhld</i>
	 * <li><i>hanunoo</i>
	 * <li><i>tagalog</i>
	 * <li><i>tagbanwa</i>
	 * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended
	 * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs
	 *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs 
	 *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description 
	 *  Characters (=isIdeo())
	 * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility 
	 * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement
	 * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals
	 * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A, 
	 * Hangul Jamo Extended-B, Hangul Compatibility Jamo
	 * <li><i>cjkpunct</i> - CJK symbols and punctuation
	 * <li><i>cjkstrokes</i> - CJK strokes
	 * <li><i>hiragana</i>
	 * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement
	 * <li><i>kanbun</i>
	 * <li><i>lisu</i>
	 * <li><i>yi</i> - Yi Syllables, Yi Radicals
	 * <li><i>cherokee</i>
	 * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian 
	 * Aboriginal Syllabics Extended
	 * <li><i>presentation</i> - Alphabetic presentation forms
	 * <li><i>vertical</i> - Vertical Forms
	 * <li><i>width</i> - Halfwidth and Fullwidth Forms
	 * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation
	 * <li><i>box</i> - Box Drawing
	 * <li><i>block</i> - Block Elements
	 * <li><i>letterlike</i> - Letterlike symbols
	 * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous 
	 * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B
	 * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement
	 * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement
	 * <li><i>cjkcompatibility</i> - CJK compatibility
	 * <li><i>apl</i> - APL symbols
	 * <li><i>controlpictures</i> - Control pictures
	 * <li><i>misc</i> - Miscellaneous technical
	 * <li><i>ocr</i> - Optical character recognition (OCR)
	 * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks 
	 * for Symbols, Combining Diacritical Marks Supplement
	 * <li><i>digits</i> - ASCII digits (=isDigit())
	 * <li><i>indicnumber</i> - Common Indic Number Forms
	 * <li><i>numbers</i> - Number dorms
	 * <li><i>supersub</i> - Super- and subscripts
	 * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,
	 * Supplemental Arrows-B
	 * <li><i>operators</i> - Mathematical operators, supplemental 
	 * mathematical operators 
	 * <li><i>geometric</i> - Geometric shapes
	 * <li><i>ancient</i> - Ancient symbols
	 * <li><i>braille</i> - Braille patterns
	 * <li><i>currency</i> - Currency symbols
	 * <li><i>dingbats</i>
	 * <li><i>gamesymbols</i>
	 * <li><i>yijing</i> - Yijing Hexagram Symbols
	 * <li><i>specials</i>
	 * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement
	 * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A, 
	 * Supplementary Private Use Area-B
	 * <li><i>supplementarya</i> - Supplementary private use area-A
	 * <li><i>supplementaryb</i> - Supplementary private use area-B
	 * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates
	 * <li><i>lowsurrogates</i>
	 * <li><i>reserved</i>
	 * <li><i>noncharacters</i>
	 * </ul><p>
	 * 
	 * Depends directive: !depends ctype.js
	 * 
	 * @param {string|ilib.String|number} ch character or code point to examine
	 * @param {string} rangeName the name of the range to check
	 * @return {boolean} true if the first character is within the named
	 * range
	 */
	withinRange: function(ch, rangeName) {
		if (!rangeName) {
			return false;
		}
		var num;
		switch (typeof(ch)) {
			case 'number':
				num = ch;
				break;
			case 'string':
				num = ilib.String.toCodePoint(ch, 0);
				break;
			case 'undefined':
				return false;
			default:
				num = ch._toCodePoint(0);
				break;
		}

		return ilib.CType._inRange(num, rangeName.toLowerCase(), ilib.data.ctype);
	},
	
	/**
	 * @protected
	 * @param {boolean} sync
	 * @param {Object} loadParams
	 * @param {function(*)|undefined} onLoad
	 */
	_init: function(sync, loadParams, onLoad) {
		ilib.CType._load("ctype", sync, loadParams, onLoad);
	},
	
	/**
	 * @protected
	 * @param {string} name
	 * @param {boolean} sync
	 * @param {Object} loadParams
	 * @param {function(*)|undefined} onLoad
	 */
	_load: function (name, sync, loadParams, onLoad) {
		if (!ilib.data[name]) {
			var loadName = name ? name + ".json" : "ctype.json";
			ilib.loadData({
				name: loadName,
				locale: "-",
				nonlocale: true,
				sync: sync,
				loadParams: loadParams, 
				callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ct) {
					ilib.data[name] = ct;
					if (onLoad && typeof(onLoad) === 'function') {
						onLoad(ilib.data[name]);
					}
				})
			});
		} else {
			if (onLoad && typeof(onLoad) === 'function') {
				onLoad(ilib.data[name]);
			}
		}
	}
};

/*
 * ctype.isdigit.js - Character type is digit
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a digit character in the
 * Latin script.<p>
 * 
 * Depends directive: !depends ctype.isdigit.js
 * 
 * @param {string|ilib.String|number} ch character or code point to examine
 * @return {boolean} true if the first character is a digit character in the
 * Latin script. 
 */
ilib.CType.isDigit = function (ch) {
	var num;
	switch (typeof(ch)) {
		case 'number':
			num = ch;
			break;
		case 'string':
			num = ilib.String.toCodePoint(ch, 0);
			break;
		case 'undefined':
			return false;
		default:
			num = ch._toCodePoint(0);
			break;
	}
	return ilib.CType._inRange(num, 'digit', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isDigit._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

/*
 * ctype.isspace.js - Character type is space char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype ctype_z

/**
 * Return whether or not the first character is a whitespace character.<p>
 * 
 * Depends directive: !depends ctype.isspace.js
 * 
 * @param {string|ilib.String|number} ch character or code point to examine
 * @return {boolean} true if the first character is a whitespace character.
 */
ilib.CType.isSpace = function (ch) {
	var num;
	switch (typeof(ch)) {
		case 'number':
			num = ch;
			break;
		case 'string':
			num = ilib.String.toCodePoint(ch, 0);
			break;
		case 'undefined':
			return false;
		default:
			num = ch._toCodePoint(0);
			break;
	}

	return ilib.CType._inRange(num, 'space', ilib.data.ctype) ||
		ilib.CType._inRange(num, 'Zs', ilib.data.ctype_z) ||
		ilib.CType._inRange(num, 'Zl', ilib.data.ctype_z) ||
		ilib.CType._inRange(num, 'Zp', ilib.data.ctype_z);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isSpace._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_z", sync, loadParams, function () {
		ilib.CType._init(sync, loadParams, onLoad);
	});
};

/*
 * numprs.js - Parse a number in any locale
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
strings.js 
ctype.isdigit.js 
ctype.isspace.js
*/

/**
 * @class
 * Parse a string as a number, ignoring all locale-specific formatting.<p>
 * 
 * This class is different from the standard Javascript parseInt() and parseFloat() 
 * functions in that the number to be parsed can have formatting characters in it 
 * that are not supported by those two
 * functions, and it handles numbers written in other locales properly. For example, 
 * if you pass the string "203,231.23" to the parseFloat() function in Javascript, it 
 * will return you the number 203. The ilib.Number class will parse it correctly and 
 * the value() function will return the number 203231.23. If you pass parseFloat() the 
 * string "203.231,23" with the locale set to de-DE, it will return you 203 again. This
 * class will return the correct number 203231.23 again.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - specify the locale of the string to parse. This is used to
 * figure out what the decimal point character is. If not specified, the default locale
 * for the app or browser is used.
 * <li><i>type</i> - specify whether this string should be interpretted as a number,
 * currency, or percentage amount. When the number is interpretted as a currency
 * amount, the getCurrency() method will return something useful, otherwise it will
 * return undefined. If
 * the number is to be interpretted as percentage amount and there is a percentage sign
 * in the string, then the number will be returned
 * as a fraction from the valueOf() method. If there is no percentage sign, then the 
 * number will be returned as a regular number. That is "58.3%" will be returned as the 
 * number 0.583 but "58.3" will be returned as 58.3. Valid values for this property 
 * are "number", "currency", and "percentage". Default if this is not specified is
 * "number".
 * <li><i>onLoad</i> - a callback function to call when the locale data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends numprs.js
 * 
 * @constructor
 * @param {string|number|Number|ilib.Number|undefined} str a string to parse as a number, or a number value
 * @param {Object=} options Options controlling how the instance should be created 
 */
ilib.Number = function (str, options) {
	var i, stripped = "", 
		sync = true,
		loadParams,
		onLoad;
	
	this.locale = new ilib.Locale();
	this.type = "number";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.type) {
			switch (options.type) {
				case "number":
				case "currency":
				case "percentage":
					this.type = options.type;
					break;
				default:
					break;
			}
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		loadParams = options.loadParams;
		onLoad = options.onLoad;
	}
	
	ilib.CType.isDigit._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.CType.isSpace._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
			new ilib.LocaleInfo(this.locale, {
				sync: sync,
				onLoad: ilib.bind(this, function (li) {
					this.decimal = li.getDecimalSeparator();
					
					switch (typeof(str)) {
					case 'string':
						// stripping should work for all locales, because you just ignore all the
						// formatting except the decimal char
						var unary = true; // looking for the unary minus still?
						this.str = str || "0";
						i = 0;
						for (i = 0; i < this.str.length; i++) {
							if (unary && this.str.charAt(i) === '-') {
								unary = false;
								stripped += this.str.charAt(i);
							} else if (ilib.CType.isDigit(this.str.charAt(i))) {
								stripped += this.str.charAt(i);
								unary = false;
							} else if (this.str.charAt(i) === this.decimal) {
								stripped += "."; // always convert to period
								unary = false;
							} // else ignore
						}
						this.value = parseFloat(stripped);
						break;
					case 'number':
						this.str = "" + str;
						this.value = str;
						break;
						
					case 'object':
						this.value = /** @type {number} */ str.valueOf();
						this.str = "" + this.value;
						break;
						
					case 'undefined':
						this.value = 0;
						this.str = "0";
						break;
					}
					
					switch (this.type) {
						default:
							// don't need to do anything special for other types
							break;
						case "percentage":
							if (this.str.indexOf(li.getPercentageSymbol()) !== -1) {
								this.value /= 100;
							}
							break;
						case "currency":
							stripped = "";
							i = 0;
							while (i < this.str.length &&
								   !ilib.CType.isDigit(this.str.charAt(i)) &&
								   !ilib.CType.isSpace(this.str.charAt(i))) {
								stripped += this.str.charAt(i++);
							}
							if (stripped.length === 0) {
								while (i < this.str.length && 
									   ilib.CType.isDigit(this.str.charAt(i)) ||
									   ilib.CType.isSpace(this.str.charAt(i)) ||
									   this.str.charAt(i) === '.' ||
									   this.str.charAt(i) === ',' ) {
									i++;
								}
								while (i < this.str.length && 
									   !ilib.CType.isDigit(this.str.charAt(i)) &&
									   !ilib.CType.isSpace(this.str.charAt(i))) {
									stripped += this.str.charAt(i++);
								}
							}
							new ilib.Currency({
								locale: this.locale, 
								sign: stripped,
								sync: sync,
								onLoad: ilib.bind(this, function (cur) {
									this.currency = cur;
									if (options && typeof(options.onLoad) === 'function') {
										options.onLoad(this);
									}				
								})
							});
							return;
					}
					
					if (options && typeof(options.onLoad) === 'function') {
						options.onLoad(this);
					}
				})
			});
		}));
	}));
};

ilib.Number.prototype = {
	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the original string that this number instance was created with.
	 * @return {string} the original string
	 */
	toString: function () {
		return this.str;
	},
	
	/**
	 * If the type of this Number instance is "currency", then the parser will attempt
	 * to figure out which currency this amount represents. The amount can be written
	 * with any of the currency signs or ISO 4217 codes that are currently
	 * recognized by ilib, and the currency signs may occur before or after the
	 * numeric portion of the string. If no currency can be recognized, then the 
	 * default currency for the locale is returned. If multiple currencies can be
	 * recognized (for example if the currency sign is "$"), then this method 
	 * will prefer the one for the current locale. If multiple currencies can be
	 * recognized, but none are used in the current locale, then the first currency
	 * encountered will be used. This may produce random results, though the larger
	 * currencies occur earlier in the list. For example, if the sign found in the
	 * string is "$" and that is not the sign of the currency of the current locale
	 * then the US dollar will be recognized, as it is the largest currency that uses
	 * the "$" as its sign.
	 * 
	 * @return {ilib.Currency|undefined} the currency instance for this amount, or 
	 * undefined if this Number object is not of type currency
	 */
	getCurrency: function () {
		return this.currency;
	},
	
	/**
	 * Return the value of this number object as a primitive number instance.
	 * @return {number} the value of this number instance
	 */
	valueOf: function () {
		return this.value;
	}
};

/*
 * currency.js - Currency definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data currency

/**
 * @class
 * Create a new currency information instance. Instances of this class encode 
 * information about a particular currency.<p>
 * 
 * Note: that if you are looking to format currency for display, please see
 * the number formatting class {ilib.NumFmt}. This class only gives information
 * about currencies.<p> 
 * 
 * The options can contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - specify the locale for this instance
 * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code 
 * <li><i>sign</i> - search for a currency that uses this sign
 * <li><i>onLoad</i> - a callback function to call when the currency data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * When searching for a currency by its sign, this class cannot guarantee 
 * that it will return info about a specific currency. The reason is that currency 
 * signs are sometimes shared between different currencies and the sign is 
 * therefore ambiguous. If you need a 
 * guarantee, find the currency using the code instead.<p>
 * 
 * The way this class finds a currency by sign is the following. If the sign is 
 * unambiguous, then
 * the currency is returned. If there are multiple currencies that use the same
 * sign, and the current locale uses that sign, then the default currency for
 * the current locale is returned. If there are multiple, but the current locale
 * does not use that sign, then the currency with the largest circulation is
 * returned. For example, if you are in the en-GB locale, and the sign is "$",
 * then this class will notice that there are multiple currencies with that
 * sign (USD, CAD, AUD, HKD, MXP, etc.) Since "$" is not used in en-GB, it will 
 * pick the one with the largest circulation, which in this case is the US Dollar
 * (USD).<p>
 * 
 * If neither the code or sign property is set, the currency that is most common 
 * for the locale
 * will be used instead. If the locale is not set, the default locale will be used.
 * If the code is given, but it is not found in the list of known currencies, this
 * constructor will throw an exception. If the sign is given, but it is not found,
 * this constructor will default to the currency for the current locale. If both
 * the code and sign properties are given, then the sign property will be ignored
 * and only the code property used. If the locale is given, but it is not a known
 * locale, this class will default to the default locale instead.<p>
 * 
 * Depends directive: !depends currency.js
 * 
 * @constructor
 * @param options {Object} a set of properties to govern how this instance is constructed.
 * @throws "currency xxx is unknown" when the given currency code is not in the list of 
 * known currencies. xxx is replaced with the requested code.
 */
ilib.Currency = function (options) {
	this.sync = true;
	
	if (options) {
		if (options.code) {
			this.code = options.code;
		}
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.sign) {
			this.sign = options.sign;
		}
		if (typeof(options.sync) !== 'undefined') {
			this.sync = options.sync;
		}
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}
	
	this.locale = this.locale || new ilib.Locale();
	if (typeof(ilib.data.currency) === 'undefined') {
		ilib.loadData({
			name: "currency.json",
			object: ilib.Currency, 
			locale: "-",
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(currency) {
				ilib.data.currency = currency;
				this._loadLocinfo(options && options.onLoad);
			})
		});
	} else {
		this._loadLocinfo(options && options.onLoad);
	}
};

/**
 * Return an array of the ids for all ISO 4217 currencies that
 * this copy of ilib knows about.
 * 
 * @static
 * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.
 */
ilib.Currency.getAvailableCurrencies = function() {
	var ret = [],
		cur,
		currencies = new ilib.ResBundle({
			name: "currency"
		}).getResObj();
	
	for (cur in currencies) {
		if (cur && currencies[cur]) {
			ret.push(cur);
		}
	}
	
	return ret;
};

ilib.Currency.prototype = {
	/**
	 * @private
	 */
	_loadLocinfo: function(onLoad) {
		new ilib.LocaleInfo(this.locale, {
			onLoad: ilib.bind(this, function (li) {
				var currInfo;
				
				this.locinfo = li;
		    	if (this.code) {
		    		currInfo = ilib.data.currency[this.code];
		    		if (!currInfo) {
		    			throw "currency " + this.code + " is unknown";
		    		}
		    	} else if (this.sign) {
		    		currInfo = ilib.data.currency[this.sign]; // maybe it is really a code...
		    		if (typeof(currInfo) !== 'undefined') {
		    			this.code = this.sign;
		    		} else {
		    			this.code = this.locinfo.getCurrency();
		    			currInfo = ilib.data.currency[this.code];
		    			if (currInfo.sign !== this.sign) {
		    				// current locale does not use the sign, so search for it
		    				for (var cur in ilib.data.currency) {
		    					if (cur && ilib.data.currency[cur]) {
		    						currInfo = ilib.data.currency[cur];
		    						if (currInfo.sign === this.sign) {
		    							// currency data is already ordered so that the currency with the
		    							// largest circulation is at the beginning, so all we have to do
		    							// is take the first one in the list that matches
		    							this.code = cur;
		    							break;
		    						}
		    					}
		    				}
		    			}
		    		}
		    	}
		    	
		    	if (!currInfo || !this.code) {
		    		this.code = this.locinfo.getCurrency();
		    		currInfo = ilib.data.currency[this.code];
		    	}
		    	
		    	this.name = currInfo.name;
		    	this.fractionDigits = currInfo.decimals;
		    	this.sign = currInfo.sign;
		    	
				if (typeof(onLoad) === 'function') {
					onLoad(this);
				}
			})
		});
	},
	
	/**
	 * Return the ISO 4217 currency code for this instance.
	 * @return {string} the ISO 4217 currency code for this instance
	 */
	getCode: function () {
		return this.code;
	},
	
	/**
	 * Return the default number of fraction digits that is typically used
	 * with this type of currency.
	 * @return {number} the number of fraction digits for this currency
	 */
	getFractionDigits: function () {
		return this.fractionDigits;
	},
	
	/**
	 * Return the sign commonly used to represent this currency.
	 * @return {string} the sign commonly used to represent this currency
	 */
	getSign: function () {
		return this.sign;
	},
	
	/**
	 * Return the name of the currency in English.
	 * @return {string} the name of the currency in English
	 */
	getName: function () {
		return this.name;
	},
	
	/**
	 * Return the locale for this currency. If the options to the constructor 
	 * included a locale property in order to find the currency that is appropriate
	 * for that locale, then the locale is returned here. If the options did not
	 * include a locale, then this method returns undefined.
	 * @return {ilib.Locale} the locale used in the constructor of this instance,
	 * or undefined if no locale was given in the constructor
	 */
	getLocale: function () {
		return this.locale;
	}
};

/*
 * numfmt.js - Number formatter definition
 *
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js strings.js currency.js
/*
!depends 
ilibglobal.js 
locale.js
localeinfo.js
util/utils.js
util/math.js
currency.js
strings.js
util/jsutils.js
*/

// !data localeinfo currency

/**
 * @class
 * Create a new number formatter instance. Locales differ in the way that digits
 * in a formatted number are grouped, in the way the decimal character is represented,
 * etc. Use this formatter to get it right for any locale.<p>
 *
 * This formatter can format plain numbers, currency amounts, and percentage amounts.<p>
 *
 * As with all formatters, the recommended
 * practice is to create one formatter and use it multiple times to format various
 * numbers.<p>
 *
 * The options can contain any of the following properties:
 *
 * <ul>
 * <li><i>locale</i> - use the conventions of the specified locale when figuring out how to
 * format a number.
 * <li><i>type</i> - the type of this formatter. Valid values are "number", "currency", or
 * "percentage". If this property is not specified, the default is "number".
 * <li><i>currency</i> - the ISO 4217 3-letter currency code to use when the formatter type
 * is "currency". This property is required for currency formatting. If the type property
 * is "currency" and the currency property is not specified, the constructor will throw a
 * an exception.
 * <li><i>maxFractionDigits</i> - the maximum number of digits that should appear in the
 * formatted output after the decimal. A value of -1 means unlimited, and 0 means only print
 * the integral part of the number.
 * <li><i>minFractionDigits</i> - the minimum number of fractional digits that should
 * appear in the formatted output. If the number does not have enough fractional digits
 * to reach this minimum, the number will be zero-padded at the end to get to the limit.
 * If the type of the formatter is "currency" and this
 * property is not specified, then the minimum fraction digits is set to the normal number
 * of digits used with that currency, which is almost always 0, 2, or 3 digits.
 * <li><i>useNative</i> - the flag used to determaine whether to use the native script settings
 * for formatting the numbers .
 * <li><i>roundingMode</i> - When the maxFractionDigits or maxIntegerDigits is specified,
 * this property governs how the least significant digits are rounded to conform to that
 * maximum. The value of this property is a string with one of the following values:
 * <ul>
 *   <li><i>up</i> - round away from zero
 *   <li><i>down</i> - round towards zero. This has the effect of truncating the number
 *   <li><i>ceiling</i> - round towards positive infinity
 *   <li><i>floor</i> - round towards negative infinity
 *   <li><i>halfup</i> - round towards nearest neighbour. If equidistant, round up.
 *   <li><i>halfdown</i> - round towards nearest neighbour. If equidistant, round down.
 *   <li><i>halfeven</i> - round towards nearest neighbour. If equidistant, round towards the even neighbour
 *   <li><i>halfodd</i> - round towards nearest neighbour. If equidistant, round towards the odd neighbour
 * </ul>
 * When the type of the formatter is "currency" and the <i>roundingMode</i> property is not
 * set, then the standard legal rounding rules for the locale are followed. If the type
 * is "number" or "percentage" and the <i>roundingMode</i> property is not set, then the
 * default mode is "halfdown".</i>.
 *
 * <li><i>style</i> - When the type of this formatter is "currency", the currency amount
 * can be formatted in the following styles: "common" and "iso". The common style is the
 * one commonly used in every day writing where the currency unit is represented using a
 * symbol. eg. "$57.35" for fifty-seven dollars and thirty five cents. The iso style is
 * the international style where the currency unit is represented using the ISO 4217 code.
 * eg. "USD 57.35" for the same amount. The default is "common" style if the style is
 * not specified.<p>
 *
 * When the type of this formatter is "number", the style can be one of the following:
 * <ul>
 *   <li><i>standard - format a fully specified floating point number properly for the locale
 *   <li><i>scientific</i> - use scientific notation for all numbers. That is, 1 integral 
 *   digit, followed by a number of fractional digits, followed by an "e" which denotes 
 *   exponentiation, followed digits which give the power of 10 in the exponent. 
 *   <li><i>native</i> - format a floating point number using the native digits and 
 *   formatting symbols for the script of the locale. 
 *   <li><i>nogrouping</i> - format a floating point number without grouping digits for
 *   the integral portion of the number
 * </ul>
 * Note that if you specify a maximum number
 * of integral digits, the formatter with a standard style will give you standard
 * formatting for smaller numbers and scientific notation for larger numbers. The default
 * is standard style if this is not specified.
 *
 * <li><i>onLoad</i> - a callback function to call when the format data is fully
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 *
 * <li>sync - tell whether to load any missing locale data synchronously or
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 *
 * Depends directive: !depends numfmt.js
 *
 * @constructor
 * @param {Object.<string,*>} options A set of options that govern how the formatter will behave
 */
ilib.NumFmt = function (options) {
	var sync = true;
	this.locale = new ilib.Locale();
	/** 
	 * @private
	 * @type {string} 
	 */
	this.type = "number";
	var loadParams = undefined;

	if (options) {
		if (options.locale) {
			this.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}

		if (options.type) {
			if (options.type === 'number' ||
				options.type === 'currency' ||
				options.type === 'percentage') {
				this.type = options.type;
			}
		}

		if (options.currency) {
			/** 
			 * @private 
			 * @type {string} 
			 */
			this.currency = options.currency;
		}

		if (typeof (options.maxFractionDigits) === 'number') {
			/** 
			 * @private 
			 * @type {number|undefined} 
			 */
			this.maxFractionDigits = this._toPrimitive(options.maxFractionDigits);
		}
		if (typeof (options.minFractionDigits) === 'number') {
			/** 
			 * @private 
			 * @type {number|undefined} 
			 */
			this.minFractionDigits = this._toPrimitive(options.minFractionDigits);
		}
		if (options.style) {
			/** 
			 * @private 
			 * @type {string} 
			 */
			this.style = options.style;
		}
		if (typeof(options.useNative) === 'boolean') {
			/** 
			 * @private 
			 * @type {boolean} 
			 * */
			this.useNative = options.useNative;
		}
		/** 
		 * @private 
		 * @type {string} 
		 */
		this.roundingMode = options.roundingMode;

		if (typeof (options.sync) !== 'undefined') {
			/** @type {boolean} */
			sync = (options.sync == true);
		}
		
		loadParams = options.loadParams;
	}

	/** 
	 * @private 
	 * @type {ilib.LocaleInfo|undefined} 
	 */
	this.localeInfo = undefined;
	
	new ilib.LocaleInfo(this.locale, {
		sync: sync,
		loadParams: loadParams,
		onLoad: ilib.bind(this, function (li) {
			/** 
			 * @private 
			 * @type {ilib.LocaleInfo|undefined} 
			 */
			this.localeInfo = li;

			if (this.type === "number") {
				this.templateNegative = new ilib.String(this.localeInfo.getNegativeNumberFormat() || "-{n}");
			} else if (this.type === "currency") {
				var templates;

				if (!this.currency || typeof (this.currency) != 'string') {
					throw "A currency property is required in the options to the number formatter constructor when the type property is set to currency.";
				}

				new ilib.Currency({
					locale: this.locale,
					code: this.currency,
					sync: sync,
					loadParams: loadParams,
					onLoad: ilib.bind(this, function (cur) {
						this.currencyInfo = cur;
						if (this.style !== "common" && this.style !== "iso") {
							this.style = "common";
						}
						
						if (typeof(this.maxFractionDigits) !== 'number' && typeof(this.minFractionDigits) !== 'number') {
							this.minFractionDigits = this.maxFractionDigits = this.currencyInfo.getFractionDigits();
						}

						templates = this.localeInfo.getCurrencyFormats();
						this.template = new ilib.String(templates[this.style] || templates.common);
						this.templateNegative = new ilib.String(templates[this.style + "Negative"] || templates["commonNegative"]);
						this.sign = (this.style === "iso") ? this.currencyInfo.getCode() : this.currencyInfo.getSign();
						
						if (!this.roundingMode) {
							this.roundingMode = this.currencyInfo && this.currencyInfo.roundingMode;
						}

						this._init();

						if (options && typeof (options.onLoad) === 'function') {
							options.onLoad(this);
						}
					})
				});
				return;
			} else if (this.type === "percentage") {
				this.template =  new ilib.String(this.localeInfo.getPercentageFormat() || "{n}%");
				this.templateNegative = new ilib.String(this.localeInfo.getNegativePercentageFormat() || this.localeInfo.getNegativeNumberFormat() + "%");
			}

			this._init();

			if (options && typeof (options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

/**
 * Return an array of available locales that this formatter can format
 * @static
 * @return {Array.<ilib.Locale>|undefined} an array of available locales
 */
ilib.NumFmt.getAvailableLocales = function () {
	return undefined;
};

/**
 * @private
 * @const
 * @type string
 */
ilib.NumFmt.zeros = "0000000000000000000000000000000000000000000000000000000000000000000000";

ilib.NumFmt.prototype = {
	/**
	 * Return true if this formatter uses native digits to format the number. If the useNative
	 * option is given to the constructor, then this flag will be honoured. If the useNative
	 * option is not given to the constructor, this this formatter will use native digits if
	 * the locale typically uses native digits.
	 * 
	 *  @return {boolean} true if this formatter will format with native digits, false otherwise
	 */
	getUseNative: function() {
		if (typeof(this.useNative) === "boolean") {
			return this.useNative;
		} 
		return (this.localeInfo.getDigitsStyle() === "native");
	},
	
	/**
	 * @private
	 */
	_init: function () {
		if (this.maxFractionDigits < this.minFractionDigits) {
			this.minFractionDigits = this.maxFractionDigits;
		}

		if (!this.roundingMode) {
			this.roundingMode = this.localeInfo.getRoundingMode();
		}

		if (!this.roundingMode) {
			this.roundingMode = "halfdown";
		}

		// set up the function, so we only have to figure it out once
		// and not every time we do format()
		this.round = ilib._roundFnc[this.roundingMode];
		if (!this.round) {
			this.roundingMode = "halfdown";
			this.round = ilib._roundFnc[this.roundingMode];
		}
		
		if (this.style === "nogrouping") {
			this.prigroupSize = this.secgroupSize = 0;
		} else {
			this.prigroupSize = this.localeInfo.getPrimaryGroupingDigits();
			this.secgroupSize = this.localeInfo.getSecondaryGroupingDigits();
			this.groupingSeparator = this.getUseNative() ? this.localeInfo.getNativeGroupingSeparator() : this.localeInfo.getGroupingSeparator();
		} 
		this.decimalSeparator = this.getUseNative() ? this.localeInfo.getNativeDecimalSeparator() : this.localeInfo.getDecimalSeparator();
		
		if (this.getUseNative()) {
			var nd = this.localeInfo.getNativeDigits() || this.localeInfo.getDigits();
			if (nd) {
				this.digits = nd.split("");
			}
		}
		
		this.exponentSymbol = this.localeInfo.getExponential() || "e";
	},

	/*
	 * @private
	 */
	_pad: function (str, length, left) {
		return (str.length >= length) ?
			str :
			(left ?
			ilib.NumFmt.zeros.substring(0, length - str.length) + str :
			str + ilib.NumFmt.zeros.substring(0, length - str.length));
	},

	/**
	 * @private
	 * @param {Number|ilib.Number|string|number} num object, string, or number to convert to a primitive number
	 * @return {number} the primitive number equivalent of the argument
	 */
	_toPrimitive: function (num) {
		var n = 0;

		switch (typeof (num)) {
		case 'number':
			n = num;
			break;
		case 'string':
			n = parseFloat(num);
			break;
		case 'object':
			// Number.valueOf() is incorrectly documented as being of type "string" rather than "number", so coerse 
			// the type here to shut the type checker up
			n = /** @type {number} */ num.valueOf();
			break;
		}

		return n;
	},

	/**
	 * Format the number using scientific notation as a positive number. Negative
	 * formatting to be applied later.
	 * @private
	 * @param {number} num the number to format
	 * @return {string} the formatted number
	 */
	_formatScientific: function (num) {
		var n = new Number(num);
		var formatted;
		if (typeof (this.maxFractionDigits) !== 'undefined') {
			// if there is fraction digits, round it to the right length first
			// divide or multiply by 10 by manipulating the exponent so as to
			// avoid the rounding errors of floating point numbers
			var e,
				factor,
				str = n.toExponential(),
				parts = str.split("e"),
				significant = parts[0];

			e = parts[1];
			factor = Math.pow(10, this.maxFractionDigits);
			significant = this.round(significant * factor) / factor;
			formatted = "" + significant + this.exponentSymbol + e;
		} else {
			formatted = n.toExponential(this.minFractionDigits);
			if (this.exponentSymbol !== 'e') {
				formatted = formatted.replace(/e/, this.exponentSymbol);
			}
		}
		return formatted;
	},

	/**
	 * Formats the number as a positive number. Negative formatting to be applied later.
	 * @private
	 * @param {number} num the number to format
	 * @return {string} the formatted number
	 */
	_formatStandard: function (num) {
		var i;
		var k;
		
		if (typeof(this.maxFractionDigits) !== 'undefined' && this.maxFractionDigits > -1) {
			var factor = Math.pow(10, this.maxFractionDigits);
			num = this.round(num * factor) / factor;
		}

		num = Math.abs(num);

		var parts = ("" + num).split("."),
			integral = parts[0],
			fraction = parts[1],
			cycle,
			formatted;
		
		integral = integral.toString();

		if (this.minFractionDigits > 0) {
			fraction = this._pad(fraction || "", this.minFractionDigits, false);
		}

		if (this.secgroupSize > 0) {
			if (integral.length > this.prigroupSize) {
				var size1 = this.prigroupSize;
				var size2 = integral.length;
				var size3 = size2 - size1;
				integral = integral.slice(0, size3) + this.groupingSeparator + integral.slice(size3);
				var num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));
				k = num_sec.length;
				while (k > this.secgroupSize) {
					var secsize1 = this.secgroupSize;
					var secsize2 = num_sec.length;
					var secsize3 = secsize2 - secsize1;
					integral = integral.slice(0, secsize3) + this.groupingSeparator + integral.slice(secsize3);
					num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));
					k = num_sec.length;
				}
			}

			formatted = integral;
		} else if (this.prigroupSize !== 0) {
			cycle = ilib.mod(integral.length - 1, this.prigroupSize);

			formatted = "";

			for (i = 0; i < integral.length - 1; i++) {
				formatted += integral.charAt(i);
				if (cycle === 0) {
					formatted += this.groupingSeparator;
				}
				cycle = ilib.mod(cycle - 1, this.prigroupSize);
			}
			formatted += integral.charAt(integral.length - 1);
		} else {
			formatted = integral;
		}

		if (fraction && (typeof(this.maxFractionDigits) === 'undefined' || this.maxFractionDigits > 0)) {
			formatted += this.decimalSeparator;
			formatted += fraction;
		}
		
		if (this.digits) {
			formatted = ilib.mapString(formatted, this.digits);
		}
		
		return formatted;
	},

	/**
	 * Format a number according to the settings of this number formatter instance.
	 * @param num {number|string|Number|ilib.Number} a floating point number to format
	 * @return {string} a string containing the formatted number
	 */
	format: function (num) {
		var formatted, n;

		if (typeof (num) === 'undefined') {
			return "";
		}

		// convert to a real primitive number type
		n = this._toPrimitive(num);

		if (this.type === "number") {
			formatted = (this.style === "scientific") ?
				this._formatScientific(n) :
				this._formatStandard(n);

			if (num < 0) {
				formatted = this.templateNegative.format({n: formatted});
			}
		} else {
			formatted = this._formatStandard(n);
			var template = (n < 0) ? this.templateNegative : this.template;
			formatted = template.format({
				n: formatted,
				s: this.sign
			});
		}

		return formatted;
	},

	/**
	 * Return the type of formatter. Valid values are "number", "currency", and
	 * "percentage".
	 *
	 * @return {string} the type of formatter
	 */
	getType: function () {
		return this.type;
	},

	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},

	/**
	 * Returns true if this formatter groups together digits in the integral
	 * portion of a number, based on the options set up in the constructor. In
	 * most western European cultures, this means separating every 3 digits
	 * of the integral portion of a number with a particular character.
	 *
	 * @return {boolean} true if this formatter groups digits in the integral
	 * portion of the number
	 */
	isGroupingUsed: function () {
		return (this.groupingSeparator !== 'undefined' && this.groupingSeparator.length > 0);
	},

	/**
	 * Returns the maximum fraction digits set up in the constructor.
	 *
	 * @return {number} the maximum number of fractional digits this
	 * formatter will format, or -1 for no maximum
	 */
	getMaxFractionDigits: function () {
		return typeof (this.maxFractionDigits) !== 'undefined' ? this.maxFractionDigits : -1;
	},

	/**
	 * Returns the minimum fraction digits set up in the constructor. If
	 * the formatter has the type "currency", then the minimum fraction
	 * digits is the amount of digits that is standard for the currency
	 * in question unless overridden in the options to the constructor.
	 *
	 * @return {number} the minimum number of fractional digits this
	 * formatter will format, or -1 for no minimum
	 */
	getMinFractionDigits: function () {
		return typeof (this.minFractionDigits) !== 'undefined' ? this.minFractionDigits : -1;
	},

	/**
	 * Returns the ISO 4217 code for the currency that this formatter formats.
	 * IF the typeof this formatter is not "currency", then this method will
	 * return undefined.
	 *
	 * @return {string} the ISO 4217 code for the currency that this formatter
	 * formats, or undefined if this not a currency formatter
	 */
	getCurrency: function () {
		return this.currencyInfo && this.currencyInfo.getCode();
	},

	/**
	 * Returns the rounding mode set up in the constructor. The rounding mode
	 * controls how numbers are rounded when the integral or fraction digits
	 * of a number are limited.
	 *
	 * @return {string} the name of the rounding mode used in this formatter
	 */
	getRoundingMode: function () {
		return this.roundingMode;
	},

	/**
	 * If this formatter is a currency formatter, then the style determines how the
	 * currency is denoted in the formatted output. This method returns the style
	 * that this formatter will produce. (See the constructor comment for more about
	 * the styles.)
	 * @return {string} the name of the style this formatter will use to format
	 * currency amounts, or "undefined" if this formatter is not a currency formatter
	 */
	getStyle: function () {
		return this.style;
	}
};

/*
 * durfmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
resources.js 
localeinfo.js
util/jsutils.js
*/

// !data dateformats sysres
// !resbundle sysres

/**
 * @class
 * Create a new duration formatter instance. The duration formatter is immutable once
 * it is created, but can format as many different durations as needed with the same
 * options. Create different duration formatter instances for different purposes
 * and then keep them cached for use later if you have more than one duration to
 * format.<p>
 * 
 * Duration formatters format lengths of time. The duration formatter is meant to format 
 * durations of such things as the length of a song or a movie or a meeting, or the 
 * current position in that song or movie while playing it. If you wish to format a 
 * period of time that has a specific start and end date/time, then use a
 * [ilib.DateRngFmt] instance instead and call its format method.<p>
 *  
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the duration. If the locale is
 * not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the 
 * formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the duration. This is the most compact format possible for the locale. eg. 1y 1m 1w 1d 1:01:01
 * <li><i>medium</i> - use a medium length representation of the duration. This is a slightly longer format. eg. 1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se
 * <li><i>long</i> - use a long representation of the duration. This is a fully specified format, but some of the textual 
 * parts may still be abbreviated. eg. 1 yr 1 mo 1 wk 1 day 1 hr 1 min 1 sec
 * <li><i>full</i> - use a full representation of the duration. This is a fully specified format where all the textual 
 * parts are spelled out completely. eg. 1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute and 1 second
 * </ul>
 * 
 * <li><i>style<i> - whether hours, minutes, and seconds should be formatted as a text string
 * or as a regular time as on a clock. eg. text is "1 hour, 15 minutes", whereas clock is "1:15:00". Valid
 * values for this property are "text" or "clock". Default if this property is not specified
 * is "text".
 * 
 *<li><i>useNative</i> - the flag used to determaine whether to use the native script settings 
 * for formatting the numbers .
 * 
 * <li><i>onLoad</i> - a callback function to call when the format data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends durfmt.js
 * 
 * @constructor
 * @param {?Object} options options governing the way this date formatter instance works
 */
ilib.DurFmt = function(options) {
	var sync = true;
	var loadParams = undefined;
	
	this.locale = new ilib.Locale();
	this.length = "short";
	this.style = "text";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				this.length = options.length;
			}
		}
		
		if (options.style) {
			if (options.style === 'text' || options.style === 'clock') {
				this.style = options.style;
			}
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		
		loadParams = options.loadParams;
	}
	
	new ilib.ResBundle({
		locale: this.locale,
		name: "sysres",
		sync: sync,
		loadParams: loadParams,
		onLoad: ilib.bind(this, function (sysres) {
			switch (this.length) {
				case 'short':
					this.components = {
						year: sysres.getString("#{num}y"),
						month: sysres.getString("#{num}m", "durationShortMonths"),
						week: sysres.getString("#{num}w"),
						day: sysres.getString("#{num}d"),
						hour: sysres.getString("#{num}h"),
						minute: sysres.getString("#{num}m", "durationShortMinutes"),
						second: sysres.getString("#{num}s"),
						millisecond: sysres.getString("#{num}m", "durationShortMillis"),
						separator: sysres.getString(" ", "separatorShort"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'medium':
					this.components = {
						year: sysres.getString("1#1 yr|#{num} yrs", "durationMediumYears"),
						month: sysres.getString("1#1 mo|#{num} mos"),
						week: sysres.getString("1#1 wk|#{num} wks", "durationMediumWeeks"),
						day: sysres.getString("1#1 dy|#{num} dys"),
						hour: sysres.getString("1#1 hr|#{num} hrs", "durationMediumHours"),
						minute: sysres.getString("1#1 mi|#{num} min"),
						second: sysres.getString("1#1 se|#{num} sec"),
						millisecond: sysres.getString("#{num} ms"),
						separator: sysres.getString(" ", "separatorMedium"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'long':
					this.components = {
						year: sysres.getString("1#1 yr|#{num} yrs"),
						month: sysres.getString("1#1 mon|#{num} mons"),
						week: sysres.getString("1#1 wk|#{num} wks"),
						day: sysres.getString("1#1 day|#{num} days", "durationLongDays"),
						hour: sysres.getString("1#1 hr|#{num} hrs"),
						minute: sysres.getString("1#1 min|#{num} min"),
						second: sysres.getString("1#1 sec|#{num} sec"),
						millisecond: sysres.getString("#{num} ms"),
						separator: sysres.getString(", ", "separatorLong"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'full':
					this.components = {
						year: sysres.getString("1#1 year|#{num} years"),
						month: sysres.getString("1#1 month|#{num} months"),
						week: sysres.getString("1#1 week|#{num} weeks"),
						day: sysres.getString("1#1 day|#{num} days"),
						hour: sysres.getString("1#1 hour|#{num} hours"),
						minute: sysres.getString("1#1 minute|#{num} minutes"),
						second: sysres.getString("1#1 second|#{num} seconds"),
						millisecond: sysres.getString("1#1 millisecond|#{num} milliseconds"),
						separator: sysres.getString(", ", "separatorFull"),
						finalSeparator: sysres.getString(" and ", "finalSeparatorFull")
					};
					break;
			}
			
			if (this.style === 'clock') {
				new ilib.DateFmt({
					locale: this.locale,
					type: "time",
					time: "ms",
					sync: sync,
					loadParams: loadParams,
					useNative: this.useNative,
					onLoad: ilib.bind(this, function (fmtMS) {
						this.timeFmtMS = fmtMS;
						new ilib.DateFmt({
							locale: this.locale,
							type: "time",
							time: "hm",
							sync: sync,
							loadParams: loadParams,
							useNative: this.useNative,
							onLoad: ilib.bind(this, function (fmtHM) {
								this.timeFmtHM = fmtHM;		
								new ilib.DateFmt({
									locale: this.locale,
									type: "time",
									time: "hms",
									sync: sync,
									loadParams: loadParams,
									useNative: this.useNative,
									onLoad: ilib.bind(this, function (fmtHMS) {
										this.timeFmtHMS = fmtHMS;		

										// munge with the template to make sure that the hours are not formatted mod 12
										this.timeFmtHM.template = this.timeFmtHM.template.replace(/hh?/, 'H');
										this.timeFmtHM.templateArr = this.timeFmtHM._tokenize(this.timeFmtHM.template);
										this.timeFmtHMS.template = this.timeFmtHMS.template.replace(/hh?/, 'H');
										this.timeFmtHMS.templateArr = this.timeFmtHMS._tokenize(this.timeFmtHMS.template);
										
										this._init(this.timeFmtHM.locinfo, options && options.onLoad);
									})
								});
							})
						});
					})
				});
				return;
			}

			new ilib.LocaleInfo(this.locale, {
				sync: sync,
				loadParams: loadParams,
				onLoad: ilib.bind(this, function (li) {
					this._init(li, options && options.onLoad);
				})
			});
		})
	});
};

/**
 * @private
 * @static
 */
ilib.DurFmt.complist = {
	"text": ["year", "month", "week", "day", "hour", "minute", "second", "millisecond"],
	"clock": ["year", "month", "week", "day"]
};

/**
 * @private
 */
ilib.DurFmt.prototype._mapDigits = function(str) {
	if (this.useNative && this.digits) {
		return ilib.mapString(str.toString(), this.digits);
	}
	return str;
};

/**
 * @private
 * @param {ilib.LocaleInfo} locinfo
 * @param {function(ilib.DurFmt)|undefined} onLoad
 */
ilib.DurFmt.prototype._init = function(locinfo, onLoad) {
	var digits;
	if (typeof(this.useNative) === 'boolean') {
		// if the caller explicitly said to use native or not, honour that despite what the locale data says...
		if (this.useNative) {
			digits = locinfo.getNativeDigits();
			if (digits) {
				this.digits = digits;
			}
		}
	} else if (locinfo.getDigitsStyle() === "native") {
		// else if the locale usually uses native digits, then use them 
		digits = locinfo.getNativeDigits();
		if (digits) {
			this.useNative = true;
			this.digits = digits;
		}
	} // else use western digits always

	if (typeof(onLoad) === 'function') {
		onLoad(this);
	}
};

/**
 * Format a duration according to the format template of this formatter instance.<p>
 * 
 * The components parameter should be an object that contains any or all of these 
 * numeric properties:
 * 
 * <ul>
 * <li>year
 * <li>month
 * <li>week
 * <li>day
 * <li>hour
 * <li>minute
 * <li>second
 * </ul>
 * <p>
 *
 * When a property is left out of the components parameter or has a value of 0, it will not
 * be formatted into the output string, except for times that include 0 minutes and 0 seconds.
 * 
 * This formatter will not ensure that numbers for each component property is within the
 * valid range for that component. This allows you to format durations that are longer
 * than normal range. For example, you could format a duration has being "33 hours" rather
 * than "1 day, 9 hours".
 * 
 * @param {Object} components date/time components to be formatted into a duration string
 * @return {ilib.String} a string with the duration formatted according to the style and 
 * locale set up for this formatter instance. If the components parameter is empty or 
 * undefined, an empty string is returned.
 */
ilib.DurFmt.prototype.format = function (components) {
	var i, list, temp, fmt, secondlast = true, str = "";
	
	list = ilib.DurFmt.complist[this.style];
	//for (i = 0; i < list.length; i++) {
	for (i = list.length-1; i >= 0; i--) {
		//console.log("Now dealing with " + list[i]);
		if (typeof(components[list[i]]) !== 'undefined' && components[list[i]] != 0) {
			if (str.length > 0) {
				str = ((this.length === 'full' && secondlast) ? this.components.finalSeparator : this.components.separator) + str;
				secondlast = false;
			}
			str = this.components[list[i]].formatChoice(components[list[i]], {num: this._mapDigits(components[list[i]])}) + str;
		}
	}

	if (this.style === 'clock') {
		if (typeof(components.hour) !== 'undefined') {
			fmt = (typeof(components.second) !== 'undefined') ? this.timeFmtHMS : this.timeFmtHM;
		} else {
			fmt = this.timeFmtMS;
		}
				
		if (str.length > 0) {
			str += this.components.separator;
		}
		str += fmt._formatTemplate(components, fmt.templateArr);
	}
	
	return new ilib.String(str);
};

/**
 * Return the locale that was used to construct this duration formatter object. If the
 * locale was not given as parameter to the constructor, this method returns the default
 * locale of the system.
 * 
 * @return {ilib.Locale} locale that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getLocale = function () {
	return this.locale;
};

/**
 * Return the length that was used to construct this duration formatter object. If the
 * length was not given as parameter to the constructor, this method returns the default
 * length. Valid values are "short", "medium", "long", and "full".
 * 
 * @return {string} length that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getLength = function () {
	return this.length;
};

/**
 * Return the style that was used to construct this duration formatter object. Returns
 * one of "text" or "clock".
 * 
 * @return {string} style that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getStyle = function () {
	return this.style;
};

/*
 * scriptinfo.js - information about scripts
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

// !data scripts

/**
 * @class
 * Create a new script info instance. This class encodes information about
 * scripts, which are sets of characters used in a writing system.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the script info object is fully 
 * loaded. When the onLoad option is given, the script info object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends scriptinfo.js
 * 
 * @constructor
 * @param {string} script The ISO 15924 4-letter identifier for the script
 * @param {Object} options parameters to initialize this matcher 
 */
ilib.ScriptInfo = function(script, options) {
	var sync = true,
	    loadParams = undefined;
	
	this.script = script;
	
	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.ScriptInfo.cache) {
		ilib.ScriptInfo.cache = {};
	}

	if (!ilib.data.scripts) {
		ilib.loadData({
			object: ilib.ScriptInfo, 
			locale: "-", 
			name: "scripts.json", 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = {"Latn":{"nb":215,"nm":"Latin","lid":"Latin","rtl":false,"ime":false,"casing":true}};
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.ScriptInfo.cache[spec] = info;
				}
				ilib.data.scripts = info;
				this.info = script && ilib.data.scripts[script];
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	} else {
		this.info = ilib.data.scripts[script];
	}

};

/**
 * Return an array of all ISO 15924 4-letter identifier script identifiers that
 * this copy of ilib knows about.
 * @static
 * @return {Array.<string>} an array of all script identifiers that this copy of
 * ilib knows about
 */
ilib.ScriptInfo.getAllScripts = function() {
	var ret = [],
		script = undefined,
		scripts = ilib.data.scripts;
	
	for (script in scripts) {
		if (script && scripts[script]) {
			ret.push(script);
		}
	}
	
	return ret;
};

ilib.ScriptInfo.prototype = {
	/**
	 * Return the 4-letter ISO 15924 identifier associated
	 * with this script.
	 * @return {string} the 4-letter ISO code for this script
	 */
	getCode: function () {
		return this.info && this.script;
	},
	
	/**
	 * Get the ISO 15924 code number associated with this
	 * script.
	 * 
	 * @return {number} the ISO 15924 code number
	 */
	getCodeNumber: function () {
		return this.info && this.info.nb || 0;
	},
	
	/**
	 * Get the name of this script in English.
	 * 
	 * @return {string} the name of this script in English
	 */
	getName: function () {
		return this.info && this.info.nm;
	},
	
	/**
	 * Get the long identifier assciated with this script.
	 * 
	 * @return {string} the long identifier of this script
	 */
	getLongCode: function () {
		return this.info && this.info.lid;
	},
	
	/**
	 * Return the usual direction that text in this script is written
	 * in. Possible return values are "rtl" for right-to-left,
	 * "ltr" for left-to-right, and "ttb" for top-to-bottom.
	 * 
	 * @return {string} the usual direction that text in this script is
	 * written in
	 */
	getScriptDirection: function() {
		return (this.info && typeof(this.info.rtl) !== 'undefined' && this.info.rtl) ? "rtl" : "ltr";
	},
	
	/**
	 * Return true if this script typically requires an input method engine
	 * to enter its characters.
	 * 
	 * @return {boolean} true if this script typically requires an IME
	 */
	getNeedsIME: function () {
		return this.info && this.info.ime ? true : false; // converts undefined to false
	},
	
	/**
	 * Return true if this script uses lower- and upper-case characters.
	 * 
	 * @return {boolean} true if this script uses letter case
	 */
	getCasing: function () {
		return this.info && this.info.casing ? true : false; // converts undefined to false
	}
};
/*
 * casemapper.js - define upper- and lower-case mapper
 * 
 * Copyright Â© 2014-2015, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends locale.js util/utils.js

/**
 * @class
 * Create a new string mapper instance that maps strings to upper or
 * lower case. This mapping will work for any string as characters 
 * that have no case will be returned unchanged.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when loading the mapper. Some maps are 
 * locale-dependent, and this locale selects the right one. Default if this is
 * not specified is the current locale.
 * 
 * <li><i>direction</i> - "toupper" for upper-casing, or "tolower" for lower-casing.
 * Default if not specified is "toupper".
 * </ul>
 * 
 * Depends directive: !depends casemapper.js
 * 
 * @constructor
 * @param {Object=} options options to initialize this mapper 
 */
ilib.CaseMapper = function (options) {
	this.up = true;
	this.locale = new ilib.Locale();
	
	if (options) {
		if (typeof(options.locale) !== 'undefined') {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		this.up = (!options.direction || options.direction === "toupper");
	}

	switch (this.locale.getLanguage()) {
		case "az":
		case "tr":
		case "crh":
		case "kk":
		case "krc":
		case "tt":
			this.mapData = this.up ?  {
				"i": "Ä°",
				"Ä±": "I"
			} : {
				"Ä°": "i",
				"I": "Ä±"
			};
			this.mapper = this._charMapper;
			break;
		case "de":
			if (this.up) {
				this.mapper = this._charMapper;
				this.mapData = {
					"Ã": "SS"
				};
			}
			break;
		case "fr":
			if (this.up && this.locale.getRegion() !== "CA") {
				this.mapData = {
					'Ã ': 'A',
					'Ã¡': 'A',
					'Ã¢': 'A',
					'Ã£': 'A',
					'Ã¤': 'A',
					'Ã§': 'C',
					'Ã¨': 'E',
					'Ã©': 'E',
					'Ãª': 'E',
					'Ã«': 'E',
					'Ã¬': 'I',
					'Ã­': 'I',
					'Ã®': 'I',
					'Ã¯': 'I',
					'Ã±': 'N',
					'Ã²': 'O',
					'Ã³': 'O',
					'Ã´': 'O',
					'Ã¶': 'O',
					'Ã¹': 'U',
					'Ãº': 'U',
					'Ã»': 'U',
					'Ã¼': 'U'
				};
				this.mapper = this._charMapper;
			}
			break;
		case "el":
			this.mapData = this.up ? {
				'Î': 'Î',
				'Î¬': 'Î',
				'Î­': 'Î',
				'Î®': 'Î',
				'Î¯': 'Î',
				'Î°': 'Î¥',
				'Ï': 'Î',
				'Ï': 'Î¥',
				'Ï': 'Î',
				'Ï': 'Î¥',
				'Ï': 'Î©'	
			} : {};
			this.mapper = this._charMapper;
			break;
		case "abq":
		case "ady":
		case "av":
		case "ce":
		case "dar":
		case "inh":
		case "kbd":
		case "lbe":
		case "lez":
		case "tab":
		case "ru":
			if (!this.up) {
				this.mapData = {
					'Ó': 'Ó'	
				};
				this.mapper = this._charMapper;
			}
			break;
	}
	
	if (!this.mapper) {
		this.mapper = function(string) {
			return this.up ? string.toUpperCase() : string.toLowerCase();
		};
	}
};

ilib.CaseMapper.prototype = {
	/** 
	 * @private 
	 */
	_charMapper: function(string) {
		var input;
		if (!string) {
			return string;
		}
		if (typeof(string) === 'string') {
			input = new ilib.String(string);
		} else {
			input = string.toString();
		}
		var ret = "";
		var it = input.charIterator();
		var c;
		
		while (it.hasNext()) {
			c = it.next();
			if (!this.up && c === 'Î£') {
				if (it.hasNext()) {
					c = it.next();
					var code = c.charCodeAt(0);
					// if the next char is not a greek letter, this is the end of the word so use the
					// final form of sigma. Otherwise, use the mid-word form.
					ret += ((code < 0x0388 && code !== 0x0386) || code > 0x03CE) ? 'Ï' : 'Ï';
					ret += c.toLowerCase();
				} else {
					// no next char means this is the end of the word, so use the final form of sigma
					ret += 'Ï';
				}
			} else {
				if (this.mapData[c]) {
					ret += this.mapData[c];
				} else {
					ret += this.up ? c.toUpperCase() : c.toLowerCase();
				}
			}
		}
		
		return ret;
	},

	/**
	 * Return the locale that this mapper was constructed with. 
	 * @returns {ilib.Locale} the locale that this mapper was constructed with
	 */
	getLocale: function () {
		return this.locale;
	},
		
	/**
	 * Map a string to lower case in a locale-sensitive manner.
	 * 
	 * @param {string|undefined} string
	 * @return {string|undefined}
	 */
	map: function (string) {
		return this.mapper(string);
	}
};
/**
 * @license
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ilib-standard-inc.js - metafile that includes a reasonable set of other js files
 */

/* !depends
ilibglobal.js
daterangefmt.js
date.js
calendar/gregorian.js
calendar/gregoriandate.js
calendar/thaisolar.js
calendar/thaisolardate.js
calendar/persianastro.js
calendar/persianastrodate.js
numprs.js
numfmt.js
julianday.js
datefmt.js
calendar.js
util/utils.js
locale.js
strings.js
durfmt.js
resources.js
localeinfo.js
daterangefmt.js
scriptinfo.js
maps/casemapper.js
*/

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":6}],100:[function(require,module,exports){
var PathResolverFactory = require('./PathResolverFactory');

module.exports = new PathResolverFactory();
},{"./PathResolverFactory":55}],101:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"./PathResolverFactory":55,"dup":100}],12:[function(require,module,exports){
'use strict';

exports = module.exports = require('./lib/options');
exports.version = '2.6.0-pre';
},{"./lib/options":99}],11:[function(require,module,exports){
(function (process,Buffer){
/*
 * zoneinfo.js - represent a binary zone info file
 *
 * Copyright Â© 2014 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * The portion of this code that parses the zone info file format is derived
 * from the code in the node-zoneinfo project by Gregory McWhirter licensed
 * under the MIT license:
 *
 * Copyright (c) 2013 Gregory McWhirter
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:

 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

var
	PackedBuffer = require("./packedbuffer.js");

var _platform = "unknown";

(function () {
	if (typeof(enyo) !== 'undefined') {
		_platform = "enyo";
	} else if (typeof(environment) !== 'undefined') {
		_platform = "rhino";
	} else if (typeof(process) !== 'undefined' || typeof(require) !== 'undefined') {
		_platform = "nodejs";
	} else if (typeof(window) !== 'undefined') {
		_platform = (typeof(PalmSystem) !== 'undefined') ? "webos" : "browser";
	}
})();

/**
 * @constructor
 * Represents a binary zone info file of the sort that the Unix Zone Info Compiler
 * produces.
 * @param {string} path path to the file to be loaded
 * @param {number} year year of the zone info rules needed
 */
var ZoneInfoFile = function (path) {
	var that = this;
	switch (_platform) {
		/*
		Uncomment and use this when enyo works for binary load.
		case "enyo":
			var ajax = new enyo.Ajax({
				xhrFields: {
					responseType:"arraybuffer"
				},
				cacheBust: false,
				sync: true,
				handleAs: "binary",
				url: "file://" + path
			});
			ajax.response(this, function(s, r) {
				var byteArray = new Uint8Array(r);
				// console.log("ZoneInfoFile bytes received: " + byteArray.length);
				that._parseInfo(byteArray);
			});
			//ajax.error(this, function(s, r) {
			//	console.log("ZoneInfoFile: failed to load files " + JSON.stringify(s) + " " + r);
			//});
			ajax.go();
			break;
		*/
		
		case "nodejs":
			// console.log("ZoneInfoFile: loading zoneinfo path " + path + "\n");
			var fs = require("fs");
			var bytes = new Buffer(fs.readFileSync(path));
			var byteArray = new Uint8Array(bytes);
			this._parseInfo(byteArray);
			break;
			
		default:
			// use normal web techniques
			var req = new XMLHttpRequest();
			req.open("GET", "file:" + path, false);
			req.responseType = "arraybuffer";
			req.onload = function(e) {
				var byteArray = new Uint8Array(req.response);
				// console.log("ZoneInfoFile bytes received: " + byteArray.length);
				that._parseInfo(byteArray);
			};
			req.onerror = function(e) {
				throw "Cannot load file " + path;
			};
			req.send();
			break;
	}
};

/**
 * @private
 * Parse the binary buffer to find the zone info
 * @param buffer
 */
ZoneInfoFile.prototype._parseInfo = function(buffer) {
	var packed = new PackedBuffer(buffer);

	// The time zone information files used by tzset(3)
	// begin with the magic characters "TZif" to identify
	// them as time zone information files, followed by
	// sixteen bytes reserved for future use, followed by
	// six four-byte values of type long, written in a
	// ''standard'' byte order (the high-order byte
	// of the value is written first).
	if (packed.getString(4) != "TZif") {
		throw "file format not recognized";
	} else {
		// ignore 16 bytes
		packed.skip(16);

		// The number of UTC/local indicators stored in the file.
		var tzh_ttisgmtcnt = packed.getLong();
		// The number of standard/wall indicators stored in the file.
		var tzh_ttisstdcnt = packed.getLong();
		// The number of leap seconds for which data is stored in the file.
		var tzh_leapcnt = packed.getLong();
		// The number of "transition times" for which data is stored in the file.
		var tzh_timecnt = packed.getLong();
		// The number of "local time types" for which data is stored in the file (must not be zero).
		var tzh_typecnt = packed.getLong();
		// The number of characters of "time zone abbreviation strings" stored in the file.
		var tzh_charcnt = packed.getLong();

		this.transitionTimes = tzh_timecnt ? packed.getLongs(tzh_timecnt) : [];

		this.transitionTimes = this.transitionTimes.map(function (item) {
			return item * 1000;
		});

		// these are indexes into the zonesInfo that correspond to each transition time
		this.ruleIndex = tzh_timecnt ? packed.getUnsignedBytes(tzh_timecnt) : [];

		this.zoneInfo = [];
		for (var i = 0; i < tzh_typecnt; i++) {
			this.zoneInfo.push({
				offset: Math.floor(packed.getLong()/60),  // offset in seconds, so convert to minutes
				isdst: !!packed.getByte(),
				abbreviationIndex: packed.getByte()
			});
		}

		var allAbbreviations = packed.getString(tzh_charcnt);

		for (var i = 0; i < tzh_typecnt; i++) {
			var abbreviation = allAbbreviations.substring(this.zoneInfo[i].abbreviationIndex);
			this.zoneInfo[i].abbreviation = abbreviation.substring(0, abbreviation.indexOf('\x00'));
		}

		// ignore the leap seconds
		if (tzh_leapcnt) {
			packed.skip(tzh_leapcnt * 2);
		}

		// skip the standard/wall time indicators
		if (tzh_ttisstdcnt) {
			packed.skip(tzh_ttisstdcnt);
		}

		// ignore the UTC/local time indicators -- everything should be UTC
		if (tzh_ttisgmtcnt) {
			packed.skip(tzh_ttisgmtcnt);
		}

		// finished reading

		// Replace ttinfo indexes for ttinfo objects.
		var that = this;
		this.ruleIndex = this.ruleIndex.map(function (item) {
			return {
				offset: that.zoneInfo[item].offset,
				isdst: that.zoneInfo[item].isdst,
				abbreviation: that.zoneInfo[item].abbreviation
			};
		});

		// calculate the dst savings for each daylight time
		for (var i = 0; i < tzh_timecnt; i++) {
			if (i > 0 && this.ruleIndex[i].isdst) {
				this.ruleIndex[i].savings = this.ruleIndex[i].offset - this.ruleIndex[i-1].offset;
			}
		}

		// Set standard, dst, and before ttinfos. before will be
		// used when a given time is before any transitions,
		// and will be set to the first non-dst ttinfo, or to
		// the first dst, if all of them are dst.
		if (!this.transitionTimes.length) {
			this.standardTime = this.zoneInfo[0];
		} else {
			for (var j = tzh_timecnt - 1; j > -1; j--) {
				var tti = this.ruleIndex[j];
				if (!this.standardTime && !tti.isdst) {
					this.standardTime = tti;
				} else if (!this.daylightTime && tti.isdst) {
					this.daylightTime = tti;
				}

				if (this.daylightTime && this.standardTime)
					break;
			}

			if (this.daylightTime && !this.standardTime) {
				this.standardTime = this.daylightTime;
			}

			for (var k = this.zoneInfo.length-1; k > 0; k--) {
				if (!this.zoneInfo[k].isdst) {
					this.defaultTime = this.zoneInfo[k];
					break;
				}
			}
		}
		if (!this.defaultTime) {
			this.defaultTime = this.zoneInfo[this.zoneInfo.length-1];
		}
	}
};

/**
 * Binary search a sorted array of numbers for a particular target value.
 * If the exact value is not found, it returns the index of the largest
 * entry that is smaller than the given target value.<p>
 *
 * @param {number} target element being sought
 * @param {Array} arr the array being searched
 * @return the index of the array into which the value would fit if
 * inserted, or -1 if given array is not an array or the target is not
 * a number
 */
ZoneInfoFile.prototype.bsearch = function(target, arr) {
	if (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined' || target < arr[0]) {
		return -1;
	}

	// greater than the end of the array
	if (target > arr[arr.length-1]) {
		return arr.length - 1;
	}

	var high = arr.length - 1,
		low = 0,
		mid = 0,
		value;

	while (low <= high) {
		mid = Math.floor((high+low)/2);
		value = arr[mid] - target;
		if (value > 0) {
			high = mid - 1;
		} else if (value < 0) {
			low = mid + 1;
		} else {
			return mid;
		}
	}

	return high;
};

/**
 * Return whether or not this zone uses DST in the given year.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {boolean} true if the zone uses DST in the given year
 */
ZoneInfoFile.prototype.usesDST = function(date) {
	var thisYear = date.getTime();
	var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

	// search for the zone that was effective Jan 1 of this year
	// to Jan 1 of next year, and if any of the infos is DST, then
	// this zone supports DST in the given year.

	var index = this.bsearch(thisYear, this.transitionTimes);
	if (index !== -1) {
		while (index < this.transitionTimes.length && this.transitionTimes[index] < nextYear) {
			if (this.ruleIndex[index++].isdst) {
				return true;
			}
		}
	}

	return false;
};

/**
 * Return the raw offset from UTC that this zone uses at the given time.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} offset from from UTC in number of minutes. Negative
 * numbers are west of Greenwich, positive are east of Greenwich
 */
ZoneInfoFile.prototype.getRawOffset = function(date) {
	var thisYear = date.getTime();
	var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

	var index = this.bsearch(thisYear, this.transitionTimes);

	var offset = this.defaultTime.offset;
	if (index > -1) {
		while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {
			index++;
		}

		if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
			offset = this.ruleIndex[index].offset;
		}
	}

	return offset;
};

/**
 * If this zone uses DST in the given year, return the DST savings
 * in use. If the zone does not use DST in the given year, this
 * method will return 0.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} number of minutes in DST savings if the zone
 * uses DST in the given year, or zero otherwise
 */
ZoneInfoFile.prototype.getDSTSavings = function(date) {
	var thisYear = date.getTime();
	var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

	// search for all transitions between now and one year 
	// from now, and calculate the difference in DST (if any)

	var index = this.bsearch(thisYear, this.transitionTimes);
	var savings = 0;
	if (index > -1) {
		while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {
			index++;
		}

		if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
			savings = this.ruleIndex[index].savings;
		}
	}

	return savings;
};

/**
 * Return the start date/time of DST if this zone uses
 * DST in the given year.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} unixtime representation of the start
 * of DST in the given year, or -1 if the zone does not
 * use DST in the given year
 */
ZoneInfoFile.prototype.getDSTStartDate = function(date) {
	var year = date.getFullYear();
	var thisYear = new Date(year, 0, 1).getTime();
	var nextYear = new Date(year+1, 0, 1).getTime();

	// search for all transitions between Jan 1 of this year
	// to Jan 1 of next year, and calculate the difference
	// in DST (if any)

	var index = this.bsearch(thisYear, this.transitionTimes);
	var startDate = -1;
	if (index > -1) {
		if (this.transitionTimes[index] < thisYear) {
			index++; // start in this year instead of the previous year
		}
		while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {
			index++;
		}

		if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
			startDate = this.transitionTimes[index];
		}
	}

	return startDate;
};

/**
 * Return the end date/time of DST if this zone uses
 * DST in the given year.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {number} unixtime representation of the end
 * of DST in the given year, or -1 if the zone does not
 * use DST in the given year
 */
ZoneInfoFile.prototype.getDSTEndDate = function(date) {
	var year = date.getFullYear();
	var thisYear = new Date(year, 0, 1).getTime();
	var nextYear = new Date(year+1, 0, 1).getTime();

	// search for all transitions between Jan 1 of this year
	// to Jan 1 of next year, and calculate the difference
	// in DST (if any)

	var index = this.bsearch(thisYear, this.transitionTimes);
	var endDate = -1;
	if (index > -1) {
		if (this.transitionTimes[index] < thisYear) {
			index++; // start in this year instead of the previous year
		}
		while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {
			index++;
		}

		if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
			endDate = this.transitionTimes[index];
		}
	}

	return endDate;
};

/**
 * Return the abbreviation used by this zone in standard
 * time.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {string} a string representing the abbreviation
 * used in this time zone during standard time
 */
ZoneInfoFile.prototype.getAbbreviation = function(date) {
	var thisYear = date.getTime();
	var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

	// search for all transitions between now and one year from now, and calculate the difference
	// in DST (if any)
	var abbr;
	if (this.transitionTimes.length > 0) {
		var index = this.bsearch(thisYear, this.transitionTimes);
		abbr = this.ruleIndex[index].abbreviation;
		if (index > -1) {
			while (index < this.transitionTimes.length && this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {
				index++;
			}

			if (index < this.transitionTimes.length && !this.ruleIndex[index].isdst) {
				abbr = this.ruleIndex[index].abbreviation;
			}
		}
	} else {
		abbr = this.standardTime.abbreviation;
	}

	return abbr;
};

/**
 * Return the abbreviation used by this zone in daylight
 * time. If the zone does not use DST in the given year,
 * this returns the same thing as getAbbreviation().
 *
 * @param {Date} date the Gregorian date to test
 * @returns {string} a string representing the abbreviation
 * used in this time zone during daylight time
 */
ZoneInfoFile.prototype.getDSTAbbreviation = function(date) {
	var thisYear = date.getTime();
	var nextYear = thisYear + 31536000000; // this is the number of ms in 1 Gregorian year

	// search for all transitions between now and one year from now, and calculate the difference
	// in DST (if any)

	var abbr;
	if (this.transitionTimes.length > 0) {
		var index = this.bsearch(thisYear, this.transitionTimes);
		abbr = this.ruleIndex[index].abbreviation;
		if (index > -1) {
			while (index < this.transitionTimes.length && !this.ruleIndex[index].isdst && this.transitionTimes[index+1] < nextYear) {
				index++;
			}

			if (index < this.transitionTimes.length && this.ruleIndex[index].isdst) {
				abbr = this.ruleIndex[index].abbreviation;
			}
		}
	} else {
		abbr = this.standardTime.abbreviation;
	}

	return abbr;
};

/**
 * Return the zone information for the given date in ilib
 * format.
 *
 * @param {Date} date the Gregorian date to test
 * @returns {Object} an object containing the zone information
 * for the given date in the format that ilib can use directly
 */
ZoneInfoFile.prototype.getIlibZoneInfo = function(date) {
	function minutesToStr(min) {
		var hours = Math.floor(min / 60);
		var minutes = min - hours * 60;

		return hours + ":" + minutes;
	}

	function unixtimeToJD(millis) {
		return 2440587.5 + millis / 86400000;
	}
	var res = {
		"o": minutesToStr(this.getRawOffset(date))
	};
	if (this.usesDST(date)) {
		res.f = "{c}";
		res.e = {
			"c": this.getAbbreviation(date),
			"j": unixtimeToJD(this.getDSTEndDate(date))
		};
		res.s = {
			"c": this.getDSTAbbreviation(date),
			"j": unixtimeToJD(this.getDSTStartDate(date)),
			"v": minutesToStr(this.getDSTSavings(date))
		};
	} else {
		res.f = this.getAbbreviation(date);
	}

	return res;
};

module.exports.ZoneInfoFile = ZoneInfoFile;
}).call(this,require('_process'),require("buffer").Buffer)

},{"./packedbuffer.js":10,"_process":6,"buffer":2,"fs":1}],14:[function(require,module,exports){
require('../../enyo');

/**
* The available options used by {@link enyo.Ajax} and {@link enyo.WebService}.
*
* @namespace enyo.AjaxProperties
* @public
*/
module.exports = /** @lends enyo.AjaxProperties */ {
	
	/**
	* When `true`, appends a random number as a parameter for `GET` requests to try to
	* force a new fetch of the resource instead of reusing a local cache.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	cacheBust: true,
	
	/**
	* The URL for the service. This may be a relative URL if used to fetch resources bundled
	* with the application.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	url: '',
	
	/**
	* The HTTP method to use for the request; defaults to `'GET'`.  Supported values include
	* `'GET'`, `'POST'`, `'PUT'`, and `'DELETE'`.
	*
	* @type {String}
	* @default 'GET'
	* @public
	*/
	method: 'GET', // {value: 'GET', options: ['GET', 'POST', 'PUT', 'DELETE']}
	
	/**
	* How the response will be handled. Supported values are `'json'`, `'text'`, and `'xml'`.
	*
	* @type {String}
	* @default 'json'
	* @public
	*/
	handleAs: 'json', // {value: 'json', options: ['text', 'json', 'xml']}
	
	/**
	* The `Content-Type` header for the request as a String.
	*
	* @type {String}
	* @default 'application/x-www-form-urlencoded'
	* @public
	*/
	contentType: 'application/x-www-form-urlencoded',
	
	/**
	* If `true`, makes a synchronous (blocking) call, if supported.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	sync: false,
	
	/**
	* Optional additional request headers as a [hash]{@glossary Object}, or `null`.
	
	* ```javascript
	* { 'X-My-Header': 'My Value', 'Mood': 'Happy' }
	* ```
	*
	* @type {Object}
	* @default null
	* @public
	*/
	headers: null,
	
	/**
	* The content for the request body for `POST/PUT` methods. When `postBody` is a
	* [buffer]{@glossary Buffer} or a [string]{@glossary String}, it is passed
	* verbatim in the request body. When it is a [hash]{@glossary Object}, the way it is
	* encoded depends on the `contentType`:
	*
	* - `'application/json'` => [JSON.stringify()]{@glossary JSON.stringify}
	* - `'application/x-www-urlencoded'` => url-encoded parameters
	* - `'multipart/form-data'` => passed as fields in {@link enyo.FormData} (XHR2 emulation)
	*
	* @type {(String|Buffer|Object)}
	* @default ''
	* @public
	*/
	postBody: '',

	/**
	* The optional username to use for authentication purposes.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	username: '',
	
	/**
	* The optional password to use for authentication purposes.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	password: '',
	
	/**
	* Optional [hash]{@glossary Object} with fields to pass directly to the underlying XHR
	* object. One example is the `withCredentials` flag used for cross-origin requests.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	xhrFields: null,
	
	/**
	* Optional [string]{@glossary String} to override the `MIME-Type` header.
	*
	* @type {String}
	* @default null
	* @public
	*/
	mimeType: null
};
},{"../../enyo":12}],49:[function(require,module,exports){
require('../../enyo');

/**
* A special type of [array]{@glossary Array} used internally by data layer
* [kinds]{@glossary kind}.
*
* @class enyo.ModelList
* @protected
*/
function ModelList (args) {
	Array.call(this);
	this.table = {};
	if (args) this.add(args, 0);
}

ModelList.prototype = Object.create(Array.prototype);

module.exports = ModelList;

/**
* Adds [models]{@link enyo.Model} to the [list]{@link enyo.ModelList}, updating an
* internal table by the model's [primaryKey]{@link enyo.Model#primaryKey} (if
* possible) and its [euid]{@glossary euid}.
*
* @name enyo.ModelList#add
* @method
* @param {(enyo.Model|enyo.Model[])} models The [model or models]{@link enyo.Model}
*	to add to the [list]{@link enyo.ModelList}.
* @param {Number} [idx] - If provided and valid, the models will be
* [spliced]{@glossary Array.splice} into the list at this position.
* @returns {enyo.Model[]} An immutable [array]{@glossary Array} of models
* that were actually added to the list.
* @protected
*/
ModelList.prototype.add = function (models, idx) {
	var table = this.table,
		added = [],
		model,
		euid,
		id,
		i = 0;
	
	if (models && !(models instanceof Array)) models = [models];
	
	for (; (model = models[i]); ++i) {
		euid = model.euid;
		
		// we only want to actually add models we haven't already seen...
		if (!table[euid]) {
			id = model.get(model.primaryKey);
		
			if (id != null) {
			
				// @TODO: For now if we already have an entry for a model by its supposed unique
				// identifier but it isn't the instance we just found we can't just
				// overwrite the previous instance so we mark the new one as headless
				if (table[id] && table[id] !== model) model.headless = true;
				// otherwise we do the normal thing and add the entry for it
				else table[id] = model; 
			}
		
			// nomatter what though the euid should be unique
			table[euid] = model;
			added.push(model);
		}
	}
	
	if (added.length) {
		idx = !isNaN(idx) ? Math.min(Math.max(0, idx), this.length) : 0;
		added.unshift(0);
		added.unshift(idx);
		this.splice.apply(this, added);
	}
	
	if (added.length > 0) added = added.slice(2);
	added.at = idx;
	
	return added;
};

/**
* Removes the specified [models]{@link enyo.Model} from the [list]{@link enyo.ModelList}.
*
* @name enyo.ModelList#remove
* @method
* @param {(enyo.Model|enyo.Model[])} models The [model or models]{@link enyo.Model}
*	to remove from the [list]{@link enyo.ModelList}.
* @returns {enyo.Model[]} An immutable [array]{@glossary Array} of
*	models that were actually removed from the list.
* @protected
*/
ModelList.prototype.remove = function (models) {
	var table = this.table,
		removed = [],
		model,
		idx,
		id,
		i,
		
		// these modifications are made to allow more performant logic to take place in
		// views that may need to know this information
		low = Infinity,
		high = -1,
		indices = [];
	
	if (models && !(models instanceof Array)) models = [models];
	
	// we start at the end to ensure that you could even pass the list itself
	// and it will work
	for (i = models.length - 1; (model = models[i]); --i) {
		table[model.euid] = null;
		id = model.get(model.primaryKey);
		
		if (id != null) table[id] = null;
		
		idx = models === this ? i : this.indexOf(model);
		if (idx > -1) {				
			if (idx < low) low = idx;
			if (idx > high) high = idx;
			
			this.splice(idx, 1);
			removed.push(model);
			indices.push(idx);
		}
	}
	
	// since this is a separate array we will add this property to it for internal use only
	removed.low = low;
	removed.high = high;
	removed.indices = indices;
	
	return removed;
};

/**
* Determines whether the specified [model]{@link enyo.Model} is present in the
* [list]{@link enyo.ModelList}. Will attempt to resolve a [string]{@glossary String}
* or [number]{@glossary Number} to either a [primaryKey]{@link enyo.Model#primaryKey}
* or [euid]{@glossary euid}.
*
* @name enyo.ModelList#has
* @method
* @param {(enyo.Model|String|Number)} model An identifier representing either the
*	[model]{@link enyo.Model} instance, its [primaryKey]{@link enyo.Model#primaryKey},
* or its [euid]{@glossary euid}.
* @returns {Boolean} Whether or not the model is present in the [list]{@link enyo.ModelList}.
* @protected
*/
ModelList.prototype.has = function (model) {
	if (model === undefined || model === null) return false;
	
	if (typeof model == 'string' || typeof model == 'number') {
		return !! this.table[model];
	} else return this.indexOf(model) > -1;
};

/**
* Given an identifier, attempts to return the associated [model]{@link enyo.Model}.
* The identifier should be a [string]{@glossary String} or [number]{@glossary Number}.
*
* @name enyo.ModelList#resolve
* @method
* @param {(String|Number)} model - An identifier (either a
*	[primaryKey]{@link enyo.Model#primaryKey} or an [euid]{@glossary euid}).
* @returns {(undefined|null|enyo.Model)} If the identifier could be resolved, a
*	[model]{@link enyo.Model} instance is returned; otherwise, `undefined`, or
* possibly `null` if the model once belonged to the [list]{@link enyo.ModelList}.
* @protected
*/
ModelList.prototype.resolve = function (model) {
	if (typeof model == 'string' || typeof model == 'number') {
		return this.table[model];
	} else return model;
};

/**
* Copies the current [list]{@link enyo.ModelList} and returns an shallow copy. This
* method differs from the [slice()]{@glossary Array.slice} method inherited from
* native [Array]{@glossary Array} in that this returns an {@link enyo.ModelList},
* while `slice()` returns an array.
* 
* @name enyo.ModelList#copy
* @method
* @returns {enyo.ModelList} A shallow copy of the callee.
* @protected
*/
ModelList.prototype.copy = function () {
	return new ModelList(this);
};
},{"../../enyo":12}],71:[function(require,module,exports){
require('../../enyo');

/**
* Shared values for various [kinds]{@glossary kind} used to indicate a state or
* (multiple, simultaneous) states. These flags are binary values represented by
* hexadecimal numerals. They may be modified and compared (or even extended) using
* [bitwise operations]{@glossary bitwise} or various
* [API methods]{@link enyo.StateSupport} available to the kinds that support them.
* Make sure to explore the documentation for individual kinds, as they may have
* specific uses for a given flag.
* 
* As a cursory overview, here is a table of the values already declared by built-in flags.
* Each hexadecimal numeral represents a unique power of 2 in binary, from which we can use
* [bitwise masks]{@glossary bitwise} to determine if a particular value is present.
* 
* ```javascript
* HEX             DEC             BIN
* 0x0001             1            0000 0000 0000 0001
* 0x0002             2            0000 0000 0000 0010
* 0x0004             4            0000 0000 0000 0100
* 0x0008             8            0000 0000 0000 1000
* 0x0010            16            0000 0000 0001 0000
* 0x0020            32            0000 0000 0010 0000
* 0x0040            64            0000 0000 0100 0000
* 0x0080           128            0000 0000 1000 0000
* 0x0100           256            0000 0001 0000 0000
* 0x0200           512            0000 0010 0000 0000
* 0x0400          1024            0000 0100 0000 0000
* 0x0800          2048            0000 1000 0000 0000
* 
* ...
* 
* 0x1000          4096            0001 0000 0000 0000
* ```
*
* As a hint, converting (HEX) 0x0800 to DEC do:
*
* ```javascript
* (0*16^3) + (8*16^2) + (0*16^1) + (0*16^0) = 2048
* ```
*
* As a hint, converting (HEX) 0x0800 to BIN do:
*
* ```javascript
* 0    8    0    0    (HEX)
* ---- ---- ---- ----
* 0000 1000 0000 0000 (BIN)
* ```
*
* @name enyo.States
* @enum {Number}
* @public
* @memberof enyo
* @see enyo.StateSupport
*/
module.exports = {
	
	/**
	* Only exists in the client and was created during the runtime of the
	* [application]{@glossary application}.
	*
	* @name enyo.States.NEW
	* @default 1
	*/
	NEW: 0x0001,
	
	/**
	* Has been modified locally only.
	*
	* @name enyo.States.DIRTY
	* @default 2
	*/
	DIRTY: 0x0002,
	
	/**
	* Has not been modified locally.
	*
	* @name enyo.States.CLEAN
	* @default 4
	*/
	CLEAN: 0x0004,
	
	/**
	* Can no longer be modified.
	*
	* @default 8
	*/
	DESTROYED: 0x0008,
	
	/**
	* Currently attempting to fetch.
	* 
	* @see enyo.Model.fetch
	* @see enyo.RelationalModel.fetch
	* @see enyo.Collection.fetch
	*
	* @default 16
	*/
	FETCHING: 0x0010,
	
	/**
	* Currently attempting to commit.
	* 
	* @see enyo.Model.commit
	* @see enyo.RelationalModel.commit
	* @see enyo.Collection.commit
	*
	* @default 32
	*/
	COMMITTING: 0x0020,
	
	/**
	* Currently attempting to destroy.
	* 
	* @see enyo.Model.destroy
	* @see enyo.RelationalModel.destroy
	* @see enyo.Collection.destroy
	*
	* @default 64
	*/
	DESTROYING: 0x0040,
	
	/**
	* There was an error during commit.
	* 
	* @see enyo.Model.commit
	* @see enyo.RelationalModel.commit
	* @see enyo.Collection.commit
	*
	* @default 128
	*/
	ERROR_COMMITTING: 0x0080,
	
	/**
	* There was an error during fetch.
	* 
	* @see enyo.Model.fetch
	* @see enyo.RelationalModel.fetch
	* @see enyo.Collection.fetch
	*
	* @default 256
	*/
	ERROR_FETCHING: 0x0100,
	
	/**
	* There was an error during destroy.
	* 
	* @see enyo.Model.destroy
	* @see enyo.RelationalModel.destroy
	* @see enyo.Collection.destroy
	*
	* @default 512
	*/
	ERROR_DESTROYING: 0x0200,
	
	/**
	* An error was encountered for which there was no exact flag, or an invalid error was
	* specified.
	*
	* @default 1024
	*/
	ERROR_UNKNOWN: 0x0400,
	
	/**
	* A multi-state [bitmask]{@glossary bitwise}. Compares a given flag to the states
	* included in the definition of `BUSY`. By default, this is one of
	* [FETCHING]{@link enyo.States.FETCHING}, [COMMITTING]{@link enyo.States.COMMITTING}, or
	* [DESTROYING]{@link enyo.States.DESTROYING}. It may be extended to include additional
	* values using the [bitwise]{@glossary bitwise} `OR` operator (`|`).
	*
	* @default 112
	*/
	BUSY: 0x0010 | 0x0020 | 0x0040,
	
	/**
	* A multi-state [bitmask]{@glossary bitwise}. Compares a given flag to the states
	* included in the definition of `ERROR`. By default, this is one of
	* [ERROR_FETCHING]{@link enyo.States.ERROR_FETCHING},
	* [ERROR_COMMITTING]{@link enyo.States.ERROR_COMMITTING},
	* [ERROR_DESTROYING]{@link enyo.States.ERROR_DESTROYING}, or
	* [ERROR_UNKNOWN]{@link enyo.States.ERROR_UNKNOWN}. It may be extended to include
	* additional values using the [bitwise]{@glossary bitwise} `OR` operator (`|`).
	*
	* @name enyo.States.ERROR
	* @default 1920
	*/
	ERROR: 0x0080 | 0x0100 | 0x0200 | 0x0400,
	
	/**
	* A multi-state [bitmask]{@glossary bitwise}. Compares a given flag to the states
	* included in the definition of `READY`. By default, this is the inverse of any
	* values included in [BUSY]{@link enyo.States.BUSY} or [ERROR]{@link enyo.States.ERROR}.
	*
	* @name enyo.States.READY
	* @default -2041
	*/
	READY: ~(0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080 | 0x0100 | 0x0200 | 0x0400)
};
},{"../../enyo":12}],93:[function(require,module,exports){
require('../../enyo');

var _jobs = {};

/**
* Runs a [job]{@link exports} after the specified amount of time has elapsed
* since a job with the same name has run.
* 
* Jobs can be used to throttle behaviors.  If some event may occur one time or
* multiple times, but we want a response to occur only once every `n` seconds,
* we can use a job.
*
* @example
* onscroll: function() {
*	// updateThumb will be called, but only when 1 second has elapsed since the
*	// last onscroll
*	exports("updateThumb", this.bindSafely("updateThumb"), 1000);
* }
*
* @param {String} nom - The name of the [job]{@link exports} to throttle.
* @param {(Function|String)} job - Either the name of a method or a [function]{@glossary Function}
*                                to execute as the requested job.
* @param {Number} wait - The number of milliseconds to wait before executing the job again.
* @static
* @public
*/
exports = module.exports = function (nom, job, wait) {
	exports.stop(nom);
	_jobs[nom] = setTimeout(function() {
		exports.stop(nom);
		job();
	}, wait);
};

/**
* Cancels the named [job]{@link exports}, if it has not already fired.
*
* @param {String} nom - The name of the [job]{@link exports} to cancel.
* @static
* @public
*/
exports.stop = function (nom) {
	if (_jobs[nom]) {
		clearTimeout(_jobs[nom]);
		delete _jobs[nom];
	}
};

/**
* Immediately invokes the [job]{@link exports} and prevents any other calls
* to `exports.throttle()` with the same job name from running for the
* specified amount of time.
* 
* This is used for throttling user events when you want to provide an
* immediate response, but later invocations might just be noise if they arrive
* too often.
* 
* @param {String} nom - The name of the [job]{@link exports} to throttle.
* @param {(Function|String)} job - Either the name of a method or a [function]{@glossary Function}
*                                to execute as the requested job.
* @param {Number} wait - The number of milliseconds to wait before executing the
*                      job again.
* @static
* @public
*/
exports.throttle = function (nom, job, wait) {
	// if we still have a job with this name pending, return immediately
	if (_jobs[nom]) {
		return;
	}
	job();
	_jobs[nom] = setTimeout(function() {
		exports.stop(nom);
	}, wait);
};
},{"../../enyo":12}],95:[function(require,module,exports){
require('../../enyo');


/**
* [JSON]{@glossary JSON} related methods and wrappers.
*
* @namespace enyo.json
* @public
*/
module.exports = /** @lends enyo.json */ {
	
	/**
	* Wrapper for [JSON.stringify()]{@glossary JSON.stringify}. Creates a
	* [JSON]{@glossary JSON} [string]{@glossary String} from an
	* [object]{@glossary Object}.
	*
	* @see {@glossary JSON.stringify}
	* @param {Object} value - The [object]{@glossary Object} to convert to a
	*	[JSON]{@glossary JSON} [string]{@glossary String}.
	* @param {(Function|String[])} [replacer] An optional parameter indicating either an
	*	[array]{@glossary Array} of keys to include in the final output or a
	*	[function]{@glossary Function} that will have the opportunity to dynamically return
	*	values to include for keys.
	* @param {(Number|String)} [space] - Determines the spacing (if any) for pretty-printed
	*	output of the JSON string. A [number]{@glossary Number} indicates the number of
	* spaces to use in the output, while a string will be used verbatim.
	* @returns {String} The JSON string for the given object.
	* @public
	*/
	stringify: function(value, replacer, space) {
		return JSON.stringify(value, replacer, space);
	},
	
	/**
	* Wrapper for [JSON.parse()]{@glossary JSON.parse}. Parses a valid
	* [JSON]{@glossary JSON} [string]{@glossary String} and returns an
	* [object]{@glossary Object}, or `null` if the parameters are invalid.
	*
	* @see {@glossary JSON.parse}
	* @param {String} json - The [JSON]{@glossary JSON} [string]{@glossary String} to
	*	parse into an [object]{@glossary Object}.
	* @param {Function} [reviver] - The optional [function]{@glossary Function} to use to
	*	parse individual keys of the return object.
	* @returns {(Object|null)} If parameters are valid, an [object]{@glossary Object}
	* is returned; otherwise, `null`.
	* @public
	*/
	parse: function(json, reviver) {
		return json ? JSON.parse(json, reviver) : null;
	}
};
},{"../../enyo":12}],103:[function(require,module,exports){
(function (global){
require('../../enyo');

// we need to register appropriately to know when
// the document is officially ready, to ensure that
// client code is only going to execute at the
// appropriate time

var doc = global.document;
var queue = [];
var ready = ("complete" === doc.readyState);
var run;
var init;
var remove;
var add;
var flush;
var flushScheduled = false;

/**
* Registers a callback (and optional `this` context) to run after all the Enyo and library code
* has loaded and the `DOMContentLoaded` event (or equivalent on older browsers) has been sent.
* 
* If called after the system is in a ready state, runs the supplied code asynchronously at the
* earliest opportunity.
*
* @name enyo.ready
* @method
* @param {Function} fn - The method to execute when the DOM is ready.
* @param {Object} [context] - The optional context (`this`) under which to execute the
*	callback method.
* @public
*/
module.exports = function (fn, context) {
	queue.push([fn, context]);
	// schedule another queue flush if needed to run new ready calls
	if (ready && !flushScheduled) {
		setTimeout(flush, 0);
		flushScheduled = true;
	}
};

/**
* @private
*/
run = function (fn, context) {
	fn.call(context || global);
};

/**
* @private
*/
init = function (event) {
	// if we're interactive, it should be safe to move
	// forward because the content has been parsed
	if ((ready = ("interactive" === doc.readyState))) {
		if ("DOMContentLoaded" !== event.type && "readystatechange" !== event.type) {
			remove(event.type, init);
			flush();
		}
	}
	// for an IE8 fallback and legacy WebKit (including webOS 3.x and less) and assurance
	if ((ready = ("complete" === doc.readyState || "loaded" === doc.readyState))) {
		remove(event.type, init);
		flush();
	}
};

/**
* @private
*/
add = function (event, fn) {
	var name = doc.addEventListener? "addEventListener": "attachEvent";
	var on = name === "attachEvent"? "on": "";
	doc[name](on + event, fn, false);
};

/**
* @private
*/
remove = function (event, fn) {
	var name = doc.addEventListener? "removeEventListener": "detachEvent";
	var on = name === "detachEvent"? "on": "";
	doc[name](on + event, fn, false);
};

/**
* @private
*/
flush = function () {
	if (ready && queue.length) {
		while (queue.length) {
			run.apply(global, queue.shift());
		}
	}
	flushScheduled = false;
};

// ok, let's hook this up
add("DOMContentLoaded", init);
add("readystatechange", init);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12}],105:[function(require,module,exports){
(function (global){
require('../../enyo');

/**
* @private
*/
var callbacks = [],
	roots = [];

exports.roots = roots;

/**
* Registers a single callback to be executed whenever a root view is rendered.
* 
* @name enyo.rendered
* @method
* @param {Function} method - The callback to execute.
* @param {Object} [context=enyo.global] The context under which to execute the callback.
* @public
*/
exports.rendered = function (method, context) {
	callbacks.push({method: method, context: context || global});
};

/**
* @private
*/
exports.roots = roots;

/**
* Invokes all known callbacks (if any) against the root view once it has been rendered.
* This method is not likely to be executed very often.
* 
* @private
*/
function invoke (root) {
	callbacks.forEach(function (ln) {
		ln.method.call(ln.context, root);
	});
}

/**
* @private
*/
exports.addToRoots = function (view) {
	var rendered,
		destroy;
	
	// since it is possible to call renderInto more than once on a given view we ensure we
	// don't register it twice unnecessarily
	if (roots.indexOf(view) === -1) {
		
		roots.push(view);
		
		// hijack the rendered method
		rendered = view.rendered;
		
		// hijack the destroy method
		destroy = view.destroy;
		
		// supply our rendered hook
		view.rendered = function () {
			// we call the original first
			rendered.apply(this, arguments);
			
			// and now we invoke the known callbacks against this root
			invoke(this);
		};
		
		// supply our destroy hook
		view.destroy = function () {
			var idx = roots.indexOf(this);
			
			// remove it from the roots array
			if (idx > -1) roots.splice(idx, 1);
			
			// now we can call the original
			destroy.apply(this, arguments);
		};
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12}],106:[function(require,module,exports){
(function (global){
require('../../enyo');


/**
* A polyfill for platforms that don't yet support
* [bind()]{@glossary Function.prototype.bind}. As explained in the linked article, this
* polyfill handles the general use case but cannot exactly mirror the ECMA-262 version 5
* implementation specification. This is an adaptation of the example promoted
* [here]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind}.
*/
if (!Function.prototype.bind) {
	Function.prototype.bind = function (ctx) {
		// deliberately used here...
		var args = Array.prototype.slice.call(arguments, 1),
			scop = this,
			nop = function () {},
			ret;
		
		// as-per MDN's explanation of this polyfill we're filling in for the IsCallable
		// internal (we can't access it)
		if (typeof this != 'function') {
			throw new TypeError('Function.prototype.bind called on non-callable object.');
		}
		
		ret = function () {
			var largs = args.concat(Array.prototype.slice.call(arguments)),
				lctx = this instanceof nop && ctx ? this : ctx;
			
			return scop.apply(lctx, largs);
		};
		
		nop.prototype = this.prototype;
		
		/*jshint -W055 */
		ret.prototype = new nop();
		/*jshint +W055 */
		
		return ret;
	};
}

/**
* @private
*/
exports.nop = function () {};

/**
* @private
*/
exports.nob = {};

/**
* @private
*/
exports.nar = [];

/**
* This name is reported in inspectors as the type of objects created via delegate;
* otherwise, we would just use {@link enyo.nop}.
*
* @private
*/
var Instance = exports.instance = function () {};
	
/**
* @private
*/
var setPrototype = exports.setPrototype = function (ctor, proto) {
	ctor.prototype = proto;
};

/**
* Boodman/crockford delegation w/cornford optimization
* 
* @private
*/
exports.delegate = function (proto) {
	setPrototype(Instance, proto);
	return new Instance();
};

// ----------------------------------
// General Functions
// ----------------------------------

/**
* Determines whether a variable is defined.
* 
* @param {*} target - Anything that can be compared to `undefined`.
* @returns {Boolean} `true` if defined, `false` otherwise.
* @public
*/
var exists = exports.exists = function (target) {
	return (target !== undefined);
};

var uidCounter = 0;

/**
* Creates a unique identifier (with an optional prefix) and returns the identifier as a string.
*
* @param {String} [prefix] - The prefix to prepend to the generated unique id.
* @returns {String} An optionally-prefixed identifier.
* @public
*/
exports.uid = function (prefix) {
	return String((prefix? prefix: '') + uidCounter++);
};

/**
* RFC4122 uuid generator for the browser.
*
* @returns {String} An [RFC4122]{@glossary UUID}-compliant, universally unique identifier.
* @public
*/
exports.uuid = function () {
	// @TODO: Could possibly be faster
	var t, p = (
		(Math.random().toString(16).substr(2,8)) + '-' +
		((t=Math.random().toString(16).substr(2,8)).substr(0,4)) + '-' +
		(t.substr(4,4)) +
		((t=Math.random().toString(16).substr(2,8)).substr(0,4)) + '-' +
		(t.substr(4,4)) +
		(Math.random().toString(16).substr(2,8))
	);
	return p;
};

/**
* Generates a random number using [Math.random]{@glossary Math.random}.
*
* @param {Number} bound - The multiplier used to generate the product.
* @returns {Number} A random number.
* @public
*/
exports.irand = function (bound) {
	return Math.floor(Math.random() * bound);
};

var toString = Object.prototype.toString;

/**
* Determines whether a given variable is a [String]{@glossary String}.
*
* @param {*} it - The variable to be tested.
* @returns {Boolean} `true` if variable is a [String]{@glossary String};
* otherwise, `false`.
* @public
*/
exports.isString = function (it) {
	return toString.call(it) === '[object String]';
};

/**
* Determines whether a given variable is a [Function]{@glossary Function}.
* 
* @param {*} it - The variable to be tested.
* @returns {Boolean} `true` if variable is a [Function]{@glossary Function};
* otherwise, `false`.
* @public
*/
exports.isFunction = function (it) {
	return toString.call(it) === '[object Function]';
};

/**
* Determines whether a given variable is an [Array]{@glossary Array}.
*
* @param {*} it - The variable to be tested.
* @returns {Boolean} `true` if variable is an [Array]{@glossary Array};
* otherwise, `false`.
* @method
* @public
*/
var isArray = exports.isArray = Array.isArray || function (it) {
	return toString.call(it) === '[object Array]';
};

/**
* Determines whether a given variable is an [Object]{@glossary Object}.
*
* @param {*} it - The variable to be tested.
* @returns {Boolean} `true` if variable is an [Object]{@glossary Object};
* otherwise, `false`.
* @method
* @public
*/
exports.isObject = Object.isObject || function (it) {
	// explicit null/undefined check for IE8 compatibility
	return (it != null) && (toString.call(it) === '[object Object]');
};

/**
* Determines whether a given variable is an explicit boolean `true`.
*
* @param {*} it - The variable to be tested.
* @returns {Boolean} `true` if variable is an explicit `true`; otherwise,
* `false`.
* @public
*/
exports.isTrue = function (it) {
	return !(it === 'false' || it === false || it === 0 || it === null || it === undefined);
};

/**
* Determines whether a given variable is a numeric value.
*
* @param {*} it - The variable to be tested.
* @returns {Boolean} `true` if variable is a numeric value; otherwise,
* `false`.
* @public
*/
exports.isNumeric = function (it) {
	// borrowed from jQuery
	return !isArray(it) && (it - parseFloat(it) + 1) >= 0;
};

/**
* Binds the `this` context of any method to a scope and a variable number of provided initial
* parameters.
*
* @param {Object} scope - The `this` context for the method.
* @param {(Function|String)} method - A Function or the name of a method to bind.
* @param {...*} [args] Any arguments that will be provided as the initial arguments to the
*                      enclosed method.
* @returns {Function} The bound method/closure.
* @public
*/
var bind = exports.bind = function (scope, method) {
	if (!method) {
		method = scope;
		scope = null;
	}
	scope = scope || global;
	if (typeof method == 'string') {
		if (scope[method]) {
			method = scope[method];
		} else {
			throw('enyo.bind: scope["' + method + '"] is null (scope="' + scope + '")');
		}
	}
	if (typeof method == 'function') {
		var args = cloneArray(arguments, 2);
		if (method.bind) {
			return method.bind.apply(method, [scope].concat(args));
		} else {
			return function() {
				var nargs = cloneArray(arguments);
				// invoke with collected args
				return method.apply(scope, args.concat(nargs));
			};
		}
	} else {
		throw('enyo.bind: scope["' + method + '"] is not a function (scope="' + scope + '")');
	}
};

/**
* Binds a callback to a scope. If the object has a `destroyed` property that's truthy, then the
* callback will not be run if called. This can be used to implement both
* {@link enyo.Object.bindSafely} and {@link enyo.Object}-like objects like
* {@link enyo.Model} and {@link enyo.Collection}.
*
* @param {Object} scope - The `this` context for the method.
* @param {(Function|String)} method - A Function or the name of a method to bind.
* @param {...*} [args] Any arguments that will be provided as the initial arguments to the
*                      enclosed method.
* @returns {Function} The bound method/closure.
* @public
*/
exports.bindSafely = function (scope, method) {
	if (typeof method == 'string') {
		if (scope[method]) {
			method = scope[method];
		} else {
			throw('enyo.bindSafely: scope["' + method + '"] is null (this="' + this + '")');
		}
	}
	if (typeof method == 'function') {
		var args = cloneArray(arguments, 2);
		return function() {
			if (scope.destroyed) {
				return;
			}
			var nargs = cloneArray(arguments);
			return method.apply(scope, args.concat(nargs));
		};
	} else {
		throw('enyo.bindSafely: scope["' + method + '"] is not a function (this="' + this + '")');
	}
};

/**
* Calls the provided `method` on `scope`, asynchronously.
*
* Uses [window.setTimeout()]{@glossary window.setTimeout} with minimum delay,
* usually around 10ms.
*
* Additional arguments are passed to `method` when it is invoked.
*
* If only a single argument is supplied, will just call that function asynchronously without
* doing any additional binding.
*
* @param {Object} scope - The `this` context for the method.
* @param {(Function|String)} method - A Function or the name of a method to bind.
* @param {...*} [args] Any arguments that will be provided as the initial arguments to the
*                      enclosed method.
* @returns {Number} The `setTimeout` id.
* @public
*/
exports.asyncMethod = function (scope, method) {
	if (!method) {
		// passed just a single argument
		return setTimeout(scope, 1);
	} else {
		return setTimeout(bind.apply(scope, arguments), 1);
	}
};

/**
* Calls the provided `method` ([String]{@glossary String}) on `scope` with optional
* arguments `args` ([Array]{@glossary Array}), if the object and method exist.
*
* @example
* 	enyo.call(myWorkObject, 'doWork', [3, 'foo']);
*
* @param {Object} scope - The `this` context for the method.
* @param {(Function|String)} method - A Function or the name of a method to bind.
* @param {Array} [args] - An array of arguments to pass to the method.
* @returns {*} The return value of the method.
* @public
*/
exports.call = function (scope, method, args) {
	var context = scope || this;
	if (method) {
		var fn = context[method] || method;
		if (fn && fn.apply) {
			return fn.apply(context, args || []);
		}
	}
};

/**
* Returns the current time in milliseconds. On platforms that support it,
* [Date.now()]{@glossary Date.now} will be used; otherwise this will
* be equivalent to [new Date().getTime()]{@glossary Date.getTime}.
* 
* @returns {Number} Number of milliseconds representing the current time.
* @method
* @public
*/

var now = exports.now = Date.now || function () {
	return new Date().getTime();
};

/**
* When [window.performance]{@glossary window.performance} is available, supplies
* a high-precision, high-performance monotonic timestamp, which is independent of
* changes to the system clock and thus safer for use in animation, etc. Falls back to
* [enyo.now()]{@link enyo#now} (based on the JavaScript [Date]{@glossary Date}
* object), which is subject to system time changes.
* 
* @returns {Number} Number of milliseconds representing the current time or time since
*                   start of application execution as reported by the platform.
* @method
* @public
*/
exports.perfNow = (function () {
	// we have to check whether or not the browser has supplied a valid
	// method to use
	var perf = window.performance || {};
	// test against all known vendor-specific implementations, but use
	// a fallback just in case
	perf.now = perf.now || perf.mozNow || perf.msNow || perf.oNow || perf.webkitNow || now;
	return function () {
		return perf.now();
	};
}());

/**
* A fast-path enabled global getter that takes a string path, which may be a full path (from
* context window/Enyo) or a relative path (to the execution context of the method). It knows how
* to check for and call the backwards-compatible generated getters, as well as how to handle
* computed properties. Returns `undefined` if the object at the given path cannot be found. May
* safely be called on non-existent paths.
*	
* @param {String} path - The path from which to retrieve a value.
* @returns {*} The value for the given path, or `undefined` if the path could not be
*                  completely resolved.
* @method enyo.getPath
* @public
*/
var getPath = exports.getPath = function (path) {
	// we're trying to catch only null/undefined not empty string or 0 cases
	if (!path && path !== null && path !== undefined) return path;
	
	var next = this,
		parts,
		part,
		getter,
		prev;
	
	// obviously there is a severe penalty for requesting get with a path lead
	// by unnecessary relative notation...
	if (path[0] == '.') path = path.replace(/^\.+/, '');
	
	// here's where we check to make sure we have a truthy string-ish
	if (!path) return;
	
	parts = path.split('.');
	part = parts.shift();
	
	do {
		prev = next;
		// for constructors we must check to make sure they are undeferred before
		// looking for static properties
		// for the auto generated or provided published property support we have separate
		// routines that must be called to preserve compatibility
		if (next._getters && ((getter = next._getters[part])) && !getter.generated) next = next[getter]();
		// for all other special cases to ensure we use any overloaded getter methods
		else if (next.get && next !== this && next.get !== getPath) next = next.get(part);
		// and for regular cases
		else next = next[part];
	} while (next && (part = parts.shift()));
			
	// if necessary we ensure we've undeferred any constructor that we're
	// retrieving here as a final property as well
	return next;
};

/**
* @private
*/
getPath.fast = function (path) {
	// the current context
	var b = this, fn, v;
	if (b._getters && (fn = b._getters[path])) {
		v = b[fn]();
	} else {
		v = b[path];
	}
	
	return v;
};

/**
* @TODO: Out of date...
* A global setter that takes a string path (relative to the method's execution context) or a
* full path (relative to window). Attempts to automatically retrieve any previously existing
* value to supply to any observers. If the context is an {@link enyo.Object} or subkind, the
* {@link enyo.ObserverSupport.notify} method is used to notify listeners for the path's being
* set. If the previous value is equivalent to the newly set value, observers will not be
* triggered by default. If the third parameter is present and is an explicit boolean true, the
* observers will be triggered regardless. Returns the context from which the method was executed.
*
* @param {String} path - The path for which to set the given value.
* @param {*} is - The value to set.
* @param {Object} [opts] - An options hash.
* @returns {this} Whatever the given context was when executed.
* @method enyo.setPath
* @public
*/
var setPath = exports.setPath = function (path, is, opts) {
	// we're trying to catch only null/undefined not empty string or 0 cases
	if (!path || (!path && path !== null && path !== undefined)) return this;
	
	var next = this,
		options = {create: true, silent: false, force: false},
		base = next,
		parts,
		part,
		was,
		force,
		create,
		silent,
		comparator;
	
	if (typeof opts == 'object') opts = mixin({}, [options, opts]);
	else {
		force = opts;
		opts = options;
	}
	
	if (opts.force) force = true;
	silent = opts.silent;
	create = opts.create;
	comparator = opts.comparator;
	
	
	// obviously there is a severe penalty for requesting get with a path lead
	// by unnecessary relative notation...
	if (path[0] == '.') path = path.replace(/^\.+/, '');
	
	// here's where we check to make sure we have a truthy string-ish
	if (!path) return next;
	
	parts = path.split('.');
	part = parts.shift();
	
	do {
		
		if (!parts.length) was = next.get && next.get !== getPath? next.get(part): next[part];
		else {
			// this allows us to ensure that if we're setting a static property of a constructor we have the
			// correct constructor
			// @TODO: It seems ludicrous to have to check this on every single part of a chain; if we didn't have
			// deferred constructors this wouldn't be necessary and is expensive - unnecessarily so when speed is so important
			if (next !== base && next.set && next.set !== setPath) {
				parts.unshift(part);
				next.set(parts.join('.'), is, opts);
				return base;
			}
			if (next !== base && next.get) next = (next.get !== getPath? next.get(part): next[part]) || (create && (next[part] = {}));
			else next = next[part] || (create && (next[part] = {}));
		}
		
	} while (next && parts.length && (part = parts.shift()));
	
	if (!next) return base;
	
	// now update to the new value
	if (next !== base && next.set && next.set !== setPath) {
		next.set(part, is, opts);
		return base;
	} else next[part] = is;
	
	// if possible we notify the changes but this change is notified from the immediate
	// parent not the root object (could be the same)
	if (next.notify && !silent && (force || was !== is || (comparator && comparator(was, is)))) next.notify(part, was, is, opts);
	// we will always return the original root-object of the call
	return base;
};

/**
* @private
*/
setPath.fast = function (path, value) {
	// the current context
	var b = this,
		// the previous value and helper variable
		rv, fn;
	// we have to check and ensure that we're not setting a computed property
	// and if we are, do nothing
	if (b._computed && b._computed[path] !== undefined) {
		return b;
	}
	if (b._getters && (fn=b._getters[path])) {
		rv = b[fn]();
	} else {
		rv = b[path];
	}
	// set the new value now that we can
	b[path] = value;
	
	// this method is only ever called from the context of enyo objects
	// as a protected method
	if (rv !== value) { b.notifyObservers(path, rv, value); }
	// return the context
	return b;
};

// ----------------------------------
// String Functions
// ----------------------------------

/**
* Uppercases a given string. Will coerce to a [String]{@glossary String}
* if possible/necessary.
*
* @param {String} str - The string to uppercase.
* @returns {String} The uppercased string.
* @public
*/
exports.toUpperCase = function (str) {
	if (str != null) {
		return str.toString().toUpperCase();
	}
	return str;
};

/**
* Lowercases a given string. Will coerce to a [String]{@glossary String}
* if possible/necessary.
*
* @param {String} str - The string to lowercase.
* @returns {String} The lowercased string.
* @public
*/
exports.toLowerCase = function (str) {
	if (str != null) {
		return str.toString().toLowerCase();
	}
	return str;
};

/**
* Capitalizes a given string.
*
* @param {String} str - The string to capitalize.
* @returns {String} The capitalized string.
* @public
*/
exports.cap = function (str) {
	return str.slice(0, 1).toUpperCase() + str.slice(1);
};

/**
* Un-capitalizes a given string.
* 
* @param {String} str - The string to un-capitalize.
* @returns {String} The un-capitalized string.
* @public
*/
exports.uncap = function (str) {
	return str.slice(0, 1).toLowerCase() + str.slice(1);
};

/**
* Injects an arbitrary number of values, in order, into a template string at
* positions marked by `"%."`.
*
* @param {String} template - The string template to inject with values.
* @param {...String} val The values to inject into the template.
* @returns {String} A copy of the template populated with values.
* @public
*/
exports.format = function (template) {
	var pattern = /\%./g,
		arg = 0,
		tmp = template,
		args = arguments,
		replacer;
	
	replacer = function () {
		return args[++arg];
	};
	
	return tmp.replace(pattern, replacer);
};

/**
* @private
*/
String.prototype.trim = String.prototype.trim || function () {
	return this.replace(/^\s+|\s+$/g, '');
};

/**
* Takes a string and trims leading and trailing spaces. Strings with no length,
* non-strings, and falsy values will be returned without modification.
*
* @param {String} str - The string from which to remove whitespace.
* @returns {String} The trimmed string.
* @public
*/
exports.trim = function (str) {
	return (typeof str == 'string' && str.trim()) || str;
};

// ----------------------------------
// Object Functions
// ----------------------------------

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Object.create()]{@glossary Object.create}.
*/
Object.create = Object.create || (function () {
	var Anon = function () {};
	return function (obj) {
		// in the polyfill we can't support the additional features so we are ignoring
		// the extra parameters
		if (!obj || obj === null || typeof obj != 'object') throw 'Object.create: Invalid parameter';
		Anon.prototype = obj;
		return new Anon();
	};
})();

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Object.keys()]{@glossary Object.keys}.
*/
Object.keys = Object.keys || function (obj) {
	var results = [];
	var hop = Object.prototype.hasOwnProperty;
	for (var prop in obj) {
		if (hop.call(obj, prop)) {
			results.push(prop);
		}
	}
	// *sigh* IE 8
	if (!({toString: null}).propertyIsEnumerable('toString')) {
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		for (var i = 0, p; (p = dontEnums[i]); i++) {
			if (hop.call(obj, p)) {
				results.push(p);
			}
		}
	}
	return results;
};

/**
* Returns an array of all known enumerable properties found on a given object.
*
* @alias Object.keys.
* @method enyo.keys
* @public
*/
exports.keys = Object.keys;

/**
* Convenience method that takes an [array]{@glossary Array} of properties
* and an [object]{@glossary Object} as parameters. Returns a new object
* with only those properties named in the array that are found to exist on the
* base object. If the third parameter is `true`, falsy values will be ignored.
*
* @param {String[]} properties The properties to include on the returned object.
* @param {Object} object - The object from which to retrieve values for the requested properties.
* @param {Boolean} [ignore=false] Whether or not to ignore copying falsy values.
* @returns {Object} A new object populated with the requested properties and values from
*                     the given object.
* @public
*/
exports.only = function (properties, object, ignore) {
	var ret = {},
		prop,
		len,
		i;
	
	for (i = 0, len = properties.length >>> 0; i < len; ++i) {
		prop = properties[i];
		
		if (ignore && (object[prop] === undefined || object[prop] === null)) continue;
		ret[prop] = object[prop];
	}
	
	return ret;
};

/**
* Convenience method that takes two [objects]{@glossary Object} as parameters.
* For each key from the first object, if the key also exists in the second object,
* a mapping of the key from the first object to the key from the second object is
* added to a result object, which is eventually returned. In other words, the
* returned object maps the named properties of the first object to the named
* properties of the second object. The optional third parameter is a boolean
* designating whether to pass unknown key/value pairs through to the new object.
* If `true`, those keys will exist on the returned object.
*
* @param {Object} map - The object with key/value pairs.
* @param {Object} obj - The object whose values will be used.
* @param {Boolean} [pass=false] Whether or not to pass unnamed properties through
*                               from the given object.
* @returns {Object} A new object whose properties have been mapped.
* @public
*/
exports.remap = function (map, obj, pass) {
	var ret = pass ? clone(obj) : {},
		key;
	
	for (key in map) {
		if (key in obj) ret[map[key]] = obj.get ? obj.get(key) : obj[key];
	}
	return ret;
};

/**
* Helper method that accepts an [array]{@glossary Array} of
* [objects]{@glossary Object} and returns a hash of those objects indexed
* by the specified `property`. If a `filter` is provided, the filter should
* accept four parameters: the key, the value (object), the current mutable map
* reference, and an immutable copy of the original array of objects for
* comparison.
*
* @param {String} property - The property to index the array by.
* @param {Array} array - An array of property objects.
* @param {Function} [filter] - The filter function to use; accepts four arguments.
* @returns {Object} A hash (object) indexed by the `property` argument
* @public
*/
exports.indexBy = function (property, array, filter) {
	// the return value - indexed map from the given array
	var map = {},
		value,
		len,
		idx = 0;
	// sanity check for the array with an efficient native array check
	if (!exists(array) || !(array instanceof Array)) {
		return map;
	}
	// sanity check the property as a string
	if (!exists(property) || 'string' !== typeof property) {
		return map;
	}
	// the immutable copy of the array
	var copy = clone(array);
	// test to see if filter actually exsits
	filter = exists(filter) && 'function' === typeof filter ? filter : undefined;
	for (len = array.length; idx < len; ++idx) {
		// grab the value from the array
		value = array[idx];
		// make sure that it exists and has the requested property at all
		if (exists(value) && exists(value[property])) {
			if (filter) {
				// if there was a filter use it - it is responsible for
				// updating the map accordingly
				filter(property, value, map, copy);
			} else {
				// use the default behavior - check to see if the key
				// already exists on the map it will be overwritten
				map[value[property]] = value;
			}
		}
	}
	// go ahead and return our modified map
	return map;
};

/**
* Creates and returns a shallow copy of an [Object]{@glossary Object} or an
* [Array]{@glossary Array}. For objects, by default, properties will be scanned and
* copied directly to the clone such that they would pass the
* [hasOwnProperty()]{@glossary Object.hasOwnProperty} test. This is expensive and often not
* required. In this case, the optional second parameter may be used to allow a more efficient
* [copy]{@link Object.create} to be made.
* 
* @param {(Object|Array)} base - The [Object]{@glossary Object} or
*                              [Array]{@glossary Array} to be cloned.
* @param {Boolean} [quick] - If `true`, when cloning objects, a faster [copy]{@link Object.create}
*                          method will be used. This parameter has no meaning when cloning arrays.
* @returns {*} A clone of the provided `base` if `base` is of the correct type; otherwise,
*              returns `base` as it was passed in.
* @public
*/
var clone = exports.clone = function (base, quick) {
	if (base) {
		
		// avoid the overhead of calling yet another internal function to do type-checking
		// just copy the array and be done with it
		if (base instanceof Array) return base.slice();
		else if (base instanceof Object) {
			return quick ? Object.create(base) : mixin({}, base);
		}
	}
	
	// we will only do this if it is not an array or native object
	return base;
};

var empty = {};
var mixinDefaults = {
	exists: false,
	ignore: false,
	filter: null
};

/**
	@todo Rewrite with appropriate documentation for options parameter (typedef)
	@todo document 'quick' option

	Will take a variety of options to ultimately mix a set of properties
	from objects into single object. All configurations accept a boolean as
	the final parameter to indicate whether or not to ignore _truthy_/_existing_
	values on any _objects_ prior.

	If _target_ exists and is an object, it will be the base for all properties
	and the returned value. If the parameter is used but is _falsy_, a new
	object will be created and returned. If no such parameter exists, the first
	parameter must be an array of objects and a new object will be created as
	the _target_.

	The _source_ parameter may be an object or an array of objects. If no
	_target_ parameter is provided, _source_ must be an array of objects.

	The _options_ parameter allows you to set the _ignore_ and/or _exists_ flags
	such that if _ignore_ is true, it will not override any truthy values in the
	target, and if _exists_ is true, it will only use truthy values from any of
	the sources. You may optionally add a _filter_ method-option that returns a
	true or false value to indicate whether the value should be used. It receives
	parameters in this order: _property_, _source value_, _source values_,
	_target_, _options_. Note that modifying the target in the filter method can
	have unexpected results.

	Setting _options_ to true will set all options to true.

* @method enyo.mixin
* @public
*/
var mixin = exports.mixin = function () {
	var ret = arguments[0],
		src = arguments[1],
		opts = arguments[2],
		val;
	
	if (!ret) ret = {};
	else if (ret instanceof Array) {
		opts = src;
		src = ret;
		ret = {};
	}
	
	if (!opts || opts === true) opts = mixinDefaults;

	if (src instanceof Array) for (var i=0, it; (it=src[i]); ++i) mixin(ret, it, opts);
	else {
		for (var key in src) {
			val = src[key];
			
			// quickly ensure the property isn't a default
			if (empty[key] !== val) {
				if (
					(!opts.exists || val) &&
					(!opts.ignore || !ret[key]) &&
					(opts.filter? opts.filter(key, val, src, ret, opts): true)
				) {
					ret[key] = val;
				}
			}
		}
	}
	
	return ret;
};

/**
* Returns an [array]{@glossary Array} of the values of all properties in an
* [object]{@glossary Object}.
*
* @param {Object} obj - The [Object]{@glossary Object} to read the values from.
* @returns {Array} An [array]{@glossary Array} with the values from the `obj`.
* @public
*/
exports.values = function (obj) {
	var ret = [];
	for (var key in obj) {
		if (obj.hasOwnProperty(key)) ret.push(obj[key]);
	}
	return ret;
};

// ----------------------------------
// Array Functions
// ----------------------------------

/**
* Because our older API parameters are not consistent with other array API methods, and also
* because only [IE8 lacks integrated support]{@glossary polyfill} for
* [indexOf()]{@linkcode external:Array.indexOf}, we ensure it is defined (only IE8) and advise,
* moving forward, that the built-in method be used. But to preserve our original API, it will
* simply call this method, knowing it exists.
*
* @private
*/
Array.prototype.indexOf = Array.prototype.indexOf || function (el, offset) {
	var len = this.length >>> 0;
	
	offset = +offset || 0;
	
	if (Math.abs(offset) === Infinity) offset = 0;
	if (offset < 0) offset += len;
	if (offset < 0) offset = 0;
	
	for (; offset < len; ++offset) {
		if (this[offset] === el) return offset;
	}
	
	return -1;
};

/**
* Because our older API parameters are not consistent with other array API methods, and also
* because only [IE8 lacks integrated support]{@glossary polyfill} for
* [lastIndexOf()]{@glossary Array.lastIndexOf} we ensure it is defined (only IE8) and
* advise, moving forward, that the built-in method be used. But to preserve our original API, it
* will simply call this method, knowing it exists.
*
* @private
*/
Array.prototype.lastIndexOf = Array.prototype.lastIndexOf || function (el, offset) {
	var array = Object(this)
		, len = array.length >>> 0;
		
	if (len === 0) return -1;
	
	if (offset !== undefined) {
		offset = Number(offset);
		if (Math.abs(offset) > len) offset = len;
		if (offset === Infinity || offset === -Infinity) offset = len;
		if (offset < 0) offset += len;
	} else offset = len;
	
	for (; offset > -1; --offset) {
		if (array[offset] === el) return offset;
	}
	
	return -1;
};

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Array.findIndex()]{@glossary Array.findIndex}.
*/
Array.prototype.findIndex = Array.prototype.findIndex || function (fn, ctx) {
	for (var i=0, len=this.length >>> 0; i<len; ++i) {
		if (fn.call(ctx, this[i], i, this)) return i;
	}
	return -1;
};

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Array.find()]{@glossary Array.find}.
*/
Array.prototype.find = Array.prototype.find || function (fn, ctx) {
	for (var i=0, len=this.length >>> 0; i<len; ++i) {
		if (fn.call(ctx, this[i], i, this)) return this[i];
	}
};

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Array.forEach()]{@glossary Array.forEach}.
*/
Array.prototype.forEach = Array.prototype.forEach || function (fn, ctx) {
	for (var i=0, len=this.length >>> 0; i<len; ++i) fn.call(ctx, this[i], this);
};

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Array.map()]{@glossary Array.map}.
*/
Array.prototype.map = Array.prototype.map || function (fn, ctx) {
	var ret = [];
	for (var i=0, len=this.length >>> 0; i<len; ++i) {
		ret.push(fn.call(ctx, this[i], i, this));
	}
	return ret;
};

/**
* A [polyfill]{@glossary polyfill} for platforms that don't support
* [Array.filter()]{@glossary Array.filter}.
*/
Array.prototype.filter = Array.prototype.filter || function (fn, ctx) {
	var ret = [];
	for (var i=0, len=this.length >>> 0; i<len; ++i) {
		fn.call(ctx, this[i], i, this) && ret.push(this[i]);
	}
	return ret;
};

/**
* An Enyo convenience method reference to [Array.indexOf()]{@glossary Array.indexOf}.
* 
* This also supports the legacy Enyo argument order `el.indexOf(array, offset)` and can
* differentiate between this and the standard `array.indexOf(el, offset)`.
*
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
*
* @public
*/
exports.indexOf = function (array, el, offset) {
	if (!(array instanceof Array)) return el.indexOf(array, offset);
	return array.indexOf(el, offset);
};

/**
* An Enyo convenience method reference to [Array.lastIndexOf()]{@glossary Array.lastIndexOf}.
* 
* This also supports the legacy Enyo argument order `el.lastIndexOf(array, offset)` and can
* differentiate between this and the standard `array.lastIndexOf(el, offset)`.
*
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
*
* @public
*/
exports.lastIndexOf = function (array, el, offset) {
	if (!(array instanceof Array)) return el.lastIndexOf(array, offset);
	return array.lastIndexOf(el, offset);
};

/**
* An Enyo convenience method reference to [Array.findIndex()]{@glossary Array.findIndex}.
* 
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
* 
* @public
*/
exports.findIndex = function (array, fn, ctx) {
	return array.findIndex(fn, ctx);
};

/**
* An Enyo convenience method reference to [Array.find()]{@glossary Array.find}.
* 
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
* 
* @method enyo.find
* @public
*/
var find = exports.find = function (array, fn, ctx) {
	return array.find(fn, ctx);
};

/**
* @alias enyo.find
* @method enyo.where
* @public
*/
exports.where = find;

/**
* An Enyo convenience method reference to [Array.forEach()]{@glossary Array.forEach}.
* 
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
* 
* @public
*/
exports.forEach = function (array, fn, ctx) {
	return array.forEach(fn, ctx);
};

/**
* An Enyo convenience method reference to [Array.map()]{@glossary Array.map}.
*
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
*
* @public
*/
exports.map = function (array, fn, ctx) {
	return array.map(fn, ctx);
};

/**
* An Enyo convenience method reference to [Array.filter()]{@glossary Array.filter}.
*
* **When possible, you should use the native equivalent.**
* 
* This method supports the same arguments as the native version, plus an extra argument at the
* beginning referring to the [array]{@glossary Array} to run this method on.
*
* @public
*/
exports.filter = function (array, fn, ctx) {
	return array.filter(fn, ctx);
};

/**
* When given an [array]{@glossary Array} of [objects]{@glossary Object},
* searches through the array's objects; each object with a property name matching
* `prop` has its value for that property compiled into a result array, which is
* eventually returned. For each array object that doesn't have a matching property,
* an `undefined` placeholder element is added to the result array, such that the
* returned result array has the same length as the passed-in `array` parameter.
* 
* @param {Array} array - The [array]{@glossary Array} of [objects]{@glossary Object}
*                      in which the `prop` will be searched for.
* @param {String} prop - A string containing the name of the property to search for.
* @returns {Array} An array of all the values of the named property from
*                     objects contained in the `array`.
* @public
*/
exports.pluck = function (array, prop) {
	if (!(array instanceof Array)) {
		var tmp = array;
		array = prop;
		prop = tmp;
	}
	
	var ret = [];
	for (var i=0, len=array.length >>> 0; i<len; ++i) {
		ret.push(array[i]? array[i][prop]: undefined);
	}
	return ret;
};

/**
* Concatenates a variable number of [arrays]{@glossary Array}, removing any duplicate
* entries.
* 
* @returns {Array} The unique values from all [arrays]{@glossary Array}.
* @public
*/
exports.merge = function (/* _arrays_ */) {
	var ret = [],
		values = Array.prototype.concat.apply([], arguments);
	for (var i=0, len=values.length >>> 0; i<len; ++i) {
		if (!~ret.indexOf(values[i])) ret.push(values[i]);
	}
	return ret;
};

/**
* Clones an existing [Array]{@glossary Array}, or converts an array-like
* object into an Array.
* 
* If `offset` is non-zero, the cloning starts from that index in the source
* Array. The clone may be appended to an existing Array by passing in the
* existing Array as `initialArray`.
* 
* Array-like objects have `length` properties, and support square-bracket
* notation `([])`. Array-like objects often do not support Array methods
* such as `push()` or `concat()`, and so must be converted to Arrays before
* use.
* 
* The special `arguments` variable is an example of an array-like object.
*
* @public
*/
var cloneArray = exports.cloneArray = function (array, offset, initialArray) {
	var ret = initialArray || [];
	for(var i = offset || 0, l = array.length; i<l; i++){
		ret.push(array[i]);
	}
	// Alternate smarter implementation:
	// return Array.prototype.slice.call(array, offset);
	// Array.of
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
	return ret;
};

/**
* @alias cloneArray
* @method enyo.toArray
* @public
*/
exports.toArray = cloneArray;

/**
* Within a given [array]{@glossary Array}, removes the first
* [strictly equal to]{@glossary ===} occurrence of `el`.
* Note that `array` is modified directly.
*
* @param {Array} array - The [Array]{@glossary Array} to look through.
* @param {*} el - The element to search for and remove.
* @public
*/
exports.remove = function (array, el) {
	if (!(array instanceof Array)) {
		var tmp = array;
		array = el;
		el = tmp;
	}
	
	var i = array.indexOf(el);
	if (-1 < i) array.splice(i, 1);
	return array;
};

/**
* This regex pattern is used by the [enyo.isRtl()]{@link enyo.isRtl} function.
* 
* Arabic: \u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFE
* Hebrew: \u0590-\u05FF\uFB1D-\uFB4F
* 
* @private
*/
var rtlPattern = /[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFE\u0590-\u05FF\uFB1D-\uFB4F]/;

/**
* Takes content `str` and determines whether or not it is [RTL]{@glossary RTL}.
*
* @param {String} str - A [String]{@glossary String} to check the [RTL]{@glossary RTL}-ness of.
* @return {Boolean} `true` if `str` should be RTL; `false` if not.
* @public
*/
exports.isRtl = function (str) {
	return rtlPattern.test(str);
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12}],70:[function(require,module,exports){
require('../../enyo');

var
	States = require('./States');

/**
* Provides generic API methods related to using {@link enyo.States}.
*
* @mixin enyo.StateSupport
* @public
*/
module.exports = {
	
	/**
	* @private
	*/
	name: 'StateSupport',
	
	/**
	* The given status. This property will be modified by the other API methods of
	* {@link enyo.StateSupport}.
	*
	* @type enyo.States
	* @default null
	*/
	status: null,
	
	/**
	* Will remove any [error flags]{@link enyo.States.ERROR} from the given
	* [status]{@link enyo.StateSupport.status}.
	*
	* @public
	*/
	clearError: function () {
		this.status = this.status & ~States.ERROR;
	},
	
	/**
	* Convenience method to avoid using [bitwise]{@glossary bitwise} comparison for the
	* [status]{@link enyo.StateSupport.status}. Determines whether the current status
	* (or the optional passed-in value) is an [error state]{@link enyo.States.ERROR}.
	* The passed-in value will only be used if it is a [Number]{@glossary Number}.
	*
	* @param {enyo.States} [status] - The specific value to compare as an
	*	[error state]{@link enyo.States.ERROR}.
	* @returns {Boolean} Whether the value is an [error state]{@link enyo.States.ERROR} or not.
	* @public
	*/
	isError: function (status) {
		return !! ((isNaN(status) ? this.status : status) & States.ERROR);
	},
	
	/**
	* Convenience method to avoid using [bitwise]{@glossary bitwise} comparison for the
	* [status]{@link enyo.StateSupport.status}. Determines whether the current status
	* (or the optional passed-in value) is a [busy state]{@link enyo.States.BUSY}. The
	* passed-in value will only be used if it is a [Number]{@glossary Number}.
	*
	* @param {enyo.States} [status] - The specific value to compare as a
	*	[busy state]{@link enyo.States.BUSY}.
	* @returns {Boolean} Whether the value is a [busy state]{@link enyo.States.BUSY} or not.
	* @public
	*/
	isBusy: function (status) {
		return !! ((isNaN(status) ? this.status : status) & States.BUSY);
	},
	
	/**
	* Convenience method to avoid using [bitwise]{@glossary bitwise} comparison for the
	* [status]{@link enyo.StateSupport.status}. Determines whether the current status
	* (or the optional passed-in value) is a [ready state]{@link enyo.States.READY}. The
	* passed-in value will only be used if it is a [Number]{@glossary Number}.
	*
	* @param {enyo.States} [status] - The specific value to compare as a
	*	[ready state]{@link enyo.States.READY}.
	* @returns {Boolean} Whether the value is a [ready state]{@link enyo.States.BUSY} or not.
	* @public
	*/
	isReady: function (status) {
		return !! ((isNaN(status) ? this.status : status) & States.READY);
	}
};
},{"../../enyo":12,"./States":71}],282:[function(require,module,exports){
var
    roots = require('../../enyo/lib/roots');

/**
* {@link enyo.Spotlight.TestMode} is a collection of Spotlight utilities for use
* in testing.
*
* @typedef {Object} enyo.Spotlight.TestMode definition
*
* @class enyo.Spotlight.TestMode
* @public
*/
module.exports = function (Spotlight) {

    /********************* PRIVATE ********************/

    var _aNodes = [],
        _bEnabled = false;

    var

        /**
        * Destroys all highlight elements.
        *
        * @type {Function}
        * @private
        */
        _destroyExistingHighlightNodes = function() {
            var n;
            for (n = 0; n < _aNodes.length; n++) {
                if (_aNodes[n]) {
                    _aNodes[n].destroy();
                }
            }
            _aNodes = [];
        },

        /**
        * Highlights the current spotted control and adds it to `_aNodes`.
        *
        * @private
        */
        _highlightCurrentControl = function() {
            _aNodes.push(_addConrolHighlightNode({
                control: Spotlight.getCurrent(),
                str: 'C'
            }));
        },

        /**
        * Highlights controls adjacent to the current spotted control and adds
        * them to `_aNodes`.
        *
        * @private
        */
        _highlightAdjacentControls = function() {
            if (!Spotlight.getCurrent()) {
                return;
            }
            var controls = _removeDuplicateHighlightNodes([{
                control: Spotlight.NearestNeighbor.getNearestNeighbor('UP'),
                str: 'U'
            }, {
                control: Spotlight.NearestNeighbor.getNearestNeighbor('DOWN'),
                str: 'D'
            }, {
                control: Spotlight.NearestNeighbor.getNearestNeighbor('LEFT'),
                str: 'L'
            }, {
                control: Spotlight.NearestNeighbor.getNearestNeighbor('RIGHT'),
                str: 'R'
            }]);

            for (var i = 0; i < controls.length; i++) {
                if (!controls[i]) {
                    continue;
                }
                _aNodes.push(_addConrolHighlightNode(controls[i]));
            }
        },

        /**
        * Combines duplicate highlight nodes (created for the same control).
        * This happens when a given control can be reached via multiple 5-way
        * directions (e.g., up and left).
        *
        * @private
        */
        _removeDuplicateHighlightNodes = function(inControls) {
            var returnControls = [],
                dupeOf = -1;

            for (var i = 0; i < inControls.length; i++) {
                dupeOf = -1;

                for (var j = 0; j < inControls.length; j++) {
                    if (inControls[i].control === inControls[j].control && inControls[i].str !== inControls[j].str) {
                        dupeOf = j;
                        break;
                    }
                }

                if (dupeOf > -1) {
                    inControls[i].str += ',' + inControls[dupeOf].str;
                    inControls.splice(dupeOf, 1);
                }

                returnControls.push(inControls[i]);
            }

            return returnControls;
        },

        /**
        * Creates a new control with styling to highlight current or adjacent
        * Spotlight nodes.
        *
        * @private
        */
        _addConrolHighlightNode = function(inObj) {
            if (!inObj || !inObj.control || !inObj.control.hasNode()) {
                return null;
            }

            var bounds = Spotlight.Util.getAbsoluteBounds(inObj.control),
                className = (inObj.str === 'C') ? 'spotlight-current-item' : 'spotlight-adjacent-item',
                highlightNode = roots.roots[0].createComponent({
                    classes: 'spotlight-highlight ' + className,
                    style: 'height:' + bounds.height + 'px;width:' + bounds.width + 'px;top:' + bounds.top + 'px;left:' + bounds.left + 'px;line-height:' + bounds.height + 'px;',
                    content: inObj.str
                });

            highlightNode.render();

            return highlightNode;
        };

    /**
    * Enables test mode.
    *
    * @public
    */
    this.enable = function() {
        _bEnabled = true;
        this.highlight();
    };

    /**
    * Disables test mode.
    *
    * @public
    */
    this.disable = function() {
        _bEnabled = false;
        _destroyExistingHighlightNodes();
    };

    /**
    * Destroys existing highlight nodes and highlights the currently spotted
    * control and adjacent controls.
    *
    * @public
    */
    this.highlight = function() {
        if (!_bEnabled) {
            return;
        }
        _destroyExistingHighlightNodes();
        _highlightCurrentControl();
        _highlightAdjacentControls();
    };

    /**
    * Determines whether test mode is enabled.
    *
    * @returns {Boolean} `true` if test mode is enabled; otherwise, `false`.
    * @public
    */
    this.isEnabled = function() {
        return _bEnabled;
    };
};

},{"../../enyo/lib/roots":105}],34:[function(require,module,exports){
require('../../enyo');

var
	utils = require('./utils');

var
	eventTable = {};

/**
* @private
*/
function addListener(obj, e, fn, ctx) {

	obj.listeners().push({
		event: e,
		method: fn,
		ctx: ctx || obj
	});
	
	return obj;
}

/**
* @private
*/
function removeListener(obj, e, fn, ctx) {
	var listeners = obj.listeners()
		, idx;
		
	if (listeners.length) {
		idx = listeners.findIndex(function (ln) {
			return ln.event == e && ln.method === fn && (ctx? ln.ctx === ctx: true);
		});
		idx >= 0 && listeners.splice(idx, 1);
	}
	
	return obj;
}

/**
* @private
*/
function emit(obj, args) {
	var len = args.length
		, e = args[0]
		, listeners = obj.listeners(e);
		
	if (listeners.length) {
		if (len > 1) {
			args = utils.toArray(args);
			args.unshift(obj);
		} else {
			args = [obj, e];
		}

		for (var i=0, ln; (ln=listeners[i]); ++i) ln.method.apply(ln.ctx, args);
		
		return true;
	}
	
	return false;
}

/**
* {@link enyo.EventEmitter} is a {@glossary mixin} that adds support for
* registered {@glossary event} listeners. These events are different from
* bubbled events (e.g., DOM events and [handlers]{@link enyo.Component#handlers}).
* When [emitted]{@link enyo.EventEmitter#emit}, these events **do not bubble**
* and will only be handled by [registered listeners]{@link enyo.EventEmitter#on}.
*
* @mixin enyo.EventEmitter
* @public
*/
module.exports = {
	
	/**
	* @private
	*/
	name: 'EventEmitter',
	
	/**
	* @private
	*/
	_silenced: false,
	
	/**
	* @private
	*/
	_silenceCount: 0,
	
	/**
	* Disables propagation of [events]{@glossary event}. This is a counting
	* semaphor and [unsilence()]{@link enyo.EventEmitter#unsilence} will need to
	* be called the same number of times that this method is called.
	*
	* @see enyo.EventEmitter.unsilence
	* @returns {this} The callee for chaining.
	* @public
	*/
	silence: function () {
		this._silenced = true;
		this._silenceCount++;
		return this;
	},
	
	/**
	* Enables propagation of [events]{@glossary event}. This is a counting
	* semaphor and this method will need to be called the same number of times
	* that [silence()]{@link enyo.EventEmitter#silence} was called.
	*
	* @see enyo.EventEmitter.silence
	* @returns {this} The callee for chaining.
	* @public
	*/
	unsilence: function (force) {
		if (force) {
			this._silenceCount = 0;
			this._silenced = false;
		} else {
			this._silenceCount && this._silenceCount--;
			this._silenceCount === 0 && (this._silenced = false);
		}
		return this;
	},
	
	/**
	* Determines whether the callee is currently [silenced]{@link enyo.EventEmitter#silence}.
	*
	* @returns {Boolean} Whether or not the callee is
	*	[silenced]{@link enyo.EventEmitter.silence}.
	* @public
	*/
	isSilenced: function () {
		return this._silenced;
	},
	
	/**
	* @alias enyo.EventEmitter.on
	* @deprecated
	* @public
	*/
	addListener: function (e, fn, ctx) {
		return addListener(this, e, fn, ctx);
	},
	
	/**
	* Adds an {@glossary event} listener. Until [removed]{@link enyo.EventEmitter#off},
	* this listener will fire every time the event is
	* [emitted]{@link enyo.EventEmitter#emit}.
	*
	* @param {String} e - The {@glossary event} name to register for.
	* @param {Function} fn - The listener.
	* @param {Object} [ctx] - The optional context under which to execute the listener.
	* @returns {this} The callee for chaining.
	* @public
	*/
	on: function (e, fn, ctx) {
		return addListener(this, e, fn, ctx);
	},
	
	/**
	* @alias enyo.EventEmitter.off
	* @deprecated
	* @public
	*/
	removeListener: function (e, fn, ctx) {
		return removeListener(this, e, fn, ctx);
	},
	
	/**
	* Removes an {@glossary event} listener.
	*
	* @param {String} e - The {@glossary event} name.
	* @param {Function} fn - The listener to unregister.
	* @param {Object} [ctx] - If the listener was registered with a context, it
	* should be provided when unregistering as well.
	* @returns {this} The callee for chaining.
	* @public
	*/
	off: function (e, fn, ctx) {
		return removeListener(this, e, fn, ctx);
	},
	
	/**
	* Removes all listeners, or all listeners for a given {@glossary event}.
	*
	* @param {String} [e] - The optional target {@glossary event}.
	* @returns {this} The callee for chaining.
	*/
	removeAllListeners: function (e) {
		var euid = this.euid
			, loc = euid && eventTable[euid];
		
		if (loc) {
			if (e) {
				eventTable[euid] = loc.filter(function (ln) {
					return ln.event != e;
				});
			} else {
				eventTable[euid] = null;
			}
		}
		
		return this;
	},
	
	/**
	* Primarily intended for internal use, this method returns an immutable copy
	* of all listeners, or all listeners for a particular {@glossary event} (if any).
	*
	* @param {String} [e] - The targeted {@glossary event}.
	* @returns {Object[]} Event listeners are stored in [hashes]{@glossary Object}.
	*	The return value will be an [array]{@glossary Array} of these hashes
	* if any listeners exist.
	* @public
	*/
	listeners: function (e) {
		var euid = this.euid || (this.euid = utils.uid('e'))
			, loc = eventTable[euid] || (eventTable[euid] = []);
		
		return !e? loc: loc.filter(function (ln) {
			return ln.event == e || ln.event == '*';
		});
	},
	
	/**
	* @alias enyo.EventEmitter.emit
	* @deprecated
	* @public
	*/
	triggerEvent: function () {
		return !this._silenced? emit(this, arguments): false;
	},
	
	/**
	* Emits the named {@glossary event}. All subsequent arguments will be passed
	* to the event listeners.
	*
	* @param {String} e - The {@glossary event} to emit.
	* @param {...*} args All subsequent arguments will be passed to the event listeners.
	* @returns {Boolean} Whether or not any listeners were notified.
	* @public
	*/
	emit: function () {
		return !this._silenced? emit(this, arguments): false;
	}
};
},{"../../enyo":12,"./utils":106}],36:[function(require,module,exports){
require('../../enyo');

var
	utils = require('./utils');

/**
* An [XHR2]{@linkplain http://www.w3.org/TR/XMLHttpRequest/} FormData implementation.
* It is used to send `multipart/form-data` [Ajax]{@glossary ajax} requests. The
* internal `enyo.Blob` [kind]{@glossary kind} is the content provider for file-parts.
*
* Note that in Internet Explorer < 10, both {@link enyo.FormData} and `enyo.Blob` are
* limited to [string]{@glossary String} content and `enyo.Blob` may only be
* instantiated using an [array]{@glossary Array} or [string]{@glossary String}.
*
* This implementation is inspired by
* [html5-formdata]{@linkplain https://github.com/francois2metz/html5-formdata/blob/master/formdata.js}.
*
* ```
* Emulate FormData for some browsers
* MIT License
* (c) 2010 Francois de Metz
* ```
*
* @class enyo.FormData
* @public
*/
exports = null;

if (typeof FormData != 'undefined') {
	try {
		new FormData();
		
		exports = module.exports = FormData;
	// Android Chrome 18 will throw an error trying to create this
	} catch (e) {}
}

if (!exports) {

	/*jshint -W082 */
	function FormData() {
		this.fake = true;
		this._fields = [];
		// This generates a 50 character boundary similar to
		// those used by Firefox.  They are optimized for
		// boyer-moore parsing.
		this.boundary = '--------------------------';
		for (var i = 0; i < 24; i++) {
			this.boundary += Math.floor(Math.random() * 10).toString(16);
		}
	}
	FormData.prototype.getContentType = function() {
		return "multipart/form-data; boundary=" + this.boundary;
	};
	FormData.prototype.append = function(key, value, filename) {
		this._fields.push([key, value, filename]);
	};
	FormData.prototype.toString = function() {
		var boundary = this.boundary;
		var body = "";
		utils.forEach(this._fields, function(field) {
			body += "--" + boundary + "\r\n";
			if (field[2] || field[1].name) {
				// file upload
				var file = field[1], filename = field[2] || file.name;
				body += "Content-Disposition: form-data; name=\""+ field[0] +"\"; filename=\""+ filename +"\"\r\n";
				body += "Content-Type: "+ file.type +"\r\n\r\n";
				body += file.getAsBinary() + "\r\n";
			} else {
				// key-value field
				body += "Content-Disposition: form-data; name=\""+ field[0] +"\";\r\n\r\n";
				body += field[1] + "\r\n";
			}
		});
		body += "--" + boundary +"--";
		return body;
	};
	/*jshint +W082 */
	
	module.exports = FormData;
}
},{"../../enyo":12,"./utils":106}],102:[function(require,module,exports){
require('../../enyo');

var utils = require('./utils');

/**
* Determines OS versions of platforms that need special treatment. Can have one of the following
* properties:
*
* * android
* * androidChrome (Chrome on Android, standard starting in 4.1)
* * androidFirefox
* * ie
* * ios
* * webos
* * windowsPhone
* * blackberry
* * tizen
* * safari (desktop version)
* * chrome (desktop version)
* * firefox (desktop version)
* * firefoxOS
*
* If the property is defined, its value will be the major version number of the platform.
*
* Example:
* ```javascript
* // android 2 does not have 3d css
* if (enyo.platform.android < 3) {
* 	t = 'translate(30px, 50px)';
* } else {
* 	t = 'translate3d(30px, 50px, 0)';
* }
* this.applyStyle('-webkit-transform', t);
* ```
*
* @name enyo.platform
*/
exports = module.exports = 
	/** @lends enyo.platform */ {
	//* `true` if the platform has native single-finger [events]{@glossary event}.
	touch: Boolean(('ontouchstart' in window) || window.navigator.msMaxTouchPoints),
	//* `true` if the platform has native double-finger [events]{@glossary event}.
	gesture: Boolean(('ongesturestart' in window) || window.navigator.msMaxTouchPoints)
};

/**
* @private
*/
var ua = navigator.userAgent;
var ep = exports;
var platforms = [
	// Android 4+ using Chrome
	{platform: 'androidChrome', regex: /Android .* Chrome\/(\d+)[.\d]+/},
	// Android 2 - 4
	{platform: 'android', regex: /Android (\d+)/},
	// Kindle Fire
	// Force version to 2, (desktop mode does not list android version)
	{platform: 'android', regex: /Silk\/1./, forceVersion: 2, extra: {silk: 1}},
	// Kindle Fire HD (Silk versions 2 or 3)
	// Force version to 4
	{platform: 'android', regex: /Silk\/2./, forceVersion: 4, extra: {silk: 2}},
	{platform: 'android', regex: /Silk\/3./, forceVersion: 4, extra: {silk: 3}},
	// Windows Phone 7 - 8
	{platform: 'windowsPhone', regex: /Windows Phone (?:OS )?(\d+)[.\d]+/},
	// IE 8 - 10
	{platform: 'ie', regex: /MSIE (\d+)/},
	// IE 11
	{platform: 'ie', regex: /Trident\/.*; rv:(\d+)/},
	// iOS 3 - 5
	// Apple likes to make this complicated
	{platform: 'ios', regex: /iP(?:hone|ad;(?: U;)? CPU) OS (\d+)/},
	// webOS 1 - 3
	{platform: 'webos', regex: /(?:web|hpw)OS\/(\d+)/},
	// webOS 4 / OpenWebOS
	{platform: 'webos', regex: /WebAppManager|Isis|webOS\./, forceVersion: 4},
	// Open webOS release LuneOS
	{platform: 'webos', regex: /LuneOS/, forceVersion: 4, extra: {luneos: 1}},
	// desktop Safari
	{platform: 'safari', regex: /Version\/(\d+)[.\d]+\s+Safari/},
	// desktop Chrome
	{platform: 'chrome', regex: /Chrome\/(\d+)[.\d]+/},
	// Firefox on Android
	{platform: 'androidFirefox', regex: /Android;.*Firefox\/(\d+)/},
	// FirefoxOS
	{platform: 'firefoxOS', regex: /Mobile;.*Firefox\/(\d+)/},
	// desktop Firefox
	{platform: 'firefox', regex: /Firefox\/(\d+)/},
	// Blackberry Playbook
	{platform: 'blackberry', regex: /PlayBook/i, forceVersion: 2},
	// Blackberry 10+
	{platform: 'blackberry', regex: /BB1\d;.*Version\/(\d+\.\d+)/},
	// Tizen
	{platform: 'tizen', regex: /Tizen (\d+)/}
];
for (var i = 0, p, m, v; (p = platforms[i]); i++) {
	m = p.regex.exec(ua);
	if (m) {
		if (p.forceVersion) {
			v = p.forceVersion;
		} else {
			v = Number(m[1]);
		}
		ep[p.platform] = v;
		if (p.extra) {
			utils.mixin(ep, p.extra);
		}
		ep.platformName = p.platform;
		break;
	}
}

},{"../../enyo":12,"./utils":106}],204:[function(require,module,exports){
(function (global){
var
	utils = require('../../enyo/lib/utils'),
	options = require('../../enyo/lib/options');

var config = global.moon && global.moon.config;

/**
* Global *design-time* configuration options for Moonstone
*
* @param {Boolean} Set accelerate `false` to prefer position properties over CSS transforms.
* @type {Object}
*/
module.exports = utils.mixin({
	accelerate: true,
	renderOnShow: {
		expandableListDrawer: true
	}
}, options, config);
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo/lib/options":99,"../../enyo/lib/utils":106}],84:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	platform = require('./platform'),
	utils = require('./utils');

var ms = Math.round(1000/60);
var prefix = ['webkit', 'moz', 'ms', 'o', ''];
var r = 'requestAnimationFrame';
var c = 'cancel' + utils.cap(r);

/*
* Fallback on setTimeout
*
* @private
*/
var _requestFrame = function(inCallback) {
	return global.setTimeout(inCallback, ms);
};

/*
* Fallback on clearTimeout
*
* @private
*/
var _cancelFrame = function(inId) {
	return global.clearTimeout(inId);
};

for (var i = 0, pl = prefix.length, p, wc, wr; (p = prefix[i]) || i < pl; i++) {
	// if we're on ios 6 just use setTimeout, requestAnimationFrame has some kinks currently
	if (platform.ios >= 6) {
		break;
	}

	// if prefixed, becomes Request and Cancel
	wc = p ? (p + utils.cap(c)) : c;
	wr = p ? (p + utils.cap(r)) : r;
	// Test for cancelRequestAnimationFrame, because some browsers (Firefix 4-10) have a request without a cancel
	if (global[wc]) {
		_cancelFrame = global[wc];
		_requestFrame = global[wr];
		if (p == 'webkit') {
			/*
				Note: In Chrome, the first return value of webkitRequestAnimationFrame is 0.
				We make 1 bogus call so the first used return value of webkitRequestAnimationFrame is > 0, as the spec requires.
				This makes it so that the requestId is always truthy.
				(we choose to do this rather than wrapping the native function to avoid the overhead)
			*/
			_cancelFrame(_requestFrame(utils.nop));
		}
		break;
	}
}
/**
* Requests an animation callback.
*
* On compatible browsers, if `node` is defined, the [callback]{@glossary callback} will
* fire only if `node` is visible.
*
* @param {Function} callback - A [callback]{@glossary callback} to be executed on the
*                            animation frame.
* @param {Node} node - The DOM node to request the animation frame for.
* @returns {Object} A request id to be used with
*                     [enyo.cancelRequestAnimationFrame()]{@link enyo.cancelRequestAnimationFrame}.
* @public
*/
exports.requestAnimationFrame = function(callback, node) {
	return _requestFrame(callback, node);
};
/**
* Cancels a requested animation callback with the specified id.
*
* @public
*/
exports.cancelRequestAnimationFrame = function(inId) {
	return _cancelFrame(inId);
};

/**
* A set of interpolation functions for animations, similar in function to CSS3
* transitions.
*
* These are intended for use with {@link enyo.easedLerp}. Each easing function
* accepts one (1) [Number]{@glossary Number} parameter and returns one (1)
* [Number]{@glossary Number} value.
*
* @namespace enyo.easing
* @public
*/
exports.easing = /** @lends enyo.easing */ {
	/**
	* cubicIn
	*
	* @public
	*/
	cubicIn: function(n) {
		return Math.pow(n, 3);
	},
	/**
	* cubicOut
	*
	* @public
	*/
	cubicOut: function(n) {
		return Math.pow(n - 1, 3) + 1;
	},
	/**
	* expoOut
	*
	* @public
	*/
	expoOut: function(n) {
		return (n == 1) ? 1 : (-1 * Math.pow(2, -10 * n) + 1);
	},
	/**
	* quadInOut
	*
	* @public
	*/
	quadInOut: function(n) {
		n = n * 2;
		if (n < 1) {
			return Math.pow(n, 2) / 2;
		}
		return -1 * ((--n) * (n - 2) - 1) / 2;
	},
	/**
	* linear
	*
	* @public
	*/
	linear: function(n) {
		return n;
	}
};

/**
* Gives an interpolation of an animated transition's distance from 0 to 1.
*
* Given a start time (`t0`) and an animation duration (`duration`), this
* method applies the `easing` function to the percentage of time elapsed
* divided by duration, capped at 100%.
*
* @param {Number} t0 - Start time.
* @param {Number} duration - Duration in milliseconds.
* @param {Function} easing - An easing [function]{@glossary Function} reference from
*	{@link enyo.easing}.
* @param {Boolean} reverse - Whether the animation will run in reverse.
* @returns {Number} The resulting position, capped at a maximum of 100%.
* @public
*/
exports.easedLerp = function(t0, duration, easing, reverse) {
	var lerp = (utils.perfNow() - t0) / duration;
	if (reverse) {
		return lerp >= 1 ? 0 : (1 - easing(1 - lerp));
	} else {
		return lerp >= 1 ? 1 : easing(lerp);
	}
};

/**
* Gives an interpolation of an animated transition's distance from
* `startValue` to `valueChange`.
*
* Applies the `easing` function with a wider range of variables to allow for
* more complex animations.
*
* @param {Number} t0 - Start time.
* @param {Number} duration - Duration in milliseconds.
* @param {Function} easing - An easing [function]{@glossary Function} reference from
*	{@link enyo.easing}.
* @param {Boolean} reverse - Whether the animation will run in reverse.
* @param {Number} time
* @param {Number} startValue - Starting value.
* @param {Number} valueChange
* @returns {Number} The resulting position, capped at a maximum of 100%.
* @public
*/
exports.easedComplexLerp = function(t0, duration, easing, reverse, time, startValue, valueChange) {
	var lerp = (utils.perfNow() - t0) / duration;
	if (reverse) {
		return easing(1 - lerp, time, startValue, valueChange, duration);
	} else {
		return easing(lerp, time, startValue, valueChange, duration);
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./platform":102,"./utils":106}],87:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	roots = require('./roots'),
	utils = require('./utils'),
	platform = require('./platform');

/**
* @namespace enyo.dom
*/
var dom = module.exports =
	/** @lends enyo.dom */ {

	/**
	* Shortcut for `document.getElementById()` if `id` is a string; otherwise,
	* returns `id`. Uses `global.document` unless a document is specified in the
	* (optional) `doc` parameter.
	*
	* ```javascript
	* // find 'node' if it's a string id, or return it unchanged if it's already a node reference
	* var domNode = enyo.dom.byId(node);
	* ```
	*
	* @param {String} id - The document element ID to get.
	* @param {Node} [doc] - A [node]{@glossary Node} to search in. Default is the whole
	*	document.
	* @returns {Element} A reference to a DOM element.
	* @public
	*/
	byId: function(id, doc){
		return (typeof id == 'string') ? (doc || document).getElementById(id) : id;
	},

	/**
	* Returns a string with ampersand, less-than, and greater-than characters replaced with HTML
	* entities, e.g.,
	* ```
	* '&lt;code&gt;'This &amp; That'&lt;/code&gt;'
	* ```
	* becomes
	* ```
	* '&amp;lt;code&amp;gt;'This &amp;amp; That'&amp;lt;/code&amp;gt;'
	* ```
	*
	* @param {String} text - A string with entities you'd like to escape/convert.
	* @returns {String} A string that is properly escaped (the above characters.)
	* @public
	*/
	escape: function(text) {
		return text !== null ? String(text).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') : '';
	},

	/**
	* Returns an object describing the geometry of this node.
	*
	* @param {Node} n - The [node]{@glossary Node} to measure.
	* @returns {Object} An object containing the properties `top`, `left`,
	* `height`, and `width`.
	* @public
	*/
	getBounds: function(n) {
		if (n) {
			return {left: n.offsetLeft, top: n.offsetTop, width: n.offsetWidth, height: n.offsetHeight};
		}
		else {
			return null;
		}
	},

	/**
	* This is designed to be copied into the `computedStyle` object.
	*
	* @private
	*/
	_ie8GetComputedStyle: function(prop) {
		var re = /(\-([a-z]){1})/g;
		if (prop === 'float') {
			prop = 'styleFloat';
		} else if (re.test(prop)) {
			prop = prop.replace(re, function () {
				return arguments[2].toUpperCase();
			});
		}
		return this[prop] !== undefined ? this[prop] : null;
	},

	/**
	* @private
	*/
	getComputedStyle: function(node) {
		if(platform.ie < 9 && node && node.currentStyle) {
			//simple global.getComputedStyle polyfill for IE8
			var computedStyle = utils.clone(node.currentStyle);
			computedStyle.getPropertyValue = this._ie8GetComputedStyle;
			computedStyle.setProperty = function() {
				return node.currentStyle.setExpression.apply(node.currentStyle, arguments);
			};
			computedStyle.removeProperty = function() {
				return node.currentStyle.removeAttribute.apply(node.currentStyle, arguments);
			};
			return computedStyle;
		} else {
			return global.getComputedStyle && node && global.getComputedStyle(node, null);
		}
	},

	/**
	* @private
	*/
	getComputedStyleValue: function(node, property, computedStyle) {
		var s   = computedStyle || this.getComputedStyle(node),
			nIE = platform.ie;

		s = s ? s.getPropertyValue(property) : null;

		if (nIE) {
			var oConversion = {
				'thin'   : (nIE > 8 ? 2 : 1) + 'px',
				'medium' : (nIE > 8 ? 4 : 3) + 'px',
				'thick'  : (nIE > 8 ? 6 : 5) + 'px',
				'none'   : '0'
			};
			if (typeof oConversion[s] != 'undefined') {
				s = oConversion[s];
			}

			if (s == 'auto') {
				switch (property) {
				case 'width':
					s = node.offsetWidth;
					break;
				case 'height':
					s = node.offsetHeight;
					break;
				}
			}
		}

		return s;
	},

	/**
	* @private
	*/
	getFirstElementByTagName: function(tagName) {
		var e = document.getElementsByTagName(tagName);
		return e && e[0];
	},

	/**
	* @private
	*/
	applyBodyFit: function() {
		var h = this.getFirstElementByTagName('html');
		if (h) {
			this.addClass(h, 'enyo-document-fit');
		}
		dom.addBodyClass('enyo-body-fit');
		dom.bodyIsFitting = true;
	},

	/**
	* @private
	*/
	getWindowWidth: function() {
		if (global.innerWidth) {
			return global.innerWidth;
		}
		if (document.body && document.body.offsetWidth) {
			return document.body.offsetWidth;
		}
		if (document.compatMode=='CSS1Compat' &&
			document.documentElement &&
			document.documentElement.offsetWidth ) {
			return document.documentElement.offsetWidth;
		}
		return 320;
	},

	/**
	* @private
	*/
	getWindowHeight: function() {
		if (global.innerHeight) {
			return global.innerHeight;
		}
		if (document.body && document.body.offsetHeight) {
			return document.body.offsetHeight;
		}
		if (document.compatMode=='CSS1Compat' &&
			document.documentElement &&
			document.documentElement.offsetHeight ) {
			return document.documentElement.offsetHeight;
		}
		return 480;
	},

	/**
	* The proportion by which the `body` tag differs from the global size, in both X and Y
	* dimensions. This is relevant when we need to scale the whole interface down from 1920x1080
	* (1080p) to 1280x720 (720p), for example.
	*
	* @private
	*/
	_bodyScaleFactorY: 1,
	_bodyScaleFactorX: 1,
	updateScaleFactor: function() {
		var bodyBounds = this.getBounds(document.body);
		this._bodyScaleFactorY = bodyBounds.height / this.getWindowHeight();
		this._bodyScaleFactorX = bodyBounds.width / this.getWindowWidth();
	},

	/**
	* @private
	*/
	// Workaround for lack of compareDocumentPosition support in IE8
	// Code MIT Licensed, John Resig; source: http://ejohn.org/blog/comparing-document-position/
	compareDocumentPosition: function(a, b) {
		return a.compareDocumentPosition ?
		a.compareDocumentPosition(b) :
		a.contains ?
			(a != b && a.contains(b) && 16) +
			(a != b && b.contains(a) && 8) +
			(a.sourceIndex >= 0 && b.sourceIndex >= 0 ?
				(a.sourceIndex < b.sourceIndex && 4) +
				(a.sourceIndex > b.sourceIndex && 2) :
				1) +
			0 :
			0;
	},

	/**
	* @private
	*/
	// moved from FittableLayout.js into common protected code
	_ieCssToPixelValue: function(node, value) {
		var v = value;
		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
		var s = node.style;
		// store style and runtime style values
		var l = s.left;
		var rl = node.runtimeStyle && node.runtimeStyle.left;
		// then put current style in runtime style.
		if (rl) {
			node.runtimeStyle.left = node.currentStyle.left;
		}
		// apply given value and measure its pixel value
		s.left = v;
		v = s.pixelLeft;
		// finally restore previous state
		s.left = l;
		if (rl) {
			s.runtimeStyle.left = rl;
		}
		return v;
	},

	/**
	* @private
	*/
	_pxMatch: /px/i,
	getComputedBoxValue: function(node, prop, boundary, computedStyle) {
		var s = computedStyle || this.getComputedStyle(node);
		if (s && (!platform.ie || platform.ie >= 9)) {
			var p = s.getPropertyValue(prop + '-' + boundary);
			return p === 'auto' ? 0 : parseInt(p, 10);
		} else if (node && node.currentStyle) {
			var v = node.currentStyle[prop + utils.cap(boundary)];
			if (!v.match(this._pxMatch)) {
				v = this._ieCssToPixelValue(node, v);
			}
			return parseInt(v, 0);
		}
		return 0;
	},

	/**
	* Gets the boundaries of a [node's]{@glossary Node} `margin` or `padding` box.
	*
	* @param {Node} node - The [node]{@glossary Node} to measure.
	* @param {Node} box - The boundary to measure from ('padding' or 'margin').
	* @returns {Object} An object containing the properties `top`, `right`, `bottom`, and
	*	`left`.
	* @public
	*/
	calcBoxExtents: function(node, box) {
		var s = this.getComputedStyle(node);
		return {
			top: this.getComputedBoxValue(node, box, 'top', s),
			right: this.getComputedBoxValue(node, box, 'right', s),
			bottom: this.getComputedBoxValue(node, box, 'bottom', s),
			left: this.getComputedBoxValue(node, box, 'left', s)
		};
	},

	/**
	* Gets the calculated padding of a node. Shortcut for
	* [enyo.dom.calcBoxExtents()]{@link enyo.dom.calcBoxExtents}.
	*
	* @param {Node} node - The [node]{@glossary Node} to measure.
	* @returns {Object} An object containing the properties `top`, `right`, `bottom`, and
	*	`left`.
	* @public
	*/
	calcPaddingExtents: function(node) {
		return this.calcBoxExtents(node, 'padding');
	},

	/**
	* Gets the calculated margin of a node. Shortcut for
	* [enyo.dom.calcBoxExtents()]{@link enyo.dom.calcBoxExtents}.
	*
	* @param {Node} node - The [node]{@glossary Node} to measure.
	* @returns {Object} An object containing the properties `top`, `right`, `bottom`, and
	*	`left`.
	* @public
	*/
	calcMarginExtents: function(node) {
		return this.calcBoxExtents(node, 'margin');
	},
	/**
	* Returns an object like `{top: 0, left: 0, bottom: 100, right: 100, height: 10, width: 10}`
	* that represents the object's position relative to `relativeToNode` (suitable for absolute
	* positioning within that parent node). Negative values mean part of the object is not
	* visible. If you leave `relativeToNode` as `undefined` (or it is not a parent element), then
	* the position will be relative to the viewport and suitable for absolute positioning in a
	* floating layer.
	*
	* @param {Node} node - The [node]{@glossary Node} to measure.
	* @param {Node} relativeToNode - The [node]{@glossary Node} to measure the distance from.
	* @returns {Object} An object containing the properties `top`, `right`, `bottom`, `left`,
	*	`height`, and `width`.
	* @public
	*/
	calcNodePosition: function(targetNode, relativeToNode) {
		// Parse upward and grab our positioning relative to the viewport
		var top = 0,
			left = 0,
			node = targetNode,
			width = node.offsetWidth,
			height = node.offsetHeight,
			transformProp = dom.getStyleTransformProp(),
			xregex = /translateX\((-?\d+)px\)/i,
			yregex = /translateY\((-?\d+)px\)/i,
			borderLeft = 0, borderTop = 0,
			totalHeight = 0, totalWidth = 0,
			offsetAdjustLeft = 0, offsetAdjustTop = 0;

		if (relativeToNode) {
			totalHeight = relativeToNode.offsetHeight;
			totalWidth = relativeToNode.offsetWidth;
		} else {
			totalHeight = (document.body.parentNode.offsetHeight > this.getWindowHeight() ? this.getWindowHeight() - document.body.parentNode.scrollTop : document.body.parentNode.offsetHeight);
			totalWidth = (document.body.parentNode.offsetWidth > this.getWindowWidth() ? this.getWindowWidth() - document.body.parentNode.scrollLeft : document.body.parentNode.offsetWidth);
		}

		if (node.offsetParent) {
			do {
				// Adjust the offset if relativeToNode is a child of the offsetParent
				// For IE 8 compatibility, have to use integer 8 instead of Node.DOCUMENT_POSITION_CONTAINS
				if (relativeToNode && this.compareDocumentPosition(relativeToNode, node.offsetParent) & 8) {
					offsetAdjustLeft = relativeToNode.offsetLeft;
					offsetAdjustTop = relativeToNode.offsetTop;
				}
				// Ajust our top and left properties based on the position relative to the parent
				left += node.offsetLeft - (node.offsetParent ? node.offsetParent.scrollLeft : 0) - offsetAdjustLeft;
				if (transformProp && xregex.test(node.style[transformProp])) {
					left += parseInt(node.style[transformProp].replace(xregex, '$1'), 10);
				}
				top += node.offsetTop - (node.offsetParent ? node.offsetParent.scrollTop : 0) - offsetAdjustTop;
				if (transformProp && yregex.test(node.style[transformProp])) {
					top += parseInt(node.style[transformProp].replace(yregex, '$1'), 10);
				}
				// Need to correct for borders if any exist on parent elements
				if (node !== targetNode) {
					if (node.currentStyle) {
						// Oh IE, we do so love working around your incompatibilities
						borderLeft = parseInt(node.currentStyle.borderLeftWidth, 10);
						borderTop = parseInt(node.currentStyle.borderTopWidth, 10);
					} else if (global.getComputedStyle) {
						borderLeft = parseInt(global.getComputedStyle(node, '').getPropertyValue('border-left-width'), 10);
						borderTop = parseInt(global.getComputedStyle(node, '').getPropertyValue('border-top-width'), 10);
					} else {
						// No computed style options, so try the normal style object (much less robust)
						borderLeft = parseInt(node.style.borderLeftWidth, 10);
						borderTop = parseInt(node.style.borderTopWidth, 10);
					}
					if (borderLeft) {
						left += borderLeft;
					}
					if (borderTop) {
						top += borderTop;
					}
				}
				// Continue if we have an additional offsetParent, and either don't have a relativeToNode or the offsetParent is contained by the relativeToNode (if offsetParent contains relativeToNode, then we have already calculated up to the node, and can safely exit)
				// For IE 8 compatibility, have to use integer 16 instead of Node.DOCUMENT_POSITION_CONTAINED_BY
			} while ((node = node.offsetParent) && (!relativeToNode || this.compareDocumentPosition(relativeToNode, node) & 16));
		}
		return {
			'top': top,
			'left': left,
			'bottom': totalHeight - top - height,
			'right': totalWidth - left - width,
			'height': height,
			'width': width
		};
	},

	/**
	* Sets the `innerHTML` property of the specified `node` to `html`.
	*
	* @param {Node} node - The [node]{@glossary Node} to set.
	* @param {String} html - An HTML string.
	* @public
	*/
	setInnerHtml: function(node, html) {
		node.innerHTML = html;
	},

	/**
	* Checks a [DOM]{@glossary Node} [node]{@glossary Node} for a specific CSS class.
	*
	* @param {Node} node - The [node]{@glossary Node} to set.
	* @param {String} s - The class name to check for.
	* @returns {(Boolean|undefined)} `true` if `node` has the `s` class; `undefined`
	* if there is no `node` or it has no `className` property.
	* @public
	*/
	hasClass: function(node, s) {
		if (!node || !node.className) { return; }
		return (' ' + node.className + ' ').indexOf(' ' + s + ' ') >= 0;
	},

	/**
	* Uniquely adds a CSS class to a DOM node.
	*
	* @param {Node} node - The [node]{@glossary Node} to set.
	* @param {String} s - The class name to add.
	* @public
	*/
	addClass: function(node, s) {
		if (node && !this.hasClass(node, s)) {
			var ss = node.className;
			node.className = (ss + (ss ? ' ' : '') + s);
		}
	},

	/**
	* Removes a CSS class from a DOM node if it exists.
	*
	* @param {Node} node - The [node]{@glossary Node} from which to remove the class.
	* @param {String} s - The class name to remove from `node`.
	* @public
	*/
	removeClass: function(node, s) {
		if (node && this.hasClass(node, s)) {
			var ss = node.className;
			node.className = (' ' + ss + ' ').replace(' ' + s + ' ', ' ').slice(1, -1);
		}
	},

	/**
	* Adds a class to `document.body`. This defers the actual class change if nothing has been
	* rendered into `body` yet.
	*
	* @param {String} s - The class name to add to the document's `body`.
	* @public
	*/
	addBodyClass: function(s) {
		if (!utils.exists(roots.roots) || roots.roots.length === 0) {
			if (dom._bodyClasses) {
				dom._bodyClasses.push(s);
			} else {
				dom._bodyClasses = [s];
			}
		}
		else {
			dom.addClass(document.body, s);
		}
	},

	/**
	* Returns an object describing the absolute position on the screen, relative to the top left
	* corner of the screen. This function takes into account account absolute/relative
	* `offsetParent` positioning, `scroll` position, and CSS transforms (currently
	* `translateX`, `translateY`, and `matrix3d`).
	*
	* ```javascript
	* {top: ..., right: ..., bottom: ..., left: ..., height: ..., width: ...}
	* ```
	*
	* Values returned are only valid if `hasNode()` is truthy. If there's no DOM node for the
	* object, this returns a bounds structure with `undefined` as the value of all fields.
	*
	* @param {Node} n - The [node]{@glossary Node} to measure.
	* @returns {Object} An object containing the properties `top`, `right`, `bottom`, `left`,
	*	`height`, and `width`.
	* @public
	*/
	getAbsoluteBounds: function(targetNode) {
		return utils.clone(targetNode.getBoundingClientRect());
	},

	/**
	* @private
	*/
	flushBodyClasses: function() {
		if (dom._bodyClasses) {
			for (var i = 0, c; (c=dom._bodyClasses[i]); ++i) {
				dom.addClass(document.body, c);
			}
			dom._bodyClasses = null;
		}
	},

	/**
	* @private
	*/
	_bodyClasses: null,

	/**
	* Convert to various unit formats. Useful for converting pixels to a resolution-independent
	* measurement method, like "rem". Other units are available if defined in the
	* [enyo.dom.unitToPixelFactors]{@link enyo.dom.unitToPixelFactors} object.
	*
	* ```javascript
	* // Do calculations and get back the desired CSS unit.
	* var frameWidth = 250,
	*     frameWithMarginInches = enyo.dom.unit( 10 + frameWidth + 10, 'in' ),
	*     frameWithMarginRems = enyo.dom.unit( 10 + frameWidth + 10, 'rem' );
	* // '2.8125in' == frameWithMarginInches
	* // '22.5rem' == frameWithMarginRems
	* ```
	*
	* @param {(String|Number)} pixels - The the pixels or math to convert to the unit.
	*	("px" suffix in String format is permitted. ex: `'20px'`)
	* @param {(String)} toUnit - The name of the unit to convert to.
	* @returns {(Number|undefined)} Resulting conversion, in case of malformed input, `undefined`
	* @public
	*/
	unit: function (pixels, toUnit) {
		if (!toUnit || !this.unitToPixelFactors[toUnit]) return;
		if (typeof pixels == 'string' && pixels.substr(-2) == 'px') pixels = parseInt(pixels.substr(0, pixels.length - 2), 10);
		if (typeof pixels != 'number') return;

		return (pixels / this.unitToPixelFactors[toUnit]) + '' + toUnit;
	},

	/**
	* Object that stores all of the pixel conversion factors to each keyed unit.
	*
	* @public
	*/
	unitToPixelFactors: {
		'rem': 12,
		'in': 96
	}
};

// override setInnerHtml for Windows 8 HTML applications
if (typeof global.MSApp !== 'undefined') {
	dom.setInnerHtml = function(node, html) {
		global.MSApp.execUnsafeLocalFunction(function() {
			node.innerHTML = html;
		});
	};
}

// use faster classList interface if it exists
if (document.head && document.head.classList) {
	dom.hasClass = function(node, s) {
		if (node) {
			return node.classList.contains(s);
		}
	};
	dom.addClass = function(node, s) {
		if (node) {
			return node.classList.add(s);
		}
	};
	dom.removeClass = function (node, s) {
		if (node) {
			return node.classList.remove(s);
		}
	};
}

/**
* Allows bootstrapping in environments that do not have a global object right away.
*
* @param {Function} func - The function to run
* @public
*/
dom.requiresWindow = function(func) {
	func();
};


var cssTransformProps = ['transform', '-webkit-transform', '-moz-transform', '-ms-transform', '-o-transform'],
	styleTransformProps = ['transform', 'webkitTransform', 'MozTransform', 'msTransform', 'OTransform'];

/**
* @private
*/
dom.calcCanAccelerate = function() {
	/* Android 2 is a liar: it does NOT support 3D transforms, even though Perspective is the best check */
	if (platform.android <= 2) {
		return false;
	}
	var p$ = ['perspective', 'WebkitPerspective', 'MozPerspective', 'msPerspective', 'OPerspective'];
	for (var i=0, p; (p=p$[i]); i++) {
		if (typeof document.body.style[p] != 'undefined') {
			return true;
		}
	}
	return false;
};
/**
* @private
*/
dom.getCssTransformProp = function() {
	if (this._cssTransformProp) {
		return this._cssTransformProp;
	}
	var i = utils.indexOf(this.getStyleTransformProp(), styleTransformProps);
	this._cssTransformProp = cssTransformProps[i];
	return this._cssTransformProp;
};

/**
* @private
*/
dom.getStyleTransformProp = function() {
	if (this._styleTransformProp || !document.body) {
		return this._styleTransformProp;
	}
	for (var i = 0, p; (p = styleTransformProps[i]); i++) {
		if (typeof document.body.style[p] != 'undefined') {
			this._styleTransformProp = p;
			return this._styleTransformProp;
		}
	}
};

/**
* @private
*/
dom.domTransformsToCss = function(inTransforms) {
	var n, v, text = '';
	for (n in inTransforms) {
		v = inTransforms[n];
		if ((v !== null) && (v !== undefined) && (v !== '')) {
			text +=  n + '(' + v + ') ';
		}
	}
	return text;
};

/**
* @private
*/
dom.transformsToDom = function(control) {
	var css = this.domTransformsToCss(control.domTransforms),
		styleProp;

	if (control.hasNode()) {
		styleProp = this.getStyleTransformProp();
	} else {
		styleProp = this.getCssTransformProp();
	}

	if (styleProp) control.applyStyle(styleProp, css);
};

/**
* Returns `true` if the platform supports CSS3 Transforms.
*
* @returns {Boolean} `true` if platform supports CSS `transform` property;
* otherwise, `false`.
* @public
*/
dom.canTransform = function() {
	return Boolean(this.getStyleTransformProp());
};

/**
* Returns `true` if platform supports CSS3 3D Transforms.
*
* Typically used like this:
* ```
* if (dom.canAccelerate()) {
* 	dom.transformValue(this.$.slidingThing, 'translate3d', x + ',' + y + ',' + '0')
* } else {
* 	dom.transformValue(this.$.slidingThing, 'translate', x + ',' + y);
* }
* ```
*
* @returns {Boolean} `true` if platform supports CSS3 3D Transforms;
* otherwise, `false`.
* @public
*/
dom.canAccelerate = function() {
	return (this.accelerando !== undefined) ? this.accelerando : document.body && (this.accelerando = this.calcCanAccelerate());
};

/**
* Applies a series of transforms to the specified {@link enyo.Control}, using
* the platform's prefixed `transform` property.
*
* **Note:** Transforms are not commutative, so order is important.
*
* Transform values are updated by successive calls, so
* ```javascript
* dom.transform(control, {translate: '30px, 40px', scale: 2, rotate: '20deg'});
* dom.transform(control, {scale: 3, skewX: '-30deg'});
* ```
*
* is equivalent to:
* ```javascript
* dom.transform(control, {translate: '30px, 40px', scale: 3, rotate: '20deg', skewX: '-30deg'});
* ```
*
* When applying these transforms in a WebKit browser, this is equivalent to:
* ```javascript
* control.applyStyle('-webkit-transform', 'translate(30px, 40px) scale(3) rotate(20deg) skewX(-30deg)');
* ```
*
* And in Firefox, this is equivalent to:
* ```javascript
* control.applyStyle('-moz-transform', 'translate(30px, 40px) scale(3) rotate(20deg) skewX(-30deg)');
* ```
*
* @param {enyo.Control} control - The {@link enyo.Control} to transform.
* @param {Object} transforms - The set of transforms to apply to `control`.
* @public
*/
dom.transform = function(control, transforms) {
	var d = control.domTransforms = control.domTransforms || {};
	utils.mixin(d, transforms);
	this.transformsToDom(control);
};

/**
* Applies a single transform to the specified {@link enyo.Control}.
*
* Example:
* ```
* tap: function(inSender, inEvent) {
* 	var c = inEvent.originator;
* 	var r = c.rotation || 0;
* 	r = (r + 45) % 360;
* 	c.rotation = r;
* 	dom.transformValue(c, 'rotate', r);
* }
* ```
*
* This will rotate the tapped control by 45 degrees clockwise.
*
* @param {enyo.Control} control - The {@link enyo.Control} to transform.
* @param {String} transform - The name of the transform function.
* @param {(String|Number)} value - The value to apply to the transform.
* @public
*/
dom.transformValue = function(control, transform, value) {
	var d = control.domTransforms = control.domTransforms || {};
	d[transform] = value;
	this.transformsToDom(control);
};

/**
* Applies a transform that should trigger GPU compositing for the specified
* {@link enyo.Control}. By default, the acceleration is only applied if the
* browser supports it. You may also optionally force-set `value` directly, to
* be applied to `translateZ(value)`.
*
* @param {enyo.Control} control - The {@link enyo.Control} to accelerate.
* @param {(String|Number)} [value] - An optional value to apply to the acceleration transform
*	property.
* @public
*/
dom.accelerate = function(control, value) {
	var v = value == 'auto' ? this.canAccelerate() : value;
	this.transformValue(control, 'translateZ', v ? 0 : null);
};


/**
 * The CSS `transition` property name for the current browser/platform, e.g.:
 *
 * * `-webkit-transition`
 * * `-moz-transition`
 * * `transition`
 *
 * @type {String}
 * @private
 */
dom.transition = (platform.ios || platform.android || platform.chrome || platform.androidChrome || platform.safari)
	? '-webkit-transition'
	: (platform.firefox || platform.firefoxOS || platform.androidFirefox)
		? '-moz-transition'
		: 'transition';
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./platform":102,"./roots":105,"./utils":106}],97:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	json = require('./json'),
	utils = require('./utils'),
	platform = require('./platform');

/**
* These platforms only allow one argument for [console.log()]{@glossary console.log}:
*
* * android
* * ios
* * webos
*
* @private
*/
var dumbConsole = Boolean(platform.android || platform.ios || platform.webos);

/**
* Internally used methods and properties associated with logging.
*
* @namespace exports.logging
* @public
*/
exports = module.exports = /** @lends exports.logging */ {
	
	/**
	* The log level to use. Can be a value from -1 to 99, where -1 disables all
	* logging, 0 is 'error', 10 is 'warn', and 20 is 'log'. It is preferred that
	* this value be set using the [exports.setLogLevel()]{@link enyo~setLogLevel}
	* method.
	*
	* @type {Number}
	* @default 99
	* @public
	*/
	level: 99,
	
	/**
	* The known levels.
	*
	* @private
	*/
	levels: {log: 20, warn: 10, error: 0},
	
	/**
	* @private
	*/
	shouldLog: function (fn) {
		var ll = parseInt(this.levels[fn], 0);
		return (ll <= this.level);
	},
	
	/**
	* @private
	*/
	validateArgs: function (args) {
		// gracefully handle and prevent circular reference errors in objects
		for (var i=0, l=args.length, item; (item=args[i]) || i<l; i++) {
			try {
				if (typeof item === 'object') {
					args[i] = json.stringify(item);
				}
			} catch (e) {
				args[i] = 'Error: ' + e.message;
			}
		}
	},
	
	/**
	* @private
	*/
	_log: function (fn, args) {
		// avoid trying to use console on IE instances where the object hasn't been
		// created due to the developer tools being unopened
		var console = global.console;
		if (typeof console === 'undefined') {
            return;
        }
		//var a$ = utils.logging.formatArgs(fn, args);
		var a$ = utils.isArray(args) ? args : utils.cloneArray(args);
		if (platform.androidFirefox) {
			// Firefox for Android's console does not handle objects with circular references
			this.validateArgs(a$);
		}
		if (dumbConsole) {
			// at least in early versions of webos, console.* only accept a single argument
			a$ = [a$.join(' ')];
		}
		var fn$ = console[fn];
		if (fn$ && fn$.apply) {
			// some consoles support 'warn', 'info', and so on
			fn$.apply(console, a$);
		} else if (console.log.apply) {
			// some consoles support console.log.apply
			console.log.apply(console, a$);
		} else {
			// otherwise, do our own formatting
			console.log(a$.join(' '));
		}
	},
	
	/**
	* This is exposed elsewhere.
	*
	* @private
	*/
	log: function (fn, args) {

		if (fn != 'log' && fn != 'warn' && fn != 'error') {
			args = Array.prototype.slice.call(arguments);
			fn = 'log';
		}

		var console = global.console;
		if (typeof console !== 'undefined') {
			if (this.shouldLog(fn)) {
				this._log(fn, args);
			}
		}
	}
};

/**
* Sets the log level to the given value. This will restrict the amount of output depending on
* the settings. The higher the value, the more output that will be allowed. The default is
* 99. The value, -1, would silence all logging, even 'error' (0).
* Without the 'see': {@link exports.log}.
*
* @see exports.logging.level
* @see exports.log
* @see exports.warn
* @see exports.error
* @param {Number} level - The level to set logging to.
*/
exports.setLogLevel = function (level) {
	var ll = parseInt(level, 0);
	if (isFinite(ll)) {
		this.level = ll;
	}
};

/**
* A wrapper for [console.log()]{@glossary console.log}, compatible
* across supported platforms. Will output only if the current
* [log level]{@link exports.logging.level} allows it. [Object]{@glossary Object}
* parameters will be serialized via [JSON.stringify()]{@glossary JSON.stringify}
* automatically.
*
* @utility
* @see {@glossary console.log}
* @param {...*} - The arguments to be logged.
* @public
*/

/**
* A wrapper for [console.warn()]{@glossary console.warn}, compatible
* across supported platforms. Will output only if the current
* [log level]{@link exports.logging.level} allows it. [Object]{@glossary Object}
* parameters will be serialized via [JSON.stringify()]{@glossary JSON.stringify}
* automatically.
*
* @utility
* @see {@glossary console.warn}
* @param {...*} - The arguments to be logged.
* @public
*/
exports.warn = function () {
	this.log('warn', arguments);
};

/**
* A wrapper for [console.error()]{@glossary console.error}, compatible
* across supported platforms. Will output only if the current
* [log level]{@link exports.logging.level} allows it. [Object]{@glossary Object}
* parameters will be serialized via [JSON.stringify()]{@glossary JSON.stringify}
* automatically.
*
* @utility
* @see {@glossary console.error}
* @param {...*} - The arguments to be logged.
* @public
*/
exports.error = function () {
	this.log('error', arguments);
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./json":95,"./platform":102,"./utils":106}],107:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	utils = require('./utils'),
	platform = require('./platform'),
	path = require('./pathResolver');

/**
* Parameters and options for the [enyo.xhr.request()]{@link enyo.xhr.request} method.
*
* @typedef {Object} enyo.xhr.request~Options
* @property {String} url - The URL to request (required).
* @property {String} method - One of `'GET'`, `'POST'`, `'DELETE'`, `'UPDATE'`, or
* custom methods; defaults to `'GET'`.
* @property {Function} callback - Optional callback method to fire when complete.
* @property {Object} body - Optional serializable body for `POST` requests.
* @property {Object} headers - Optional header overrides; defaults to `null`.
* @property {String} username - Optional username to provide for authentication purposes.
* @property {String} password - Optional password to provide for authentication purposes.
* @property {Object} xhrFields - Optional key/value pairs to apply directly to the request.
* @property {String} mimeType - Optional specification for the `MIME-Type` of the request.
* @property {Boolean} mozSystem - Optional boolean to create cross-domain XHR (Firefox OS only).
* @property {Boolean} mozAnon - Optional boolean to create anonymous XHR that does not send
*	cookies or authentication headers (Firefox OS only).
* @private
*/

/**
* An internally-used namespace for XHR-related methods and wrappers.
*
* @namespace enyo.xhr
* @private
*/
module.exports = /** @lends enyo.xhr */ {
	
	/**
	* Internally-used method to execute XHR requests.
	*
	* Note that we explicitly add a `'cache-control: no-cache'` header for iOS 6 for any
	* non-`GET` requests to work around a system bug causing non-cachable requests to be
	* cached. To disable this, use the `header` property to specify an object where
	* `cache-control` is set to `null`.
	*
	* @param {enyo.xhr.request~Options} params - The options and properties for this XHR request.
	* @returns {XMLHttpRequest} The XHR request object.
	* @private
	*/
	request: function (params) {
		var xhr = this.getXMLHttpRequest(params);
		var url = this.simplifyFileURL(path.rewrite(params.url));
		//
		var method = params.method || 'GET';
		var async = !params.sync;
		//
		if (params.username) {
			xhr.open(method, url, async, params.username, params.password);
		} else {
			xhr.open(method, url, async);
		}
		//
		utils.mixin(xhr, params.xhrFields);
		// only setup handler when we have a callback
		if (params.callback) {
			this.makeReadyStateHandler(xhr, params.callback);
		}
		//
		params.headers = params.headers || {};
		// work around iOS 6.0 bug where non-GET requests are cached
		// see http://www.einternals.com/blog/web-development/ios6-0-caching-ajax-post-requests
		if (method !== 'GET' && platform.ios && platform.ios == 6) {
			if (params.headers['cache-control'] !== null) {
				params.headers['cache-control'] = params.headers['cache-control'] || 'no-cache';
			}
		}
		// user-set headers override any platform-default
		if (xhr.setRequestHeader) {
			for (var key in params.headers) {
				if (params.headers[key]) {
					xhr.setRequestHeader(key, params.headers[key]);
				}
			}
		}
		//
		if((typeof xhr.overrideMimeType == 'function') && params.mimeType) {
			xhr.overrideMimeType(params.mimeType);
		}
		//
		xhr.send(params.body || null);
		if (!async && params.callback) {
			xhr.onreadystatechange(xhr);
		}
		return xhr;
	},
	
	/**
	* Removes any callbacks that might be set from Enyo code for an existing XHR
	* and stops the XHR from completing (if possible).
	*
	* @param {XMLHttpRequest} The - request to cancel.
	* @private
	*/
	cancel: function (xhr) {
		if (xhr.onload) {
			xhr.onload = null;
		}
		if (xhr.onreadystatechange) {
			xhr.onreadystatechange = null;
		}
		if (xhr.abort) {
			xhr.abort();
		}
	},
	
	/**
	* @private
	*/
	makeReadyStateHandler: function (inXhr, inCallback) {
		if (global.XDomainRequest && inXhr instanceof global.XDomainRequest) {
			inXhr.onload = function() {
				var data;
				if (inXhr.responseType === 'arraybuffer') {
					data = inXhr.response;
				} else if (typeof inXhr.responseText === 'string') {
					data = inXhr.responseText;
				}
				inCallback.apply(null, [data, inXhr]);
				inXhr = null;
			};
		} else {
			inXhr.onreadystatechange = function() {
				if (inXhr && inXhr.readyState == 4) {
					var data;
					if (inXhr.responseType === 'arraybuffer') {
						data = inXhr.response;
					} else if (typeof inXhr.responseText === 'string') {
						data = inXhr.responseText;
					}
					inCallback.apply(null, [data, inXhr]);
					inXhr = null;
				}
			};
		}
	},
	
	/**
	* @private
	*/
	inOrigin: function (url) {
		var a = document.createElement('a'), result = false;
		a.href = url;
		// protocol is ':' for relative URLs
		if (a.protocol === ':' ||
				(a.protocol === global.location.protocol &&
					a.hostname === global.location.hostname &&
					a.port === (global.location.port ||
						(global.location.protocol === 'https:' ? '443' : '80')))) {
			result = true;
		}
		return result;
	},
	
	/**
	* @private
	*/
	simplifyFileURL: function (url) {
		var a = document.createElement('a');
		a.href = url;
		// protocol is ':' for relative URLs
		if (a.protocol === 'file:' ||
			a.protocol === ':' && global.location.protocol === 'file:') {
			// leave off search and hash parts of the URL
			// and work around a bug in webOS 3 where the app's host has a domain string
			// in it that isn't resolved as a path
			var host = (platform.webos < 4) ? '' : a.host;
			return a.protocol + '//' + host + a.pathname;
		} else if (a.protocol === ':' && global.location.protocol === 'x-wmapp0:') {
			// explicitly return absolute URL for Windows Phone 8, as an absolute path is required for local files
			return global.location.protocol + '//' + global.location.pathname.split('/')[0] + '/' + a.host + a.pathname;
		} else {
			return url;
		}
	},
	
	/**
	* @private
	*/
	getXMLHttpRequest: function (params) {
		try {
			// only use XDomainRequest when it exists, no extra headers were set, and the
			// target URL maps to a domain other than the document origin.
			if (platform.ie < 10 && global.XDomainRequest && !params.headers &&
				!this.inOrigin(params.url) && !/^file:\/\//.test(global.location.href)) {
				return new global.XDomainRequest();
			}
		} catch(e) {}
		try {

			if (platform.firefoxOS) {
				var shouldCreateNonStandardXHR = false; // flag to decide if we're creating the xhr or not
				var xhrOptions = {};

				// mozSystem allows you to do cross-origin requests on Firefox OS
				// As seen in:
				//   https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Non-standard_properties
				if (params.mozSystem) {
					xhrOptions.mozSystem = true;
					shouldCreateNonStandardXHR = true;
				}

				// mozAnon allows you to send a request without cookies or authentication headers
				// As seen in:
				//   https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Non-standard_properties
				if (params.mozAnon) {
					xhrOptions.mozAnon = true;
					shouldCreateNonStandardXHR = true;
				}

				if (shouldCreateNonStandardXHR) {
					return new XMLHttpRequest(xhrOptions);
				}
			}

			return new XMLHttpRequest();
		} catch(e) {}
		return null;
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./pathResolver":101,"./platform":102,"./utils":106}],39:[function(require,module,exports){
require('../../enyo');

var
	Dom = require('./dom');

var selfClosing = {img: 1, hr: 1, br: 1, area: 1, base: 1, basefont: 1, input: 1, link: 1,
	meta: 1, command: 1, embed: 1, keygen: 1, wbr: 1, param: 1, source: 1, track: 1, col: 1};

/**
* This is the default render delegate used by {@link enyo.Control}. It
* generates the HTML [string]{@glossary String} content and correctly inserts
* it into the DOM. A string-concatenation technique is used to perform DOM
* insertion in batches.
*
* @name enyo.HTMLStringDelegate
* @type Object
* @public
*/
module.exports = {
	
	/**
	* @private
	*/
	invalidate: function (control, item) {
		switch (item) {
		case 'content':
			this.renderContent(control);
			break;
		default:
			control.tagsValid = false;
			break;
		}
	},
	
	/**
	* @private
	*/
	render: function (control) {
		if (control.parent) {
			control.parent.beforeChildRender(control);
			
			if (!control.parent.generated) return;
			if (control.tag === null) return control.parent.render();
		}
		
		if (!control.hasNode()) this.renderNode(control);
		if (control.hasNode()) {
			this.renderDom(control);
			if (control.generated) control.rendered();
		}
	},
	
	/**
	* @private
	*/
	renderInto: function (control, parentNode) {
		parentNode.innerHTML = this.generateHtml(control);
		
		if (control.generated) control.rendered();
	},
	
	/**
	* @private
	*/
	renderNode: function (control) {
		this.teardownRender(control);
		control.node = document.createElement(control.tag);
		control.addNodeToParent();
		control.set('generated', true);
	},
	
	/**
	* @private
	*/
	renderDom: function (control) {
		this.renderAttributes(control);
		this.renderStyles(control);
		this.renderContent(control);
	},
	
	/**
	* @private
	*/
	renderStyles: function (control) {
		var style = control.style;
		
		// we can safely do this knowing it will synchronize properly without a double
		// set in the DOM because we're flagging the internal property
		if (control.hasNode()) {
			control.node.style.cssText = style;
			// retrieve the parsed value for synchronization
			control.cssText = style = control.node.style.cssText;
			// now we set it knowing they will be synchronized and everybody that is listening
			// will also be updated to know about the change
			control.set('style', style);
		}
	},
	
	/**
	* @private
	*/
	renderAttributes: function (control) {
		var attrs = control.attributes,
			node = control.hasNode(),
			key,
			val;
		
		if (node) {
			for (key in attrs) {
				val = attrs[key];
				if (val === null || val === false || val === "") {
					node.removeAttribute(key);
				} else {
					node.setAttribute(key, val);
				}
			}
		}
	},
	
	/**
	* @private
	*/
	renderContent: function (control) {
		if (control.generated) this.teardownChildren(control);
		if (control.hasNode()) control.node.innerHTML = this.generateInnerHtml(control);
	},
	
	/**
	* @private
	*/
	generateHtml: function (control) {
		var content,
			html;
		
		if (control.canGenerate === false) {
			return '';
		}
		// do this first in case content generation affects outer html (styles or attributes)
		content = this.generateInnerHtml(control);
		// generate tag, styles, attributes
		html = this.generateOuterHtml(control, content);
		// NOTE: 'generated' is used to gate access to findNodeById in
		// hasNode, because findNodeById is expensive.
		// NOTE: we typically use 'generated' to mean 'created in DOM'
		// but that has not actually happened at this point.
		// We set 'generated = true' here anyway to avoid having to walk the
		// control tree a second time (to set it later).
		// The contract is that insertion in DOM will happen synchronously
		// to generateHtml() and before anybody should be calling hasNode().
		control.set('generated', true);
		return html;
	},
	
	/**
	* @private
	*/
	generateOuterHtml: function (control, content) {
		if (!control.tag) return content;
		if (!control.tagsValid) this.prepareTags(control);
		return control._openTag + content + control._closeTag;
	},
	
	/**
	* @private
	*/
	generateInnerHtml: function (control) {
		var allowHtml = control.allowHtml,
			content;
		
		// flow can alter the way that html content is rendered inside
		// the container regardless of whether there are children.
		control.flow();
		if (control.children.length) return this.generateChildHtml(control);
		else {
			content = control.get('content');
			return allowHtml ? content : Dom.escape(content);
		}
	},
	
	/**
	* @private
	*/
	generateChildHtml: function (control) {
		var child,
			html = '',
			i = 0,
			delegate;
		
		for (; (child = control.children[i]); ++i) {
			delegate = child.renderDelegate || this;
			html += delegate.generateHtml(child);
		}
		
		return html;
	},
	
	/**
	* @private
	*/
	prepareTags: function (control) {
		var html = '';
		
		// open tag
		html += '<' + control.tag + (control.style ? ' style="' + control.style + '"' : '');
		html += this.attributesToHtml(control.attributes);
		if (selfClosing[control.tag]) {
			control._openTag = html + '/>';
			control._closeTag = '';
		} else {
			control._openTag = html + '>';
			control._closeTag = '</' + control.tag + '>';
		}
		
		control.tagsValid = true;
	},
	
	/**
	* @private
	*/
	attributesToHtml: function(attrs) {
		var key,
			val,
			html = '';
			
		for (key in attrs) {
			val = attrs[key];
			if (val != null && val !== false && val !== '') {
				html += ' ' + key + '="' + this.escapeAttribute(val) + '"';
			}
		}
		
		return html;
	},
	
	/**
	* @private
	*/
	escapeAttribute: function (text) {
		if (typeof text != 'string') return text;
	
		return String(text).replace(/&/g, '&amp;').replace(/\"/g, '&quot;');
	},
	
	/**
	* @private
	*/
	teardownRender: function (control, cache) {
		if (control.generated) this.teardownChildren(control, cache);
		control.node = null;
		control.set('generated', false);
	},
	
	/**
	* @private
	*/
	teardownChildren: function (control, cache) {
		var child,
			i = 0;
			
		for (; (child = control.children[i]); ++i) {
			child.teardownRender(cache);
		}
	}
};
},{"../../enyo":12,"./dom":87}],104:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	Dom = require('./dom');

var _baseScreenType = 'standard',
	_riRatio,
	_screenType,
	_screenTypes = [ {name: 'standard', pxPerRem: 16, width: global.innerWidth,  height: global.innerHeight, aspectRatioName: 'standard'} ],	// Assign one sane value in case defineScreenTypes is never run.
	_screenTypeObject;

var getScreenTypeObject = function (type) {
	type = type || _screenType;
	if (type == _screenType && _screenTypeObject) {
		return _screenTypeObject;
	}
	return _screenTypes.filter(function (elem) {
		return (type == elem.name);
	})[0];
};

/**
* @namespace ri
*/
var ri = module.exports = {
	/**
	* Setup screen resolution scaling capabilities by defining all of the screens you're working
	* with. These should be in the order of smallest to largest (according to width). Running
	* this also initializes the rest of this resolution code.
	*
	* In the arguments, the following properties are required: 'name', 'pxPerRem', 'width',
	* 'aspectRatioName'. The property 'base' defines the primary or default resoultion that
	* everything else will be based upon.
	*
	* ```
	* ri.defineScreenTypes([
	* 	{name: 'vga',     pxPerRem: 8,  width: 640,  height: 480,  aspectRatioName: 'standard'},
	* 	{name: 'xga',     pxPerRem: 16, width: 1024, height: 768,  aspectRatioName: 'standard'},
	* 	{name: 'hd',      pxPerRem: 16, width: 1280, height: 720,  aspectRatioName: 'hdtv'},
	* 	{name: 'fhd',     pxPerRem: 24, width: 1920, height: 1080, aspectRatioName: 'hdtv', base: true},
	* 	{name: 'uw-uxga', pxPerRem: 24, width: 2560, height: 1080, aspectRatioName: 'cinema'},
	* 	{name: 'uhd',     pxPerRem: 48, width: 3840, height: 2160, aspectRatioName: 'hdtv'}
	* ]);
	* ```
	*
	* @param {Array} types An array of objects with arguments like the example
	* @public
	*/
	defineScreenTypes: function (types) {
		_screenTypes = types;
		for (var i = 0; i < _screenTypes.length; i++) {
			if (_screenTypes[i]['base']) _baseScreenType = _screenTypes[i].name;
		}
		ri.init();
	},

	/**
	* Fetches the best-matching screen type name for the current screen size. The "best" screen type
	* is determined by the screen type name that is the closest to the screen resolution without
	* going over. ("The Price is Right" style.)
	*
	* @param {Object} [rez] - Optional measurement scheme. Must have "height" and "width" properties.
	* @returns {String} Screen type, like "fhd", "uhd", etc.
	* @public
	*/
	getScreenType: function (rez) {
		rez = rez || {
			height: global.innerHeight,
			width: global.innerWidth
		};
		var i,
			types = _screenTypes,
			bestMatch = types[types.length - 1].name;

		// loop thorugh resolutions
		for (i = types.length - 1; i >= 0; i--) {
			// find the one that matches our current size or is smaller. default to the first.
			if (rez.width <= types[i].width) {
				bestMatch = types[i].name;
			}
		}
		// return the name of the resolution if we find one.
		return bestMatch;
	},

	/**
	* @private
	*/
	updateScreenBodyClasses: function (type) {
		type = type || _screenType;
		if (type) {
			Dom.addBodyClass('enyo-res-' + type.toLowerCase());
			var scrObj = getScreenTypeObject(type);
			if (scrObj.aspectRatioName) {
				Dom.addBodyClass('enyo-aspect-ratio-' + scrObj.aspectRatioName.toLowerCase());
			}
			return type;
		}
	},

	/**
	* @private
	*/
	getRiRatio: function (type) {
		type = type || _screenType;
		if (type) {
			var ratio = this.getUnitToPixelFactors(type) / this.getUnitToPixelFactors(_baseScreenType);
			if (type == _screenType) {
				// cache this if it's for our current screen type.
				_riRatio = ratio;
			}
			return ratio;
		}
		return 1;
	},

	/**
	* @private
	*/
	getUnitToPixelFactors: function (type) {
		type = type || _screenType;
		if (type) {
			return getScreenTypeObject(type).pxPerRem;
		}
		return 1;
	},

	/**
	* Calculates the aspect ratio of the screen type provided. If none is provided the current
	* screen type is used.
	*
	* @param {String} type Screen type to get the aspect ratio of. Providing nothing uses the
	*	current screen type.
	* @returns {Number} The calculated screen ratio (1.333, 1.777, 2.333, etc)
	* @public
	*/
	getAspectRatio: function (type) {
		var scrObj = getScreenTypeObject(type);
		if (scrObj.width && scrObj.height) {
			return (scrObj.width / scrObj.height);
		}
		return 1;
	},

	/**
	* Returns the name of the aspect ration given the screen type or the default screen type if
	* none is proided.
	*
	* @param {String} type Screen type to get the aspect ratio of. Providing nothing uses the
	*	current screen type.
	* @returns {String} The name of the type of screen ratio
	* @public
	*/
	getAspectRatioName: function (type) {
		var scrObj = getScreenTypeObject(type);
		 return scrObj.aspectRatioName || 'standard';
	},

	/**
	* Takes a provided pixel value and preforms a scaling operation on the number based on the
	* current screen type.
	*
	* @param {Number} px The amount of standard-resolution pixels to scale to the current screen
	*	resolution.
	* @returns {Number} The scaled value based on the current screen scaling factor.
	* @public
	*/
	scale: function (px) {
		return (_riRatio || this.getRiRatio()) * px;
	},

	/**
	* The default configurable [options]{@link ri.selectSrc#options}.
	*
	* @typedef {Object} ri.selectSrc~src
	* @property {String} hd - HD / 720p Resolution image asset source URI/URL
	* @property {String} fhd - FHD / 1080p Resolution image asset source URI/URL
	* @property {String} uhd - UHD / 4K Resolution image asset source URI/URL
	*
	* @typedef {String} ri.selectSrc~src - Image asset source URI/URL
	*/

	/**
	* Image src chooser. A simple utility method to select the ideal image asset from a set of
	* assets, based on various screen resolutions: HD (720p), FHD (1080p), UHD (4k). When provided
	* with a src argument, multiResSrc will choose the best image with respect to the current screen
	* resolution. `src` may be either the traditional string, which will pass straight through, or a
	* hash/object of screen types and their asset sources (keys:screen and values:src). The image
	* sources will be used chosen when the screen resolution is less than or equal to the provided
	* screen types.
	*
	* ```
	* // Take advantage of the multi-rez mode
	* {kind: 'moon.Image', src: {
	* 	'hd': 'http://lorempixel.com/64/64/city/1/',
	* 	'fhd': 'http://lorempixel.com/128/128/city/1/',
	* 	'uhd': 'http://lorempixel.com/256/256/city/1/'
	* }, alt: 'Multi-rez'},
	* // Standard string `src`
	* {kind: 'moon.Image', src: http://lorempixel.com/128/128/city/1/', alt: 'Large'},
	* ```
	*
	* @param {(String|moon.ri.selectSrc~src)} src A string containing a single image src or a
	*	key/value hash/object containing keys representing screen types (hd, fhd, uhd, etc) and
	*	values containing the asset src for that target screen resolution.
	* @returns {String} The choosen src given the string or list provided.
	* @public
	*/
	selectSrc: function (src) {
		if (typeof src != 'string' && src) {
			var i, t,
				newSrc = src.fhd || src.uhd || src.hd,
				types = _screenTypes;

			// loop through resolutions
			for (i = types.length - 1; i >= 0; i--) {
				t = types[i].name;
				if (_screenType == t && src[t]) newSrc = src[t];
			}

			src = newSrc;
		}
		return src;
	},

	/**
	* This will need to be re-run any time the screen size changes, so all the values can be
	* re-cached.
	*
	* @public
	*/
	// Later we can wire this up to a screen resize event so it doesn't need to be called manually.
	init: function () {
		_screenType = this.getScreenType();
		_screenTypeObject = getScreenTypeObject();
		this.updateScreenBodyClasses();
		Dom.unitToPixelFactors.rem = this.getUnitToPixelFactors();
		_riRatio = this.getRiRatio();
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./dom":87}],81:[function(require,module,exports){
require('../../enyo');

var
	utils = require('./utils'),
	logger = require('./logger');
var
	Dom = require('./dom');

/**
* This is a [delegate]{@glossary delegate} (strategy) used by {@link enyo.DataList}
* for vertically-oriented lists. This is used by all lists for this strategy; it
* does not get copied, but is called directly from the list.
*
* @name enyo.DataList.delegates.vertical
* @type Object
* @private
*/
module.exports = {

	/**
	* Used to determine the minimum size of the page. The page size will be at least this
	* number of times greater than the viewport size.
	*
	* @type {Number}
	* @default 2
	* @public
	*/
	pageSizeMultiplier: 2,

	/**
	* Sets the priority properties for this orientation, which can then be customized by
	* other [delegates]{@glossary delegate} that wish to share basic functionality.
	*
	* @param {enyo.DataList} list - The [list]{@link enyo.DataList} to perform this action on.
	* @private
	*/
	initList: function (list) {
		list.posProp   = 'top';
		list.upperProp = 'top';
		list.lowerProp = 'bottom';
		list.psizeProp = 'height';
		list.ssizeProp = 'width';
		// set the scroller options
		var so         = list.scrollerOptions? (list.scrollerOptions = utils.clone(list.scrollerOptions)): (list.scrollerOptions = {});
		// this is a datalist...it has to be scroll or auto for vertical
		so.vertical    = so.vertical == 'scroll'? 'scroll': 'auto';
		so.horizontal  = so.horizontal || 'hidden';
		// determine if the _controlsPerPage_ property has been set on the list
		if (list.controlsPerPage !== null && !isNaN(list.controlsPerPage)) {
			list._staticControlsPerPage = true;
		}
	},

	/**
	* @private
	*/
	generate: function (list) {
		for (var i=0, p; (p=list.pages[i]); ++i) {
			this.generatePage(list, p, p.index);
		}
		this.adjustPagePositions(list);
		this.adjustBuffer(list);
	},


	/**
	* Performs a hard reset of the [list's]{@link enyo.DataList} pages and children.
	* Scrolls to the top and resets each page's children to have the correct indices.
	*
	* @param {enyo.DataList} list - The [list]{@link enyo.DataList} to perform this action on.
	* @private
	*/
	reset: function (list) {
		list.$.page1.index = 0;
		list.$.page2.index = 1;
		this.generate(list);
		list.hasReset = true;
		// reset the scroller so it will also start from the 'top' whatever that may
		// be (left/top)
		this.scrollTo(list, 0, 0);
	},

	/**
	* Retrieves [list]{@link enyo.DataList} pages, indexed by their position.
	*
	* @param {enyo.DataList} list - The [list]{@link enyo.DataList} to perform this action on.
	* @returns {Object} Returns a [hash]{@glossary Object} of the pages marked by their
	*	position as either 'firstPage' or 'lastPage'.
	* @private
	*/
	pagesByPosition: function (list) {
		var metrics     = list.metrics.pages,
			pos         = list.pagePositions || (list.pagePositions={}),
			upperProp   = list.upperProp,
			firstIndex  = list.$.page1.index || 0,
			secondIndex = (list.$.page2.index || list.$.page2.index === 0) ? list.$.page2.index : 1;
		pos.firstPage   = (
			metrics[firstIndex] && metrics[secondIndex] &&
			(metrics[secondIndex][upperProp] < metrics[firstIndex][upperProp])
			? list.$.page2
			: list.$.page1
		);
		pos.lastPage = (pos.firstPage === list.$.page1? list.$.page2: list.$.page1);
		return pos;
	},

	/**
	* Refreshes each page in the given [list]{@link enyo.DataList}, adjusting its position
	* and adjusting the buffer accordingly.
	*
	* @param {enyo.DataList} list - The [list]{@link enyo.DataList} to perform this action on.
	* @private
	*/
	refresh: function (list) {
		if (!list.hasReset) { return this.reset(list); }
		this.assignPageIndices(list);
		this.generate(list);
	},

	/**
	* Once the [list]{@link enyo.DataList} is initially rendered, it will generate its
	* [scroller]{@link enyo.Scroller} (so we know that is available). Now we need to
	* cache our initial size values and apply them to our pages individually.
	*
	* @param {enyo.DataList} list - The [list]{@link enyo.DataList} to perform this action on.
	* @private
	*/
	rendered: function (list) {
		if (list.$.scroller.addScrollListener) {
			list.usingScrollListener = true;
			list.$.scroller.addScrollListener(
				utils.bindSafely(this, 'scrollHandler', list)
			);
		}
		// get our initial sizing cached now since we should actually have
		// bounds at this point
		this.updateBounds(list);
		// calc offset of pages to scroller client
		this.calcScrollOffset(list);
		// now if we already have a length then that implies we have a controller
		// and that we have data to render at this point, otherwise we don't
		// want to do any more initialization
		if (list.collection && list.collection.length) { this.reset(list); }
	},
	/**
	* Generates the markup for the page content.
	*
	* @private
	*/
	generatePage: function (list, page, index) {
		// Temporarily add logging code to make it easier for
		// QA and others to detect and report page-index issues
		if (index < 0) {
			logger.warn('Invalid page index: ' + index);
		}
		// in case it hasn't been set we ensure it is marked correctly
		page.index  = index;
			// the collection of data with records to use
		var data    = list.collection,
			// the metrics for the entire list
			metrics = list.metrics,
			// controls per page
			perPage = this.controlsPerPage(list),
			// placeholder for the control we're going to update
			view;

		// the first index for this generated page
		page.start  = perPage * index;
		// the last index for this generated page
		page.end    = Math.min((data.length - 1), (page.start + perPage) - 1);

		// if generating a control we need to use the correct page as the control parent
		list.controlParent = page;
		for (var i=page.start; i <= page.end && i < data.length; ++i) {
			view = (page.children[i - page.start] || list.createComponent({}));
			// disable notifications until all properties to be updated
			// have been
			view.teardownRender();
			view.stopNotifications();
			view.set('model', data.at(i));
			view.set('index', i);
			this.checkSelected(list, view);
			view.set('selected', list.isSelected(view.model));
			view.startNotifications();
			view.canGenerate = true;
		}
		// if there are any controls that need to be hidden we do that now
		for (i=(i-page.start); i < page.children.length; ++i) {
			view = page.children[i];
			view.teardownRender();
			view.canGenerate = false;
		}
		// update the entire page at once - this removes old nodes and updates
		// to the correct ones
		page.render();
		// now to update the metrics
		metrics        = metrics.pages[index] || (metrics.pages[index] = {});
		metrics.height = this.pageHeight(list, page);
		metrics.width  = this.pageWidth(list, page);
		// update the childSize value now that we have measurements
		this.childSize(list);
	},

	/**
	* checks whether the control should have selected set based on selectionProperty
	*
	* @private
	*/
	checkSelected: function (list, view) {
		var s = list.selectionProperty;
		if (s && view.model.get(s) && !list.isSelected(view.model)) {
			list.select(view.index);
			// don't have to check opposite case (model is false and isSelected is true)
			// because that shouldn't happen
		}
	},

	/**
	* Generates a child size for the given [list]{@link enyo.DataList}.
	*
	* @private
	*/
	childSize: function (list) {
		if (!list.fixedChildSize) {
			var pageIndex = list.$.page1.index,
				sizeProp  = list.psizeProp,
				n         = list.$.page1.node || list.$.page1.hasNode(),
				size, props;
			if (pageIndex >= 0 && n) {
				props = list.metrics.pages[pageIndex];
				size  = props? props[sizeProp]: 0;
				list.childSize = Math.floor(size / (n.children.length || 1));
			}
		}
		return list.fixedChildSize || list.childSize || (list.childSize = 100); // we have to start somewhere
	},

	/**
	* Calculates the number of controls required to fill a page. This functionality is broken
	* out of [controlsPerPage]{@link DataList.delegates.vertical#controlsPerPage} so that it
	* can be overridden by delegates that inherit from this one.
	*
	* @private
	*/
	calculateControlsPerPage: function (list) {
		var fn              = this[list.psizeProp],
			multi           = list.pageSizeMultiplier || this.pageSizeMultiplier,
			childSize       = this.childSize(list);

		// using height/width of the available viewport times our multiplier value
		return Math.ceil(((fn.call(this, list) * multi) / childSize) + 1);
	},

	/**
	* When necessary, updates the the value of `controlsPerPage` dynamically to ensure that
	* the page size is always larger than the viewport size. Note that once a
	* [control]{@link enyo.Control} is instanced (if this number increases and then decreases),
	* the number of available controls will be used instead. This method updates the
	* [childSize]{@link enyo.DataList#childSize} and is used internally to calculate other
	* values, such as [defaultPageSize]{@link DataList.delegates.vertical#defaultPageSize}.
	*
	* @private
	*/
	controlsPerPage: function (list, forceUpdate) {
		if (list._staticControlsPerPage) {
			return list.controlsPerPage;
		} else {
			var updatedControls = list._updatedControlsPerPage,
				updatedBounds   = list._updatedBounds,
				perPage         = list.controlsPerPage;
			// if we've never updated the value or it was done longer ago than the most
			// recent updated sizing/bounds we need to update
			if (forceUpdate || !updatedControls || (updatedControls < updatedBounds)) {
				perPage = list.controlsPerPage = this.calculateControlsPerPage(list);
				// update our time for future comparison
				list._updatedControlsPerPage = utils.perfNow();
			}
			return perPage;
		}
	},

	/**
	* Retrieves the page index for the given record index.
	*
	* @private
	*/
	pageForIndex: function (list, i) {
		var perPage = list.controlsPerPage || this.controlsPerPage(list);
		return Math.floor(i / (perPage || 1));
	},

	/**
	* An indirect interface to the list's scroller's scrollToControl()
	* method. We provide this to create looser coupling between the
	* delegate and the list / scroller, and to enable subkinds of the
	* delegate to easily override scrollToControl() functionality to
	* include options specific to the scroller being used.
	*
	* @private
	*/
	scrollToControl: function (list, control) {
		list.$.scroller.scrollToControl(control);
	},

	/**
	* An indirect interface to the list's scroller's scrollTo()
	* method. We provide this to create looser coupling between the
	* delegate and the list / scroller, and to enable subkinds of the
	* delegate to easily override scrollTo() functionality to
	* include options specific to the scroller being used.
	*
	* @private
	*/
	scrollTo: function (list, x, y) {
		list.$.scroller.scrollTo(x, y);
	},

	/**
	* Attempts to scroll to the given index.
	*
	* @param {enyo.DataList} list - The [list]{@link enyo.DataList} to perform this action on.
	* @param {Number} i - The index to scroll to.
	* @private
	*/
	scrollToIndex: function (list, i) {
			// first see if the child is already available to scroll to
		var c = this.childForIndex(list, i),
			// but we also need the page so we can find its position
			p = this.pageForIndex(list, i);
		// if there is no page then the index is bad
		if (p < 0 || p > this.pageCount(list)) { return; }
		// if there isn't one, then we know we need to go ahead and
		// update, otherwise we should be able to use the scroller's
		// own methods to find it
		list.$.scroller.stop();
		if (c) {
			this.scrollToControl(list, c);
		} else {
			// we do this to ensure we trigger the paging event when necessary
			this.resetToPosition(list, this.pagePosition(list, p));
			// now retry the original logic until we have this right
			list.startJob('vertical_delegate_scrollToIndex', function () {
				list.scrollToIndex(i);
			});
		}
	},

	/**
	* Returns the calculated height for the given page.
	*
	* @private
	*/
	pageHeight: function (list, page) {
		var h = page.node.offsetHeight;
		var m = list.metrics.pages[page.index];
		var len = list.collection? list.collection.length: 0;
		if (h === 0 && len && page.node.children.length) {
			list.heightNeedsUpdate = true;
			// attempt to reuse the last known height for this page
			h = m? m.height: 0;
		}
		return h;
	},

	/**
	* Returns the calculated width for the given page.
	*
	* @private
	*/
	pageWidth: function (list, page) {
		var w = page.node.offsetWidth;
		var m = list.metrics.pages[page.index];
		var len = list.collection? list.collection.length: 0;
		if (w === 0 && len && page.node.children.length) {
			list.widthNeedsUpdate = true;
			// attempt to reuse the last known width for this page
			w = m? m.width: 0;
		}
		return w;
	},

	/**
	* Attempts to intelligently decide when to force updates for [models]{@link enyo.Model}
	* being added, if the models are part of any visible pages. For now, an assumption is
	* made that records being added are ordered and sequential.
	*
	* @private
	*/
	modelsAdded: function (list, props) {

		// if the list has not already reset, reset
		if (!list.hasReset) return this.reset(list);

		var cpp = this.controlsPerPage(list),
			end = Math.max(list.$.page1.start, list.$.page2.start) + cpp;

		// note that this will refresh the following scenarios
		// 1. if the dataset was spliced in above the current indices and the last index added was
		//    less than the first index rendered
		// 2. if the dataset was spliced in above the current indices and overlapped some of the
		//    current indices
		// 3. if the dataset was spliced in above the current indices and completely overlapped
		//    the current indices (pushing them all down)
		// 4. if the dataset was spliced inside the current indices (pushing some down)
		// 5. if the dataset was appended to the current dataset and was inside the indices that
		//    should be currently rendered (there was a partially filled page)

		// the only time we don't refresh is if the first index of the contiguous set of added
		// models is beyond our final rendered page (possible) indices

		// in the case where it does not need to refresh the existing controls except the last page
		// if the last page is not fully filled, it will be filled with added models
		// so we should generate the last page.

		// it will update its measurements and page positions within the buffer
		// so scrolling can continue properly

		// if we need to refresh, do it now and ensure that we're properly setup to scroll
		// if we were adding to a partially filled page
		if (props.index <= end ) this.refresh(list);
		else {
			// we should confirm that the page which new models are added is need to update list.metrics
			var lastPageIndex = this.pageForIndex(list, props.index),
				// the last page before model added
				lastPage = list.metrics.pages[lastPageIndex],
				sp = list.psizeProp,
				// current page count after models added
				pc = this.pageCount(list),
				pageSize;

			// if there is more pages after lastPage, the lastPage metric needs to be updated
			if (lastPageIndex < pc) {
				pageSize = this.defaultPageSize(list);
				if (lastPage[sp] < pageSize) {
					lastPage[sp] = pageSize;
				}
			}

			// we still need to ensure that the metrics are updated so it knows it can scroll
			// past the boundaries of the current pages (potentially)
			this.adjustBuffer(list);
			this.adjustPagePositions(list);
		}
	},

	/**
	* Attempts to find the [control]{@link enyo.Control} for the requested index.
	*
	* @private
	*/
	childForIndex: function (list, i) {
		var p  = this.pageForIndex(list, i),
			p1 = list.$.page1,
			p2 = list.$.page2;
		p = (p==p1.index && p1) || (p==p2.index && p2);
		if (p) {
			for (var j=0, c; (c=p.children[j]); ++j) {
				if (c.index == i) {
					return c;
				}
			}
		}
	},

	/**
	* Attempts to intelligently decide when to force updates for [models]{@link enyo.Model}
	* being removed, if the models are part of any visible pages.
	*
	* @private
	*/
	modelsRemoved: function (list, props) {

		// if the list has not already reset, reset
		if (!list.hasReset) return this.reset(list);

		var pg1 = list.$.page1,
			pg2 = list.$.page2,
			lastIdx = Math.max(pg1.end, pg2.end);

		// props.models is removed modelList and the lowest index among removed models
		if (props.models.low <= lastIdx) {
			this.refresh(list);
		}
	},

	/**
	* Recalculates the buffer size based on the current metrics for the given list. This
	* may not be completely accurate until the final page is scrolled into view.
	*
	* @private
	*/
	adjustBuffer: function (list) {
		var pc = this.pageCount(list),
			ds = this.defaultPageSize(list),
			bs = 0, sp = list.psizeProp, ss = list.ssizeProp,
			n = list.$.buffer.node || list.$.buffer.hasNode(), p;
		if (n) {
			if (pc !== 0) {
				for (var i=0; i<pc; ++i) {
					p = list.metrics.pages[i];
					bs += (p && p[sp]) || ds;
				}
			}
			list.bufferSize = bs;
			n.style[sp] = bs + 'px';
			n.style[ss] = this[ss](list) + 'px';
			list.$.scroller.remeasure();
		}
	},

	/**
	* Ensures that the pages are positioned according to their calculated positions,
	* updating if necessary.
	*
	* @private
	*/
	adjustPagePositions: function (list) {
		for (var i=0, p; (p=list.pages[i]); ++i) {
			var pi = p.index,
				cp = this.pagePosition(list, p.index),
				mx = list.metrics.pages[pi] || (list.metrics.pages[pi] = {}),
				pp = list.posProp,
				up = list.upperProp,
				lp = list.lowerProp,
				sp = list.psizeProp;
			p.node.style[pp] = cp + 'px';
			p[up] = mx[up] = cp;
			p[lp] = mx[lp] = (mx[sp] + cp);
		}
		this.setScrollThreshold(list);
	},

	/**
	* Retrieves the assumed position for the requested page index.
	*
	* @private
	*/
	pagePosition: function (list, index) {
		var mx = list.metrics.pages,
			ds = this.defaultPageSize(list),
			tt = 0, sp = list.psizeProp, cp;
		while (index > 0) {
			cp = mx[--index];
			// if the index is > 0 then we need to ensure we have at least
			// the minimum height available so this is a deliberate 'fail-on-zero' case
			tt += (cp && cp[sp]? cp[sp]: ds);
		}
		return tt;
	},

	/**
	* Retrieves the default page size.
	*
	* @private
	*/
	defaultPageSize: function (list) {
		var perPage = list.controlsPerPage || this.controlsPerPage(list);
		return (perPage * (list.fixedChildSize || list.childSize || 100));
	},

	/**
	* Retrieves the number of pages for the given [list]{@link enyo.DataList}.
	*
	* @private
	*/
	pageCount: function (list) {
		var perPage = list.controlsPerPage || this.controlsPerPage(list);
		var len = list.collection? list.collection.length: 0;
		return (Math.ceil(len / (perPage || 1)));
	},

	/**
	* Retrieves the current (and desired) scroll position from the
	* [scroller]{@link enyo.Scroller} for the given list.
	*
	* @private
	*/
	getScrollPosition: function (list) {
		return list.$.scroller.getScrollTop();
	},

	/**
	* Sets the scroll position on the [scroller]{@link enyo.Scroller}
	* owned by the given list.
	*
	* @private
	*/
	setScrollPosition: function (list, pos) {
		list.$.scroller.setScrollTop(pos);
	},

	/**
	* @private
	*/
	scrollHandler: function (list, bounds) {
		var last = this.pageCount(list)-1,
			pos  = this.pagesByPosition(list);
		if ((bounds.xDir === 1 || bounds.yDir === 1) && pos.lastPage.index !== (last)) {
			this.generatePage(list, pos.firstPage, pos.lastPage.index + 1);
			this.adjustPagePositions(list);
			this.adjustBuffer(list);
			// note that the reference to the page positions has been udpated by
			// another method so we trust the actual pages
			list.triggerEvent('paging', {
				start: pos.firstPage.start,
				end: pos.lastPage.end,
				action: 'scroll'
			});
		} else if ((bounds.xDir === -1 || bounds.yDir === -1) && pos.firstPage.index !== 0) {
			this.generatePage(list, pos.lastPage, pos.firstPage.index - 1);
			this.adjustPagePositions(list);
			this.adjustBuffer(list);
			// note that the reference to the page positions has been udpated by
			// another method so we trust the actual pages
			list.triggerEvent('paging', {
				start: pos.firstPage.start,
				end: pos.lastPage.end,
				action: 'scroll'
			});
		}
	},

	/**
	* @private
	*/
	setScrollThreshold: function (list) {
		var threshold = list.scrollThreshold || (list.scrollThreshold={}),
			metrics   = list.metrics.pages,
			pos       = this.pagesByPosition(list),
			firstIdx  = pos.firstPage.index,
			lastIdx   = pos.lastPage.index,
			count     = this.pageCount(list)-1,
			lowerProp = list.lowerProp,
			upperProp = list.upperProp,
			fn        = upperProp == 'top'? this.height: this.width;
		// now to update the properties the scroller will use to determine
		// when we need to be notified of position changes requiring paging
		if (firstIdx === 0) {
			threshold[upperProp] = undefined;
		} else {
			threshold[upperProp] = (metrics[firstIdx][upperProp] + this.childSize(list));
		}
		if (lastIdx >= count) {
			threshold[lowerProp] = undefined;
		} else {
			threshold[lowerProp] = (metrics[lastIdx][lowerProp] - fn.call(this, list) - this.childSize(list));
		}
		if (list.usingScrollListener) {
			list.$.scroller.setScrollThreshold(threshold);
		}
	},

	/**
	* Determines which two pages to generate, based on a
	* specific target scroll position.
	*
	* @private
	*/
	assignPageIndices: function (list, targetPos) {
		var index1, index2, bias,
			pc = this.pageCount(list),
			last = Math.max(0, pc - 1),
			currentPos = this.getScrollPosition(list);

		// If no target position was specified, use the current position
		if (typeof targetPos == 'undefined') {
			targetPos = currentPos;
		}

		// Make sure the target position is in-bounds
		targetPos = Math.max(0, Math.min(targetPos, list.bufferSize));

		// First, we find the target page (the one that covers the target position)
		index1 = Math.floor(targetPos / this.defaultPageSize(list));
		index1 = Math.min(index1, last);

		// Our list always generates two pages worth of content, so -- now that we have
		// our target page -- we need to pick either the preceding page or the following
		// page to generate as well. To help us decide, we first determine how our
		// target position relates to our current position. If we know which direction
		// we're moving in, it's generally better to render the page that lies between
		// our current position and our target position, in case we are about to scroll
		// "lazily" to an element near the edge of our target page. If we don't have any
		// information to work with, we arbitrarily favor the following page.
		bias = (targetPos > currentPos) ? -1 : 1;

		// Now we know everything we need to choose our second page...
		index2 =
			// If our target page is the first page (index == 0), there is no preceding
			// page -- so we choose the following page (index == 1). Note that our
			// our target page will always be (index == 0) if the list is empty or has
			// only one page worth of content. Picking (index == 1) for our second page
			// in these cases is fine, though the page won't contain any elements.
			(index1 === 0) ? 1 :
			// If target page is the last page, there is no following page -- so we choose
			// the preceding page.
			(index1 === last) ? index1 - 1 :
			// In all other cases, we pick a page using our previously determined bias.
			index1 + bias;

		list.$.page1.index = index1;
		list.$.page2.index = index2;
	},

	/**
	* @private
	*/
	resetToPosition: function (list, px) {
		this.assignPageIndices(list, px);
		this.generate(list);
		list.triggerEvent('paging', {
			start: list.$.page1.start,
			end: list.$.page2.end,
			action: 'reset'
		});
	},
	/**
	* Handles scroll [events]{@glossary event} for the given [list]{@link enyo.DataList}.
	* The events themselves aren't helpful, as, depending on the underlying
	* `scrollStrategy`, they have varied information. This is a hefty method, but it is
	* contained to keep from calling too many [functions]{@glossary Function} whenever
	* this event is propagated.
	*
	* @private
	*/
	didScroll: function (list, event) {
		if (!list.usingScrollListener) {
			var threshold = list.scrollThreshold,
				bounds    = event.scrollBounds,
				ds        = this.defaultPageSize(list),
				lowerProp = list.lowerProp,
				upperProp = list.upperProp,
				pos       = bounds[upperProp],
				ut        = threshold[upperProp],
				lt        = threshold[lowerProp];
			if (bounds.xDir === 1 || bounds.yDir === 1) {
				if (!isNaN(lt)) {
					if (pos >= lt) {
						if (pos >= lt + ds) {
							// big jump
							this.resetToPosition(list, pos);
						} else {
							// continuous scrolling
							this.scrollHandler(list, bounds);
						}
					}
				}
			} else if (bounds.yDir === -1 || bounds.xDir === -1) {
				if (!isNaN(ut) && (pos <= ut)) {
					if (pos <= ut) {
						if (pos <= ut - ds) {
							// big jump
							this.resetToPosition(list, pos);
						} else {
							//continuous scrolling
							this.scrollHandler(list, bounds);
						}
					}
				}
			}
		}
	},

	/**
	* The delegate's `resize` event handler.
	*
	* @private
	*/
	didResize: function (list) {
		var prevCPP = list.controlsPerPage;

		list._updateBounds = true;
		this.updateBounds(list);
		// Need to update our controlsPerPage value immediately,
		// before any cached metrics are used
		this.controlsPerPage(list);
		if (prevCPP !== list.controlsPerPage) {
			// since we are now using a different number of controls per page,
			// we need to invalidate our cached page metrics
			list.metrics.pages = {};
		}
		this.resetToPosition(list);
	},

	/**
	* Returns the height for the given [list]{@link enyo.DataList}. This value
	* is cached and reused until the list is resized.
	*
	* @private
	*/
	height: function (list) {
		if (list._updateBounds) { this.updateBounds(list); }
		return list.boundsCache.height;
	},

	/**
	* Returns the width for the given [list]{@link enyo.DataList}. This value
	* is cached and reused until the list is resized.
	*
	* @private
	*/
	width: function (list) {
		if (list._updateBounds) { this.updateBounds(list); }
		return list.boundsCache.width;
	},

	/**
	* Updates the cached values for the sizing of the given list.
	*
	* @private
	*/
	updateBounds: function (list) {
		list.boundsCache    = list.getBounds();
		list._updatedBounds = utils.perfNow();
		list._updateBounds  = false;
	},

	/**
	* Returns the `start` and `end` indices of the visible controls. Partially visible controls
	* are included if the amount visible exceeds the {@link enyo.DataList#visibleThreshold}.
	*
	* @private
	*/
	getVisibleControlRange: function (list) {
		var ret = {
				start: -1,
				end: -1
			},
			posProp = list.posProp,
			sizeProp = list.psizeProp,
			size = this[sizeProp](list),
			scrollPosition = this.getScrollPosition(list),
			pages = list.pages.slice(0).sort(function (a, b) {
				return a.start - b.start;
			}),
			i = 0,
			max = list.collection? list.collection.length - 1 : 0,
			cpp = list.controlsPerPage,
			adjustedScrollPosition, p, bounds, ratio;

		// find the first showing page and estimate the start and end indices
		while ((p = pages[i++])) {
			bounds = p.getBounds();
			bounds.right = list.bufferSize - bounds.left - bounds.width;

			adjustedScrollPosition = scrollPosition - list.scrollPositionOffset;

			if (scrollPosition >= bounds[posProp] && scrollPosition < bounds[posProp] + bounds[sizeProp]) {
				ratio = cpp/bounds[sizeProp];
				ret.start = Math.min(max, Math.max(0, Math.round((adjustedScrollPosition - bounds[posProp])*ratio) + p.start));
				ret.end = Math.min(max, Math.round(size*ratio) + ret.start);
				break;
			}
		}

		ret.start = this.adjustIndex(list, ret.start, p, bounds, adjustedScrollPosition, true);
		ret.end = Math.max(ret.start, this.adjustIndex(list, ret.end, p, bounds, adjustedScrollPosition + size, false));

		return ret;
	},

	/**
	* Calculates the scroll position offset to account for the dimensions of any controls that
	* are within the scroller but precede the pages.
	*
	* @param  {enyo.DataList} list            The instance of enyo.DataList
	* @private
	*/
	calcScrollOffset: function (list) {
		var wrapper = list.pages[0].parent.hasNode(),
			scroller = list.$.scroller.hasNode(),
			posProp = list.posProp,
			position;

		// these should always be truthy in production scenarios but since the nodes aren't
		// actually rendered in mocha, the tests fail so guarding against that.
		if (wrapper && scroller) {
			position = Dom.calcNodePosition(wrapper, scroller);
			list.scrollPositionOffset = position[posProp];
		} else {
			list.scrollPositionOffset = 0;
		}
	},

	/**
	* Refines an estimated `index` to a precise index by evaluating the bounds of the control at
	* the estimated `index` against the visible area and adjusting it up or down based on the
	* actual bounds and the `list`'s {@link enyo.DataList#visibleThreshold}.
	*
	* @param {enyo.DataList} list
	* @param {Number}        index           Estimated index
	* @param {enyo.Control}  page            Page control containing control at `index`
	* @param {Object}        pageBounds      Bounds of `page`
	* @param {Number}        scrollBoundary  Edge of visible area (top, bottom, left, or right)
	* @param {Boolean}       start           `true` for start of boundary (top, right), `false`
	*   for end
	* @private
	*/
	adjustIndex: function (list, index, page, pageBounds, scrollBoundary, start) {
		var dir = start? -1 : 1,
			posProp = list.posProp,
			sizeProp  = list.psizeProp,
			max = list.collection? list.collection.length - 1 : 0,
			last, control, bounds,

			// edge of control
			edge,

			// distance from edge of control to scroll boundary
			dEdge,

			// distance from visible threshold to scroll boundary
			dThresh;

		do {
			control = list.getChildForIndex(index);

			// if index is on a boundary (other than 0) and the control is fully visible, the
			// control at index may not exist if the buffer page hasn't shifted to cover this
			// index range yet. If that's the case, revert to our previous index and stop.
			if (!control) {
				index = last;
				break;
			}

			// account for crossing page boundaries
			if (control.parent != page) {
				page = control.parent;
				pageBounds = page.getBounds();
			}

			bounds = control.getBounds();
			bounds.right = pageBounds.width - bounds.left - bounds.width;

			edge = bounds[posProp] + pageBounds[posProp] + (start? 0 : bounds[sizeProp]);
			dEdge = edge - scrollBoundary;
			dThresh = dEdge - dir*bounds[sizeProp]*(1-list.visibleThreshold)	;

			if ((start && dEdge > 0) || (!start && dEdge < 0)) {
				// control is fully visible
				if (last !== index + dir) {
					last = index;
					index += dir;
				} else {
					// if this control is fully visible but the last was too obscured, use this
					break;
				}
			} else if ((start && dThresh >= 0) || (!start && dThresh <= 0)) {
				// control is partially obscured but enough is visible
				break;
			} else {
				// control is too obscured
				if (last !== index - dir) {
					last = index;
					index -= dir;
				} else {
					// use the last since this is too obscured
					index = last;
					break;
				}
			}

			// guard against selecting an index that is out of bounds
			if (index < 0) {
				index = 0;
				break;
			} else if (index > max) {
				index = max;
				break;
			}
		} while (true);

		return index;
	}
};
},{"../../enyo":12,"./dom":87,"./logger":97,"./utils":106}],96:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	logger = require('./logger'),
	utils = require('./utils');

var defaultCtor = null;

/**
* Creates a JavaScript [constructor]{@glossary constructor} function with
* a prototype defined by `props`. **All constructors must have a unique name.**
*
* `enyo.kind()` makes it easy to build a constructor-with-prototype (like a
* class) that has advanced features like prototype-chaining
* ([inheritance]{@glossary inheritance}).
*
* A plug-in system is included for extending the abilities of the
* [kind]{@glossary kind} generator, and constructors are allowed to
* perform custom operations when subclassed.
*
* If you make changes to `enyo.kind()`, be sure to add or update the appropriate
* [unit tests](@link https://github.com/enyojs/enyo/tree/master/tools/test/core/tests).
*
* For more information, see the documentation on
* [Kinds]{@linkplain $dev-guide/key-concepts/kinds.html} in the Enyo Developer Guide.
*
* @namespace enyo.kind
* @param {Object} props - A [hash]{@glossary Object} of properties used to define and create
*	the [kind]{@glossary kind}
* @public
*/
/*jshint -W120*/
var kind = exports = module.exports = function (props) {
/*jshint +W120*/
	// extract 'name' property
	var name = props.name || '';
	delete props.name;
	// extract 'kind' property
	var hasKind = ('kind' in props);
	var kindName = props.kind;
	delete props.kind;
	// establish base class reference
	var base = constructorForKind(kindName);
	var isa = base && base.prototype || null;
	// if we have an explicit kind property with value undefined, we probably
	// tried to reference a kind that is not yet in scope
	if (hasKind && kindName === undefined || base === undefined) {
		var problem = kindName === undefined ? 'undefined kind' : 'unknown kind (' + kindName + ')';
		throw 'enyo.kind: Attempt to subclass an ' + problem + '. Check dependencies for [' + (name || '<unnamed>') + '].';
	}
	// make a boilerplate constructor
	var ctor = kind.makeCtor();
	// semi-reserved word 'constructor' causes problems with Prototype and IE, so we rename it here
	if (props.hasOwnProperty('constructor')) {
		props._constructor = props.constructor;
		delete props.constructor;
	}
	// create our prototype
	//ctor.prototype = isa ? enyo.delegate(isa) : {};
	utils.setPrototype(ctor, isa ? utils.delegate(isa) : {});
	// there are special cases where a base class has a property
	// that may need to be concatenated with a subclasses implementation
	// as opposed to completely overwriting it...
	kind.concatHandler(ctor, props);

	// put in our props
	utils.mixin(ctor.prototype, props);
	// alias class name as 'kind' in the prototype
	// but we actually only need to set this if a new name was used,
	// not if it is inheriting from a kind anonymously
	if (name) {
		ctor.prototype.kindName = name;
	}
	// this is for anonymous constructors
	else {
		ctor.prototype.kindName = base && base.prototype? base.prototype.kindName: '';
	}
	// cache superclass constructor
	ctor.prototype.base = base;
	// reference our real constructor
	ctor.prototype.ctor = ctor;
	// support pluggable 'features'
	utils.forEach(kind.features, function(fn){ fn(ctor, props); });
	
	if (name) kindCtors[name] = ctor;
	
	return ctor;
};

exports.setDefaultCtor = function (ctor) {
	defaultCtor = ctor;
};

var getDefaultCtor = exports.getDefaultCtor = function () {
	return defaultCtor;
};

/**
* @private
*/
var concatenated = exports.concatenated = [];

/**
* Creates a singleton of a given [kind]{@glossary kind} with a given
* definition. **The `name` property will be the instance name of the singleton
* and must be unique.**
*
* ```javascript
*	enyo.singleton({
*		kind: 'enyo.Control',
*		name: 'app.MySingleton',
*		published: {
*			value: 'foo'
*		},
*		makeSomething: function() {
*			//...
*		}
*	});
*
*	app.MySingleton.makeSomething();
*	app.MySingleton.setValue('bar');
*```
*
* @public
*/
exports.singleton = function (conf, context) {
	// extract 'name' property (the name of our singleton)
	var name = conf.name;
	delete(conf.name);
	// create an unnamed kind and save its constructor's function
	var Kind = kind(conf);
	var inst;
	// create the singleton with the previous name and constructor
	utils.setPath.call(context || global, name, (inst = new Kind()));
	return inst;
};

/**
* @private
*/
kind.makeCtor = function () {
	var enyoConstructor = function () {
		if (!(this instanceof enyoConstructor)) {
			throw 'enyo.kind: constructor called directly, not using "new"';
		}

		// two-pass instantiation
		var result;
		if (this._constructor) {
			// pure construction
			result = this._constructor.apply(this, arguments);
		}
		// defer initialization until entire constructor chain has finished
		if (this.constructed) {
			// post-constructor initialization
			this.constructed.apply(this, arguments);
		}

		if (result) {
			return result;
		}
	};
	return enyoConstructor;
};

/**
* Classes referenced by name may omit this namespace (e.g., "Button" instead of "enyo.Button")
*
* @private
*/
kind.defaultNamespace = 'enyo';

/**
* Feature hooks for the oop system
*
* @private
*/
kind.features = [];

/**
* Used internally by several mechanisms to allow safe and normalized handling for extending a
* [kind's]{@glossary kind} super-methods. It can take a
* [constructor]{@glossary constructor}, a [prototype]{@glossary Object.prototype}, or an
* instance.
*
* @private
*/
kind.extendMethods = function (ctor, props, add) {
	var proto = ctor.prototype || ctor,
		b = proto.base;
	if (!proto.inherited && b) {
		proto.inherited = kind.inherited;
	}
	// rename constructor to _constructor to work around IE8/Prototype problems
	if (props.hasOwnProperty('constructor')) {
		props._constructor = props.constructor;
		delete props.constructor;
	}
	// decorate function properties to support inherited (do this ex post facto so that
	// ctor.prototype is known, relies on elements in props being copied by reference)
	for (var n in props) {
		var p = props[n];
		if (isInherited(p)) {
			// ensure that if there isn't actually a super method to call, it won't
			// fail miserably - while this shouldn't happen often, it is a sanity
			// check for mixin-extensions for kinds
			if (add) {
				p = proto[n] = p.fn(proto[n] || utils.nop);
			} else {
				p = proto[n] = p.fn(b? (b.prototype[n] || utils.nop): utils.nop);
			}
		}
		if (utils.isFunction(p)) {
			if (add) {
				proto[n] = p;
				p.displayName = n + '()';
			} else {
				p._inherited = b? b.prototype[n]: null;
				// FIXME: we used to need some extra values for inherited, then inherited got cleaner
				// but in the meantime we used these values to support logging in Object.
				// For now we support this legacy situation, by suppling logging information here.
				p.displayName = proto.kindName + '.' + n + '()';
			}
		}
	}
};
kind.features.push(kind.extendMethods);

/**
* Called by {@link enyo.Object} instances attempting to access super-methods
* of a parent class ([kind]{@glossary kind}) by calling
* `this.inherited(arguments)` from within a kind method. This can only be done
* safely when there is known to be a super class with the same method.
*
* @private
*/
kind.inherited = function (originals, replacements) {
	// one-off methods are the fast track
	var target = originals.callee;
	var fn = target._inherited;

	// regardless of how we got here, just ensure we actually
	// have a function to call or else we throw a console
	// warning to notify developers they are calling a
	// super method that doesn't exist
	if ('function' === typeof fn) {
		var args = originals;
		if (replacements) {
			// combine the two arrays, with the replacements taking the first
			// set of arguments, and originals filling up the rest.
			args = [];
			var i = 0, l = replacements.length;
			for (; i < l; ++i) {
				args[i] = replacements[i];
			}
			l = originals.length;
			for (; i < l; ++i) {
				args[i] = originals[i];
			}
		}
		return fn.apply(this, args);
	} else {
		logger.warn('enyo.kind.inherited: unable to find requested ' +
			'super-method from -> ' + originals.callee.displayName + ' in ' + this.kindName);
	}
};

// dcl inspired super-inheritance

/**
* @private
*/
var Inherited = function (fn) {
	this.fn = fn;
};

/**
* When defining a method that overrides an existing method in a [kind]{@glossary kind}, you
* can wrap the definition in this function and it will decorate it appropriately for inheritance
* to work.
*
* The older `this.inherited(arguments)` method still works, but this version results in much
* faster code and is the only one supported for kind [mixins]{@glossary mixin}.
*
* @param {Function} fn - A [function]{@glossary Function} that takes a single
*   argument (usually named `sup`) and returns a function where
*   `sup.apply(this, arguments)` is used as a mechanism to make the
*   super-call.
* @public
*/
exports.inherit = function (fn) {
	return new Inherited(fn);
};

/**
* @private
*/
var isInherited = exports.isInherited = function (fn) {
	return fn && (fn instanceof Inherited);
};


//
// 'statics' feature
//
kind.features.push(function(ctor, props) {
	// install common statics
	if (!ctor.subclass) {
		ctor.subclass = kind.statics.subclass;
	}
	if (!ctor.extend) {
		ctor.extend = kind.statics.extend;
	}
	// move props statics to constructor
	if (props.statics) {
		utils.mixin(ctor, props.statics);
		delete ctor.prototype.statics;
	}
	// also support protectedStatics which won't interfere with defer
	if (props.protectedStatics) {
		utils.mixin(ctor, props.protectedStatics);
		delete ctor.prototype.protectedStatics;
	}
	// allow superclass customization
	var base = ctor.prototype.base;
	while (base) {
		base.subclass(ctor, props);
		base = base.prototype.base;
	}
});

/**
* @private
*/
kind.statics = {

	/**
	* A [kind]{@glossary kind} may set its own `subclass()` method as a
	* static method for its [constructor]{@glossary constructor}. Whenever
	* it is subclassed, the constructor and properties will be passed through
	* this method for special handling of important features.
	*
	* @param {Function} ctor - The [constructor]{@glossary constructor} of the
	*	[kind]{@glossary kind} being subclassed.
	* @param {Object} props - The properties of the kind being subclassed.
	* @memberof enyo.kind
	* @public
	*/
	subclass: function (ctor, props) {},

	/**
	* Allows for extension of the current [kind]{@glossary kind} without
	* creating a new kind. This method is available on all
	* [constructors]{@glossary constructor}, although calling it on a
	* [deferred]{@glossary deferred} constructor will force it to be
	* resolved at that time. This method does not re-run the
	* {@link enyo.kind.features} against the constructor or instance.
	*
	* @param {Object|Object[]} props A [hash]{@glossary Object} or [array]{@glossary Array}
	*	of [hashes]{@glossary Object}. Properties will override
	*	[prototype]{@glossary Object.prototype} properties. If a
	*	method that is being added already exists, the new method will
	*	supersede the existing one. The method may call
	*	`this.inherited()` or be wrapped with `kind.inherit()` to call
	*	the original method (this chains multiple methods tied to a
	*	single [kind]{@glossary kind}).
	* @param {Object} [target] - The instance to be extended. If this is not specified, then the
	*	[constructor]{@glossary constructor} of the
	*	[object]{@glossary Object} this method is being called on will
	*	be extended.
	* @returns {Object} The constructor of the class, or specific
	*	instance, that has been extended.
	* @memberof enyo.kind
	* @public
	*/
	extend: function (props, target) {
		var ctor = this
			, exts = utils.isArray(props)? props: [props]
			, proto, fn;

		fn = function (key, value) {
			return !(typeof value == 'function' || isInherited(value)) && concatenated.indexOf(key) === -1;
		};

		proto = target || ctor.prototype;
		for (var i=0, ext; (ext=exts[i]); ++i) {
			concatHandler(proto, ext, true);
			kind.extendMethods(proto, ext, true);
			utils.mixin(proto, ext, {filter: fn});
		}

		return target || ctor;
	}
};

/**
* @private
*/
var concatHandler = exports.concatHandler = function (ctor, props, instance) {
	var proto = ctor.prototype || ctor
		, base = proto.ctor;

	while (base) {
		if (base.concat) base.concat(ctor, props, instance);
		base = base.prototype.base;
	}
};

/**
* Factory for [kinds]{@glossary kind} identified by [strings]{@glossary String}.
*
* @private
*/
var kindCtors = exports._kindCtors = {};

/**
* @private
*/
var constructorForKind = exports.constructorForKind = function (kind) {
	if (kind === null) {
		return kind;
	} else if (kind === undefined) {
		return getDefaultCtor();
	}
	else if (utils.isFunction(kind)) {
		return kind;
	}

	// use memoized constructor if available...
	var ctor = kindCtors[kind];
	if (ctor) {
		return ctor;
	}
	// otherwise look it up and memoize what we find
	//
	// if kind is an object in enyo, say "Control", then ctor = enyo["Control"]
	// if kind is a path under enyo, say "Heritage.Button", then ctor = enyo["Heritage.Button"] || enyo.Heritage.Button
	// if kind is a fully qualified path, say "enyo.Heritage.Button", then ctor = enyo["enyo.Heritage.Button"] || enyo.enyo.Heritage.Button || enyo.Heritage.Button
	//
	// Note that kind "Foo" will resolve to enyo.Foo before resolving to global "Foo".
	// This is important so "Image" will map to built-in Image object, instead of enyo.Image control.
	ctor = Theme[kind] || (global.enyo && global.enyo[kind]) || utils.getPath.call(global, 'enyo.' + kind) || global[kind] || utils.getPath.call(global, kind);

	// If what we found at this namespace isn't a function, it's definitely not a kind constructor
	if (!utils.isFunction(ctor)) {
		throw '[' + kind + '] is not the name of a valid kind.';
	}
	kindCtors[kind] = ctor;
	return ctor;
};

/**
* Namespace for current theme (`enyo.Theme.Button` references the Button specialization for the
* current theme).
*
* @private
*/
var Theme = exports.Theme = {};

/**
* @private
*/
exports.registerTheme = function (ns) {
	utils.mixin(Theme, ns);
};

/**
* @private
*/
exports.createFromKind = function (nom, param) {
	var Ctor = nom && constructorForKind(nom);
	if (Ctor) {
		return new Ctor(param);
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./logger":97,"./utils":106}],205:[function(require,module,exports){
var
	ri = require('../../enyo/lib/resolution');

ri.defineScreenTypes([
	{name: 'hd',      pxPerRem: 16, width: 1280, height: 720,  aspectRatioName: 'hdtv'},
	{name: 'fhd',     pxPerRem: 24, width: 1920, height: 1080, aspectRatioName: 'hdtv', base: true},
	{name: 'uw-uxga', pxPerRem: 24, width: 2560, height: 1080, aspectRatioName: 'cinema'},
	{name: 'uhd',     pxPerRem: 48, width: 3840, height: 2160, aspectRatioName: 'hdtv'}
]);

module.exports = ri;
},{"../../enyo/lib/resolution":104}],16:[function(require,module,exports){
require('../../enyo');

var kind = require('./kind');

/**
* An internally-used support {@glossary mixin} that is applied to all
* [components]{@link enyo.Component} of an {@link enyo.Application} instance
* (and to their components, recursively). This mixin adds an `app` property to
* each component--a local reference to the `enyo.Application` instance that
* the component belongs to.
* 
* @mixin enyo.ApplicationSupport
* @protected
*/
module.exports = {

	/**
	* @private
	*/
	name: 'ApplicationSupport',

	/**
	* @private
	*/
	adjustComponentProps: kind.inherit(function (sup) {
		return function (props) {
			props.app = props.app || this.app;
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			// release the reference to the application
			this.app = null;
			sup.apply(this, arguments);
		};
	})

};
},{"../../enyo":12,"./kind":96}],18:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

/**
* All {@link enyo.Binding} instances are stored in this list and may be retrieved via the
* {@link enyo.Binding.find} method using an {@link enyo.Binding#id} identifier.
*
* @name enyo.bindings
* @public
*/
var bindings = [];

var DIRTY_FROM = 0x01
	, DIRTY_TO = 0x02;

/**
* Used to determine if an {@link enyo.Binding} is actually ready.
*
* @private
*/
function ready (binding) {
	var rdy = binding.ready;
	
	if (!rdy) {
		
		var from = binding.from || '',
			to = binding.to || '',
			source = binding.source,
			target = binding.target,
			owner = binding.owner,
			twoWay = !binding.oneWay,
			toTarget;
		
		if (typeof from != 'string') from = '';
		if (typeof to != 'string') to = '';
		
		if (!source) {
			
			// the worst case scenario here is for backward compatibility purposes
			// we have to at least be able to derive the source via the from string
			if (from[0] == '^') {
				
				// this means we're reaching for a global
				var fromParts = from.split('.');
				from = fromParts.pop();
				source = utils.getPath.call(global, fromParts.join('.').slice(1));
				
			} else {
				source = owner;
			}
			
		}
		
		if (!target) {
			
			// same worst case as above, for backwards compatibility purposes
			// we have to at least be able to derive the target via the to string
			if (to[0] == '^') {
				
				// this means we're reaching for a global
				var toParts = to.split('.');
				to = toParts.pop();
				target = utils.getPath.call(global, toParts.join('.').slice(1));
			} else {
				target = owner;
			}
		}
		
		// we do this so we don't overwrite the originals in case we need to reset later
		binding._target = target;
		binding._source = source;
		binding._from = from[0] == '.'? from.slice(1): from;
		binding._to = to[0] == '.'? to.slice(1): to;
		
		if (!twoWay) {
			toTarget = binding._to.split('.');
			if (toTarget.length > 2) {
				toTarget.pop();
				binding._toTarget = toTarget.join('.');
			}
		}
		
		// now our sanitization
		rdy = !! (
			(source && (typeof source == 'object')) &&
			(target && (typeof target == 'object')) &&
			(from) &&
			(to)
		);
	}
	
	/*jshint -W093 */
	return (binding.ready = rdy);
	/*jshint +W093 */
}

/**
* The details for an {@link enyo.Binding#transform} [function]{@glossary Function}, 
* including the available parameters and how they can be used.
* 
* @callback enyo.Binding~Transform
* @param {*} value - The value being synchronized.
* @param {Number} direction - The direction of synchronization; will be either
* 	1 (source value has changed and will be written to target) or 2 (target
* 	value has changed and will be written to source).
* @param {Object} binding - A reference to the associated [binding]{@link enyo.Binding}. In cases 
* 	where the binding should be interrupted and not propagate the synchronization at all, call
* 	the [stop()]{@link enyo.Binding#stop} method on the passed-in binding reference.
*/

/**
* {@link enyo.Binding} is a mechanism used to keep properties synchronized. A 
* binding may be used to link two properties on different
* [objects]{@glossary Object}, or even two properties on the same object.
* Once a binding has been established, it will wait for change notifications;
* when a notification arrives, the binding will synchronize the value between
* the two ends. Note that bindings may be either
* [one-way]{@link enyo.Binding#oneWay} (the default) or
* [two-way]{@link enyo.Binding#oneWay}.
* 
* Usually, you will not need to create Binding objects arbitrarily, but will
* instead rely on the public [BindingSupport API]{@link enyo.BindingSupport},
* which is applied to [enyo.Object]{@link enyo.Object} and so is available on
* all of its [subkinds]{@glossary subkind}.
* 
* @class enyo.Binding
* @public
*/
var Binding = module.exports = kind(
	/** @lends enyo.Binding.prototype */ {
	
	name: 'enyo.Binding',
	
	/**
	* @private
	*/
	kind: null,
	
	/**
	* @private
	*/

	
	/**
	* If a [binding]{@link enyo.Binding} is one-way, this flag should be `true` (the default). 
	* If this flag is set to `false`, the binding will be two-way.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	oneWay: true,
	
	/**
	* If the [binding]{@link enyo.Binding} was able to resolve both ends (i.e., its 
	* [source]{@link enyo.Binding#source} and [target]{@link enyo.Binding#target} 
	* [objects]{@glossary Object}), this value will be `true`. Setting this manually will
	* have undesirable effects.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	connected: false,
	
	/**
	* This property is used extensively for various purposes within a
	* [binding]{@link enyo.Binding}. One primary purpose is to serve as a root
	* [object]{@glossary Object} from which to	search for the binding's ends (the
	* [source]{@link enyo.Binding#source} and/or [target]{@link enyo.Binding#target}).
	* If the owner created the binding, it will also be responsible for destroying 
	* it (automatically).
	*
	* @type {enyo.Object}
	* @default null
	* @public
	*/
	owner: null,
	
	/**
	* By default, a [binding]{@link enyo.Binding} will attempt to connect to both ends 
	* ([source]{@link enyo.Binding#source} and [target]{@link enyo.Binding#target}). If this 
	* process should be deferred, set this flag to `false`.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	autoConnect: true,
	
	/**
	* By default, a [binding]{@link enyo.Binding} will attempt to synchronize its values from 
	* its [source]{@link enyo.Binding#source} to its [target]{@link enyo.Binding#target}. If 
	* this process should be deferred, set this flag to `false`.
	* 
	* @type {Boolean}
	* @default true
	* @public
	*/
	autoSync: true,
	
	/**
	* Set this only to a reference for an [object]{@glossary Object} to use
	* as the source for the [binding]{@link enyo.Binding}. If this is not a
	* [bindable]{@link enyo.BindingSupport} object, the source will be derived
	* from the [from]{@link enyo.Binding#from} property during initialization.
	* 
	* @type {Object}
	* @default null
	* @public
	*/
	source: null,
	
	/**
	* Set this only to a reference for an [object]{@glossary Object} to use
	* as the target for the [binding]{@link enyo.Binding}. If this is not a
	* [bindable]{@link enyo.BindingSupport} object, the target will will be
	* derived from the [to]{@link enyo.Binding#to} property during initialization.
	* 
	* @type {Object}
	* @default null
	* @public
	*/
	target: null,
	
	/**
	* A path in which the property of the [source]{@link enyo.Binding#source} to
	* bind from may be found. If the source is explicitly provided and the path
	* is relative (i.e., it begins with a `"."`), it is relative to the source;
	* otherwise, it is relative to the [owner]{@link enyo.Binding#owner} of the
	* [binding]{@link enyo.Binding}. To have a binding be evaluated from the
	* global scope, prefix the path with a `"^"`. If the source and the `"^"`
	* are used in tandem, the `"^"` will be ignored and the path will be assumed
	* to be relative to the provided source.
	* 
	* @type {String}
	* @default null
	* @public
	*/
	from: null,
	
	/**
	* The `dirty` property represents the changed value state of both the property designated by
	* the [from]{@link enyo.Binding#from} path and the property designated by the 
	* [to]{@link enyo.Binding#to} path.
	*
	* @type {Number}
	* @default enyo.Binding.DIRTY_FROM
	* @public
	*/
	dirty: DIRTY_FROM,
	
	/**
	* A path in which the property of the [target]{@link enyo.Binding#target} to
	* bind from may be found. If the target is explicitly provided and the path
	* is relative (i.e., it begins with a `"."`), it is relative to the target;
	* otherwise, it is relative to the owner of the [binding]{@link enyo.Binding}.
	* To have a binding be evaluated from the global scope, prefix the path with
	* a `"^"`. If the target and the `"^"` are used in tandem, the `"^"` will be
	* ignored and the path will be assumed to be relative to the provided target.
	* 
	* @type {String}
	* @default null
	* @public
	*/
	to: null,

	/**
	* Set this to a [function]{@glossary Function} or the name of a method on
	* the [owner]{@link enyo.Binding#owner} of this [binding]{@link enyo.Binding}.
	* The transform is used to programmatically modify the value being synchronized.
	* See {@link enyo.Binding~Transform} for detailed information on the parameters
	* that are available to `transform`.
	* 
	* @type {enyo.Binding~Transform}
	* @default null
	* @public
	*/
	transform: null,
	
	/**
	* Indicates whether the [binding]{@link enyo.Binding} is currently connected.
	*
	* @returns {Boolean} `true` if connected; otherwise, `false`.
	* @public
	*/
	isConnected: function () {
		var from = this._from,
			to = this.oneWay ? (this._toTarget || this._to) : this._to,
			source = this._source,
			target = this._target,
			toChain,
			fromChain;
			
		if (from && to && source && target) {
			if (!this.oneWay || this._toTarget) toChain = target.getChains()[to];
			fromChain = source.getChains()[from];
			
			return this.connected
				&& (fromChain ? fromChain.isConnected() : true)
				&& (toChain ? toChain.isConnected() : true);
		}
		
		return false;
	},
	
	/**
	* Causes a single propagation attempt to fail. Typically not called outside
	* the scope of a [transform]{@link enyo.Binding#transform}.
	* 
	* @public
	*/
	stop: function () {
		this._stop = true;
	},
	
	/**
	* Indicates whether the [binding]{@link enyo.Binding} is actually ready.
	* 
	* @returns {Boolean} `true` if ready; otherwise, `false`.
	* @public
	*/
	isReady: function () {
		return this.ready || ready(this);
	},
	
	/**
	* Resets all properties to their original state.
	* 
	* @returns {this} The callee for chaining.
	* @public
	*/
	reset: function () {
		this.disconnect();
		this.ready = null;
		this._source = this._target = this._to = this._from = this._toTarget = null;
		return this;
	},
	
	/**
	* Rebuilds the entire [binding]{@link enyo.Binding}. Will synchronize if it is able to 
	* connect and the [autoSync]{@link enyo.Binding#autoSync} flag is `true`.
	* 
	* @returns {this} The callee for chaining.
	* @public
	*/
	rebuild: function () {
		return this.reset().connect();
	},
	
	/**
	* Connects the ends (i.e., the [source]{@link enyo.Binding#source} and
	* [target]{@link enyo.Binding#target}) of the [binding]{@link enyo.Binding}. While you
	* typically won't need to call this method, it is safe to call even when the ends are
	* already established. Note that if one or both of the ends does become connected and the
	* [autoSync]{@link enyo.Binding#autoSync} flag is `true`, the ends will automatically be
	* synchronized.
	* 
	* @returns {this} The callee for chaining.
	* @public
	*/
	connect: function () {
		if (!this.isConnected()) {
			if (this.isReady()) {
				this._source.observe(this._from, this._sourceChanged, this, {priority: true});
				
				// for two-way bindings we register to observe changes
				// from the target
				if (!this.oneWay) this._target.observe(this._to, this._targetChanged, this);
				else if (this._toTarget) {
					this._target.observe(this._toTarget, this._toTargetChanged, this, {priority: true});
				}
				
				// we flag it as having been connected
				this.connected = true;
				if (this.isConnected() && this.autoSync) this.sync(true);
			}
		}
		
		return this;
	},
	
	/**
	* Disconnects from the ends (i.e., the [source]{@link enyo.Binding#source} and 
	* [target]{@link enyo.Binding#target}) if a connection exists at either end. This method 
	* will most likely not need to be called directly.
	* 
	* @returns {this} The callee for chaining.
	* @public
	*/
	disconnect: function () {
		if (this.isConnected()) {
			this._source.unobserve(this._from, this._sourceChanged, this);
			
			// for two-way bindings we unregister the observer from
			// the target as well
			if (!this.oneWay) this._target.unobserve(this._to, this._targetChanged, this);
			else if (this._toTarget) {
				this._target.unobserve(this._toTarget, this._toTargetChanged, this);
			}
			
			this.connected = false;
		}
		
		return this;
	},
	
	/**
	* Synchronizes values from the [source]{@link enyo.Binding#source} to the
	* [target]{@link enyo.Binding#target}. This usually will not need to be called manually.
	* [Two-way bindings]{@link enyo.Binding#oneWay} will automatically synchronize from the
	* target end once they are connected.
	* 
	* @returns {this} The callee for chaining.
	* @public
	*/
	sync: function (force) {
		var source = this._source,
			target = this._target,
			from = this._from,
			to = this._to,
			xform = this.getTransform(),
			val;
		
		if (this.isReady() && this.isConnected()) {
				
			switch (this.dirty || (force && DIRTY_FROM)) {
			case DIRTY_TO:
				val = target.get(to);
				if (xform) val = xform.call(this.owner || this, val, DIRTY_TO, this);
				if (!this._stop) source.set(from, val, {create: false});
				break;
			case DIRTY_FROM:
				
			// @TODO: This should never need to happen but is here just in case
			// it is ever arbitrarily called not having been dirty?
			// default:
				val = source.get(from);
				if (xform) val = xform.call(this.owner || this, val, DIRTY_FROM, this);
				if (!this._stop) target.set(to, val, {create: false});
				break;
			}
			this.dirty = null;
			this._stop = null;
		}
		
		return this;
	},
	
	/**
	* Releases all of the [binding's]{@link enyo.Binding} parts and unregisters its 
	* [observers]{@link enyo.ObserverSupport}. Typically, this method will not need to be called 
	* directly unless the binding was created without an [owner]{@link enyo.Binding#owner}.
	* 
	* @returns {this} The callee for chaining.
	* @public
	*/
	destroy: function () {
		var owner = this.owner,
			idx;
		
		this.disconnect();
		this.owner = null;
		this.source = this._source = null;
		this.target = this._target = null;
		this.ready = null;
		this.destroyed = true;
		
		// @todo: remove me or postpone operation?
		idx = bindings.indexOf(this);
		if (idx > -1) bindings.splice(idx, 1);
		
		if (owner && !owner.destroyed) owner.removeBinding(this);
		
		return this;
	},
	
	/**
	* @private
	*/
	getTransform: function () {
		return this._didInitTransform ? this.transform : (function (bnd) {
			bnd._didInitTransform = true;
			
			var xform = bnd.transform,
				owner = bnd.owner,
				xformOwner = owner && owner.bindingTransformOwner;
			
			if (xform) {
				if (typeof xform == 'string') {
					if (xformOwner && xformOwner[xform]) {
						xform = xformOwner[xform];
					} else if (owner && owner[xform]) {
						xform = owner[xform];
					} else {
						xform = utils.getPath.call(global, xform);
					}
				}
				
				/*jshint -W093 */
				return (bnd.transform = (typeof xform == 'function' ? xform : null));
				/*jshint +W093 */
			}
		})(this);
	},
	
	/**
	* @private
	*/
	constructor: function (props) {
		bindings.push(this);
		
		if (props) utils.mixin(this, props);
		
		if (!this.euid) this.euid = utils.uid('b');
		if (this.autoConnect) this.connect();
	},
	
	/**
	* @private
	*/
	_sourceChanged: function (was, is, path) {
		// @TODO: Should it...would it benefit from using these passed in values?
		this.dirty = this.dirty == DIRTY_TO ? null : DIRTY_FROM;
		return this.dirty == DIRTY_FROM && this.sync();
	},
	
	/**
	* @private
	*/
	_targetChanged: function (was, is, path) {
		// @TODO: Same question as above, it seems useful but would it affect computed
		// properties or stale values?
		this.dirty = this.dirty == DIRTY_FROM ? null : DIRTY_TO;
		return this.dirty == DIRTY_TO && this.sync();
	},
	
	/**
	* @private
	*/
	_toTargetChanged: function (was, is, path) {
		this.dirty = DIRTY_FROM;
		this.reset().connect();
	}
});

/**
* Retrieves a [binding]{@link enyo.Binding} by its global id.
*
* @param {String} euid - The [Enyo global id]{@glossary EUID} by which to retrieve a 
*	[binding]{@link enyo.Binding}.
* @returns {enyo.Binding|undefined} A reference to the binding if the id 
*	is found; otherwise, it will return [undefined]{@glossary undefined}.
* 
* @static
* @public
*/
Binding.find = function (euid) {
	return bindings.find(function (ln) {
		return ln.euid == euid;
	});
};

Binding.bindings = bindings;

/**
* Possible value of the [dirty]{@link enyo.Binding#dirty} property, indicating that the value 
* of the [binding source]{@link enyo.Binding#source} has changed.
* 
* @static
* @public
BindingB.DindingIRTY_FROM = DIRTY_FROM;

/**
* Possible value of the [dirty]{@link enyo.Binding#dirty} property, indicating that the value
* of the [binding target]{@link enyo.Binding#target} has changed.
* 
* @static
* @public
*/
Binding.DIRTY_TO = DIRTY_TO;

/**
* The default [kind]{@glossary kind} that provides [binding]{@link enyo.Binding} 
* functionality.
* 
* static
* public
*/
Binding.defaultBindingKind = Binding;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./kind":96,"./utils":106}],24:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

/**
* An internally-used {@glossary mixin} applied to {@link enyo.Component}
* instances to better support [bindings]{@link enyo.Binding}.
*
* @mixin enyo.ComponentBindingSupport
* @protected
*/
module.exports = {
	
	/**
	* @private
	*/
	name: 'ComponentBindingSupport',
	
	/**
	* @private
	*/
	adjustComponentProps: kind.inherit(function (sup) {
		return function (props) {
			sup.apply(this, arguments);
			props.bindingTransformOwner || (props.bindingTransformOwner = this.getInstanceOwner());
		};
	})
};
},{"../../enyo":12,"./kind":96}],25:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var extend = kind.statics.extend;
	
kind.concatenated.push('computed');

/**
* @private
*/
function getComputedValue (obj, path) {
	var cache = obj._getComputedCache(path)
		, isCached = obj._isComputedCached(path);
	
	// in the end, for efficiency and completeness in other situations
	// it is better to know the returned value of all computed properties
	// but in cases where they are set as cached we will sometimes use
	// that value
	if (cache.dirty || cache.dirty === undefined) {
		isCached && (cache.dirty = false);
		cache.previous = cache.value;
		cache.value = obj[path]();
	}
	
	return cache.value;
}

/**
* @private
*/
function queueComputed (obj, path) {
	var queue = obj._computedQueue || (obj._computedQueue = [])
		, deps = obj._computedDependencies[path];
		
	if (deps) {
		for (var i=0, dep; (dep=deps[i]); ++i) {
			if (!queue.length || -1 == queue.indexOf(dep)) queue.push(dep);
		}
	}
}

/**
* @private
*/
function flushComputed (obj) {
	var queue = obj._computedQueue;
	obj._computedQueue = null;
	if (queue && obj.isObserving()) {
		for (var i=0, ln; (ln=queue[i]); ++i) {
			obj.notify(ln, obj._getComputedCache(ln).value, getComputedValue(obj, ln));
		}
	}
}

/**
* A {@glossary mixin} that adds API methods to support
* [computed properties]{@glossary "computed property"}. Unlike other support mixins,
* this mixin does not need to be explicitly included by a [kind]{@glossary kind}. If the
* `computed` [array]{@glossary Array} is found in a kind definition, this mixin will
* automatically be included.
*
* @mixin enyo.ComputedSupport
* @public
*/
var ComputedSupport = module.exports = {
	
	/**
	* @private
	*/
	name: 'ComputedSupport',
	
	/**
	* @private
	*/
	_computedRecursion: 0,
	
	/**
	* Primarily intended for internal use, this method determines whether the
	* given path is a known [computed property]{@glossary "computed property"}.
	*
	* @param {String} path - The property or path to test.
	* @returns {Boolean} Whether or not the `path` is a
	*	[computed property]{@glossary "computed property"}.
	* @public
	*/
	isComputed: function (path) {
		// if it exists it will be explicitly one of these cases and it is cheaper than hasOwnProperty
		return this._computed && (this._computed[path] === true || this._computed[path] === false);
	},
	
	/**
	* Primarily intended for internal use, this method determines whether the
	* given path is a known dependency of a
	* [computed property]{@glossary "computed property"}.
	*
	* @param {String} path - The property or path to test.
	* @returns {Boolean} Whether or not the `path` is a dependency of a
	*	[computed property]{@glossary "computed property"}.
	* @public
	*/
	isComputedDependency: function (path) {
		return !! (this._computedDependencies? this._computedDependencies[path]: false);
	},
	
	/**
	* @private
	*/
	get: kind.inherit(function (sup) {
		return function (path) {
			return this.isComputed(path)? getComputedValue(this, path): sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	set: kind.inherit(function (sup) {
		return function (path) {
			// we do not accept parameters for computed properties
			return this.isComputed(path)? this: sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	notifyObservers: function () {
		return this.notify.apply(this, arguments);
	},
	
	/**
	* @private
	*/
	notify: kind.inherit(function (sup) {
		return function (path, was, is) {
			this.isComputedDependency(path) && queueComputed(this, path);
			this._computedRecursion++;
			sup.apply(this, arguments);
			this._computedRecursion--;
			this._computedQueue && this._computedRecursion === 0 && flushComputed(this);
			return this;
		};
	}),
	
	/**
	* @private
	*/
	_isComputedCached: function (path) {
		return this._computed[path];
	},
	
	/**
	* @private
	*/
	_getComputedCache: function (path) {
		var cache = this._computedCache || (this._computedCache = {});
		return cache[path] || (cache[path] = {});
	}
};


/**
* Hijack the original so we can add additional default behavior.
*/
var sup = kind.concatHandler;

// @NOTE: It seems like a lot of work but it really won't happen that much and the more
// we push to kind-time the better for initialization time

/**
* @private
*/
kind.concatHandler = function (ctor, props, instance) {

	sup.call(this, ctor, props, instance);

	// only matters if there are computed properties to manage
	if (props.computed) {
		
		var proto = ctor.prototype || ctor
			, computed = proto._computed? Object.create(proto._computed): {}
			, dependencies = proto._computedDependencies? Object.create(proto._computedDependencies): {};
		
		// if it hasn't already been applied we need to ensure that the prototype will
		// actually have the computed support mixin present, it will not apply it more
		// than once to the prototype
		extend(ComputedSupport, proto);
	
		// @NOTE: This is the handling of the original syntax provided for computed properties in 2.3.ish...
		// All we do here is convert it to a structure that can be used for the other scenario and preferred
		// computed declarations format
		if (!props.computed || !(props.computed instanceof Array)) {
			(function () {
				var tmp = [], deps, name, conf;
				// here is the slow iteration over the properties...
				for (name in props.computed) {
					// points to the dependencies of the computed method
					deps = props.computed[name];
					/*jshint -W083 */
					conf = deps && deps.find(function (ln) {
						// we deliberately remove the entry here and forcibly return true to break
						return typeof ln == 'object'? (utils.remove(deps, ln) || true): false;
					});
					/*jshint +W083 */
					// create a single entry now for the method/computed with all dependencies
					tmp.push({method: name, path: deps, cached: conf? conf.cached: null});
				}
				
				// note that we only do this one so even for a mixin that is evaluated several
				// times this would only happen once
				props.computed = tmp;
			}());
		}
		
		var addDependency = function (path, dep) {
			// its really an inverse look at the original
			var deps;
			
			if (dependencies[path] && !dependencies.hasOwnProperty(path)) dependencies[path] = dependencies[path].slice();
			deps = dependencies[path] || (dependencies[path] = []);
			deps.push(dep);
		};
		
		// now we handle the new computed properties the way we intended to
		for (var i=0, ln; (ln=props.computed[i]); ++i) {
			// if the entry already exists we are merely updating whether or not it is
			// now cached
			computed[ln.method] = !! ln.cached;
			// we must now look to add an entry for any given dependencies and map them
			// back to the computed property they will trigger
			/*jshint -W083 */
			if (ln.path && ln.path instanceof Array) ln.path.forEach(function (dep) { addDependency(dep, ln.method); });
			/*jshint +W083 */
			else if (ln.path) addDependency(ln.path, ln.method);
		}
		
		// arg, free the key from the properties so it won't be applied later...
		// delete props.computed;
		// make sure to reassign the correct items to the prototype
		proto._computed = computed;
		proto._computedDependencies = dependencies;
	}
};
},{"../../enyo":12,"./kind":96,"./utils":106}],40:[function(require,module,exports){
require('../../enyo');

var
	utils = require('./utils'),
	kind = require('./kind');
var
	VerticalDelegate = require('./VerticalDelegate');

/**
* This is a [delegate]{@glossary delegate} (strategy) used by {@link enyo.DataList}
* for horizontally-oriented lists. This is used by all lists for this strategy;
* it does not get copied, but is called directly from the list.
*
* Note that this is based on the [vertical delegate]{@link enyo.DataList.delegates.vertical}
* and shares most of that delegate's logic. Overloads are implemented only where necessary.
*
* @name enyo.DataList.delegates.horizontal
* @type Object
* @private
*/
var p = utils.clone(VerticalDelegate);
kind.extendMethods(p, {
	/**
	* Initializes the list, adding a class to modify the CSS properly and setting its
	* priority properties.
	*
	* @method
	* @private
	*/
	initList: kind.inherit(function (sup) {
		return function (list) {
			sup.apply(this, arguments);
			// add the class
			list.addClass('horizontal');
			// set the priority properties
			list.posProp   = list.rtl ? 'right' : 'left';
			list.upperProp = 'left';
			list.lowerProp = 'right';
			list.psizeProp = 'width';
			list.ssizeProp = 'height';
			// set the scroller options
			var so         = list.scrollerOptions? (list.scrollerOptions = utils.clone(list.scrollerOptions)): (list.scrollerOptions = {});
			// this is a horizontal list it cannot scroll vertically
			so.vertical    = 'hidden';
			// it has to scroll vertically one way or another
			so.horizontal  = so.horizontal == 'scroll'? 'scroll': 'auto';
		};
	}),

	/*
	* @private
	*/
	destroyList: function (list) {
		if (list) {
			list.removeClass('horizontal');
		}
	},
	/**
	* Overload to retrieve the correct scroll position.
	*
	* @private
	*/
	getScrollPosition: function (list) {
		return list.$.scroller.getScrollLeft();
	},

	/**
	* Sets the scroll position on the [scroller]{@link enyo.Scroller}
	* owned by the given list.
	*
	* @private
	*/
	setScrollPosition: function (list, pos) {
		list.$.scroller.setScrollLeft(pos);
	},
	
	/**
	* Overload to ensure we arbitrarily resize the active container to the width of the buffer.
	*
	* @method
	* @private
	*/
	adjustBuffer: kind.inherit(function (sup) {
		return function (list) {
			sup.apply(this, arguments);
			var an = list.$.active.node || list.$.active.hasNode(),
				bs = list.bufferSize;
			if (an) {
				an.style.width = bs + 'px';
			}
		};
	})
}, true);

module.exports = p;
},{"../../enyo":12,"./VerticalDelegate":81,"./kind":96,"./utils":106}],43:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

/**
* {@link enyo.Layout} is the base [kind]{@glossary kind} for layout
* kinds. Layout kinds are used by {@link enyo.UiComponent}-based
* [controls]{@link enyo.Control} to allow for arranging of child controls by
* setting the [layoutKind]{@link enyo.UiComponent#layoutKind} property.
* 
* Derived kinds will usually provide their own
* [layoutClass]{@link enyo.Layout#layoutClass} property to affect the CSS
* rules used, and may also implement the [flow()]{@link enyo.Layout#flow}
* and [reflow()]{@link enyo.Layout#reflow} methods. `flow()` is called
* during control rendering, while `reflow()` is called when the associated
* control is resized.
*
* @class enyo.Layout
* @public
*/
module.exports = kind(
	/** @lends enyo.Layout.prototype */ {

	name: 'enyo.Layout',

	/**
	* @private
	*/
	kind: null,

	/** 
	* CSS class that's added to the [control]{@link enyo.Control} using this 
	* [layout]{@link enyo.Layout} [kind]{@glossary kind}.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	layoutClass: '',
	
	/**
	* @private
	*/
	constructor: function (container) {
		this.container = container;
		if (container) {
			container.addClass(this.layoutClass);
		}
	},

	/**
	* @private
	*/
	destroy: function () {
		if (this.container) {
			this.container.removeClass(this.layoutClass);
		}
	},
	
	/**
	* Called during static property layout (i.e., during rendering).
	*
	* @public
	*/
	flow: function () {
	},

	/** 
	* Called during dynamic measuring layout (i.e., during a resize).
	*
	* @public
	*/
	reflow: function () {
	}
});
},{"../../enyo":12,"./kind":96}],45:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

/**
* An abstract linked-list node.
*
* @class enyo.LinkedListNode
* @private
*/
module.exports = kind(
	/** @lends enyo.LinkedListNode.prototype */ {
	
	/**
	* @private
	*/
	kind: null,
	
	/**
	* @private
	*/

	
	/**
	* @private
	*/
	prev: null,
	
	/**
	* @private
	*/
	next: null,
	
	/**
	* @private
	*/
	copy: function () {
		var cpy = new this.ctor();
		cpy.prev = this.prev;
		cpy.next = this.next;
		return cpy;
	},
	
	/**
	* @private
	*/
	constructor: function (props) {
		props && utils.mixin(this, props);
	},
	
	/**
	* @private
	*/
	destroy: function () {
		// clear reference to previous node
		this.prev = null;
		
		// if we have a reference to our next node
		// we continue down the chain
		this.next && this.next.destroy();
		
		// clear our reference to the next node
		this.next = null;
	}
});
},{"../../enyo":12,"./kind":96,"./utils":106}],47:[function(require,module,exports){
require('../../enyo');


var
	utils = require('./utils'),
	kind = require('./kind'),
	logger = require('./logger');

kind.concatenated.push('mixins');

var sup = kind.statics.extend;

/**
* @private
*/
var extend = kind.statics.extend = function extend (args, target) {
	if (utils.isArray(args)) return utils.forEach(args, function (ln) { extend.call(this, ln, target); }, this);
	if (typeof args == 'string') apply(target || this.prototype, args);
	else {
		if (args.mixins) feature(target || this, args);
	
		// this allows for mixins to apply mixins which...is less than ideal but possible
		if (args.name) apply(target || this.prototype, args);
		else sup.apply(this, arguments);
	}
};

/**
* Applies, with safeguards, a given mixin to an object.
*
* @private
*/
function apply (proto, props) {
	var applied = proto._mixins? (proto._mixins = proto._mixins.slice()): (proto._mixins = [])
		, name = utils.isString(props)? props: props.name
		, idx = utils.indexOf(name, applied);
	if (idx < 0) {
		name == props && (props = utils.getPath(name));
		// if we could not resolve the requested mixin (should never happen)
		// we throw a simple little error
		// @TODO: Normalize error format
		!props && logger.error('Could not find the mixin ' + name);
		
		// it should be noted that this ensures it won't recursively re-add the same mixin but
		// since it is possible for mixins to apply mixins the names will be out of order
		// this name is pushed on but the nested mixins are applied before this one
		name && applied.push(name);
		
		props = utils.clone(props);
		
		// we need to temporarily move the constructor if it has one so it
		// will override the correct method - this is a one-time permanent
		// runtime operation so subsequent additions of the mixin don't require
		// it again
		if (props.hasOwnProperty('constructor')) {
			props._constructor = props.constructor;
			delete props.constructor;
		}
		
		delete props.name;
		extend(props, proto);
		
		// now put it all back the way it was
		props.name = name;
	}
}

/**
* @private
*/
function feature (ctor, props) {
	if (props.mixins) {
		var proto = ctor.prototype || ctor
			, mixins = props.mixins;
		
		// delete props.mixins;
		// delete proto.mixins;
		
		proto._mixins && (proto._mixins = proto._mixins.slice());
		utils.forEach(mixins, function (ln) { apply(proto, ln); });
	}
}

kind.features.push(feature);

/**
* An internally-used support {@glossary mixin} that adds API methods to aid in
* using and applying mixins to [kinds]{@glossary kind}.
*
* @mixin enyo.MixinSupport
* @protected
*/
module.exports = {
	
	/**
	* @private
	*/
	name: 'MixinSupport',
	
	/**
	* Extends the instance with the given properties.
	*
	* @param {Object} props - The property [hash]{@glossary Object} from which to extend
	*	the callee.
	*/
	extend: function (props) {
		props && apply(this, props);
	},
	
	/**
	* @private
	*/
	importProps: kind.inherit(function (sup) {
		return function (props) {
			props && props.mixins && feature(this, props);
			
			sup.apply(this, arguments);
		};
	})
};
},{"../../enyo":12,"./kind":96,"./logger":97,"./utils":106}],51:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

/**
* A collection of methods to allow a single {@link enyo.Component} to
* [dispatch]{@link enyo.Component#dispatchEvent} a single {@glossary event} to
* multiple targets. The events are synchronously propagated in the order in
* which the targets are encountered. Note that this {@glossary mixin} is
* already applied to a base [kind]{@glossary kind},
* {@link enyo.MultipleDispatchComponent}.
*
* @mixin enyo.MultipleDispatchSupport
* @public
*/
module.exports = {
	
	/**
	* @private
	*/
	name: 'MultipleDispatchSupport',
	
	/**
	* Adds a target for dispatching.
	*
	* @param {enyo.Component} component - The {@link enyo.Component} to add as a dispatch target.
	* @public
	*/
	addDispatchTarget: function (component) {
		var dt = this._dispatchTargets;
		if (component && !~utils.indexOf(component, dt)) {
			dt.push(component);
		}
	},
	/**
	* Removes a target from dispatching.
	*
	* @param {enyo.Component} component - The {@link enyo.Component} to remove as a dispatch
	*	target.
	* @public
	*/
	removeDispatchTarget: function (component) {
		var dt = this._dispatchTargets, i;
		i = utils.indexOf(component, dt);
		if (i > -1) {
			dt.splice(i, 1);
		}
	},
	
	/**
	* @private
	*/
	bubbleUp: kind.inherit(function (sup) {
		return function (name, event, sender) {
			if (this._dispatchDefaultPath) {
				sup.apply(this, arguments);
			}
			var dt = this._dispatchTargets;
			for (var i=0, t; (t=dt[i]); ++i) {
				if (t && !t.destroyed) {
					t.dispatchBubble(name, event, sender);
				}
			}
		};
	}),
	
	/**
	* @private
	*/
	ownerChanged: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			var o = this.owner;
			this._dispatchDefaultPath = !! o;
		};
	}),
	
	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			this._dispatchTargets = [];
			return sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			this._dispatchTargets = null;
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	_dispatchDefaultPath: false
};
},{"../../enyo":12,"./kind":96,"./utils":106}],69:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	logger = require('./logger');

/**
* All of the known, instanced [sources]{@link enyo.Source}, by name.
*
* @name enyo~sources
* @type {Object}
* @readonly
*/
var sources = {};

/**
* This is an abstract base class. A [source]{@link enyo.Source} is a communication
* layer used by data layer [kinds]{@glossary kind} to retrieve and persist data and
* application state via its abstract API methods.
*
* @class enyo.Source
* @public
*/
var Source = module.exports = kind(
	/** @lends enyo.Source.prototype */ {
	
	name: 'enyo.Source',
	
	/**
	* @private
	*/
	kind: null,
	
	/**
	* @private
	*/

	
	/**
	* When initialized, the source should be passed properties to set on itself.
	* These properties should include the name by which it will be referenced in
	* the application.
	*
	* @param {Object} [props] - The properties to set on itself.
	* @public
	*/
	constructor: function (props) {
		if (props) this.importProps(props);
		// automatic coersion of name removing prefix
		this.name || (this.name = this.kindName.replace(/^(.*)\./, ""));
		// now add to the global registry of sources
		sources[this.name] = this;
	},
	
	/**
	* Overload this method to handle retrieval of data. This method should accept an options
	* [hash]{@glossary Object} with additional configuration properties, including `success`
	* and `error` callbacks to handle the result.
	*
	* @virtual
	* @param {(enyo.Model|enyo.Collection)} model The [model]{@link enyo.Model} or
	*	[collection]{@link enyo.Collection} to be retrieved.
	* @param {Object} opts - The configuration options [hash]{@glossary Object}, including
	*	`success` and `error` callbacks.
	*/
	fetch: function (model, opts) {
		//
	},
	
	/**
	* Overload this method to handle persisting of data. This method should accept an options
	* [hash]{@glossary Object} with additional configuration properties, including `success`
	* and `error` callbacks to handle the result.
	*
	* @virtual
	* @param {(enyo.Model|enyo.Collection)} model The [model]{@link enyo.Model} or
	*	[collection]{@link enyo.Collection} to be persisted.
	* @param {Object} opts - The configuration options [hash]{@glossary Object}, including
	*	`success` and `error` callback.
	*/
	commit: function (model, opts) {
		//
	},
	
	/**
	* Overload this method to handle deletion of data. This method should accept an options
	* [hash]{@glossary Object} with additional configuration properties, including `success`
	* and `error` callbacks to handle the result. If called without parameters, it will
	* instead destroy itself and be removed from [enyo.sources]{@link enyo~sources}, rendering
	* itself unavailable for further operations.
	*
	* @param {(enyo.Model|enyo.Collection)} model The [model]{@link enyo.Model} or
	*	[collection]{@link enyo.Collection} to be deleted.
	* @param {Object} opts - The configuration options [hash]{@glossary Object}, including
	*	`success` and `error` callbacks.
	*/
	destroy: function (model, opts) {
		
		// if called with no parameters we actually just breakdown the source and remove
		// it as being available
		if (!arguments.length) {
			sources[this.name] = null;
			this.name = null;
		}
	},
	
	/**
	* Overload this method to handle querying of data based on the passed-in constructor. This
	* method should accept an options [hash]{@glossary Object} with additional configuration
	* properties, including `success` and `error` callbacks to handle the result.
	*
	* @virtual
	* @param {Function} ctor - The constructor for the [kind]{@glossary kind} of
	*	{@link enyo.Model} or {@link enyo.Collection} to be queried.
	* @param {Object} opts - The configuration options [hash]{@glossary Object}, including
	*	`success` and `error` callbacks.
	*/
	find: function (ctor, opts) {
		//
	},
	
	/**
	* @private
	*/
	importProps: function (props) {
		props && utils.mixin(this, props);
	},
	
	/**
	* @see enyo.getPath
	* @method
	* @public
	*/
	get: utils.getPath,
	
	/**
	* @see enyo.setPath
	* @method
	* @public
	*/
	set: utils.setPath
});

/**
* Creates an instance of {@link enyo.Source} with the given properties. These
* properties should include a `kind` property with the name of the
* [kind]{@glossary kind} of source and a `name` for the instance. This static
* method is also available on all [subkinds]{@glossary subkind} of
* `enyo.Source`. The instance will automatically be added to the
* [enyo.sources]{@link enyo~sources} [object]{@glossary Object} and may be
* referenced by its `name`.
*
* @name enyo.Source.create
* @static
* @method
* @param {Object} props - The properties to pass to the constructor for the requested
*	[kind]{@glossary kind} of [source]{@link enyo.Source}.
* @returns {enyo.Source} An instance of the requested kind of source.
* @public
*/
Source.create = function (props) {
	var Ctor = (props && props.kind) || this;
	
	if (typeof Ctor == 'string') Ctor = kind.constructorForKind(Ctor);
	
	return new Ctor(props);
};

/**
* @static
* @private
*/
Source.concat = function (ctor, props) {
	
	// force noDefer so that we can actually set this method on the constructor
	if (props) props.noDefer = true;
	
	ctor.create = Source.create;
};

/**
* @static
* @private
*/
Source.execute = function (action, model, opts) {
	var source = opts.source || model.source,
	
		// we need to be able to bind the success and error callbacks for each of the
		// sources we'll be using
		options = utils.clone(opts, true),
		nom = source,
		msg;
	
	if (source) {
		
		// if explicitly set to true then we need to use all available sources in the
		// application
		if (source === true) {
			
			for (nom in sources) {
				source = sources[nom];
				if (source[action]) {
					
					// bind the source name to the success and error callbacks
					options.success = opts.success.bind(null, nom);
					options.error = opts.error.bind(null, nom);
					
					source[action](model, options);
				}
			}
		}
		
		// if it is an array of specific sources to use we, well, will only use those!
		else if (source instanceof Array) {
			source.forEach(function (nom) {
				var src = typeof nom == 'string' ? sources[nom] : nom;
				
				if (src && src[action]) {
					// bind the source name to the success and error callbacks
					options.success = opts.success.bind(null, src.name);
					options.error = opts.error.bind(null, src.name);
					
					src[action](model, options);
				}
			});
		}
		
		// if it is an instance of a source
		else if (source instanceof Source && source[action]) {
			
			// bind the source name to the success and error callbacks
			options.success = opts.success.bind(null, source.name);
			options.error = opts.error.bind(null, source.name);
			
			source[action](model, options);
		}
		
		// otherwise only one was specified and we attempt to use that
		else if ((source = sources[nom]) && source[action]) {
			
			// bind the source name to the success and error callbacks
			options.success = opts.success.bind(null, nom);
			options.error = opts.error.bind(null, nom);
			
			source[action](model, options);
		}
		
		// we could not resolve the requested source
		else {
			msg = 'enyo.Source.execute(): requested source(s) could not be found for ' +
				model.kindName + '.' + action + '()';
			
			logger.warn(msg);
			
			// we need to fail the attempt and let it be handled
			opts.error(nom ? typeof nom == 'string' ? nom : nom.name : 'UNKNOWN', msg);
		}
	} else {
		msg = 'enyo.Source.execute(): no source(s) provided for ' + model.kindName + '.' +
			action + '()';
			
		logger.warn(msg);
		
		// we need to fail the attempt and let it be handled
		opts.error(nom ? typeof nom == 'string' ? nom : nom.name : 'UNKNOWN', msg);
	}
};

Source.sources = sources;
},{"../../enyo":12,"./kind":96,"./logger":97,"./utils":106}],82:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');
var
	VerticalDelegate = require('./VerticalDelegate');

/**
* This is a [delegate]{@glossary delegate} (strategy) used by {@link enyo.DataGridList}
* for vertically-oriented lists. This is used by all lists for this strategy; it does
* not get copied, but is called directly from the list. It is only available to
* `enyo.DataGridList`.
*
* @name enyo.DataGridList.delegates.verticalGrid
* @type Object
* @private
*/
var p = utils.clone(VerticalDelegate);
kind.extendMethods(p, {
	
	/**
	* Once the list is initially rendered, it will generate its [scroller]{@link enyo.Scroller}
	* (so we know that is available). Now we need to cache our initial size values and apply
	* them to our pages individually.
	*
	* @private
	*/
	rendered: function (list) {
		// get our initial sizing cached now since we should actually have
		// bounds at this point
		this.updateMetrics(list);
		// calc offset of pages to scroller client
		this.calcScrollOffset(list);
		// now if we already have a length then that implies we have a controller
		// and that we have data to render at this point, otherwise we don't
		// want to do any more initialization
		if (list.collection && list.collection.length) { this.reset(list); }
	},
	
	/**
	* Resets the page, setting `canAddResetClass` flag if appropriate.
	*
	* @method
	* @private
	*/
	reset: kind.inherit(function (sup) {
		return function (list) {
			sup.apply(this, arguments);
			if (list.hasReset && !list.hasClass('reset')) {
				list.canAddResetClass = true;
			}
		};
	}),
	
	/**
	* Unlike in {@link enyo.DataList}, we can calculate the page height since we know
	* the structure and layout of the page precisely.
	*
	* @private
	*/
	pageHeight: function (list, page) {
		var n  = page.node || page.hasNode(),
			a  = n.children.length,
			mx = list.metrics.pages[page.index], s;
		s = (Math.floor(a/list.columns)+(a%list.columns? 1: 0))*(list.tileHeight+list.spacing);
		n.style.height = s + 'px';
		mx.height = s;
		return s;
	},

	/**
	* Generates the markup for the page content.
	*
	* @method
	* @private
	*/
	generatePage: kind.inherit(function (sup) {
		return function (list, page) {
			sup.apply(this, arguments);
			this.layout(list, page);
		};
	}),

	/**
	* Returns the calculated width for the given page.
	*
	* @private
	*/
	pageWidth: function (list, page) {
		var s  = this.width(list),
			n  = page.node || page.hasNode(),
			mx = list.metrics.pages[page.index];
		n.style.width = s + 'px';
		mx.width = s;
		return s;
	},

	/**
	* Retrieves the default page size.
	*
	* @private
	*/
	defaultPageSize: function (list) {
		return (Math.ceil(this.controlsPerPage(list)/list.columns) * (list.tileHeight+list.spacing));
	},

	/**
	* Calculates metric values required for the absolute positioning and scaling of the
	* children in the list.
	*
	* @private
	*/
	updateMetrics: function (list) {
		this.updateBounds(list);
		this.calculateMetrics(list);
	},

	calculateMetrics: function (list, width) {
		var w  = (width === undefined) ? this.width(list) : width,
			s  = list.spacing,
			m  = list.minWidth,
			h  = list.minHeight;
		// the number of columns is the ratio of the available width minus the spacing
		// by the minimum tile width plus the spacing
		list.columns    = Math.max(Math.floor((w-s) / (m+s)), 1);
		// the actual tile width is a ratio of the remaining width after all columns
		// and spacing are accounted for and the number of columns that we know we should have
		list.tileWidth  = ((w-(s*(list.columns+1)))/list.columns);
		// the actual tile height is related to the tile width
		list.tileHeight = (h*(list.tileWidth/m));
		// unfortunately this forces us to recalculate the number of controls that can
		// be used for each page
		this.controlsPerPage(list, true);
		// Compute first and last row index bounds
		this.updateIndexBound(list);
	},

	/**
	* Calculates index bound that is required for adjusting page position. Can be called
	* after the [DataGridList]{@link enyo.DataGridList} is rendered.
	*
	* @private
	*/
	updateIndexBound: function(list) {
		if (!list.collection) {
			return;
		}
		// If user calls this method before DataGridList is rendered
		if (list.boundsCache === undefined) {
			this.updateMetrics(list);
		}

		list.indexBoundFirstRow = list.columns;
		list.indexBoundLastRow = (Math.ceil(list.collection.length / list.columns) - 1) * list.columns - 1;
	},

	/**
	* Ensures that index bound is maintained and up-to-date as
	* [models]{@link enyo.Model} are added.
	*
	* @method
	* @private
	*/
	modelsAdded: kind.inherit(function (sup) {
		return function (list, props) {
			this.calculateMetrics(list);
			sup.apply(this, arguments);
		};
	}),

	/**
	* Ensures that index bound is maintained and up-to-date as
	* [models]{@link enyo.Model} are removed.
	*
	* @method
	* @private
	*/
	modelsRemoved: kind.inherit(function (sup) {
		return function (list, props) {
			this.calculateMetrics(list);
			sup.apply(this, arguments);
		};
	}),


	/**
	* This method calculates the number of [controls]{@link enyo.Control} necessary to
	* fill a page. It inherits from the same method in
	* [verticalDelegate]{@link DataList.delegates.vertical} and extends it to reflect
	* the number of columns in the grid list.
	*
	* @method
	* @private
	*/
	calculateControlsPerPage: kind.inherit(function (sup) {
		return function(list) {
			return sup.apply(this, arguments) * list.columns;
		};
	}),

	/*
	* @private
	*/
	childSize: function (list) {
		// currently DataGridList is only vertical
		/*jshint -W093 */
		return (list.childSize = (list.tileHeight + list.spacing));
	},

	/**
	* Takes a given page and arbitrarily positions its children according to the pre-computed
	* metrics of the list.

	* TODO: This could be optimized to use requestAnimationFrame as well as render not by child 
	* index but by row, thus cutting down some of the over-calculation when iterating over every 
	* child.
	*
	* @private
	*/
	layout: function (list, page) {
		if (list.canAddResetClass) {
			list.addClass('reset');
			delete list.canAddResetClass;
		}
		var cc = list.columns,
			s  = list.spacing,
			w  = list.tileWidth,
			h  = list.tileHeight,
			r  = 0,
			n  = page,
			cn = n.children, co;
		if (cn.length) {
			for (var i=0, c; (c=cn[i]); ++i) {
				// the column
				co = i % cc;
				c.addStyles(
					'top: '    + Math.round(s  + (r  * (h+s))) + 'px; ' +
					(list.rtl ? 'right: ' : 'left: ') + Math.round(s  + (co * (w+s))) + 'px; ' +
					'width: '  + Math.round(w) +                 'px; ' +
					'height: ' + Math.round(h) +                 'px;'
				);
				// check if we need to increment the row
				if ((i+1) % cc === 0) { ++r; }
			}
		}
	},

	/**
	* Recalculates the buffer size based on the current metrics for the given list. This
	* may not be completely accurate until the final page is scrolled into view.
	*
	* @private
	*/
	adjustBuffer: function (list) {
		var pc = this.pageCount(list),
			ds = this.defaultPageSize(list),
			bs = 0, sp = list.psizeProp, ss = list.ssizeProp,
			n = list.$.buffer.node || list.$.buffer.hasNode(), p;
		if (n) {
			for (var i=0; i<pc; ++i) {
				p = list.metrics.pages[i];
				bs += (p && p[sp]) || ds;
			}
			bs += list.spacing;
			list.bufferSize = bs;
			n.style[sp] = bs + 'px';
			n.style[ss] = this[ss](list) + 'px';
			list.$.scroller.remeasure();
		}
	},
	
	/**
	* The delegate's `resize` {@glossary event} handler.
	*
	* @private
	*/
	didResize: function (list) {
		// store the previous stats for comparative purposes
		var prev = list.boundsCache;
		
		// flag the list to have its bounds updated
		list._updateBounds = true;
		this.updateMetrics(list);
		
		// if no change it the viewport then we didn't update anything size-wise
		// and do not need to refresh at all
		if (
			prev.left   === list.boundsCache.left  &&
			prev.top    === list.boundsCache.top   &&
			prev.width  === list.boundsCache.width &&
			prev.height === list.boundsCache.height
		) {
			return;
		}
		
		// it is necessary to update the content of the list according to our
		// new sizing
		this.refresh(list);
	},

	/**
	* @see enyo.VerticalDelegate#adjustIndex
	* @private
	*/
	adjustIndex: kind.inherit(function (sup) {
		return function (list, index, page, pageBounds, scrollBoundary, start) {
			var idx = sup.apply(this, arguments),
				delta = idx%list.columns;

			return idx - delta + (start? 0 : list.columns - 1);
		};
	})
}, true);

module.exports = p;
},{"../../enyo":12,"./VerticalDelegate":81,"./kind":96,"./utils":106}],85:[function(require,module,exports){
require('../../enyo');

'use strict';

var
	utils = require('./utils'),
	kind = require('./kind'),
	logger = require('./logger');

/*
* Tracks the active tests.
*
* @private
*/
var tests = {};

/*
* Tracks averages.
*
* @private
*/
var averages = {};

/*
* Default report template string.
*
* @private
*/
var report_template = '- - - - - - - - - - - - - - - - -\n' +
				'BENCHMARK REPORT (%.): %.\n' +
				'TOTAL TIME (ms): %.\n' +
				'AVERAGE TIME (ms): %.\n' +
				'MINIMUM TIME (ms): %.\n' +
				'MAXIMUM TIME (ms): %.\n' +
				'NUMBER OF ENTRIES: %.\n' +
				'- - - - - - - - - - - - - - - - -\n';

/*
* Calculates average and basic statistics.
*
* @private
*/
var calc = function (numbers) {
	var total = 0;
	var min = Infinity;
	var max = -Infinity;
	var number = numbers.length;
	var stats = {total: null, average: null, number: number, min: null, max: null};
	utils.forEach(numbers, function (num) {
		total += num;
		min = Math.min(num, min);
		max = Math.max(num, max);
	});
	stats.total = total;
	stats.min = min;
	stats.max = max;
	stats.average = Math.abs(total/(number || 1));
	return stats;
};

/**
* Configurable benchmark options [hash]{@glossary Object}. For more
* details, see the same properties defined on {@link enyo.dev.Benchmark}.
* 
* @typedef  {Object} enyo.dev.Benchmark~Options
* @property {String} name - The referenceable name of the
* [benchmark]{@link enyo.dev.Benchmark} (used for reporting).
* @property {Boolean} average - If `true` (the default), an average of
* repeated start/stops for the bench will be calculated.
* @property {Boolean} logging - If `true` (the default), start and stop
* messages will be written to the console.
* @property {Boolean} autoStart - If `true` (the default), the benchmark will
* automatically start on instantiation.
*/

/**
* A collection of methods to assist in simple benchmarking. In creating these
* methods, the goal was to supply useful functionality while impacting the
* results as little as possible (the more calculations we do during
* benchmarking, the greater the opportunity to skew results). This is
* particularly important when dealing with potentially-nested benchmark series
* (i.e., benchmarking a method that executes other benchmarked methods).
*
* @namespace enyo.dev
* @public
*/
exports = module.exports = /** @lends enyo.dev */ {

	/**
	* Can be set to `false` to disable all benchmarking code.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	enabled: true,

	/**
	* Creates a new [benchmark]{@link enyo.dev.Benchmark} test with the given
	* configuration options.
	*
	* @param {enyo.dev.Benchmark~Options} opts - The configuration
	* [options]{@link enyo.dev.Benchmark~Options} to apply to the
	* [benchmark]{@link enyo.dev.Benchmark}.
	* @returns {enyo.dev.Benchmark} A Benchmark instance with `start()` and
	* `stop()` methods used to track a test.
	* @public
	*/
	bench: function (opts) {
		if (true !== this.enabled) {
			return false;
		}
		var options = opts || {name: utils.uid('bench')};
		return new Benchmark(options);
	},

	/**
	* Shows a report for a given [benchmark]{@link enyo.dev.Benchmark} by name.
	*
	* @param {String} name - The name of the [benchmark]{@link enyo.dev.Benchmark} to report.
	* @public
	*/
	report: function (name) {
		var bench = averages[name] || tests[name];
		if (!bench) {
			return false;
		}
		if (bench.report && 'function' === typeof bench.report) {
			return bench.report();
		} else {
			var stats = calc(bench);
			logger.log(
				utils.format(
					report_template,
					'averages',
					name,
					stats.total,
					stats.average,
					stats.min,
					stats.max,
					stats.number
				)
			);
		}
	},

	/**
	* Removes all stored data related to the named [benchmark]{@link enyo.dev.Benchmark}.
	*
	* @param {String} name - The name of the [benchmark]{@link enyo.dev.Benchmark} from which to
	*	remove stored data.
	* @public
	*/
	clear: function (name) {
		var source = tests[name]? tests: averages[name]? averages: null;
		if (!source) {
			return false;
		}
		if (source.complete) {
			source.complete();
		}
		if (source[name] instanceof Array) {
			source[name] = [];
		}
		else {
			delete source[name];
		}
		return true;
	}

};

/**
* A [kind]{@glossary kind} used internally for development benchmarking.
*
* @class enyo.dev.Benchmark
* @protected
*/
var Benchmark = exports.Benchmark = kind(/** @lends enyo.dev.Benchmark.prototype */ {
	
	/**
	* @private
	*/
	// name: 'enyo.dev.Benchmark',
	
	/**
	* @private
	*/
	kind: null,
	
	/**
	* @private
	*/

	
	/**
	* Determines whether output will be logged to the console.
	* 
	* @type {Boolean}
	* @default true
	* @public
	*/
	logging: true,

	/**
	* Determines whether benchmarking will start immediately when this instance is created. 
	* 
	* @type {Boolean}
	* @default true
	* @public
	*/
	autoStart: true,
	
	/**
	* Determines whether this instance will collect and maintain a report of averages for
	* benches intended to be executed multiple times.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	average: true,
	
	/**
	* @private
	*/
	_started: false,

	/**
	* @private
	*/
	_averaging: false,

	/**
	* @private
	*/
	_begin: null,

	/**
	* @private
	*/
	_end: null,

	/**
	* @private
	*/
	_time: null,
	
	/**
	* Begins benching.
	*
	* @returns {Boolean} Whether or not benching began successfully. Returns `false` if
	*	benching was already in progress.
	* @public
	*/
	start: function () {
		if (true === this._started) {
			return false;
		}
		this._log('starting benchmark');
		this._begin = utils.perfNow();
		this._started = true;
		return true;
	},

	/**
	* Stops benching.
	*
	* @returns {Boolean} Whether or not benching was stopped successfully. Returns `false`
	*	if benching was not in progress.
	* @public
	*/
	stop: function () {
		if (!this._started) {
			return false;
		}
		this._end = utils.perfNow();
		this._time = this._end - this._begin;
		this._log('benchmark complete: ' + this._time);
		if (true === this._averaging) {
			averages[this.name].push(this._time);
		}
		this._started = false;
		return true;
	},
	
	/**
	* @private
	*/
	constructor: function (options) {
		utils.mixin(this, options);
		tests[this.name] = this;
		if (true === this.average && !averages[this.name]) {
			averages[this.name] = [];
		}
		if (averages[this.name] && false !== this.average) {
			this._averaging = true;
		}
		if (true === this.autoStart) {
			this.start();
		}
	},
	
	/**
	* @private
	*/
	_log: function (message) {
		if (!this.logging) {
			return false;
		}
		logger.log('bench (' + this.name + '): ' + message);
	}
	
});

/**
* When available, supplies a high-precision, high performance monotonic
* benchmark for some internal usage and benchmark testing.
* 
* @alias enyo.perfNow
* @method
* @public
*/
},{"../../enyo":12,"./kind":96,"./logger":97,"./utils":106}],89:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	platform = require('./platform');

module.exports = function (Control) {
	/**
	* {@link enyo.FloatingLayer} is a [control]{@link enyo.Control} that provides a layer for
	* controls that should be displayed above an [application]{@link enyo.Application}. The
	* `floatingLayer` singleton can be set as a control's parent to have the control float
	* above the application, e.g.:
	*
	* ```
	* create: kind.inherit(function (sup) {
	*	return function() {
	*		sup.apply(this, arguments);
	*		this.setParent(enyo.floatingLayer);
	*	}
	* });
	* ```
	*
	* Note: `enyo.FloatingLayer` is not meant to be instantiated by users.
	*
	* @class enyo.FloatingLayer
	* @extends enyo.Control
	* @ui
	* @protected
	*/
	return kind(
		/** @lends enyo.FloatingLayer.prototype */ {

		/**
		* @private
		*/
		kind: Control,

		/**
		* @private
		*/
		classes: 'enyo-fit enyo-clip enyo-untouchable',

		/**
		* @method
		* @private
		*/
		create: kind.inherit(function (sup) {
			return function() {
				sup.apply(this, arguments);
				this.setParent(null);

				if (platform.ie < 11) {
					this.removeClass('enyo-fit');
				}
			};
		}),

		/**
		* Detects when [node]{@glossary Node} is detatched due to `document.body` being stomped.
		*
		* @method
		* @private
		*/
		hasNode: kind.inherit(function (sup) {
			return function() {
				sup.apply(this, arguments);
				if (this.node && !this.node.parentNode) {
					this.teardownRender();
				}
				return this.node;
			};
		}),

		/**
		* @method
		* @private
		*/
		render: kind.inherit(function (sup) {
			return function() {
				this.parentNode = document.body;
				return sup.apply(this, arguments);
			};
		}),

		/**
		* @private
		*/
		generateInnerHtml: function () {
			return '';
		},

		/**
		* @private
		*/
		beforeChildRender: function () {
			if (!this.hasNode()) {
				this.render();
			}
		},

		/**
		* @private
		*/
		teardownChildren: function () {
		}
	});
};
},{"../../enyo":12,"./kind":96,"./platform":102}],19:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	Binding = require('./Binding');

kind.concatenated.push('bindings');

/**
* An internally-used {@glossary mixin} that is added to {@link enyo.Object}
* and its [subkinds]{@glossary subkind}. It includes public and protected API
* methods for working with [bindings]{@link enyo.Binding}.
*
* @mixin enyo.BindingSupport
* @protected
*/
exports = module.exports = {
	
	/**
	* @private
	*/
	name: 'BindingSupport',
	
	/**
	* @private
	*/
	_bindingSupportInitialized: false,
	
	/**
	* Imperatively creates a [binding]{@link enyo.Binding}. Merges a variable
	* number of [hashes]{@glossary Object} and instantiates a binding that
	* will have its [owner]{@link enyo.Binding#owner} property set to the callee
	* (the current {@link enyo.Object}). Bindings created in this way will be
	* [destroyed]{@link enyo.Binding#destroy} when their `owner` is
	* [destroyed]{@link enyo.Object#destroy}.
	*
	* @param {...Object} props A variable number of [hashes]{@glossary Object} that will
	*	be merged into the properties applied to the {@link enyo.Binding} instance.
	* @returns {this} The callee for chaining.
	* @public
	*/
	binding: function () {
		var args = utils.toArray(arguments)
			, props = utils.mixin(args)
			, bindings = this.bindings || (this.bindings = [])
			, Ctor, bnd;
			
		props.owner = props.owner || this;
		Ctor = props.kind = props.kind || this.defaultBindingKind || Binding.defaultBindingKind;
		
		if (this._bindingSupportInitialized) {
			utils.isString(Ctor) && (Ctor = props.kind = kind.constructorForKind(Ctor));
			bnd = new Ctor(props);
			bindings.push(bnd);
			return bnd;
		} else bindings.push(props);
		
		return this;
	},
	
	/**
	* Removes and [destroys]{@link enyo.Binding#destroy} all of, or a subset of,
	* the [bindings]{@link enyo.Binding} belonging to the callee.
	*
	* @param {enyo.Binding[]} [subset] - The optional [array]{@glossary Array} of
	*	[bindings]{@link enyo.Binding} to remove.
	* @returns {this} The callee for chaining.
	* @public
	*/
	clearBindings: function (subset) {
		var bindings = subset || (this.bindings && this.bindings.slice());
		bindings.forEach(function (bnd) {
			bnd.destroy();
		});
		
		return this;
	},
	
	/**
	* Removes a single {@link enyo.Binding} from the callee. (This does not
	* [destroy]{@link enyo.Binding#destroy} the binding.) Also removes the
	* [owner]{@link enyo.Binding#owner} reference if it is the callee.
	*
	* It should be noted that when a binding is destroyed, it is automatically
	* removed from its owner.
	*
	* @param {enyo.Binding} binding - The {@link enyo.Binding} instance to remove.
	* @returns {this} The callee for chaining.
	* @public
	*/
	removeBinding: function (binding) {
		utils.remove(binding, this.bindings);
		
		if (binding.owner === this) binding.owner = null;
		
		return this;
	},
	
	/**
	* @private
	*/
	constructed: kind.inherit(function (sup) {
		return function () {
			var bindings = this.bindings;
			this._bindingSupportInitialized = true;
			bindings && (this.bindings = []) && bindings.forEach(function (def) {
				this.binding(def);
			}, this);
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.bindings && this.bindings.length && this.clearBindings();
			this.bindings = null;
		};
	})
};

/**
	Hijack the original so we can add additional default behavior.
*/
var sup = kind.concatHandler
	, flags = {ignore: true};

/**
* @private
*/
kind.concatHandler = function (ctor, props, instance) {
	var proto = ctor.prototype || ctor
		, kind = props && (props.defaultBindingKind || Binding.defaultBindingKind)
		, defaults = props && props.bindingDefaults;
	
	sup.call(this, ctor, props, instance);
	if (props.bindings) {
		props.bindings.forEach(function (bnd) {
			defaults && utils.mixin(bnd, defaults, flags);
			bnd.kind || (bnd.kind = kind); 
		});
		
		proto.bindings = proto.bindings? proto.bindings.concat(props.bindings): props.bindings;
		delete props.bindings;
	}
};
},{"../../enyo":12,"./Binding":18,"./kind":96,"./utils":106}],33:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	Binding = require('./Binding');

/**
* An {@link enyo.Binding} that checks for empty values. Will be `true` if there is some
* value, but `false` for an empty [string]{@glossary String}, `null`, or `undefined`.
*
* @class enyo.EmptyBinding
* @extends enyo.Binding
* @public
*/
module.exports = kind(
	/** @lends enyo.EmptyBinding.prototype */ {
	
	name: 'enyo.EmptyBinding',
	
	/**
	* @private
	*/
	kind: Binding,
	
	/**
	* @private
	*/
	transform: function (value) {
		return (value !== '' && value != null);
	}
});
},{"../../enyo":12,"./Binding":18,"./kind":96}],59:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	Binding = require('./Binding');

/**
* The {@link enyo.RepeaterChildSupport} [mixin]{@glossary mixin} contains methods and
* properties that are automatically applied to all children of {@link enyo.DataRepeater}
* to assist in selection support. (See {@link enyo.DataRepeater} for details on how to
* use selection support.) This mixin also [adds]{@link enyo.Repeater#decorateEvent} the
* `model`, `child` ([control]{@link enyo.Control} instance), and `index` properties to
* all [events]{@glossary event} emitted from the repeater's children.
*
* @mixin enyo.RepeaterChildSupport
* @public
*/
module.exports = {

	/*
	* @private
	*/
	name: 'RepeaterChildSupport',

	/**
	* Indicates whether the current child is selected in the [repeater]{@link enyo.DataRepeater}.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	selected: false,

	/**
	* Setting cachePoint: true ensures that events from the repeater child's subtree will
	* always bubble up through the child, allowing the events to be decorated with repeater-
	* related metadata and references.
	*
	* @type {Boolean}
	* @default true
	* @private
	*/
	cachePoint: true,
	
	/*
	* @method
	* @private
	*/
	selectedChanged: kind.inherit(function (sup) {
		return function () {
			if (this.repeater.selection) {
				this.addRemoveClass(this.selectedClass || 'selected', this.selected);
				// for efficiency purposes, we now directly call this method as opposed to
				// forcing a synchronous event dispatch
				var idx = this.repeater.collection.indexOf(this.model);
				if (this.selected && !this.repeater.isSelected(this.model)) {
					this.repeater.select(idx);
				} else if (!this.selected && this.repeater.isSelected(this.model)) {
					this.repeater.deselect(idx);
				}
			}
			sup.apply(this, arguments);
		};
	}),

	/*
	* @method
	* @private
	*/
	decorateEvent: kind.inherit(function (sup) {
		return function (sender, event) {
			event.model = this.model;
			event.child = this;
			event.index = this.repeater.collection.indexOf(this.model);
			sup.apply(this, arguments);
		};
	}),

	/*
	* @private
	*/
	_selectionHandler: function () {
		if (this.repeater.selection && !this.get('disabled')) {
			if (this.repeater.selectionType != 'group' || !this.selected) {
				this.set('selected', !this.selected);
			}
		}
	},
	/**
	* Deliberately used to supersede the default method and set 
	* [owner]{@link enyo.Component#owner} to this [control]{@link enyo.Control} so that there 
	* are no name collisions in the instance [owner]{@link enyo.Component#owner}, and also so 
	* that [bindings]{@link enyo.Binding} will correctly map to names.
	*
	* @method
	* @private
	*/
	createClientComponents: kind.inherit(function () {
		return function (components) {
			this.createComponents(components, {owner: this});
		};
	}),
	/**
	* Used so that we don't stomp on any built-in handlers for the `ontap`
	* {@glossary event}.
	*
	* @method
	* @private
	*/
	dispatchEvent: kind.inherit(function (sup) {
		return function (name, event, sender) {
			var owner;
			
			// if the event is coming from a child of the repeater-child (this...) and has a
			// delegate assigned to it there is a distinct possibility it is supposed to be
			// targeting the instanceOwner of repeater-child not the repeater-child itself
			// so we have to check this case and treat it as expected - if there is a handler
			// and it returns true then we must skip the normal flow
			if (event.originator !== this && event.delegate && event.delegate.owner === this) {
				if (typeof this[name] != 'function') {
					// ok we don't have the handler here let's see if our owner does
					owner = this.getInstanceOwner();
					if (owner && owner !== this) {
						if (typeof owner[name] == 'function') {
							// alright it appears that we're supposed to forward this to the
							// next owner instead
							return owner.dispatch(name, event, sender);
						}
					}
				}
			}
			
			if (!event._fromRepeaterChild) {
				if (!!~utils.indexOf(name, this.repeater.selectionEvents)) {
					this._selectionHandler();
					event._fromRepeaterChild = true;
				}
			}
			return sup.apply(this, arguments);
		};
	}),

	/*
	* @method
	* @private
	*/
	constructed: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			var r = this.repeater,
				s = r.selectionProperty;
			// this property will only be set if the instance of the repeater needs
			// to track the selected state from the view and model and keep them in sync
			if (s) {
				var bnd = this.binding({
					from: 'model.' + s,
					to: 'selected',
					oneWay: false/*,
					kind: enyo.BooleanBinding*/
				});
				this._selectionBindingId = bnd.euid;
			}
		};
	}),

	/*
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			if (this._selectionBindingId) {
				var b$ = Binding.find(this._selectionBindingId);
				if (b$) {
					b$.destroy();
				}
			}
			sup.apply(this, arguments);
		};
	}),

	/*
	* @private
	*/
	_selectionBindingId: null
};
},{"../../enyo":12,"./Binding":18,"./kind":96,"./utils":106}],108:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils'),
	platform = require('../../../enyo/lib/platform');

var
	Layout = require('../../../enyo/lib/Layout'),
	Dom = require('../../../enyo/lib/dom');

/**
* {@link enyo.Arranger} is an {@link enyo.Layout} that considers one of the
* controls it lays out as active. The other controls are placed relative to
* the active control as makes sense for the layout.
*
* `enyo.Arranger` supports dynamic layouts, meaning it's possible to transition
* between an arranger's layouts	via animation. Typically, arrangers should lay out
* controls using CSS transforms, since these are optimized for animation. To
* support this, the controls in an arranger are absolutely positioned, and
* the Arranger kind has an [accelerated]{@link enyo.Arranger#accelerated} property,
* which marks controls for CSS compositing. The default setting of `'auto'` ensures
* that this will occur if enabled by the platform.
*
* For more information, see the documentation on
* [Arrangers]{@linkplain $dev-guide/building-apps/layout/arrangers.html} in the
* Enyo Developer Guide.
*
* @class  enyo.Arranger
* @extends enyo.Layout
* @public
*/
var Arranger = module.exports = kind(
	/** @lends  enyo.Arranger.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Arranger',

	/**
	* @private
	*/
	kind: Layout,

	/**
	* @private
	*/
	layoutClass: 'enyo-arranger',

	/**
	* Flag indicating whether the Arranger should lay out controls using CSS
	* compositing. The default setting `('auto')` will mark controls for compositing
	* if the platform supports it.
	*
	* @type {String|Boolean}
	* @default 'auto'
	* @protected
	*/
	accelerated: 'auto',

	/**
	* A property of the drag event, used to calculate the amount that a drag will
	* move the layout.
	*
	* @type {String}
	* @default 'ddx'
	* @private
	*/
	dragProp: 'ddx',

	/**
	* A property of the drag event, used to calculate the direction of the drag.
	*
	* @type {String}
	* @default 'xDirection'
	* @private
	*/
	dragDirectionProp: 'xDirection',

	/**
	* A property of the drag event, used to calculate whether a drag should occur.
	*
	* @type {String}
	* @default 'horizontal'
	* @private
	*/
	canDragProp: 'horizontal',

	/**
	* If set to `true`, transitions between non-adjacent arrangements will go
	* through the intermediate arrangements. This is useful when direct
	* transitions between arrangements would be visually jarring.
	*
	* @type {Boolean}
	* @default false
	* @protected
	*/
	incrementalPoints: false,

	/**
	* Called when removing an arranger (e.g., when switching a Panels control to a
	* different `arrangerKind`). Subkinds should implement this function to reset
	* whatever properties they've changed on child controls. Note that you **must**
	* call the superkind implementation in your subkind's `destroy()` function.
	*
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			var c$ = this.container.getPanels();
			for (var i=0, c; (c=c$[i]); i++) {
				c._arranger = null;
			}
			sup.apply(this, arguments);
		};
	}),

	/**
	* Arranges the given array of `controls` in the layout specified by `index`. When
	* implementing this method, rather than applying styling directly to controls, call
	* [arrangeControl()]{@link enyo.Arranger#arrangeControl} and pass in an arrangement
	* object with styling settings. The styles will then be applied via
	* [flowControl()]{@link enyo.Arranger#flowControl}.
	*
	* @param {enyo.Control[]} controls
	* @param {Number} index
	* @virtual
	* @protected
	*/
	arrange: function (controls, index) {
	},

	/**
	* Sizes the controls in the layout. This method is called only at reflow time.
	* Note that the sizing operation has been separated from the layout done in
	* [arrange()]{@link enyo.Arranger#arrange} because it is expensive and not suitable
	* for dynamic layout.
	*
	* @virtual
	* @protected
	*/
	size: function () {
	},

	/**
	* Called when a layout transition begins. Implement this method to perform
	* tasks that should only occur when a transition starts; for example, some
	* controls might be shown or hidden. In addition, the `transitionPoints`
	* array may be set on the container to dictate the named arrangements
	* between which the transition occurs.
	*
	* @protected
	*/
	start: function () {
		var f = this.container.fromIndex, t = this.container.toIndex;
		var p$ = this.container.transitionPoints = [f];
		// optionally add a transition point for each index between from and to.
		if (this.incrementalPoints) {
			var d = Math.abs(t - f) - 2;
			var i = f;
			while (d >= 0) {
				i = i + (t < f ? -1 : 1);
				p$.push(i);
				d--;
			}
		}
		p$.push(this.container.toIndex);
	},

	/**
	* Called when a layout transition completes. Implement this method to
	* perform tasks that should only occur when a transition ends; for
	* example, some controls might be shown or hidden.
	*
	* @virtual
	* @protected
	*/
	finish: function () {
	},

	/**
	* Called when dragging the layout, this method returns the difference in
	* pixels between the arrangement `a0` for layout setting `i0`	and
	* arrangement `a1` for layout setting `i1`. This data is used to calculate
	* the percentage that a drag should move the layout between two active states.
	*
	* @param {Number} i0 - The initial layout setting.
	* @param {Object} a0 - The initial arrangement.
	* @param {Number} i1 - The target layout setting.
	* @param {Object} a1 - The target arrangement.
	* @virtual
	* @protected
	*/
	calcArrangementDifference: function (i0, a0, i1, a1) {
	},

	/**
	* @private
	*/
	canDragEvent: function (event) {
		return event[this.canDragProp];
	},

	/**
	* @private
	*/
	calcDragDirection: function (event) {
		return event[this.dragDirectionProp];
	},

	/**
	* @private
	*/
	calcDrag: function (event) {
		return event[this.dragProp];
	},

	/**
	* @private
	*/
	drag: function (dp, an, a, bn, b) {
		var f = this.measureArrangementDelta(-dp, an, a, bn, b);
		return f;
	},

	/**
	* @private
	*/
	measureArrangementDelta: function (x, i0, a0, i1, a1) {
		var d = this.calcArrangementDifference(i0, a0, i1, a1);
		var s = d ? x / Math.abs(d) : 0;
		s = s * (this.container.fromIndex > this.container.toIndex ? -1 : 1);
		return s;
	},

	/**
	* Arranges the panels, with the panel at `index` being designated as active.
	*
	* @param  {Number} index - The index of the active panel.
	* @private
	*/
	_arrange: function (index) {
		// guard against being called before we've been rendered
		if (!this.containerBounds) {
			this.reflow();
		}
		var c$ = this.getOrderedControls(index);
		this.arrange(c$, index);
	},

	/**
	* Arranges `control` according to the specified `arrangement`.
	*
	* Note that this method doesn't actually modify `control` but rather sets the
	* arrangement on a private member of the control to be retrieved by
	* {@link enyo.Panels}.
	*
	* @param  {enyo.Control} control
	* @param  {Object} arrangement
	* @private
	*/
	arrangeControl: function (control, arrangement) {
		control._arranger = utils.mixin(control._arranger || {}, arrangement);
	},

	/**
	* Called before HTML is rendered. Applies CSS to panels to ensure GPU acceleration if
	* [accelerated]{@link enyo.Arranger#accelerated} is `true`.
	*
	* @private
	*/
	flow: function () {
		this.c$ = [].concat(this.container.getPanels());
		this.controlsIndex = 0;
		for (var i=0, c$=this.container.getPanels(), c; (c=c$[i]); i++) {
			Dom.accelerate(c, !c.preventAccelerate && this.accelerated);
			if (platform.safari) {
				// On Safari-desktop, sometimes having the panel's direct child set to accelerate isn't sufficient
				// this is most often the case with Lists contained inside another control, inside a Panels
				var grands=c.children;
				for (var j=0, kid; (kid=grands[j]); j++) {
					Dom.accelerate(kid, this.accelerated);
				}
			}
		}
	},

	/**
	* Called during "rendered" phase to [size]{@link enyo.Arranger#size} the controls.
	*
	* @private
	*/
	reflow: function () {
		var cn = this.container.hasNode();
		this.containerBounds = cn ? {width: cn.clientWidth, height: cn.clientHeight} : {};
		this.size();
	},

	/**
	* If the {@link enyo.Panels} has an arrangement, flows each control according to that
	* arrangement.
	*
	* @private
	*/
	flowArrangement: function () {
		var a = this.container.arrangement;
		if (a) {
			for (var i=0, c$=this.container.getPanels(), c; (c=c$[i]) && (a[i]); i++) {
				this.flowControl(c, a[i]);
			}
		}
	},
	/**
	* Lays out the given `control` according to the settings stored in the
	* `arrangement` object. By default, `flowControl()` will apply settings for
	* `left`, `top`, and `opacity`. This method should only be implemented to apply
	* other settings made via [arrangeControl()]{@link enyo.Arranger#arrangeControl}.
	*
	* @param {enyo.Control} control - The control to be laid out.
	* @param {Object} arrangement - An object whose members specify the layout settings.
	* @protected
	*/
	flowControl: function (control, arrangement) {
		Arranger.positionControl(control, arrangement);
		var o = arrangement.opacity;
		if (o != null) {
			Arranger.opacifyControl(control, o);
		}
	},

	/**
	* Gets an array of controls arranged in state order.
	* note: optimization, dial around a single array.
	*
	* @param  {Number} index     - The index of the active panel.
	* @return {enyo.Control[]}   - Ordered array of controls.
	* @private
	*/
	getOrderedControls: function (index) {
		var whole = Math.floor(index);
		var a = whole - this.controlsIndex;
		var sign = a > 0;
		var c$ = this.c$ || [];
		for (var i=0; i<Math.abs(a); i++) {
			if (sign) {
				c$.push(c$.shift());
			} else {
				c$.unshift(c$.pop());
			}
		}
		this.controlsIndex = whole;
		return c$;
	}
});

/**
* Positions a control via transform--`translateX/translateY` if supported,
* falling back to `left/top` if not.
*
* @lends enyo.Arranger
* @param  {enyo.Control} control - The control to position.
* @param  {Object} bounds        - The new bounds for `control`.
* @param  {String} unit          - The unit for `bounds` members.
* @public
*/
Arranger.positionControl = function (control, bounds, unit) {
	unit = unit || 'px';
	if (!this.updating) {
		// IE10 uses setBounds because of control hit caching problems seem in some apps
		if (Dom.canTransform() && !control.preventTransform && !platform.android && platform.ie !== 10) {
			var l = bounds.left, t = bounds.top;
			l = utils.isString(l) ? l : l && (l + unit);
			t = utils.isString(t) ? t : t && (t + unit);
			Dom.transform(control, {translateX: l || null, translateY: t || null});
		} else {
			// If a previously positioned control has subsequently been marked with
			// preventTransform, we need to clear out any old translation values.
			if (Dom.canTransform() && control.preventTransform) {
				Dom.transform(control, {translateX: null, translateY: null});
			}
			control.setBounds(bounds, unit);
		}
	}
};

/**
* Sets the opacity value for a given control.
*
* @lends enyo.Arranger
* @param  {enyo.Control} inControl - The control whose opacity is to be set.
* @param  {Number} inOpacity - The new opacity value for the control.
* @public
*/
Arranger.opacifyControl = function (inControl, inOpacity) {
	var o = inOpacity;
	// FIXME: very high/low settings of opacity can cause a control to
	// blink so cap this here.
	o = o > 0.99 ? 1 : (o < 0.01 ? 0 : o);
	// note: we only care about ie8
	if (platform.ie < 9) {
		inControl.applyStyle('filter', 'progid:DXImageTransform.Microsoft.Alpha(Opacity=' + (o * 100) + ')');
	} else {
		inControl.applyStyle('opacity', o);
	}
};
},{"../../../enyo/lib/Layout":43,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/platform":102,"../../../enyo/lib/utils":106}],111:[function(require,module,exports){
var
    kind = require('../../../enyo/lib/kind'),
    Layout = require('../../../enyo/lib/Layout');

/**
* {@link enyo.ContextualLayout} provides the base positioning logic for a contextual
* layout strategy. This layout strategy is intended for use with a popup in a
* decorator/activator scenario, in which the popup is positioned relative to
* the activator, e.g.:
*
* ```
* {kind: 'onyx.ContextualPopupDecorator', components: [
*   {content: 'Show Popup'},
*   {kind: 'onyx.ContextualPopup',
*       title: 'Sample Popup',
*       actionButtons: [
*           {content: 'Button 1', classes: 'onyx-button-warning'},
*           {content: 'Button 2'}
*       ],
*       components: [
*           {content: 'Sample component in popup'}
*       ]
*   }
* ]}
* ```
*
* The decorator contains the popup and activator, with the activator being the
* first child component (i.e., the "Show Popup" button). The contextual layout
* strategy is applied because, in the definition of `onyx.ContextualPopup`,
* its `layoutKind` property is set to `enyo.ContextualLayout`.
*
* Note that a popup using ContextualLayout as its `layoutKind` is expected to
* declare several specific properties:
*
* - `vertFlushMargin` - The vertical flush layout margin, i.e., how close the
* popup's edge may come to the vertical screen edge (in pixels) before
* being laid out "flush" style.
* - `horizFlushMargin` - The horizontal flush layout margin, i.e., how close
* the popup's edge may come to the horizontal screen edge (in pixels)
* before being laid out "flush" style.
* - `widePopup` - A popup wider than this value (in pixels) is considered wide
* for layout calculation purposes.
* - `longPopup` - A popup longer than this value (in pixels) is considered long
* for layout calculation purposes.
* - `horizBuffer` - Horizontal flush popups are not allowed within this buffer
* area (in pixels) on the left or right screen edge.
* - `activatorOffset` - The popup activator's offset on the page (in pixels);
* this should be calculated whenever the popup is to be shown.
*
* @typedef {Object} enyo.ContextualLayout
*
* @class enyo.ContextualLayout
* @extends enyo.Layout
* @public
*/

module.exports = kind(
    /** @lends  enyo.ContextualLayout.prototype */ {

    /**
    * @private
    */
    name: 'enyo.ContextualLayout',

    /**
	* @private
	*/
    kind: Layout,

    /**
    * Adjusts the popup's position, as well as the nub location and direction.
    *
    * @public
    */
    adjustPosition: function () {
        if (this.container.showing && this.container.hasNode()) {
            /****ContextualPopup positioning rules:
                1. Activator Location:
                    a. If activator is located in a corner then position using a flush style.
                        i.  Attempt vertical first.
                        ii. Horizontal if vertical doesn't fit.
                    b. If not in a corner then check if the activator is located in one of the 4 "edges" of the view & position the
                        following way if so:
                        i.   Activator is in top edge, position popup below it.
                        ii.  Activator is in bottom edge, position popup above it.
                        iii. Activator is in left edge, position popup to the right of it.
                        iv.  Activator is in right edge, position popup to the left of it.

                2. Screen Size - the pop-up should generally extend in the direction where thereâs room for it.
                    Note: no specific logic below for this rule since it is built into the positioning functions, ie we attempt to never
                    position a popup where there isn't enough room for it.

                3. Popup Size:
                    i.  If popup content is wide, use top or bottom positioning.
                    ii. If popup content is long, use horizontal positioning.

                4. Favor top or bottom:
                    If all the above rules have been followed and location can still vary then favor top or bottom positioning.

                5. If top or bottom will work, favor bottom.
                    Note: no specific logic below for this rule since it is built into the vertical position functions, ie we attempt to
                    use a bottom position for the popup as much possible. Additionally within the vetical position function we center the
                    popup if the activator is at the vertical center of the view.
            ****/
            this.resetPositioning();
            var innerWidth = this.getViewWidth();
            var innerHeight = this.getViewHeight();

            //These are the view "flush boundaries"
            var topFlushPt = this.container.vertFlushMargin;
            var bottomFlushPt = innerHeight - this.container.vertFlushMargin;
            var leftFlushPt = this.container.horizFlushMargin;
            var rightFlushPt = innerWidth - this.container.horizFlushMargin;

            //Rule 1 - Activator Location based positioning
            //if the activator is in the top or bottom edges of the view, check if the popup needs flush positioning
            if ((this.offset.top + this.offset.height) < topFlushPt || this.offset.top > bottomFlushPt) {
                //check/try vertical flush positioning	(rule 1.a.i)
                if (this.applyVerticalFlushPositioning(leftFlushPt, rightFlushPt)) {
                    return;
                }

                //if vertical doesn't fit then check/try horizontal flush (rule 1.a.ii)
                if (this.applyHorizontalFlushPositioning(leftFlushPt, rightFlushPt)) {
                    return;
                }

                //if flush positioning didn't work then try just positioning vertically (rule 1.b.i & rule 1.b.ii)
                if (this.applyVerticalPositioning()){
                    return;
                }
            //otherwise check if the activator is in the left or right edges of the view & if so try horizontal positioning
            } else if ((this.offset.left + this.offset.width) < leftFlushPt || this.offset.left > rightFlushPt) {
                //if flush positioning didn't work then try just positioning horizontally (rule 1.b.iii & rule 1.b.iv)
                if (this.applyHorizontalPositioning()){
                    return;
                }
            }

            //Rule 2 - no specific logic below for this rule since it is inheritent to the positioning functions, ie we attempt to never
            //position a popup where there isn't enough room for it.

            //Rule 3 - Popup Size based positioning
            var clientRect = this.getBoundingRect(this.container.node);

            //if the popup is wide then use vertical positioning
            if (clientRect.width > this.container.widePopup) {
                if (this.applyVerticalPositioning()){
                    return;
                }
            }
            //if the popup is long then use horizontal positioning
            else if (clientRect.height > this.container.longPopup) {
                if (this.applyHorizontalPositioning()){
                    return;
                }
            }

            //Rule 4 - Favor top or bottom positioning
            if (this.applyVerticalPositioning()) {
                return;
            }
            //but if thats not possible try horizontal
            else if (this.applyHorizontalPositioning()){
                return;
            }

            //Rule 5 - no specific logic below for this rule since it is built into the vertical position functions, ie we attempt to
            //         use a bottom position for the popup as much possible.
        }
    },
    //

    /**
    * Determines whether the popup will fit onscreen if moved below or above the activator.
    *
    * @return {Boolean} `true` if popup will fit onscreen; otherwise, `false`.
    * @public
    */
    initVerticalPositioning: function () {
        this.resetPositioning();
        this.container.addClass('vertical');

        var clientRect = this.getBoundingRect(this.container.node);
        var innerHeight = this.getViewHeight();

        if (this.container.floating){
            if (this.offset.top < (innerHeight / 2)) {
                this.applyPosition({top: this.offset.top + this.offset.height, bottom: 'auto'});
                this.container.addClass('below');
            } else {
                this.applyPosition({top: this.offset.top - clientRect.height, bottom: 'auto'});
                this.container.addClass('above');
            }
        } else {
            //if the popup's bottom goes off the screen then put it on the top of the invoking control
            if ((clientRect.top + clientRect.height > innerHeight) && ((innerHeight - clientRect.bottom) < (clientRect.top - clientRect.height))){
                this.container.addClass('above');
            } else {
                this.container.addClass('below');
            }
        }

        //if moving the popup above or below the activator puts it past the edge of the screen then vertical doesn't work
        clientRect = this.getBoundingRect(this.container.node);
        if ((clientRect.top + clientRect.height) > innerHeight || clientRect.top < 0){
            return false;
        }

        return true;
    },

    /**
    * Moves the popup below or above the activating control.
    *
    * @return {Boolean} `false` if popup was not moved because it would not fit onscreen
    * in the new position; otherwise, `true`.
    * @public
    */
    applyVerticalPositioning: function () {
        //if we can't fit the popup above or below the activator then forget vertical positioning
        if (!this.initVerticalPositioning()) {
            return false;
        }

        var clientRect = this.getBoundingRect(this.container.node);
        var innerWidth = this.getViewWidth();

        if (this.container.floating){
            //Get the left edge delta to horizontally center the popup
            var centeredLeft = this.offset.left + this.offset.width/2 - clientRect.width/2;
            if (centeredLeft + clientRect.width > innerWidth) {//popup goes off right edge of the screen if centered
                this.applyPosition({left: this.offset.left + this.offset.width - clientRect.width});
                this.container.addClass('left');
            } else if (centeredLeft < 0) {//popup goes off left edge of the screen if centered
                this.applyPosition({left:this.offset.left});
                this.container.addClass('right');
            } else {//center the popup
                this.applyPosition({left: centeredLeft});
            }

        } else {
            //Get the left edge delta to horizontally center the popup
            var centeredLeftDelta = this.offset.left + this.offset.width/2 - clientRect.left - clientRect.width/2;
            if (clientRect.right + centeredLeftDelta > innerWidth) {//popup goes off right edge of the screen if centered
                this.applyPosition({left: this.offset.left + this.offset.width - clientRect.right});
                this.container.addRemoveClass('left', true);
            } else if (clientRect.left + centeredLeftDelta < 0) {//popup goes off left edge of the screen if centered
                this.container.addRemoveClass('right', true);
            } else {//center the popup
                this.applyPosition({left: centeredLeftDelta});
            }
        }

        return true;
    },

    /**
    * Positions the popup vertically flush with the activating control.
    *
    * @param {Number} leftFlushPt - Left side cutoff.
    * @param {Number} rightFlushPt - Right side cutoff.
    * @return {Boolean} `false` if popup will not fit onscreen in new position;
    * otherwise, `true`.
    * @public
    */
    applyVerticalFlushPositioning: function (leftFlushPt, rightFlushPt) {
        //if we can't fit the popup above or below the activator then forget vertical positioning
        if (!this.initVerticalPositioning()) {
            return false;
        }

        var clientRect = this.getBoundingRect(this.container.node);
        var innerWidth = this.getViewWidth();

        //If the activator's right side is within our left side cut off use flush positioning
        if ((this.offset.left + this.offset.width/2) < leftFlushPt){
            //if the activator's left edge is too close or past the screen left edge
            if (this.offset.left + this.offset.width/2 < this.container.horizBuffer){
                this.applyPosition({left:this.container.horizBuffer + (this.container.floating ? 0 : -clientRect.left)});
            } else {
                this.applyPosition({left:this.offset.width/2  + (this.container.floating ? this.offset.left : 0)});
            }

            this.container.addClass('right');
            this.container.addClass('corner');
            return true;
        }
        //If the activator's left side is within our right side cut off use flush positioning
        else if (this.offset.left + this.offset.width/2 > rightFlushPt) {
            if ((this.offset.left+this.offset.width/2) > (innerWidth-this.container.horizBuffer)){
                this.applyPosition({left:innerWidth - this.container.horizBuffer - clientRect.right});
            } else {
                this.applyPosition({left: (this.offset.left + this.offset.width/2) - clientRect.right});
            }
            this.container.addClass('left');
            this.container.addClass('corner');
            return true;
        }

        return false;
    },

    /**
    * Determines whether popup will fit onscreen if moved to the left or right of the
    * activator.
    *
    * @return {Boolean} `true` if the popup will fit onscreen; otherwise, `false`.
    * @public
    */
    initHorizontalPositioning: function () {
        this.resetPositioning();

        var clientRect = this.getBoundingRect(this.container.node);
        var innerWidth = this.getViewWidth();

        //adjust horizontal positioning of the popup & nub vertical positioning
        if (this.container.floating){
            if ((this.offset.left + this.offset.width) < innerWidth/2) {
                this.applyPosition({left: this.offset.left + this.offset.width});
                this.container.addRemoveClass('left', true);
            } else {
                this.applyPosition({left: this.offset.left - clientRect.width});
                this.container.addRemoveClass('right', true);
            }
        } else {
            if (this.offset.left - clientRect.width > 0) {
                this.applyPosition({left: this.offset.left - clientRect.left - clientRect.width});
                this.container.addRemoveClass('right', true);
            } else {
                this.applyPosition({left: this.offset.width});
                this.container.addRemoveClass('left', true);
            }
        }
        this.container.addRemoveClass('horizontal', true);

        //if moving the popup left or right of the activator puts it past the edge of the screen then horizontal won't work
        clientRect = this.getBoundingRect(this.container.node);
        if (clientRect.left < 0 || (clientRect.left + clientRect.width) > innerWidth){
            return false;
        }
        return true;

    },

    /**
    * Moves the popup to the left or right of the activating control.
    *
    * @return {Boolean} `false` if popup was not moved because it would not fit onscreen
    * in the new position; otherwise, `true`.
    * @public
    */
    applyHorizontalPositioning: function () {
        //if we can't fit the popup left or right of the activator then forget horizontal positioning
        if (!this.initHorizontalPositioning()) {
            return false;
        }

        var clientRect = this.getBoundingRect(this.container.node);
        var innerHeight = this.getViewHeight();
        var activatorCenter = this.offset.top + this.offset.height/2;

        if (this.container.floating){
            //if the activator's center is within 10% of the center of the view, vertically center the popup
            if ((activatorCenter >= (innerHeight/2 - 0.05 * innerHeight)) && (activatorCenter <= (innerHeight/2 + 0.05 * innerHeight))) {
                this.applyPosition({top: this.offset.top + this.offset.height/2 - clientRect.height/2, bottom: 'auto'});
            } else if (this.offset.top + this.offset.height < innerHeight/2) { //the activator is in the top 1/2 of the screen
                this.applyPosition({top: this.offset.top, bottom: 'auto'});
                this.container.addRemoveClass('high', true);
            } else { //otherwise the popup will be positioned in the bottom 1/2 of the screen
                this.applyPosition({top: this.offset.top - clientRect.height + this.offset.height*2, bottom: 'auto'});
                this.container.addRemoveClass('low', true);
            }
        } else {
            //if the activator's center is within 10% of the center of the view, vertically center the popup
            if ((activatorCenter >= (innerHeight/2 - 0.05 * innerHeight)) && (activatorCenter <= (innerHeight/2 + 0.05 * innerHeight))) {
                this.applyPosition({top: (this.offset.height - clientRect.height)/2});
            } else if (this.offset.top + this.offset.height < innerHeight/2) { //the activator is in the top 1/2 of the screen
                this.applyPosition({top: -this.offset.height});
                this.container.addRemoveClass('high', true);
            } else { //otherwise the popup will be positioned in the bottom 1/2 of the screen
                this.applyPosition({top: clientRect.top - clientRect.height - this.offset.top + this.offset.height});
                this.container.addRemoveClass('low', true);
            }
        }
        return true;
    },


    /**
    * Positions the popup horizontally flush with the activating control.
    *
    * @param {Number} leftFlushPt - Left side cutoff.
    * @param {Number} rightFlushPt - Right side cutoff.
    * @return {Boolean} `false` if popup will not fit onscreen in new position;
    * otherwise, `true`.
    * @public
    */
    applyHorizontalFlushPositioning: function (leftFlushPt, rightFlushPt) {
        //if we can't fit the popup left or right of the activator then forget horizontal positioning
        if (!this.initHorizontalPositioning()) {
            return false;
        }

        var clientRect = this.getBoundingRect(this.container.node);
        var innerHeight = this.getViewHeight();

        //adjust vertical positioning (high or low nub & popup position)
        if (this.container.floating){
            if (this.offset.top < (innerHeight/2)){
                this.applyPosition({top: this.offset.top + this.offset.height/2});
                this.container.addRemoveClass('high', true);
            } else {
                this.applyPosition({top:this.offset.top + this.offset.height/2 - clientRect.height});
                this.container.addRemoveClass('low', true);
            }
        } else {
            if (((clientRect.top + clientRect.height) > innerHeight) && ((innerHeight - clientRect.bottom) < (clientRect.top - clientRect.height))) {
                this.applyPosition({top: clientRect.top - clientRect.height - this.offset.top - this.offset.height/2});
                this.container.addRemoveClass('low', true);
            } else {
                this.applyPosition({top: this.offset.height/2});
                this.container.addRemoveClass('high', true);
            }
        }

        //If the activator's right side is within our left side cut off use flush positioning
        if ((this.offset.left + this.offset.width) < leftFlushPt){
            this.container.addClass('left');
            this.container.addClass('corner');
            return true;
        }
        //If the activator's left side is within our right side cut off use flush positioning
        else if (this.offset.left > rightFlushPt) {
            this.container.addClass('right');
            this.container.addClass('corner');
            return true;
        }

        return false;
    },

    /**
    * Retrieves an object with properties describing the bounding rectangle for the
    * passed-in DOM node.
    *
    * @param  {String} inNode - DOM node for which to retrieve the bounding rectangle.
    * @return {Object} Object with properties describing the DOM node's bounding rectangle.
    * @private
    */
    getBoundingRect:  function (inNode){
        // getBoundingClientRect returns top/left values which are relative to the viewport and not absolute
        var o = inNode.getBoundingClientRect();
        if (!o.width || !o.height) {
            return {
                left: o.left,
                right: o.right,
                top: o.top,
                bottom: o.bottom,
                width: o.right - o.left,
                height: o.bottom - o.top
            };
        }
        return o;
    },

    /**
    * @private
    */
    getViewHeight: function () {
        return (window.innerHeight === undefined) ? document.documentElement.clientHeight : window.innerHeight;
    },

    /**
    * @private
    */
    getViewWidth: function () {
        return (window.innerWidth === undefined) ? document.documentElement.clientWidth : window.innerWidth;
    },

    /**
    * @private
    */
    applyPosition: function (inRect) {
        var s = '';
        for (var n in inRect) {
            s += (n + ':' + inRect[n] + (isNaN(inRect[n]) ? '; ' : 'px; '));
        }
        this.container.addStyles(s);
    },

    /**
    * @private
    */
    resetPositioning: function () {
        this.container.removeClass('right');
        this.container.removeClass('left');
        this.container.removeClass('high');
        this.container.removeClass('low');
        this.container.removeClass('corner');
        this.container.removeClass('below');
        this.container.removeClass('above');
        this.container.removeClass('vertical');
        this.container.removeClass('horizontal');

        this.applyPosition({left: 'auto'});
        this.applyPosition({top: 'auto'});
    },

    /**
    * @private
    */
    reflow: function () {
        this.offset = this.container.activatorOffset;
        this.adjustPosition();
    }
});
},{"../../../enyo/lib/Layout":43,"../../../enyo/lib/kind":96}],44:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	LinkedListNode = require('./LinkedListNode');

/**
* An abstract linked-list.
*
* @class enyo.LinkedList
* @private
*/
module.exports = kind(
	/** @lends enyo.LinkedList.prototype */ {
	
	/**
	* @private
	*/
	kind: null,
	
	/**
	* @private
	*/

	
	/**
	* @private
	*/
	nodeKind: LinkedListNode,
	
	/**
	* @private
	*/
	head: null,
	
	/**
	* @private
	*/
	tail: null,
	
	/**
	* @private
	*/
	length: 0,
	
	/**
	* @private
	*/
	clear: function () {
		if (this.head) {
			// this will trigger a chain event down the list
			this.head.destroy();
		}
		this.head = null;
		this.tail = null;
		this.length = 0;			
	},
	
	/**
	* @private
	*/
	slice: function (fromNode, toNode) {
		var node = fromNode || this.head
			, list = new this.ctor()
			, cpy;
		
		// ensure we have a final node or our tail
		toNode = toNode || this.tail;
		
		if (node && node !== toNode) {
			do {
				cpy = node.copy();
				list.appendNode(cpy);
			} while ((node = node.next) && node !== toNode);
		}
		
		return list;
	},
	
	/**
	* @private
	*/
	destroy: function () {
		this.clear();
		this.destroyed = true;
	},
	
	/**
	* @private
	*/
	createNode: function (props) {
		return new this.nodeKind(props);
	},
	
	/**
	* @private
	*/
	deleteNode: function (node) {
		this.removeNode(node);
		
		// can't chain destruct because we removed its chain references
		node.destroy();
		return this;
	},
	
	/**
	* @private
	*/
	removeNode: function (node) {
		var prev = node.prev
			, next = node.next;
			
		prev && (prev.next = next);
		next && (next.prev = prev);
		this.length--;
		node.next = node.prev = null;
		return this;
	},
	
	/**
	* @private
	*/
	appendNode: function (node, targetNode) {
		targetNode = targetNode || this.tail;
		
		if (targetNode) {
			if (targetNode.next) {
				node.next = targetNode.next;
			}
			
			targetNode.next = node;
			node.prev = targetNode;
			
			if (targetNode === this.tail) {
				this.tail = node;
			}
			
			this.length++;
		} else {
			
			this.head = this.tail = node;
			node.prev = node.next = null;
			this.length = 1;
		}
		return this;
	},
	
	/**
	* @private
	*/
	find: function (fn, ctx, targetNode) {
		var node = targetNode || this.head;
		if (node) {
			do {
				if (fn.call(ctx || this, node, this)) {
					return node;
				}
			} while ((node = node.next));
		}
		// if no node qualified it returns false
		return false;
	},
	
	/**
	* @private
	*/
	forward: function (fn, ctx, targetNode) {
		var node = targetNode || this.head;
		if (node) {
			do {
				if (fn.call(ctx || this, node, this)) {
					break;
				}
			} while ((node = node.next));
		}
		// returns the last node (if any) that was processed in the chain
		return node;
	},
	
	/**
	* @private
	*/
	backward: function (fn, ctx, targetNode) {
		var node = targetNode || this.tail;
		if (node) {
			do {
				if (fn.call(ctx || this, node, this)) {
					break;
				}
			} while ((node = node.prev));
		}
		// returns the last node (if any) that was processed in the chain
		return node;
	},
	
	/**
	* @private
	*/
	constructor: function () {
		this.nodeType = kind.constructorForKind(this.nodeType);
	}
});
},{"../../enyo":12,"./LinkedListNode":45,"./kind":96}],53:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	LinkedListNode = require('./LinkedListNode');

function get (base, prop) {
	return base && /*isObject(base)*/ (typeof base == 'object')? (
		base.get? base.get(prop): base[prop]
	): undefined;
}

/**
* An internally used {@glossary kind}.
*
* @class enyo.ObserverChainNode
* @extends enyo.LinkedListNode
* @private
*/
module.exports = kind(
	/** @lends enyo.ObserverChainNode.prototype */ {

	/**
	* @private
	*/
	kind: LinkedListNode,

	/**
	* @private
	*/

	
	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.connect();
		};
	}),
	
	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			this.disconnect();
			sup.apply(this, arguments);
			this.observer = null;
			this.list = null;
			this.object = null;
		};
	}),
	
	/**
	* @private
	*/
	connect: function () {
		var obj = this.object
			, obs = this._changed
			, prop = this.property;
		if (obj) {
			if (obj.observe) obj.observe(prop, obs, this, {noChain: true, priority: true});
			this.connected = true;
			this.list.connected++;
		}
	},
	
	/**
	* @private
	*/
	disconnect: function () {
		var obj = this.object
			, obs = this._changed
			, prop = this.property
			, was = this.connected;
		obj && obj.unobserve && obj.unobserve(prop, obs, this);
		this.connected = null;
		if (was) this.list.connected--;
	},
	
	/**
	* @private
	*/
	setObject: function (object) {
		var cur = this.object
			, prop = this.property
			, was, is;
		
		if (cur !== object) {
			this.disconnect();
			this.object = object;
			this.connect();
			
			if (this.list.tail === this) {
				was = get(cur, prop);
				is = get(object, prop);
				// @TODO: It would be better to somehow cache values
				// such that it could intelligently derive the difference
				// without needing to continuously look it up with get
				was !== is && this.list.observed(this, was, is);
			}
		}
	},
	
	/**
	* @private
	*/
	_changed: function (was, is) {
		this.list.observed(this, was, is);
	}
});
},{"../../enyo":12,"./LinkedListNode":45,"./kind":96}],109:[function(require,module,exports){
var
	kind = require('../../enyo/lib/kind');

var
	Arranger = require('./Arranger');


/**
* {@link enyo.CardArranger} is an {@link enyo.Arranger} that displays only
* one active control. The non-active controls are hidden with
* `setShowing(false)`. Transitions between arrangements are handled by fading
* from one control to the next.
*
* For more information, see the documentation on
* [Arrangers]{@linkplain $dev-guide/building-apps/layout/arrangers.html} in the
* Enyo Developer Guide.
*
* @class  enyo.CardArranger
* @extends enyo.Arranger
* @public
*/
module.exports = kind(
	/** @lends  enyo.CardArranger.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.CardArranger',

	/**
	* @private
	*/
	kind: Arranger,

	/**
	* @private
	*/
	layoutClass: 'enyo-arranger enyo-arranger-fit',

	/**
	* @see {@link enyo.Arranger.calcArrangementDifference}
	* @protected
	*/
	calcArrangementDifference: function (i0, a0, i1, a1) {
		return this.containerBounds.width;
	},

	/**
	* Applies opacity to the activation and deactivation of panels. Expects the passed-in
	* array of controls to be ordered such that the first control in the array is the active
	* panel.
	*
	* @see {@link enyo.Arranger.arrange}
	* @protected
	*/
	arrange: function (controls, arrangement) {
		for (var i=0, c, v; (c=controls[i]); i++) {
			v = (i === 0) ? 1 : 0;
			this.arrangeControl(c, {opacity: v});
		}
	},

	/**
	* Shows the active panel at the start of transition. Also triggers a resize on
	* the active panel if it wasn't previously showing.
	*
	* @see {@link enyo.Arranger.start}
	* @method
	* @protected
	*/
	start: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			var c$ = this.container.getPanels();
			for (var i=0, c; (c=c$[i]); i++) {
				var wasShowing=c.showing;
				c.setShowing(i == this.container.fromIndex || i == (this.container.toIndex));
				if (c.showing && !wasShowing) {
					c.resize();
				}
			}
		};
	}),

	/**
	* Hides all non-active panels when the transition completes.
	*
	* @see {@link enyo.Arranger.finish}
	* @method
	* @protected
	*/
	finish: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			var c$ = this.container.getPanels();
			for (var i=0, c; (c=c$[i]); i++) {
				c.setShowing(i == this.container.toIndex);
			}
		};
	}),

	/**
	* Ensures all panels are showing and visible when the arranger is destroyed.
	*
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			var c$ = this.container.getPanels();
			for (var i=0, c; (c=c$[i]); i++) {
				Arranger.opacifyControl(c, 1);
				if (!c.showing) {
					c.setShowing(true);
				}
			}
			sup.apply(this, arguments);
		};
	})
});
},{"../../enyo/lib/kind":96,"./Arranger":108}],110:[function(require,module,exports){
var
	kind = require('../../enyo/lib/kind'),
	dom = require('../../enyo/lib/dom');

var
	Arranger = require('./Arranger');

/**
* {@link enyo.CarouselArranger} is an {@link enyo.Arranger} that displays
* the active control, along with some number of inactive controls to fill the
* available space. The active control is positioned on the left side of the
* container, and the rest of the views are laid out to the right.
*
* One of the controls may have `fit: true` set, in which case it will take up
* any remaining space after all of the other controls have been sized.
*
* For best results with CarouselArranger, you should set a minimum width for
* each control via a CSS style, e.g., `min-width: 25%` or `min-width: 250px`.
*
* Transitions between arrangements are handled by sliding the new controls in
* from the right and sliding the old controls off to the left.
*
* For more information, see the documentation on
* [Arrangers]{@linkplain $dev-guide/building-apps/layout/arrangers.html} in the
* Enyo Developer Guide.
*
* @class  enyo.CarouselArranger
* @extends enyo.Arranger
* @public
*/
module.exports = kind(
	/** @lends enyo.CarouselArranger */ {

	/**
	* @private
	*/
	name: 'enyo.CarouselArranger',

	/**
	* @private
	*/
	kind: Arranger,

	/**
	* Calculates the size of each panel. Considers the padding of the container by calling
	* {@link enyo.dom#calcPaddingExtents} and control margin by calling
	* {@link enyo.dom#calcMarginExtents}. If the container is larger than the combined sizes of
	* the controls, one control may be set to fill the remaining space by setting its `fit`
	* property to `true`. If multiple controls have `fit: true` set, the last control to be so
	* marked will have precedence.
	*
	* @protected
	*/
	size: function () {
		var c$ = this.container.getPanels();
		var padding = this.containerPadding = this.container.hasNode() ? dom.calcPaddingExtents(this.container.node) : {};
		var pb = this.containerBounds;
		var i, e, s, m, c;
		pb.height -= padding.top + padding.bottom;
		pb.width -= padding.left + padding.right;
		// used space
		var fit;
		for (i=0, s=0; (c=c$[i]); i++) {
			m = dom.calcMarginExtents(c.hasNode());
			c.width = c.getBounds().width;
			c.marginWidth = m.right + m.left;
			s += (c.fit ? 0 : c.width) + c.marginWidth;
			if (c.fit) {
				fit = c;
			}
		}
		if (fit) {
			var w = pb.width - s;
			fit.width = w >= 0 ? w : fit.width;
		}
		for (i=0, e=padding.left; (c=c$[i]); i++) {
			c.setBounds({top: padding.top, bottom: padding.bottom, width: c.fit ? c.width : null});
		}
	},

	/**
	* @see {@link enyo.Arranger.arrange}
	* @protected
	*/
	arrange: function (controls, arrangement) {
		if (this.container.wrap) {
			this.arrangeWrap(controls, arrangement);
		} else {
			this.arrangeNoWrap(controls, arrangement);
		}
	},

	/**
	* A non-wrapping carousel arranges the controls from left to right without regard to the
	* ordered array passed via `controls`. `arrangement` will contain the index of the active
	* panel.
	*
	* @private
	*/
	arrangeNoWrap: function (controls, arrangement) {
		var i, aw, cw, c;
		var c$ = this.container.getPanels();
		var s = this.container.clamp(arrangement);
		var nw = this.containerBounds.width;
		// do we have enough content to fill the width?
		for (i=s, cw=0; (c=c$[i]); i++) {
			cw += c.width + c.marginWidth;
			if (cw > nw) {
				break;
			}
		}
		// if content width is less than needed, adjust starting point index and offset
		var n = nw - cw;
		var o = 0;
		if (n > 0) {
			for (i=s-1, aw=0; (c=c$[i]); i--) {
				aw += c.width + c.marginWidth;
				if (n - aw <= 0) {
					o = (n - aw);
					s = i;
					break;
				}
			}
		}
		// arrange starting from needed index with detected offset so we fill space
		var w, e;
		for (i=0, e=this.containerPadding.left + o; (c=c$[i]); i++) {
			w = c.width + c.marginWidth;
			if (i < s) {
				this.arrangeControl(c, {left: -w});
			} else {
				this.arrangeControl(c, {left: Math.floor(e)});
				e += w;
			}
		}
	},

	/**
	* Arranges `controls` from left to right such that the active panel is always the
	* leftmost, with subsequent panels positioned to its right.
	*
	* @private
	*/
	arrangeWrap: function (controls, arrangement) {
		for (var i=0, e=this.containerPadding.left, c; (c=controls[i]); i++) {
			this.arrangeControl(c, {left: e});
			e += c.width + c.marginWidth;
		}
	},

	/**
	* Calculates the change in `left` position between the two arrangements `a0` and `a1`.
	* @protected
	*/
	calcArrangementDifference: function (i0, a0, i1, a1) {
		var i = Math.abs(i0 % this.c$.length);
		return a0[i].left - a1[i].left;
	},

	/**
	* Resets the size and position of all panels.
	*
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			var c$ = this.container.getPanels();
			for (var i=0, c; (c=c$[i]); i++) {
				Arranger.positionControl(c, {left: null, top: null});
				c.applyStyle('top', null);
				c.applyStyle('bottom', null);
				c.applyStyle('left', null);
				c.applyStyle('width', null);
			}
			sup.apply(this, arguments);
		};
	})
});
},{"../../enyo/lib/dom":87,"../../enyo/lib/kind":96,"./Arranger":108}],112:[function(require,module,exports){
var
	kind = require('../../enyo/lib/kind'),
	dom = require('../../enyo/lib/dom');

var
	Arranger = require('./Arranger');

/**
* {@link enyo.DockRightArranger} is an {@link enyo.Arranger} that displays the
* active control, along with some number of inactive controls to fill the
* available space. The active control is positioned on the right side of the
* container and the rest of the views are laid out to the right.
*
* For best results with DockRightArranger, you should set a minimum width
* for each control via a CSS style, e.g., `min-width: 25%` or
* `min-width: 250px`.
*
* Transitions between arrangements are handled by sliding the new control	in
* from the right. If the width of the old control(s) can fit within the
* container, they will slide to the left. If not, they will collapse to the left.
*
* For more information, see the documentation on
* [Arrangers]{@linkplain $dev-guide/building-apps/layout/arrangers.html} in the
* Enyo Developer Guide.
*
* @class  enyo.DockRightArranger
* @extends enyo.Arranger
* @public
*/
module.exports = kind(
	/** @lends enyo.DockRightArranger.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.DockRightArranger',

	/**
	* @private
	*/
	kind: Arranger,

	/**
	* If `true`, the base panel (i.e., the panel at index `0`) will fill the width
	* of the container, while newer controls will slide in and collapse on top of it.
	*
	* @type {Boolean}
	* @default  false
	* @public
	*/
	basePanel: false,

	/**
	* Panels will overlap by this number of pixels.
	*
	* Note that this is imported from the container at construction time.
	*
	* @type {Number}
	* @default  0
	* @public
	*/
	overlap: 0,

	/**
	* The column width in pixels.
	*
	* Note that this is imported from the container at construction time.
	*
	* @type {Number}
	* @default  0
	* @public
	*/
	layoutWidth: 0,

	/**
	* @method
	* @private
	*/
	constructor: function () {
		Arranger.prototype._constructor.apply(this, arguments);
		this.overlap = this.container.overlap != null ? this.container.overlap : this.overlap;
		this.layoutWidth = this.container.layoutWidth != null ? this.container.layoutWidth : this.layoutWidth;
	},

	/**
	* @see {@link enyo.Arranger.size}
	* @protected
	*/
	size: function () {
		var c$ = this.container.getPanels();
		var padding = this.containerPadding = this.container.hasNode() ? dom.calcPaddingExtents(this.container.node) : {};
		var pb = this.containerBounds;
		var i, m, c;
		pb.width -= padding.left + padding.right;
		var nw = pb.width;
		var len = c$.length;
		var offset;
		// panel arrangement positions
		this.container.transitionPositions = {};

		for (i=0; (c=c$[i]); i++) {
			c.width = ((i===0) && (this.container.basePanel)) ? nw : c.getBounds().width;
		}

		for (i=0; (c=c$[i]); i++) {

			if ((i===0) && (this.container.basePanel)) {
				c.setBounds({width: nw});
			}
			c.setBounds({top: padding.top, bottom: padding.bottom});

			for (var j=0; (c=c$[j]); j++) {
				var xPos;
				// index 0 always should always be left-aligned at 0px
				if ((i===0) && (this.container.basePanel)) {
					xPos = 0;
				// else newer panels should be positioned off the viewport
				} else if (j < i) {
					xPos = nw;
				// else active panel should be right-aligned
				} else if (i === j) {
					offset = nw > this.layoutWidth ? this.overlap : 0;
					xPos = (nw - c$[i].width) + offset;
				} else {
					break;
				}
				this.container.transitionPositions[i + '.' + j] = xPos;
			}

			if (j < len) {
				var leftAlign = false;
				for (var k=i+1; k<len; k++) {
					offset = 0;
					// position panel to left: 0px
					if (leftAlign) {
						offset = 0;
					// else if next panel cannot fit within container
					} else if ( (c$[i].width + c$[k].width - this.overlap) > nw ) {
					//} else if ( (c$[i].width + c$[k].width) > nw ) {
						offset = 0;
						leftAlign = true;
					} else {
						offset = c$[i].width - this.overlap;
						for (m=i; m<k; m++) {
							var _w = offset + c$[m+1].width - this.overlap;
							if (_w < nw) {
								offset = _w;
							} else {
								offset = nw;
								break;
							}
						}
						offset = nw - offset;
					}
					this.container.transitionPositions[i + '.' + k] = offset;
				}
			}

		}
	},

	/**
	* Sets the `left` position for each panel according to the `arrangement`.
	*
	* @see {@link enyo.Arranger.arrange}
	* @protected
	*/
	arrange: function (controls, arrangement) {
		var i, c;
		var c$ = this.container.getPanels();
		var s = this.container.clamp(arrangement);

		for (i=0; (c=c$[i]); i++) {
			var xPos = this.container.transitionPositions[i + '.' + s];
			this.arrangeControl(c, {left: xPos});
		}
	},

	/**
	* Calculates the difference in width between the panels at `i0` and `i1`.
	*
	* @see {@link enyo.Arranger.calcArrangementDifference}
	* @protected
	*/
	calcArrangementDifference: function (i0, a0, i1, a1) {
		var p = this.container.getPanels();
		var w = (i0 < i1) ? p[i1].width : p[i0].width;
		return w;
	},

	/**
	* Resets the position of the panels.
	*
	* @method
	* @private
	*/
	destroy: function () {
		var c$ = this.container.getPanels();
		for (var i=0, c; (c=c$[i]); i++) {
			Arranger.positionControl(c, {left: null, top: null});
			c.applyStyle('top', null);
			c.applyStyle('bottom', null);
			c.applyStyle('left', null);
			c.applyStyle('width', null);
		}
		Arranger.prototype.destroy.apply(this, arguments);
	}
});
},{"../../enyo/lib/dom":87,"../../enyo/lib/kind":96,"./Arranger":108}],52:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	LinkedList = require('./LinkedList'),
	ObserverChainNode = require('./ObserverChainNode');

function get (base, prop) {
	return base && /*isObject(base)*/ (typeof base == 'object')? (
		base.get? base.get(prop): base[prop]
	): undefined;
}

/**
* An internally used {@glossary kind}.
*
* @class enyo.ObserverChain
* @extends enyo.LinkedList
* @private
*/
module.exports = kind(
	/** @lends enyo.ObserverChain.prototype */ {

	/**
	* @private
	*/
	kind: LinkedList,

	/**
	* @private
	*/
	nodeKind: ObserverChainNode,

	/**
	* @private
	*/

	
	/**
	* @private
	*/
	connected: 0,
	
	/**
	* @method
	* @private
	*/
	constructor: function (path, object) {
		this.object = object;
		this.path = path;
		this.parts = path.split('.');
		this.createChain();
	},
	
	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.object = null;
			this.parts = null;
			this.path = null;
		};
	}),
	
	/**
	* @private
	*/
	rebuild: function (target) {
		if (!this.rebuilding) {
			this.rebuilding = true;
			this.forward(function (node) {
				if (node !== this.head) {
					var src = node.prev.object
						, prop = node.prev.property;
					node.setObject(get(src, prop));
				}
			}, this, target);
			this.rebuilding = false;
		}
	},
	
	/**
	* @private
	*/
	isConnected: function () {
		return !! (this.connected === this.length && this.length);
	},
	
	/**
	* @private
	*/
	buildPath: function (target) {
		var str = '';
		
		this.backward(function (node) {
			str = node.property + (str? ('.' + str): str);
		}, this, target);
		
		return str;
	},
	
	/**
	* @private
	*/
	createChain: function () {
		var parts = this.parts
			, next = this.object
			, $ = false
			, node, prop;
			
		for (var i=0; (prop=parts[i]); ++i) {
			
		// forEach(parts, function (prop, idx) {
			// we create a special case for the $ hash property
			if (prop == '$') {
				$ = true;
			} else {
				// in cases where the chain has the $ property we arbitrarily
				// force it onto our current nodes property and let the special handling
				// in ObserverChainNode and ObserverSupport handle the rest
				$ && (prop = '$.' + prop);
				node = this.createNode({property: prop, object: next, list: this});
				this.appendNode(node);
				next = get(next, prop);
				$ = false;
			}
		// }, this);
		}
	},
	
	/**
	* @private
	*/
	observed: function (node, was, is) {
		this.object.stopNotifications();
		// @NOTE: About the following two cases, they are mutually exclusive and this seems perfect
		// that we don't see double notifications
		// @TODO: Only notify if it was the full property path? This is far more efficient after
		// testing but not as flexible...
		node === this.tail /*&& was !== is*/ && this.object.notify(this.buildPath(node), was, is);
		// @TODO: It seems the same case across the board that the rebuild only needs to take place
		// from the beginning to the second-to-last elem
		node !== this.tail && was !== is && this.rebuild(node);
		this.object.startNotifications();
	}
});
},{"../../enyo":12,"./LinkedList":44,"./ObserverChainNode":53,"./kind":96}],54:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	ObserverChain = require('./ObserverChain');

var observerTable = {};
	
kind.concatenated.push("observers");

/**
* Responds to changes in one or more properties.
* [Observers]{@link enyo.ObserverSupport~observer} may be registered in
* several different ways. See the {@link enyo.ObserverSupport} documentation
* for more details. Also note that, while observers should not be called
* directly, if defined on a [kind]{@glossary kind}, they may be
* overloaded for special behavior.
*
* @see enyo.ObserverSupport
* @see enyo.ObserverSupport.observe
* @callback enyo.ObserverSupport~Observer
* @param {*} was - The previous value of the property that has changed.
* @param {*} is - The current value of the property that has changed.
* @param {String} prop - The name of the property that has changed.
* @public
*/

/**
* @private
*/
function addObserver (path, fn, ctx, opts) {
	
	var observers = this.getObservers(),
		chains = this.getChains(),
		parts = path.split('.'),
		prio = opts && opts.priority,
		entries,
		noChain;
		
	noChain = (opts && opts.noChain) ||
			chains[path] ||
			parts.length < 2 ||
			(parts.length === 2 && path[0] == '$');
	
	if (observers[path] && !observers.hasOwnProperty(path)) {
		observers[path] = observers[path].slice();
	}
	
	entries = observers[path] || (observers[path] = []);
	entries[prio ? 'unshift' : 'push']({method: fn, ctx: ctx || this});
	
	if (!noChain) {
		this.getChains()[path] = new ObserverChain(path, this);
	}
	
	return this;
}

/**
* @private
*/
function removeObserver (obj, path, fn, ctx) {
	var observers = obj.getObservers(path)
		, chains = obj.getChains()
		, idx, chain;
		
	if (observers && observers.length) {
		idx = observers.findIndex(function (ln) {
			return ln.method === fn && (ctx? ln.ctx === ctx: true);
		});
		idx > -1 && observers.splice(idx, 1);
	}
	
	if ((chain = chains[path]) && !observers.length) {
		chain.destroy();
	}
	
	return obj;
}

/**
* @private
*/
function notifyObservers (obj, path, was, is, opts) {
	if (obj.isObserving()) {
		var observers = obj.getObservers(path);
		
		if (observers && observers.length) {
			for (var i=0, ln; (ln=observers[i]); ++i) {
				if (typeof ln.method == "string") obj[ln.method](was, is, path, opts);
				else ln.method.call(ln.ctx || obj, was, is, path, opts);
			}
		}
	} else enqueue(obj, path, was, is, opts);
	
	return obj;
}

/**
* @private
*/
function enqueue (obj, path, was, is, opts) {
	if (obj._notificationQueueEnabled) {
		var queue = obj._notificationQueue || (obj._notificationQueue = {})
			, ln = queue[path] || (queue[path] = {});
	
		ln.was = was;
		ln.is = is;
		ln.opts = opts;
	}
}

/**
* @private
*/
function flushQueue (obj) {
	var queue = obj._notificationQueue
		, path, ln;
	
	if (queue) {
		obj._notificationQueue = null;
		
		for (path in queue) {
			ln = queue[path];
			obj.notify(path, ln.was, ln.is, ln.opts);
		}
	}
}
	
/**
* Adds support for notifications on property changes. Most
* [kinds]{@glossary kind} (including all kinds that inherit from
* {@link enyo.Object}) already have this {@glossary mixin} applied.
* This allows for
* [observers]{@link enyo.ObserverSupport~Observer} to be
* [declared]{@link enyo.ObserverSupport.observers} or "implied" (see below).
*
* Implied observers are not declared, but derived from their `name`. They take
* the form `<property>Changed`, where `<property>` is the property to
* [observe]{@link enyo.ObserverSupport.observe}. For example:
*
* ```javascript
* enyo.kind({
* 	name: 'MyKind',
*
* 	// some local property
* 	value: true,
*
* 	// and the implied observer of that property
* 	valueChanged: function (was, is) {
* 		// do something now that it has changed
* 		enyo.log('value was "' + was + '" but now it is "' + is + '"');
* 	}
* });
*
* var mine = new MyKind();
* mine.set('value', false); // -> value was "true" but now it is "false"
* ```
*
* Using the `observers` property for its declarative syntax, an observer may
* observe any property (or properties), regardless of its `name`. For example:
*
* ```javascript
* enyo.kind({
* 	name: 'MyKind',
*
* 	// some local property
* 	value: true,
*
* 	// another local property
* 	count: 1,
*
* 	// declaring the observer
* 	observers: [
* 		// the path can be a single string or an array of strings
* 		{method: 'myObserver', path: ['value', 'count']}
* 	],
*
* 	// now this observer will be notified of changes to both properties
* 	myObserver: function (was, is, prop) {
* 		// do something now that it changed
* 		enyo.log(prop + ' was "' + was + '" but now it is "' + is + '"');
* 	}
* });
*
* var mine = new MyKind();
* mine.set('value', false); // -> value was "true" but now it is "false"
* mine.set('count', 2); // -> count was "1" but now it is "2"
* ```
*
* While observers may be [notified]{@link enyo.ObserverSupport.notify} of
* changes to multiple properties, this is not a typical use case for implied
* observers, since, by convention, they are only registered for the named
* property.
*
* There is one additional way to use observers, if necessary. You may use the
* API methods [observe()]{@link enyo.ObserverSupport.observe} and
* [unobserve()]{@link enyo.ObserverSupport.unobserve} to dynamically
* register and unregister observers as needed. For example:
*
* ```javascript
* var object = new enyo.Object({value: true});
* var observer = function (was, is) {
* 	enyo.log('value was "' + was + '" but now it is "' + is + '"');
* };
*
* object.observe('value', observer);
* object.set('value', false); // -> value was "true" but now it is "false"
* object.unobserve('value', observer);
* object.set('value', true); // no output because there is no observer
* ```
*
* Be sure to read the documentation for these API methods; proper usage of
* these methods is important for avoiding common pitfalls and memory leaks.
*
* @mixin enyo.ObserverSupport
* @public
*/
var ObserverSupport = module.exports = /** @lends enyo.ObserverSupport */ {
	
	/**
	* @private
	*/
	name: "ObserverSupport",
	
	/**
	* @private
	*/
	_observing: true,
	
	/**
	* @private
	*/
	_observeCount: 0,
	
	/**
	* @private
	*/
	_notificationQueue: null,
	
	/**
	* @private
	*/
	_notificationQueueEnabled: true,
	
	/**
	* Determines whether `_observing` is enabled. If
	* [stopNotifications()]{@link enyo.ObserverSupport.stopNotifications} has
	* been called, then this will return `false`.
	*
	* @see enyo.ObserverSupport.stopNotifications
	* @see enyo.ObserverSupport.startNotifications
	* @returns {Boolean} Whether or not the callee is observing.
	*/
	isObserving: function () {
		return this._observing;
	},
	
	/**
	* Returns an immutable list of [observers]{@link enyo.ObserverSupport~Observer}
	* for the given `path`, or all observers for the callee.
	*
	* @param {String} [path] - Path or property path for which
	* [observers]{@link enyo.ObserverSupport~Observer} will be returned. If not
	* specified, all observers for the callee will be returned.
	*
	* @returns {enyo.ObserverSupport~Observer[]} The immutable
	* [array]{@glossary Array} of observers.
	* @public
	*/
	getObservers: function (path) {
		var euid = this.euid || (this.euid = utils.uid('o')),
			ret,
			loc;
			
		loc = observerTable[euid] || (observerTable[euid] = (
			this._observers? Object.create(this._observers): {}
		));
		
		if (!path) return loc;
		
		ret = loc[path];
		
		// if the special property exists...
		if (loc['*']) ret = ret ? ret.concat(loc['*']) : loc['*'].slice();
		return ret;
	},
	
	/**
	* @private
	*/
	getChains: function () {
		return this._observerChains || (this._observerChains = {});
	},
	
	/**
	* @deprecated
	* @alias enyo.ObserverSupport.observe
	* @public
	*/
	addObserver: function () {
		// @NOTE: In this case we use apply because of internal variable use of parameters
		return addObserver.apply(this, arguments);
	},
	
	/**
	* Registers an [observer]{@link enyo.ObserverSupport~Observer} to be
	* [notified]{@link enyo.ObserverSupport.notify} when the given property has
	* been changed. It is important to note that it is possible to register the
	* same observer multiple times (although this is never the intention), so
	* care should be taken to avoid that scenario. It is also important to
	* understand how observers are stored and unregistered
	* ([unobserved]{@link enyo.ObserverSupport.unobserve}). The `ctx` (context)
	* parameter is stored with the observer reference. **If used when
	* registering, it should also be used when unregistering.**
	*
	* @see enyo.ObserverSupport.unobserve
	* @param {String} path - The property or property path to observe.
	* @param {enyo.ObserverSupport~Observer} fn - The
	*	[observer]{@link enyo.ObserverSupport~Observer} method that responds to changes.
	* @param {*} [ctx] - The `this` (context) under which to execute the observer.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	observe: function () {
		// @NOTE: In this case we use apply because of internal variable use of parameters
		return addObserver.apply(this, arguments);
	},
	
	/**
	* @deprecated
	* @alias enyo.ObserverSupport.unobserve
	* @public
	*/
	removeObserver: function (path, fn, ctx) {
		return removeObserver(this, path, fn);
	},
	
	/**
	* Unregisters an [observer]{@link enyo.ObserverSupport~Observer}. If a `ctx`
	* (context) was supplied to [observe()]{@link enyo.ObserverSupport.observe},
	* then it should also be supplied to this method.
	*
	* @see enyo.ObserverSupport.observe
	* @param {String} path - The property or property path to unobserve.
	* @param {enyo.ObserverSupport~Observer} fn - The
	*	[observer]{@link enyo.ObserverSupport~Observer} method that responds to changes.
	* @param {*} [ctx] - The `this` (context) under which to execute the observer.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	unobserve: function (path, fn, ctx) {
		return removeObserver(this, path, fn, ctx);
	},
	
	/**
	* Removes all [observers]{@link enyo.ObserverSupport~Observer} from the
	* callee. If a `path` parameter is provided, observers will only be removed
	* from that path (or property).
	*
	* @param {String} [path] - A property or property path from which to remove all
	*	[observers]{@link enyo.ObserverSupport~Observer}.
	* @returns {this} The callee for chaining.
	*/
	removeAllObservers: function (path) {
		var euid = this.euid
			, loc = euid && observerTable[euid];
		
		if (loc) {
			if (path) {
				loc[path] = null;
			} else {
				observerTable[euid] = null;
			}
		}
		
		return this;
	},
	
	/**
	* @deprecated
	* @alias enyo.ObserverSupport.notify
	* @public
	*/
	notifyObservers: function (path, was, is, opts) {
		return notifyObservers(this, path, was, is, opts);
	},
	
	/**
	* Triggers any [observers]{@link enyo.ObserverSupport~Observer} for the
	* given `path`. The previous and current values must be supplied. This
	* method is typically called automatically, but it may also be called
	* forcibly by [setting]{@link enyo.Object#set} a value with the
	* `force` option.
	*
	* @param {String} path - The property or property path to notify.
	* @param {*} was - The previous value.
	* @param {*} is - The current value.
	* @returns {this} The callee for chaining.
	*/
	notify: function (path, was, is, opts) {
		return notifyObservers(this, path, was, is, opts);
	},
	
	/**
	* Stops all [notifications]{@link enyo.ObserverSupport.notify} from
	* propagating. By default, all notifications will be queued and flushed once
	* [startNotifications()]{@link enyo.ObserverSupport.startNotifications}
	* has been called. Setting the optional `noQueue` flag will also disable the
	* queue, or you can use the
	* [disableNotificationQueue()]{@link enyo.ObserverSupport.disableNotificationQueue} and
	* [enableNotificationQueue()]{@link enyo.ObserverSupport.enableNotificationQueue}
	* API methods. `startNotifications()` will need to be called the same number
	* of times that this method has been called.
	*
	* @see enyo.ObserverSupport.startNotifications
	* @see enyo.ObserverSupport.disableNotificationQueue
	* @see enyo.ObserverSupport.enableNotificationQueue
	* @param {Boolean} [noQueue] - If `true`, this will also disable the notification queue.
	* @returns {this} The callee for chaining.
	*/
	stopNotifications: function (noQueue) {
		this._observing = false;
		this._observeCount++;
		noQueue && this.disableNotificationQueue();
		return this;
	},
	
	/**
	* Starts [notifications]{@link enyo.ObserverSupport.notify} if they have
	* been [disabled]{@link enyo.ObserverSupport.stopNotifications}. If the
	* notification queue was not disabled, this will automatically flush the
	* queue of all notifications that were encountered while stopped. This
	* method must be called the same number of times that
	* [stopNotifications()]{@link enyo.ObserverSupport.stopNotifications} was
	* called.
	*
	* @see enyo.ObserverSupport.stopNotifications
	* @see enyo.ObserverSupport.disableNotificationQueue
	* @see enyo.ObserverSupport.enableNotificationQueue
	* @param {Boolean} [queue] - If `true` and the notification queue is disabled,
	* the queue will be re-enabled.
	* @returns {this} The callee for chaining.
	*/
	startNotifications: function (queue) {
		this._observeCount && this._observeCount--;
		this._observeCount === 0 && (this._observing = true);
		queue && this.enableNotificationQueue();
		this.isObserving() && flushQueue(this);
		return this;
	},
	
	/**
	* Re-enables the notification queue, if it was disabled.
	*
	* @see enyo.ObserverSupport.disableNotificationQueue
	* @returns {this} The callee for chaining.
	*/
	enableNotificationQueue: function () {
		this._notificationQueueEnabled = true;
		return this;
	},
	
	/**
	* If the notification queue is enabled (the default), it will be disabled
	* and any notifications in the queue will be removed.
	*
	* @see enyo.ObserverSupport.enableNotificationQueue
	* @returns {this} The callee for chaining.
	*/
	disableNotificationQueue: function () {
		this._notificationQueueEnabled = false;
		this._notificationQueue = null;
		return this;
	},
	
	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			var chains, chain, path, entries, i;
			
			// if there are any observers that need to create dynamic chains
			// we look for and instance those now
			if (this._observerChains) {
				chains = this._observerChains;
				this._observerChains = {};
				for (path in chains) {
					entries = chains[path];
					for (i = 0; (chain = entries[i]); ++i) this.observe(path, chain.method);
				}
			}
			
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			var chains = this._observerChains,
				path,
				chain;
			
			sup.apply(this, arguments);
			
			if (chains) {
				for (path in chains) {
					chain = chains[path];
					chain.destroy();
				}
				
				this._observerChains = null;
			}
		};
	})
	
};

/**
* Hijack the original so we can add additional default behavior.
*
* @private
*/
var sup = kind.concatHandler;

// @NOTE: It seems like a lot of work but it really won't happen that much and the more
// we push to kind-time the better for initialization time

/** @private */
kind.concatHandler = function (ctor, props, instance) {
	
	sup.call(this, ctor, props, instance);
	
	if (props === ObserverSupport) return;

	var proto = ctor.prototype || ctor
		, observers = proto._observers? Object.create(proto._observers): null
		, incoming = props.observers
		, chains = proto._observerChains && Object.create(proto._observerChains);
		
	if (!observers) {
		if (proto.kindName) observers = {};
		else return;
	}
		
	if (incoming && !(incoming instanceof Array)) {
		(function () {
			var tmp = [], deps, name;
			// here is the slow iteration over the properties...
			for (name in props.observers) {
				// points to the dependencies of the computed method
				deps = props.observers[name];
				// create a single entry now for the method/computed with all dependencies
				tmp.push({method: name, path: deps});
			}
			incoming = tmp;
		}());
		// we need to ensure we don't modify the fixed array of a mixin or reused object
		// because it could wind up inadvertantly adding the same entry multiple times
	} else if (incoming) incoming = incoming.slice();
	
	// this scan is required to figure out what auto-observers might be present
	for (var key in props) {
		if (key.slice(-7) == "Changed") {
			incoming || (incoming = []);
			incoming.push({method: key, path: key.slice(0, -7)});
		}
	}
	
	var addObserverEntry = function (path, method) {
		var obs;
		// we have to make sure that the path isn't a chain because if it is we add it
		// to the chains instead
		if (path.indexOf(".") > -1) {
			if (!chains) chains = {};
			obs = chains[path] || (chains[path] = []);
			obs.push({method: method});
		} else {
			if (observers[path] && !observers.hasOwnProperty(path)) observers[path] = observers[path].slice();
			obs = observers[path] || (observers[path] = []);
			if (!obs.find(function (ln) { return ln.method == method; })) obs.push({method: method});
		}
	};
	
	if (incoming) {
		incoming.forEach(function (ln) {
			// first we determine if the path itself is an array of paths to observe
			if (ln.path && ln.path instanceof Array) ln.path.forEach(function (en) { addObserverEntry(en, ln.method); });
			else addObserverEntry(ln.path, ln.method);
		});
	}
	
	// we clear the key so it will not be added to the prototype
	// delete props.observers;
	// we update the properties to whatever their new values may be
	proto._observers = observers;
	proto._observerChains = chains;
};
},{"../../enyo":12,"./ObserverChain":52,"./kind":96,"./utils":106}],28:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	logger = require('./logger'),
	utils = require('./utils');

var
	MixinSupport = require('./MixinSupport'),
	ObserverSupport = require('./ObserverSupport'),
	BindingSupport = require('./BindingSupport');
	
/**
* Used by all [objects]{@link enyo.Object} and [subkinds]{@glossary subkind} when using the
* {@link enyo.Object#log}, {@link enyo.Object#warn} and {@link enyo.Object#error} methods.
*
* @private
*/
function log (method, args) {
	if (logger.shouldLog(method)) {
		try {
			throw new Error();
		} catch(err) {
			logger._log(method, [args.callee.caller.displayName + ': ']
				.concat(utils.cloneArray(args)));
			logger.log(err.stack);
		}
	}
}

/**
* {@link enyo.Object} lies at the heart of the Enyo framework's implementations of property
* publishing, computed properties (via the {@link enyo.ComputedSupport} {@glossary mixin}),
* and data binding (via the {@link enyo.BindingSupport} mixin and {@link enyo.Binding}
* object). It also provides several utility [functions]{@glossary Function} for its
* [subkinds]{@glossary subkind}.
*
* @class enyo.Object
* @mixes enyo.MixinSupport
* @mixes enyo.ObserverSupport
* @mixes enyo.BindingSupport
* @public
*/
var CoreObject = module.exports = kind(
	/** @lends enyo.Object.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Object',

	/**
	* @private
	*/
	kind: null,

	/**
	* @private
	*/


	/**
	* Will be `true` if the [destroy()]{@link enyo.Object#destroy} method has been called;
	* otherwise, `false`.
	*
	* @readonly
	* @type {Boolean}
	* @default false
	* @public
	*/
	destroyed: false,

	/**
	* @private
	*/
	mixins: [MixinSupport, ObserverSupport, BindingSupport],

	/**
	* @private
	*/
	constructor: function (props) {
		this.importProps(props);
	},

	/**
	* Imports the values from the given [object]{@glossary Object}. Automatically called
	* from the [constructor]{@link enyo.Object#constructor}.
	*
	* @param {Object} props - If provided, the [object]{@glossary Object} from which to
	*	retrieve [keys/values]{@glossary Object.keys} to mix in.
	* @returns {this} The callee for chaining.
	* @public
	*/
	importProps: function (props) {
		var key;

		if (props) {
			kind.concatHandler(this, props, true);
			// if props is a default hash this is significantly faster than
			// requiring the hasOwnProperty check every time
			if (!props.kindName) {
				for (key in props) {
					kind.concatenated.indexOf(key) === -1 && (this[key] = props[key]);
				}
			} else {
				for (key in props) {
					if (kind.concatenated.indexOf(key) === -1 && props.hasOwnProperty(key)) {
						this[key] = props[key];
					}
				}
			}
		}
		
		return this;
	},
	
	/**
	* Calls the [destroy()]{@link enyo.Object#destroy} method for the named {@link enyo.Object} 
	* property.
	*
	* @param {String} name - The name of the property to destroy, if possible.
	* @returns {this} The callee for chaining.
	* @public
	*/
	destroyObject: function (name) {
		if (this[name] && this[name].destroy) {
			this[name].destroy();
		}
		this[name] = null;
		
		return this;
	},
	
	/**
	* Sends a log message to the [console]{@glossary console}, prepended with the name
	* of the {@glossary kind} and method from which `log()` was invoked. Multiple
	* {@glossary arguments} are coerced to {@glossary String} and
	* [joined with spaces]{@glossary Array.join}.
	*
	* ```javascript
	* enyo.kind({
	*	name: 'MyObject',
	*	kind: 'enyo.Object',
	*	hello: function() {
	*		this.log('says', 'hi');
	*		// shows in the console: MyObject.hello: says hi
	*	}
	* });
	* ```
	* @public
	*/
	log: function () {
		var acc = arguments.callee.caller,
			nom = ((acc ? acc.displayName : '') || '(instance method)') + ':',
			args = Array.prototype.slice.call(arguments);
		args.unshift(nom);
		logger.log('log', args);
	},
	
	/**
	* Same as [log()]{@link enyo.Object#log}, except that it uses the 
	* console's [warn()]{@glossary console.warn} method (if it exists).
	*
	* @public
	*/
	warn: function () {
		log('warn', arguments);
	},
	
	/**
	* Same as [log()]{@link enyo.Object#log}, except that it uses the 
	* console's [error()]{@glossary console.error} method (if it exists).
	*
	* @public
	*/
	error: function () {
		log('error', arguments);
	},

	/**
	* Retrieves the value for the given path. The value may be retrieved as long as the given 
	* path is resolvable relative to the given {@link enyo.Object}. See
	* [enyo.getPath()]{@link enyo.getPath} for complete details.
	*
	* This method is backwards-compatible and will automatically call any existing getter
	* method that uses the "getProperty" naming convention. (Moving forward, however, Enyo code
	* should use [computed properties]{@link enyo.ComputedSupport} instead of relying on the 
	* getter naming convention.)
	*
	* @param {String} path - The path from which to retrieve a value.
	* @returns {*} The value for the given path or [undefined]{@glossary undefined} if 
	*	the path could not be completely resolved.
	* @public
	*/
	get: function () {
		return utils.getPath.apply(this, arguments);
	},
	
	/**
	* Updates the value for the given path. The value may be set as long as the
	* given path is resolvable relative to the given {@link enyo.Object}. See
	* [enyo.setPath()]{@link enyo.setPath} for complete details.
	*
	* @param {String} path - The path for which to set the given value.
	* @param {*} value - The value to set.
	* @param {Object} [opts] - An options hash.
	* @returns {this} The callee for chaining.
	* @public
	*/
	set: function () {
		return utils.setPath.apply(this, arguments);
	},

	/**
	* Binds a [callback]{@glossary callback} to this [object]{@link enyo.Object}.
	* If the object has been destroyed, the bound method will be aborted cleanly,
	* with no value returned.
	*
	* This method should generally be used instead of {@link enyo.bind} for running
	* code in the context of an instance of {@link enyo.Object} or one of its
	* [subkinds]{@glossary subkind}.
	*
	* @alias enyo.bindSafely
	* @public
	*/
	bindSafely: function () {
		var args = Array.prototype.slice.call(arguments);
		args.unshift(this);
		return utils.bindSafely.apply(null, args);
	},
	
	/**
	* An abstract method (primarily) that sets the [destroyed]{@link enyo.Object#destroyed} 
	* property to `true`.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	destroy: function () {
		
		// Since JS objects are never truly destroyed (GC'd) until all references are
		// gone, we might have some delayed action on this object that needs access
		// to this flag.
		// Using this.set to make the property observable
		return this.set('destroyed', true);
	}
});

/**
* @private
*/
CoreObject.concat = function (ctor, props) {
	var pubs = props.published,
		cpy,
		prop;
		
	if (pubs) {
		cpy = ctor.prototype || ctor;
		for (prop in pubs) {
			// need to make sure that even though a property is 'published'
			// it does not overwrite any computed properties
			if (props[prop] && typeof props[prop] == 'function') continue;
			addGetterSetter(prop, pubs[prop], cpy);
		}
	}
};

/**
* This method creates a getter/setter for a published property of an {@link enyo.Object}, but is
* deprecated. It is maintained for purposes of backwards compatibility. The preferred method is 
* to mark public and protected (private) methods and properties using documentation or other 
* means and rely on the [get]{@link enyo.Object#get} and [set]{@link enyo.Object#set} methods of
* {@link enyo.Object} instances.
*
* @private
*/
function addGetterSetter (prop, value, proto) {
	
	// so we don't need to re-execute this over and over and over...
	var cap = utils.cap(prop),
		getName = 'get' + cap,
		setName = 'set' + cap,
		getters = proto._getters || (proto._getters = {}),
		setters = proto._setters || (proto._setters = {}),
		fn;
	
	// we assign the default value from the published block to the prototype
	// so it will be initialized properly
	proto[prop] = value;
	
	// check for a supplied getter and if there isn't one we create one otherwise
	// we mark the supplied getter in the tracking object so the global getPath will
	// know about it
	if (!(fn = proto[getName]) || typeof fn != 'function') {
		fn = proto[getName] = function () {
			return utils.getPath.fast.call(this, prop);
		};
		
		// and we mark it as generated
		fn.generated = true;
	} else if (fn && typeof fn == 'function' && !fn.generated) getters[prop] = getName;
	
	// we need to do the same thing for the setters
	if (!(fn = proto[setName]) || typeof fn != 'function') {
		fn = proto[setName] = function (val) {
			return utils.setPath.fast.call(this, prop, val);
		};
		
		// and we mark it as generated
		fn.generated = true;
	} else if (fn && typeof fn == 'function' && !fn.generated) setters[prop] = setName;
}
},{"../../enyo":12,"./BindingSupport":19,"./MixinSupport":47,"./ObserverSupport":54,"./kind":96,"./logger":97,"./utils":106}],17:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	CoreObject = require('./CoreObject');

/**
* An abstract [kind]{@glossary kind} designed to aid in handling asynchronous operations.
* It represents a task that has not yet completed. Callback functions may be registered to be
* notified when the task is complete.
*
* For more information, see the documentation on [Consuming Web
* Services]{@linkplain $dev-guide/building-apps/managing-data/consuming-web-services.html}
* in the Enyo Developer Guide.
*
* @class enyo.Async
* @extends enyo.Object
* @public
*/
var Async = module.exports = kind(
	/** @lends enyo.Async.prototype */ {
	
	name: 'enyo.Async',
	
	/**
	* @private
	*/
	kind: CoreObject,
	
	/**
	* @private
	*/
	published: {
		
		/**
		* The number of milliseconds to wait after [execution]{@link enyo.Async#go} begins
		* before failing with a timeout error. If set to `0` (the default), will not
		* automatically throw a timeout error.
		*
		* @type {Number}
		* @default 0
		* @memberof enyo.Aysnc.prototype
		* @public
		*/
		timeout: 0
	},
	
	/**
	* Will be `true` if an error has occurred and a handler calls the
	* [fail()]{@link enyo.Async#fail} method. Can be cleared using
	* [recover()]{@link enyo.Async#recover}.
	*
	* @readonly
	* @type {Boolean}
	* @default false
	* @public
	*/
	failed: false,
	
	/**
	* @private
	*/
	context: null,
	
	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.responders = [];
			this.errorHandlers = [];
			this.progressHandlers = [];
		};
	}),
	
	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			if (this.timeoutJob) {
				this.clearTimeout();
			}
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	accumulate: function (array, fn, ctx) {
		var tmp;
		
		// to preserve backward compatibility we have to accept that the order of the arguments
		// might be different
		if (ctx && typeof ctx == 'function') {
			tmp = fn;
			fn = ctx;
			ctx = tmp;
		}
		
		// we go ahead and bind the method to its context to preserve the original
		// implementation
		if (ctx) {
			if (typeof ctx == "string") {
				fn = utils.bind(fn, ctx);
			} else {
				fn = fn.bind(ctx);
			}
		}
		
		// now store it for use later
		array.push(fn);
	},
	
	/**
	* Registers a [function]{@glossary Function} to be fired when
	* [execution]{@link enyo.Async#go} is completed successfully. Parameters may be
	* in any order, to preserve backward compatibility.
	*
	* @param {Function} fn - The callback to register.
	* @param {Object} [ctx] - The optional context under which to execute the callback.
	* @returns {this} The callee for chaining.
	* @public
	*/
	response: function (fn, ctx) {
		this.accumulate(this.responders, fn, ctx);
		return this;
	},
	
	/**
	* Registers a [function]{@glossary Function} to be fired when
	* [execution]{@link enyo.Async#go} completes with an error. Parameters may be
	* in any order, to preserve backward compatibility.
	*
	* @param {Function} fn - The callback to register.
	* @param {Object} [ctx] - The optional context under which to execute the callback.
	* @returns {this} The callee for chaining.
	* @public
	*/
	error: function (fn, ctx) {
		this.accumulate(this.errorHandlers, fn, ctx);
		return this;
	},
	
	/**
	* Registers a [function]{@glossary Function} to be fired on progress events.
	* Parameters may be in any order, to preserve backward compatibility.
	*
	* @param {Function} fn - The callback to register.
	* @param {Object} [ctx] - The optional context under which to execute the callback.
	* @returns {this} The callee for chaining.
	* @public
	*/
	progress: function (fn, ctx) {
		this.accumulate(this.progressHandlers, fn, ctx);
		return this;
	},
	
	/**
	* @private
	*/
	route: function (async, value) {
		var r = this.bindSafely('respond');
		async.response(function (sender, value) {
			r(value);
		});
		var f = this.bindSafely('fail');
		async.error(function (sender, value) {
			f(value);
		});
		async.go(value);
	},
	
	/**
	* @private
	*/
	handle: function (value, handlers) {
		var r = handlers.shift();
		if (r) {
			if (r instanceof Async) {
				this.route(r, value);
			} else {
				// handler can return a new 'value'
				var v = utils.call(this.context || this, r, [this, value]);
				// ... but only if it returns something other than undefined
				v = (v !== undefined) ? v : value;
				// next handler
				(this.failed ? this.fail : this.respond).call(this, v);
			}
		}
	},
	
	/**
	* @private
	*/
	startTimer: function () {
		this.startTime = utils.perfNow();
		if (this.timeout) {
			this.timeoutJob = setTimeout(this.bindSafely('timeoutComplete'), this.timeout);
		}
	},
	
	/**
	* @private
	*/
	endTimer: function () {
		if (this.timeoutJob) {
			this.endTime = utils.perfNow();
			clearTimeout(this.timeoutJob);
			this.timeoutJob = null;
			this.latency = this.endTime - this.startTime;
		}
	},
	
	/**
	* @private
	*/
	timeoutComplete: function () {
		this.timedout = true;
		this.fail('timeout');
	},
	
	/**
	* Triggers the handler chain for valid outcomes.
	*
	* @private
	*/
	respond: function (value) {
		this.failed = false;
		this.endTimer();
		this.handle(value, this.responders);
	},

	/**
	* Fails the [task]{@link enyo.Async} and triggers the error chain. May be called from any
	* handler.
	* 
	* @param {*} err - The error value to pass to error handlers.
	* @returns {this} The callee for chaining.
	* @public
	*/
	fail: function (err) {
		this.failed = true;
		this.endTimer();
		this.handle(err, this.errorHandlers);
		
		return this;
	},
	
	/**
	* Clears the error condition ([failed]{@link enyo.Async#failed}) by setting it to `false`.
	* If called while responding to handlers, it will continue.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	recover: function () {
		this.failed = false;
		return this;
	},
	
	/**
	* @private
	*/
	sendProgress: function(current, min, max, sourceEvent) {
		var event = utils.mixin({}, sourceEvent);
		event.type = 'progress';
		event.current = current;
		event.min = min;
		event.max = max;
		for (var i = 0; i < this.progressHandlers.length; i++) {
			utils.call(this.context || this, this.progressHandlers[i], [this, event]);
		}
	},
	
	/**
	* Initiates the asynchronous routine, supplying the given value if it completes
	* successfully. This method is usually overloaded in [subkinds]{@glossary subkind}.
	*
	* @virtual
	* @param {*} - value The value to pass to responders.
	* @returns {this} The callee for chaining.
	* @public
	*/
	go: function(value) {
		this.sendProgress(0, 0, 1);
		utils.asyncMethod(this, function() {
			this.sendProgress(1, 0, 1);
			this.respond(value);
		});
		return this;
	}
});
},{"../../enyo":12,"./CoreObject":28,"./kind":96,"./utils":106}],72:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	ModelList = require('./ModelList'),
	EventEmitter = require('./EventEmitter'),
	CoreObject = require('./CoreObject');

/**
* Only necessary because of the order in which mixins are applied.
*
* @class
* @private
*/
var BaseStore = kind({
	kind: CoreObject,
	mixins: [EventEmitter]
});

/**
* This method should determine whether the given [model]{@link enyo.Model}
* should be included in the filtered set for the [find()]{@link enyo.Store#find}
* method.
* 
* @callback enyo.Store~Filter
* @param {enyo.Model} model - The [model]{@link enyo.Model} to filter.
* @returns {Boolean} `true` if the model meets the filter requirements;
* otherwise, `false`.
*/

/**
* The configuration options for the [find()]{@link enyo.Store#find} method.
* 
* @typedef {Object} enyo.Store~FindOptions
* @property {Boolean} all=true - Whether or not to include more than one match for the
*	filter method. If `true`, an array of matches is returned; otherwise, a single match.
* @property {Object} context - If provided, it will be used as the `this` (context) of
*	the filter method.
*/

/**
* An anonymous kind used internally for the singleton {@link enyo.store}.
* 
* @class enyo.Store
* @mixes enyo.EventEmitter
* @extends enyo.Object
* @protected
*/
var Store = kind(
	/** @lends enyo.Store.prototype */ {
	
	name: 'enyo.Store',
	
	/**
	* @private
	*/
	kind: BaseStore,
	
	/**
	* Finds a [model (or models)]{@link enyo.Model} of a certain [kind]{@glossary kind}.
	* It uses the return value from a filter method to determine whether a particular
	* model will be included. Set the optional `all` flag to `true` to ensure that
	* the method looks for all matches; otherwise, it will return the first positive
	* match.
	* 
	* @see {@glossary Array.find}
	* @param {enyo.Model} ctor - The constructor for the [kind]{@glossary kind} of
	*	[model]{@link enyo.Model} to be filtered.
	* @param {enyo.Store~Filter} fn - The filter method.
	* @param {enyo.Store~FindOptions} [opts] - The options parameter.
	* @returns {(enyo.Model|enyo.Model[]|undefined)} If the `all` flag is `true`,
	*	returns an array of models; otherwise, returns the first model that returned
	*	that returned `true` from the filter method. Returns `undefined` if `all` is
	* `false` and no match could be found.
	* @public
	*/
	find: function (ctor, fn, opts) {
		var kindName = ctor.prototype.kindName,
			list = this.models[kindName],
			options = {all: true, context: this};
		
		// allows the method to be called with a constructor only and will return an
		// immutable copy of the array of all models of that type or an empty array
		if (arguments.length == 1 || typeof fn != 'function') {
			return list ? list.slice() : [];
		}
		
		// ensure we use defaults with any provided options
		opts = opts ? utils.mixin({}, [options, opts]) : options;
			
		if (list) return opts.all ? list.filter(fn, opts.context) : list.find(fn, opts.context);
		
		// if it happens it could not find a list for the requested kind we fudge the return
		// so it can keep on executing
		else return opts.all ? [] : undefined;
	},
	
	/**
	* This method is an alias for [find()]{@link enyo.Store#find}.
	*
	* @deprecated
	* @public
	*/
	findLocal: function () {
		return this.find.apply(this, arguments);
	},
	
	/**
	* @private
	*/
	add: function (models, opts) {
		var ctor = models && (models instanceof Array ? models[0].ctor : models.ctor),
			kindName = ctor && ctor.prototype.kindName,
			list = kindName && this.models[kindName],
			added,
			i;
			
		// if we were able to find the list then we go ahead and attempt to add the models
		if (list) {
			added = list.add(models);
			// if we successfully added models and this was a default operation (not being
			// batched by a collection or other feature) we emit the event needed primarily
			// by relational models but could be useful other places
			if (added.length && (!opts || !opts.silent)) {
				for (i = 0; i < added.length; ++i) {
					this.emit(ctor, 'add', {model: added[i]});
				}
			}
		}
		
		return this;
	},
	
	/**
	* @private
	*/
	remove: function (models, opts) {
		var ctor = models && (models instanceof Array ? models[0].ctor : models.ctor),
			kindName = ctor && ctor.prototype.kindName,
			list = kindName && this.models[kindName],
			removed,
			i;
		
		// if we were able to find the list then we go ahead and attempt to remove the models
		if (list) {
			removed = list.remove(models);
			// if we successfully removed models and this was a default operation (not being
			// batched by a collection or other feature) we emit the event. Needed primarily
			// by relational models but could be useful other places
			if (removed.length && (!opts || !opts.silent)) {
				for (i = 0; i < removed.length; ++i) {
					this.emit(ctor, 'remove', {model: removed[i]});
				}
			}
		}
		
		return this;
	},
	
	/**
	* Determines, from the given parameters, whether the [store]{@link enyo.store}
	* has a specific [model]{@link enyo.Model}.
	*
	* @param {(Function|enyo.Model)} ctor Can be the constructor for an {@link enyo.Model}
	*	or a model instance. Must be a constructor unless a model instance is passed as the
	* optional `model` parameter.
	* @param {(String|Number|enyo.Model)} [model] If the `ctor` parameter is a
	*	constructor, this may be a [Number]{@glossary Number} or a [String]{@glossary String}
	* representing a [primaryKey]{@link enyo.Model#primaryKey} for the given model, or an
	*	instance of a model.
	* @returns {Boolean} Whether or not the [store]{@link enyo.store} has the given
	*	[model]{@link enyo.Model}.
	* @public
	*/
	has: function (ctor, model) {
		var list;
		
		if (!model) {
			model = ctor;
			ctor = model.ctor;
		}
		
		list = this.models[ctor.prototype.kindName];
		return list ? list.has(model) : false;
	},
	
	/**
	* @private
	*/
	resolve: function (ctor, model) {
		var list = this.models[ctor && ctor.prototype.kindName];
		return list? list.resolve(model): undefined;
	},
	
	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			
			this._scopeListeners = [];
			
			// all future sub-kinds of enyo.Model that are processed will automatically
			// create/add their entries to this object in their concat method
			this.models = {
				'enyo.Model': new ModelList()
			};
		};
	}),
	
	/**
	* @private
	*/
	scopeListeners: function (scope, e) {
		return !scope ? this._scopeListeners : this._scopeListeners.filter(function (ln) {
			return ln.scope === scope ? !e ? true : ln.event == e : false;
		});
	},
	
	/**
	* @private
	*/
	on: kind.inherit(function (sup) {
		return function (ctor, e, fn, ctx) {
			if (typeof ctor == 'function') {
				this.scopeListeners().push({
					scope: ctor,
					event: e,
					method: fn,
					ctx: ctx || this
				});
				
				return this;
			}
			
			return sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	off: kind.inherit(function (sup) {
		return function (ctor, e, fn) {
			var listeners,
				idx;
			
			if (typeof ctor == 'function') {
				listeners = this.scopeListeners(ctor);
				if (listeners.length) {
					idx = listeners.findIndex(function (ln) {
						return ln.event == e && ln.method === fn;
					});
					
					// if it found the entry we remove it
					if (idx >= 0) listeners.splice(idx, 1);
				}
				return this;
			}
		};
	}),
	
	/**
	* @private
	*/
	emit: kind.inherit(function (sup) {
		return function (ctor, e) {
			var listeners,
				args;
			
			if (typeof ctor == 'function') {
				listeners = this.scopeListeners(ctor, e);
				
				if (listeners.length) {
					args = utils.toArray(arguments).slice(1);
					args.unshift(this);
					listeners.forEach(function (ln) {
						ln.method.apply(ln.ctx, args);
					});
					return true;
				}
				return false;
			}
			
			return sup.apply(this, arguments);
		};
	})
});

/**
* A runtime database for working with [models]{@link enyo.Model}. It is primarily used
* internally by data layer [kinds]{@glossary kind} ({@link enyo.Model},
* {@link enyo.Collection}, and {@link enyo.RelationalModel}).
* 
* @see enyo.Model
* @see enyo.Collection
* @see enyo.RelationalModel
* @type enyo.Store
* @memberof enyo
* @public
*/
module.exports = new Store();
},{"../../enyo":12,"./CoreObject":28,"./EventEmitter":34,"./ModelList":49,"./kind":96,"./utils":106}],94:[function(require,module,exports){
require('../../enyo');

var
	utils = require('./utils'),
	kind = require('./kind');
	
var CoreObject = require('./CoreObject');

/**
* The {@link enyo.jobs} singleton provides a mechanism for queueing tasks
* (i.e., functions) for execution in order of priority. The execution of the
* current job stack may be blocked programmatically by setting a priority
* level (run level) below which no jobs are executed.
*
* At the moment, only {@link enyo.Animator} uses this interface, setting a
* priority of 4, which blocks all low priority tasks from executing during
* animations. To maintain backward compatibility, jobs are assigned a priority
* of 5 by default; thus they are not blocked by animations.
*
* Normally, application code will not use `enyo.jobs` directly, but will
* instead use the [job()]{@link enyo.Component#job} method of
* {@link enyo.Component}.
*
* @name enyo.jobs
* @public
*/
module.exports = kind.singleton(
	/** @lends enyo.jobs */ {
	
	kind: CoreObject,
	
	/**
	* @private
	*/
	published: /** @lends enyo.jobs */ {
		
		/**
		* The current priority level.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		priorityLevel: 0
	},
	
	/**
	* Prioritized by index.
	*
	* @private
	*/
	_jobs: [ [], [], [], [], [], [], [], [], [], [] ],
	
	/**
	* @private
	*/
	_priorities: {},
	
	/**
	* @private
	*/
	_namedJobs: {},
	
	/**
	* @private
	*/
	_magicWords: {
		'low': 3,
		'normal': 5,
		'high': 7
	},
	
	/**
	* Adds a [job]{@link enyo.job} to the job queue. If the current priority
	* level is higher than this job's priority, this job gets deferred until the
	* job level drops; if it is lower, this job is run immediately.
	*
	* @param {Function} job - The actual {@glossary Function} to execute as the
	* [job]{@link enyo.job}.
	* @param {Number} priority - The priority of the job.
	* @param {String} nom - The name of the job for later reference.
	* @public
	*/
	add: function (job, priority, nom) {
		priority = priority || 5;

		// magic words: low = 3, normal = 5, high = 7
		priority = utils.isString(priority) ? this._magicWords[priority] : priority;

		// if a job of the same name exists, remove it first (replace it)
		if(nom){
			this.remove(nom);
			this._namedJobs[nom] = priority;
		}

		// if the job is of higher priority than the current priority level then
		// there's no point in queueing it
		if(priority >= this.priorityLevel){
			job();
		} else {
			this._jobs[priority - 1].push({fkt: job, name: nom});
		}
	},
	
	/**
	* Will remove the named [job]{@link enyo.job} from the queue.
	*
	* @param {String} nom - The name of the [job]{@link enyo.job} to remove.
	* @returns {Array} An {@glossary Array} that will contain the removed job if
	* it was found, or empty if it was not found.
	* @public
	*/
	remove: function (nom) {
		var jobs = this._jobs[this._namedJobs[nom] - 1];
		if(jobs){
			for(var j = jobs.length-1; j >= 0; j--){
				if(jobs[j].name === nom){
					return jobs.splice(j, 1);
				}
			}
		}
	},
	
	/**
	* Adds a new priority level at which jobs will be executed. If it is higher than the
	* highest current priority, the priority level rises. Newly added jobs below that priority
	* level are deferred until the priority is removed (i.e., unregistered).
	*
	* @param {Number} priority - The priority value to register.
	* @param {String} id - The name of the priority.
	* @public
	*/
	registerPriority: function(priority, id) {
		this._priorities[id] = priority;
		this.setPriorityLevel( Math.max(priority, this.priorityLevel) );
	},
	
	/**
	* Removes a priority level. If the removed priority was previously the
	* highest priority, the priority level drops to the next highest priority
	* and queued jobs with a higher priority are executed.
	*
	* @param {String} id - The name of the priority level to remove.
	* @public
	*/
	unregisterPriority: function (id) {
		var highestPriority = 0;

		// remove priority
		delete this._priorities[id];

		// find new highest current priority
		for( var i in this._priorities ){
			highestPriority = Math.max(highestPriority, this._priorities[i]);
		}

		this.setPriorityLevel( highestPriority );
	},
	
	/**
	* Tries to run next job if priority level has dropped.
	*
	* @type {enyo.ObserverSupport~Observer}
	* @private
	*/
	priorityLevelChanged: function (was) {
		if(was > this.priorityLevel){
			this._doJob();
		}
	},
	
	/**
	* Finds and executes the job of highest priority; in this way, all jobs with priority
	* greater than or equal to the current level are run, in order of their priority (highest
	* to lowest).
	*
	* @private
	*/
	_doJob: function () {
		var job;
		// find the job of highest priority above the current priority level
		// and remove from the job list
		for (var i = 9; i >= this.priorityLevel; i--){
			if (this._jobs[i].length) {
				job = this._jobs[i].shift();
				break;
			}
		}

		// allow other events to pass through
		if (job) {
			job.fkt();
			delete this._namedJobs[job.name];
			setTimeout(utils.bind(this, '_doJob'), 10);
		}
	}
});
},{"../../enyo":12,"./CoreObject":28,"./kind":96,"./utils":106}],13:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	json = require('./json'),
	logger = require('./logger');

var
	AjaxProperties = require('./AjaxProperties'),
	Async = require('./Async'),
	/*jshint -W079*/
	// this defaults to providing the native FormData if it exists
	FormData = require('./FormData'),
	/*jshint +W079*/
	Xhr = require('./xhr');
	

/**
* A cache of response properties set on the {@link enyo.Ajax} instance once it has completed
* its request.
*
* @typedef {Object} enyo.Ajax~xhrResponse
* @property {Number} status - The response status.
* @property {Object} headers - The headers used for the request.
* @property {String} body - The request body.
* @public
*/

/**
* A [kind]{@glossary kind} designed to expose the native
* [XMLHttpRequest]{@glossary XMLHttpRequest} API. Available configuration options
* are exposed by {@link enyo.AjaxProperties}.
*
* This kind does not extend {@link enyo.Component} and cannot be used
* in the [components block]{@link enyo.Component#components}.
*
* For more information, see the documentation on [Consuming Web
* Services]{@linkplain $dev-guide/building-apps/managing-data/consuming-web-services.html}
* in the Enyo Developer Guide.
*
* @class enyo.Ajax
* @extends enyo.Async
* @public
*/
var Ajax = module.exports = kind(
	/** @lends enyo.Ajax.prototype */ {
	
	name: 'enyo.Async',
	
	/**
	* @private
	*/
	kind: Async,
	
	/**
	* @private
	*/
	published: AjaxProperties,
	
	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function (inParams) {
			utils.mixin(this, inParams);
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			// explicilty release any XHR refs
			this.xhr = null;
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* This will be set once a request has completed (successfully or unsuccessfully).
	* It is a cache of the response values.
	*
	* @type enyo.Ajax~xhrResponse
	* @default null
	* @public
	*/
	xhrResponse: null,
	
	/**
	* Executes the request with the given options. The parameter may be a
	* [hash]{@glossary Object} of properties or a [string]{@glossary String}. Both
	* represent the query string, with the hash being serialized and the string
	* being used directly.
	*
	* ```javascript
	* var query = {q: 'searchTerm'}; // -> "?q=searchTerm"
	* ```
	*
	* To provide a `POST` body, see {@link enyo.AjaxProperties.postBody}.
	*
	* When the request is completed, it will set the
	* [xhrResponse]{@link enyo.Ajax#xhrResponse} property.
	*
	* @see enyo.AjaxProperties
	* @see enyo.Ajax.xhrResponse
	* @see enyo.Ajax~xhrResponse
	* @param {(Object|String)} [params] - A [string]{@glossary String} or
	*	[hash]{@glossary Object} to be used as the query string.
	* @returns {this} The callee for chaining.
	* @public
	*/
	go: function (params) {
		this.failed = false;
		this.startTimer();
		this.request(params);
		return this;
	},
	
	/**
	* @private
	*/
	request: function (params) {
		var parts = this.url.split('?');
		var uri = parts.shift() || '';
		var args = parts.length ? (parts.join('?').split('&')) : [];
		//
		var query = null;
		//
		if(utils.isString(params)){
			//If params parameter is a string, use it as request body
			query = params;
		}
		else{
			//If params parameter is not a string, build a query from it
			if(params){
				query = Ajax.objectToQuery(params);
			}
		}
		//
		if (query) {
			args.push(query);
			query = null;
		}
		if (this.cacheBust) {
			args.push(Math.random());
		}
		//
		var url = args.length ? [uri, args.join('&')].join('?') : uri;
		//
		var xhr_headers = {};
		var body;
		if (this.method != 'GET') {
			body = this.postBody;
			if (this.method === 'POST' && body instanceof FormData) {
				if (body.fake) {
					xhr_headers['Content-Type'] = body.getContentType();
					body = body.toString();
				} else {
					// Nothing to do as the
					// content-type will be
					// automagically set according
					// to the FormData
				}
			} else {
				xhr_headers['Content-Type'] = this.contentType;
				if (body instanceof Object) {
					if (this.contentType.match(/^application\/json(;.*)?$/) !== null) {
						body = JSON.stringify(body);
					} else if (this.contentType === 'application/x-www-form-urlencoded') {
						body = Ajax.objectToQuery(body);
					}
					else {
						body = body.toString();
					}
				}
			}
		}
		utils.mixin(xhr_headers, this.headers);
		// don't pass in headers structure if there are no headers defined as this messes
		// up CORS code for IE8-9
		if (utils.keys(xhr_headers).length === 0) {
			xhr_headers = undefined;
		}
		//
		try {
			this.xhr = Xhr.request({
				url: url,
				method: this.method,
				callback: this.bindSafely('receive'),
				body: body,
				headers: xhr_headers,
				sync: this.sync,
				username: this.username,
				password: this.password,
				xhrFields: utils.mixin({onprogress: this.bindSafely(this.updateProgress)}, this.xhrFields),
				mimeType: this.mimeType
			});
		}
		catch (e) {
			// IE can throw errors here if the XHR would fail CORS checks,
			// so catch and turn into a failure.
			this.fail(e);
		}
	},
	
	/**
	* @private
	*/
	receive: function (inText, inXhr) {
		if (!this.failed && !this.destroyed) {
			var body;
			if (inXhr.responseType === 'arraybuffer') {
				body = inXhr.response;
			} else if (typeof inXhr.responseText === 'string') {
				body = inXhr.responseText;
			} else {
				// IE carrying a binary
				body = inXhr.responseBody;
			}
			this.xhrResponse = {
				status: inXhr.status,
				headers: Ajax.parseResponseHeaders(inXhr),
				body: body
			};
			if (this.isFailure(inXhr)) {
				this.fail(inXhr.status);
			} else {
				this.respond(this.xhrToResponse(inXhr));
			}
		}
	},
	
	/**
	* @private
	*/
	fail: kind.inherit(function (sup) {
		return function (inError) {
			// on failure, explicitly cancel the XHR to prevent
			// further responses.  cancellation also resets the
			// response headers & body,
			if (this.xhr) {
				Xhr.cancel(this.xhr);
				this.xhr = null;
			}
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	xhrToResponse: function (inXhr) {
		if (inXhr) {
			return this[(this.handleAs || 'text') + 'Handler'](inXhr);
		}
	},
	
	/**
	* @private
	*/
	isFailure: function (inXhr) {
		// if any exceptions are thrown while checking fields in the xhr,
		// assume a failure.
		try {
			if (inXhr.responseType === 'arraybuffer') {
				// if we are loading binary data, don't try to access inXhr.responseText
				// because that throws an exception on webkit. Instead, just look for
				// the response.
				if (inXhr.status === 0 && !inXhr.response) {
					return true;
				}
			} else {
				var text = '';
				// work around IE8-9 bug where accessing responseText will thrown error
				// for binary requests.
				if (typeof inXhr.responseText === 'string') {
					text = inXhr.responseText;
				}
				// Follow same failure policy as jQuery's Ajax code
				// CORS failures on FireFox will have status 0 and no responseText,
				// so treat that as failure.
				if (inXhr.status === 0 && text === '') {
					return true;
				}
			}
			// Otherwise, status 0 may be good for local file access.  We treat the range
			// 1-199 and 300+ as failure (only 200-series code are OK).
			return (inXhr.status !== 0) && (inXhr.status < 200 || inXhr.status >= 300);
		}
		catch (e) {
			return true;
		}
	},
	
	/**
	* @private
	*/
	xmlHandler: function (inXhr) {
		return inXhr.responseXML;
	},
	
	/**
	* @private
	*/
	textHandler: function (inXhr) {
		return inXhr.responseText;
	},
	
	/**
	* @private
	*/
	jsonHandler: function (inXhr) {
		var r = inXhr.responseText;
		try {
			return r && json.parse(r);
		} catch (x) {
			logger.warn('Ajax request set to handleAs JSON but data was not in JSON format');
			return r;
		}
	},
	
	/**
	* @private
	*/
	binaryHandler: function (inXhr) {
		return inXhr.response;
	}, 
	
	/**
	* @private
	*/
	updateProgress: function (event) {
		// IE8 doesn't properly support progress events and doesn't pass an object to the
		// handlers so we'll check that before continuing.
		if (event) {
			// filter out 'input' as it causes exceptions on some Firefox versions
			// due to unimplemented internal APIs
			var ev = {};
			for (var k in event) {
				if (k !== 'input') {
					ev[k] = event[k];
				}
			}
			this.sendProgress(event.loaded, 0, event.total, ev);
		}
	},
	
	/**
	* @private
	*/
	statics: {
		objectToQuery: function (/*Object*/ map) {
			var enc = encodeURIComponent;
			var pairs = [];
			var backstop = {};
			for (var name in map){
				var value = map[name];
				if (value != backstop[name]) {
					var assign = enc(name) + '=';
					if (utils.isArray(value)) {
						for (var i=0; i < value.length; i++) {
							pairs.push(assign + enc(value[i]));
						}
					} else {
						pairs.push(assign + enc(value));
					}
				}
			}
			return pairs.join('&');
		}
	},
	
	/**
	* @private
	*/
	protectedStatics: {
		parseResponseHeaders: function (xhr) {
			var headers = {};
			var headersStr = [];
			if (xhr.getAllResponseHeaders) {
				headersStr = xhr.getAllResponseHeaders().split(/\r?\n/);
			}
			for (var i = 0; i < headersStr.length; i++) {
				var headerStr = headersStr[i];
				var index = headerStr.indexOf(': ');
				if (index > 0) {
					var key = headerStr.substring(0, index).toLowerCase();
					var val = headerStr.substring(index + 2);
					headers[key] = val;
				}
			}
			return headers;
		}
	}
});
},{"../../enyo":12,"./AjaxProperties":14,"./Async":17,"./FormData":36,"./json":95,"./kind":96,"./logger":97,"./utils":106,"./xhr":107}],48:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	ObserverSupport = require('./ObserverSupport'),
	ComputedSupport = require('./ComputedSupport'),
	BindingSupport = require('./BindingSupport'),
	EventEmitter = require('./EventEmitter'),
	StateSupport = require('./StateSupport'),
	ModelList = require('./ModelList'),
	Source = require('./Source'),
	States = require('./States'),
	Store = require('./Store');

/**
* This is only necessary because of the order in which mixins are applied.
*
* @class
* @private
*/
var BaseModel = kind({
	kind: null,
	mixins: [ObserverSupport, ComputedSupport, BindingSupport, EventEmitter, StateSupport]
});

/**
* The event emitted when [attributes]{@link enyo.Model#attributes} have been modified.
* The event [object]{@glossary Object} will consist of key/value pairs of attributes
* that changed and their new values.
*
* @event enyo.Model#change
* @type {Object}
* @public
*/

/**
* The default configurable [options]{@link enyo.Model#options} used in certain API methods
* of {@link enyo.Model}.
*
* @typedef {Object} enyo.Model~Options
* @property {Boolean} silent=false - Keep events and notifications from being emitted.
* @property {Boolean} commit=false - Immediately [commit]{@link enyo.Model#commit} changes
*	after they have occurred. Also note that, if `true`, when the [model]{@link enyo.Model}
* is [destroyed]{@link enyo.Model#destroy}, it will also be destroyed via any
* [sources]{@link enyo.Model#source} it has.
* @property {Boolean} parse=false - During initialization, [parse]{@link enyo.Model#parse}
*	any given [attributes]{@link enyo.Model#attributes}; after
*	[fetching]{@link enyo.Model#fetch}, parse the data before calling
* [set()]{@link enyo.Model#set}.
* @property {Boolean} fetch=false - Automatically call [fetch()]{@link enyo.Model#fetch}
*	during initialization.
*/

/**
* The configurable options for [fetch()]{@link enyo.Model#fetch},
* [commit()]{@link enyo.Model#commit}, and [destroy()]{@link enyo.Model#destroy}.
*
* @typedef {enyo.Model~Options} enyo.Model~ActionOptions
* @property {enyo.Model~Success} success - The callback executed upon successful
*	completion.
* @property {enyo.Model~Error} error - The callback executed upon a failed attempt.
*/

/**
* @callback enyo.Model~Success
* @param {enyo.Model} model - The [model]{@link enyo.Model} that is returning successfully.
* @param {enyo.Model~ActionOptions} opts - The original options passed to the action method
*	that is returning successfully.
* @param {*} res - The result, if any, returned by the [source]{@link enyo.Source} that
*	executed it.
* @param {String} source - The name of the [source]{@link enyo.Model#source} that has
* returned successfully.
*/

/**
* @callback enyo.Model~Error
* @param {enyo.Model} model - The model that is returning an error.
* @param {String} action - The name of the action that failed, one of `'FETCHING'`,
*	`'COMMITTING'`, or `'DESTROYING'`.
* @param {enyo.Model~Options} opts - The original options passed to the action method
*	that is returning an error.
* @param {*} res - The result, if any, returned by the [source]{@link enyo.Source} that
*	executed it.
* @param {String} source - The name of the [source]{@link enyo.Model#source} that has
*	returned an error.
*/

/**
* An [object]{@glossary Object} used to represent and maintain state. Usually,
* an {@link enyo.Model} is used to expose data to the view layer. It keeps logic
* related to the data (retrieving it, updating it, storing it, etc.) out of the
* view, and the view can automatically update based on changes in the model.
* Models have the ability to work with other data layer [kinds]{@glossary kind}
* to provide more sophisticated implementations.
*
* Models have [bindable]{@link enyo.BindingSupport}
* [attributes]{@link enyo.Model#attributes}. Models differs from other
* bindable kinds in that attribute values are proxied from an internal
* [hash]{@glossary Object} instead of being set on the target properties
* directly.
*
* @see enyo.Store
* @see enyo.Collection
* @see enyo.RelationalModel
* @see enyo.ModelController
* @class enyo.Model
* @mixes enyo.ObserverSupport
* @mixes enyo.ComputedSupport
* @mixes enyo.BindingSupport
* @mixes enyo.EventEmitter
* @mixes enyo.StateSupport
* @public
*/
var Model = module.exports = kind(
	/** @lends enyo.Model.prototype */ {

	name: 'enyo.Model',

	/**
	* @private
	*/
	kind: BaseModel,

	/**
	* @private
	*/


	/**
	* Used by various [sources]{@link enyo.Model#source} as part of the
	* [URI]{@glossary URI} from which they may be [fetched]{@link enyo.Model#fetch},
	* [committed]{@link enyo.Model#commit}, or [destroyed]{@link enyo.Model#destroy}.
	* Some sources may use this property in other ways.
	*
	* @see enyo.Model.getUrl
	* @see enyo.Source
	* @see enyo.AjaxSource
	* @see enyo.JsonpSource
	* @type {String}
	* @default ''
	* @public
	*/
	url: '',

	/**
	* Implement this method to be used by [sources]{@link enyo.Model#source} to
	* dynamically derive the [URI]{@glossary URI} from which they may be
	* [fetched]{@link enyo.Model#fetch}, [committed]{@link enyo.Model#commit},
	* or [destroyed]{@link enyo.Model#destroy}. Some sources may use this
	* property in other ways. Note that, if this method is implemented, the
	* [url]{@link enyo.Model#url} will not be used.
	*
	* @see enyo.Model.url
	* @see enyo.Source
	* @see enyo.AjaxSource
	* @see enyo.JsonpSource
	* @type {Function}
	* @default null
	* @virtual
	* @public
	*/
	getUrl: null,

	/**
	* The [hash]{@glossary Object} of properties proxied by this [model]{@link enyo.Model}.
	* If defined on a [subkind]{@glossary subkind}, it may be assigned default values and
	* all instances will share its default structure. If no attributes are defined, an
	* empty [hash]{@glossary Object} will be assigned during initialization. It is not
	* necessary to pre-define the structure of a model; depending on the model's complexity,
	* pre-defining the structure may possibly hinder performance.
	*
	* It should also be noted that calls to [get()]{@link enyo.Model#get} or
	* [set()]{@link enyo.Model#set} will access and modify this property. This includes
	* the values to which (or from which) [bindings]{@link enyo.BindingSupport} are bound.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	attributes: null,

	/**
	* The [source(s)]{@link enyo.Source} to use when [fetching]{@link enyo.Model#fetch},
	* [committing]{@link enyo.Model#commit}, or [destroying]{@link enyo.Model#destroy}.
	* Any method that uses sources may override this default value in its configuration
	* options. This value may be a [string]{@glossary String}, an
	* [Array]{@glossary Array} of strings, an instance of {@link enyo.Source}, or an
	* array of `enyo.Source` instances.
	*
	* @see enyo.Source
	* @see enyo.Model.fetch
	* @see enyo.Model.commit
	* @see enyo.Model.destroy
	* @type {(String|String[]|enyo.Source|enyo.Source[])}
	* @default null
	* @public
	*/
	source: null,

	/**
	* These [keys]{@glossary Object.keys} will be the only
	* [attributes]{@link enyo.Model#attributes} included if the
	* [model]{@link enyo.Model} is [committed]{@link enyo.Model#commit}. This
	* directly modifies the result of calling [raw()]{@link enyo.Model#raw}. If
	* not defined, all keys from the [attributes]{@link enyo.Model#attributes}
	* [hash]{@glossary Object} will be used.
	*
	* @see enyo.Model.raw
	* @see enyo.Model.toJSON
	* @type {String[]}
	* @default null
	* @public
	*/
	includeKeys: null,

	/**
	* The inheritable default configuration options. These specify the behavior of particular
	* API features of {@link enyo.Model}. Any method that uses these options may override
	* the default values in its own configuration options. Note that setting an
	* [options hash]{@glossary Object} on a [subkind]{@glossary subkind} will result in
	* the new values' being merged with--not replacing--the
	* [superkind's]{@glossary superkind} own `options`.
	*
	* @type {enyo.Model~Options}
	* @public
	*/
	options: {
		silent: false,
		commit: false,
		parse: false,
		fetch: false
	},

	/**
	* The current [state(s)]{@link enyo~States} possessed by the [model]{@link enyo.Model}.
	* There are limitations as to which state(s) the model may possess at any given time.
	* By default, a model is [NEW]{@link enyo~States.NEW} and [CLEAN]{@link enyo~States.CLEAN}.
	* Note that this is **not** a [bindable]{@link enyo.BindingSupport} property.
	*
	* @see enyo.States
	* @see enyo.StateSupport
	* @type {enyo.States}
	* @readonly
	* @public
	*/
	status: States.NEW | States.CLEAN,

	/**
	* The unique attribute by which the [model]{@link enyo.Model} may be indexed. The
	* attribute's value must be unique across all instances of the specific model
	* [kind]{@glossary kind}
	*
	* @type {String}
	* @default 'id'
	* @public
	*/
	primaryKey: 'id',

	/**
	* Inspects and restructures incoming data prior to [setting]{@link enyo.Model#set} it on
	* the [model]{@link enyo.Model}. While this method may be called directly, it is most
	* often used via the [parse]{@link enyo.Model~Options.parse} option and executed
	* automatically, either during initialization or when [fetched]{@link enyo.Model#fetch}
	* (or, in some cases, both). This is a virtual method and must be provided to suit a
	* given implementation's needs.
	*
	* @see enyo.Model~Options.parse
	* @param {*} data - The incoming data that may need to be restructured or reduced prior to
	*	being [set]{@link enyo.Model#set} on the [model]{@link enyo.Model}.
	* @returns {Object} The [hash]{@glossary Object} to apply to the
	*	model via [set()]{@link enyo.Model#set}.
	* @virtual
	* @public
	*/
	parse: function (data) {
		return data;
	},

	/**
	* Returns an [Object]{@glossary Object} that represents the underlying data structure
	* of the [model]{@link enyo.Model}. This is dependent on the current
	* [attributes]{@link enyo.Model#attributes} as well as the
	* [includeKeys]{@link enyo.Model#includeKeys}.
	* [Computed properties]{@link enyo.ComputedSupport} are **never** included.
	*
	* @see enyo.Model.includeKeys
	* @see enyo.Model.attributes
	* @returns {Object} The formatted [hash]{@glossary Object} representing the underlying
	*	data structure of the [model]{@link enyo.Model}.
	* @public
	*/
	raw: function () {
		var inc = this.includeKeys
			, attrs = this.attributes
			, keys = inc || Object.keys(attrs)
			, cpy = inc? utils.only(inc, attrs): utils.clone(attrs);
		keys.forEach(function (key) {
			var ent = this.get(key);
			if (typeof ent == 'function') cpy[key] = ent.call(this);
			else if (ent && ent.raw) cpy[key] = ent.raw();
			else cpy[key] = ent;
		}, this);
		return cpy;
	},

	/**
	* Returns the [JSON]{@glossary JSON} serializable [raw()]{@link enyo.Model#raw} output
	* of the [model]{@link enyo.Model}. Will automatically be executed by
	* [JSON.parse()]{@glossary JSON.parse}.
	*
	* @see enyo.Model.raw
	* @returns {Object} The return value of [raw()]{@link enyo.Model#raw}.
	* @public
	*/
	toJSON: function () {

		// @NOTE: Because this is supposed to return a JSON parse-able object
		return this.raw();
	},

	/**
	* Restores an [attribute]{@link enyo.Model#attributes} to its previous value. If no
	* attribute is specified, all previous values will be restored.
	*
	* @see enyo.Model.set
	* @see enyo.Model.previous
	* @param {String} [prop] - The [attribute]{@link enyo.Model#attributes} to
	*	[restore]{@link enyo.Model#restore}. If not provided, all attributes will be
	* restored to their previous values.
	* @returns {this} The callee for chaining.
	* @public
	*/
	restore: function (prop) {

		// we ensure that the property is forcibly notified (when possible) to ensure that
		// bindings or other observers will know it returned to that value
		if (prop) this.set(prop, this.previous[prop], {force: true});
		else this.set(this.previous);

		return this;
	},

	/**
	* Commits the [model]{@link enyo.Model} to a [source or sources]{@link enyo.Model#source}.
	* A model cannot be [committed]{@link enyo.Model#commit} if it is in an
	* [error]{@link enyo~States.ERROR} ({@link enyo.StateSupport.isError}) or
	* [busy]{@link enyo~States.BUSY} ({@link enyo.StateSupport.isBusy})
	* [state]{@link enyo.Model#status}. While executing, it will add the
	* [COMMITTING]{@link enyo~States.COMMITTING} flag to the model's
	* [status]{@link enyo.Model#status}. Once it has completed execution, it will
	* remove this flag (even if it fails).
	*
	* @see enyo.Model.committed
	* @see enyo.Model.status
	* @param {enyo.Model~ActionOptions} [opts] - Optional configuration options.
	* @returns {this} The callee for chaining.
	* @public
	*/
	commit: function (opts) {
		var options,
			source,
			it = this;

		// if the current status is not one of the error or busy states we can continue
		if (!(this.status & (States.ERROR | States.BUSY))) {

			// if there were options passed in we copy them quickly so that we can hijack
			// the success and error methods while preserving the originals to use later
			options = opts ? utils.clone(opts, true) : {};

			// make sure we keep track of how many sources we're requesting
			source = options.source || this.source;
			if (source && ((source instanceof Array) || source === true)) {
				this._waiting = source.length ? source.slice() : Object.keys(Source.sources);
			}

			options.success = function (source, res) {
				it.committed(opts, res, source);
			};

			options.error = function (source, res) {
				it.errored('COMMITTING', opts, res, source);
			};

			// set the state
			this.status = this.status | States.COMMITTING;

			// now pass this on to the source to execute as it sees fit
			Source.execute('commit', this, options);
		} else this.errored(this.status, opts);

		return this;
	},

	/**
	* Fetches the [model]{@link enyo.Model} from a
	* [source or sources]{@link enyo.Model#source}. A model cannot be
	* [fetched]{@link enyo.Model#fetch} if it is in an
	* [error]{@link enyo~States.ERROR} ({@link enyo.StateSupport.isError}) or
	* [busy]{@link enyo~States.BUSY} ({@link enyo.StateSupport.isBusy})
	* [state]{@link enyo.Model#status}. While executing, it will add the
	* [FETCHING]{@link enyo~States.FETCHING} flag to the model's
	* [status]{@link enyo.Model#status}. Once it has completed execution, it will
	* remove this flag (even if it fails).
	*
	* @see enyo.Model.fetched
	* @see enyo.Model.status
	* @param {enyo.Model~ActionOptions} [opts] - Optional configuration options.
	* @returns {this} The callee for chaining.
	* @public
	*/
	fetch: function (opts) {
		var options,
			source,
			it = this;

		// if the current status is not one of the error or busy states we can continue
		if (!(this.status & (States.ERROR | States.BUSY))) {

			// if there were options passed in we copy them quickly so that we can hijack
			// the success and error methods while preserving the originals to use later
			options = opts ? utils.clone(opts, true) : {};

			// make sure we keep track of how many sources we're requesting
			source = options.source || this.source;
			if (source && ((source instanceof Array) || source === true)) {
				this._waiting = source.length ? source.slice() : Object.keys(Source.sources);
			}

			options.success = function (source, res) {
				it.fetched(opts, res, source);
			};

			options.error = function (source, res) {
				it.errored('FETCHING', opts, res, source);
			};

			// set the state
			this.status = this.status | States.FETCHING;

			// now pass this on to the source to execute as it sees fit
			Source.execute('fetch', this, options);
		} else this.errored(this.status, opts);

		return this;
	},

	/**
	* Destroys the [model]{@link enyo.Model}. By default, the model will only
	* be [destroyed]{@glossary destroy} in the client. To execute with a
	* [source or sources]{@link enyo.Model#source}, either the
	* [commit default option]{@link enyo.Model#options} must be `true` or a
	* `source` property must be explicitly provided in the `opts` parameter.
	* A model cannot be destroyed (using a source) if it is in an
	* [error]{@link enyo~States.ERROR} ({@link enyo.StateSupport.isError})
	* or [busy]{@link enyo~States.BUSY} ({@link enyo.StateSupport.isBusy})
	* [state]{@link enyo.Model#status}. While executing, it will add the
	* [DESTROYING]{@link enyo~States.DESTROYING} flag to the model's
	* [status]{@link enyo.Model#status}. Once it has completed execution, it
	* will remove this flag (even if it fails).
	*
	* @see enyo.Model.status
	* @param {enyo.Model~ActionOptions} [opts] - Optional configuration options.
	* @returns {this} The callee for chaining.
	* @public
	*/
	destroy: function (opts) {
		var options = opts ? utils.mixin({}, [this.options, opts]) : this.options,
			it = this,
			idx;

		// this becomes an (potentially) async operation if we are committing this destroy
		// to a source and its kind of tricky to figure out because there are several ways
		// it could be flagged to do this

		if (options.commit || options.source) {

			// if the current status is not one of the error states we can continue
			if (!(this.status & (States.ERROR | States.BUSY))) {

				// remap to the originals
				options = opts ? utils.clone(opts, true) : {};

				options.success = function (source, res) {

					if (it._waiting) {
						idx = it._waiting.findIndex(function (ln) {
							return (ln instanceof Source ? ln.name : ln) == source;
						});
						if (idx > -1) it._waiting.splice(idx, 1);
						if (!it._waiting.length) it._waiting = null;
					}

					// continue the operation this time with commit false explicitly
					if (!it._waiting) {
						options.commit = options.source = null;
						it.destroy(options);
					}
					if (opts && opts.success) opts.success(this, opts, res, source);
				};

				options.error = function (source, res) {

					if (it._waiting) {
						idx = it._waiting.findIndex(function (ln) {
							return (ln instanceof Source ? ln.name : ln) == source;
						});
						if (idx > -1) it._waiting.splice(idx, 1);
						if (!it._waiting.length) it._waiting = null;
					}

					// continue the operation this time with commit false explicitly
					if (!it._waiting) {
						options.commit = options.source = null;
						it.destroy(options);
					}

					// we don't bother setting the error state if we aren't waiting because it
					// will be cleared to DESTROYED and it would be pointless
					else this.errored('DESTROYING', opts, res, source);
				};

				this.status = this.status | States.DESTROYING;

				Source.execute('destroy', this, options);
			} else if (this.status & States.ERROR) this.errored(this.status, opts);

			// we don't allow the destroy to take place and we don't forcibly break-down
			// the collection errantly so there is an opportuniy to resolve the issue
			// before we lose access to the collection's content!
			return this;
		}


		// we flag this early so objects that receive an event and process it
		// can optionally check this to support faster cleanup in some cases
		// e.g. Collection/Store don't need to remove listeners because it will
		// be done in a much quicker way already
		this.destroyed = true;
		this.status = States.DESTROYED;
		this.unsilence(true).emit('destroy');
		this.removeAllListeners();
		this.removeAllObservers();

		// if this does not have the the batching flag (that would be set by a collection)
		// then we need to do the default of removing it from the store
		if (!opts || !opts.batching) this.store.remove(this);
	},

	/**
	* Retrieves the value for the given property or path. If the property is a
	* [computed property]{@link enyo.ComputedSupport.computed}, then it will return
	* that value; otherwise, it will attempt to retrieve the value from the
	* [attributes hash]{@link enyo.Model#attributes}.
	*
	* @param {String} path - The property to retrieve.
	* @returns {*} The value for the requested property or path, or `undefined` if
	* it cannot be found or does not exist.
	* @public
	*/
	get: function (path) {
		return this.isComputed(path) ? this._getComputed(path) : this.attributes[path];
	},

	/**
	* Sets the requested `path` or [hash]{@glossary Object} of properties on the
	* [model]{@link enyo.Model}. Properties are applied to the
	* [attributes hash]{@link enyo.Model#attributes} and are retrievable via
	* [get()]{@link enyo.Model#get}. If properties were updated and the `silent`
	* option is not `true`, this method will emit a `change` event, as well as
	* individual [notifications]{@link enyo.ObserverSupport.notify} for the
	* properties that were modified.
	*
	* @fires enyo.Model#change
	* @see enyo.ObserverSupport
	* @see enyo.BindingSupport
	* @param {(String|Object)} path - Either the property name or a [hash]{@glossary Object}
	*	of properties and values to set.
	* @param {(*|enyo.Model~Options)} is If `path` is a [string]{@glossary String},
	* this should be the value to set for the given property; otherwise, it should be
	* an optional hash of available [configuration options]{@link enyo.Model~Options}.
	* @param {enyo.Model~Options} [opts] - If `path` is a string, this should be the
	* optional hash of available configuration options; otherwise, it will not be used.
	* @returns {this} The callee for chaining.
	* @public
	*/
	set: function (path, is, opts) {
		if (!this.destroyed) {

			var attrs = this.attributes,
				options = this.options,
				changed,
				incoming,
				force,
				silent,
				key,
				value,
				commit,
				fetched;

			// the default case for this setter is accepting an object of key->value pairs
			// to apply to the model in which case the second parameter is the optional
			// configuration hash
			if (typeof path == 'object') {
				incoming = path;
				opts = opts || is;
			}

			// otherwise in order to have a single path here we flub it so it will keep on
			// going as expected
			else {
				incoming = {};
				incoming[path] = is;
			}

			// to maintain backward compatibility with the old setters that allowed the third
			// parameter to be a boolean to indicate whether or not to force notification of
			// change even if there was any
			if (opts === true) {
				force = true;
				opts = {};
			}

			opts = opts ? utils.mixin({}, [options, opts]) : options;
			silent = opts.silent;
			force = force || opts.force;
			commit = opts.commit;
			fetched = opts.fetched;

			for (key in incoming) {
				value = incoming[key];

				if (value !== attrs[key] || force) {
					// to ensure we have an object to work with
					// note that we check inside this loop so we don't have to examine keys
					// later only the local variable changed
					changed = this.changed || (this.changed = {});
					//store the previous attr value
					this.previous[key] = attrs[key];
					//set new value
					changed[key] = attrs[key] = value;
				}
			}

			if (changed) {

				// we add dirty as a value of the status but clear the CLEAN bit if it
				// was set - this would allow it to be in the ERROR state and NEW and DIRTY
				if (!fetched) this.status = (this.status | States.DIRTY) & ~States.CLEAN;

				if (!silent) this.emit('change', changed, this);

				if (commit && !fetched) this.commit(opts);

				// reset value so subsequent changes won't be added to this change-set
				this.changed = null;
			}
		}

		return this;
	},

	/**
	* A bit of hackery to facade the normal [getter]{@link enyo.ComputedSupport.get}. Note that
	* we pass an arbitrary super-method that automatically returns `undefined`, which is
	* consistent with this use case and its intended purpose.
	*
	* @private
	*/
	_getComputed: ComputedSupport.get.fn(function () { return undefined; }),

	/**
	* Initializes the [model]{@link enyo.Model}. Unlike some methods, the parameters are not
	* interchangeable. If you are not using a particular (optional) parameter, pass in `null`.
	*
	* @param {Object} [attrs] - Optionally initialize the [model]{@link enyo.Model} with some
	*	[attributes]{@link enyo.Model#attributes}.
	* @param {Object} [props] - Properties to apply directly to the [model]{@link enyo.Model} and
	*	not the [attributes hash]{@link enyo.Model#attributes}. If these properties contain an
	*	`options` property (a [hash]{@glossary Object}) it will be merged with existing
	*	[options]{@link enyo.Model#options}.
	* @param {enyo.Model~Options} [opts] - This is a one-time [options hash]{@link enyo.Model~Options} that
	*	is only used during initialization and not applied as defaults.
	* @public
	*/
	constructor: function (attrs, props, opts) {

		// in cases where there is an options hash provided in the _props_ param
		// we need to integrate it manually...
		if (props && props.options) {
			this.options = utils.mixin({}, [this.options, props.options]);
			delete props.options;
		}

		// the _opts_ parameter is a one-hit options hash it does not leave
		// behind its values as default options...
		opts = opts? utils.mixin({}, [this.options, opts]): this.options;

		// go ahead and mix all of the properties in
		props && utils.mixin(this, props);

		var noAdd = opts.noAdd
			, commit = opts.commit
			, parse = opts.parse
			, fetch = this.options.fetch
			, defaults;

		// defaults = this.defaults && (typeof this.defaults == 'function'? this.defaults(attrs, opts): this.defaults);
		defaults = this.defaults && typeof this.defaults == 'function'? this.defaults(attrs, opts): null;

		// ensure we have a unique identifier that could potentially
		// be used in remote systems
		this.euid = this.euid || utils.uid('m');

		// if necessary we need to parse the incoming attributes
		attrs = attrs? parse? this.parse(attrs): attrs: null;

		// ensure we have the updated attributes
		this.attributes = this.attributes? defaults? utils.mixin({}, [defaults, this.attributes]): utils.clone(this.attributes, true): defaults? utils.clone(defaults, true): {};
		attrs && utils.mixin(this.attributes, attrs);
		this.previous = utils.clone(this.attributes);

		// now we need to ensure we have a store and register with it
		this.store = this.store || Store;

		// @TODO: The idea here is that when batch instancing records a collection
		// should be intelligent enough to avoid doing each individually or in some
		// cases it may be useful to have a record that is never added to a store?
		if (!noAdd) this.store.add(this, opts);

		commit && this.commit();
		fetch && this.fetch();
	},

	/**
	* Overloaded. We funnel arbitrary notification updates through here, as this
	* is faster than using the built-in notification updates for batch operations.
	*
	* @private
	*/
	emit: kind.inherit(function (sup) {
		return function (e, props) {
			if (e == 'change' && props && this.isObserving()) {
				for (var key in props) this.notify(key, this.previous[key], props[key]);
			}
			return sup.apply(this, arguments);
		};
	}),

	/**
	* Overloaded to alias the (also overloaded) [emit()]{@link enyo.Model#emit} method.
	*
	* @private
	*/
	triggerEvent: function () {
		return this.emit.apply(this, arguments);
	},

	/**
	* When a [fetch]{@link enyo.Model#fetch} has completed successfully, it is returned
	* to this method. This method handles special and important behavior; it should not be
	* called directly and, when overloading, care must be taken to ensure that you call
	* the super-method. This correctly sets the [status]{@link enyo.Model#status} and, in
	* cases where multiple [sources]{@link enyo.Model#source} were used, it waits until
	* all have responded before clearing the [FETCHING]{@link enyo~States.FETCHING} flag.
	* If a [success]{@link enyo.Model~Success} callback was provided, it will be called
	* once for each source.
	*
	* @param {enyo.Model~ActionOptions} opts - The original options passed to
	*	[fetch()]{@link enyo.Model#fetch}, merged with the defaults.
	* @param {*} [res] - The result provided from the given [source]{@link enyo.Model#source},
	* if any. This will vary depending on the source.
	* @param {String} source - The name of the source that has completed successfully.
	* @public
	*/
	fetched: function (opts, res, source) {
		var idx,
			options = this.options;

		if (this._waiting) {
			idx = this._waiting.findIndex(function (ln) {
				return (ln instanceof Source ? ln.name : ln) == source;
			});
			if (idx > -1) this._waiting.splice(idx, 1);
			if (!this._waiting.length) this._waiting = null;
		}

		// normalize options so we have values and ensure it knows it was just fetched
		opts = opts ? utils.mixin({}, [options, opts]) : options;
		opts.fetched = true;

		// for a special case purge to only use the result sub-tree of the fetched data for
		// the model attributes
		if (opts.parse) res = this.parse(res);

		// note this will not add the DIRTY state because it was fetched but also note that it
		// will not clear the DIRTY flag if it was already DIRTY
		if (res) this.set(res, opts);

		// clear the FETCHING and NEW state (if it was NEW) we do not set it as dirty as this
		// action alone doesn't warrant a dirty flag that would need to be set in the set method
		if (!this._waiting) this.status = this.status & ~(States.FETCHING | States.NEW);

		// now look for an additional success callback
		if (opts.success) opts.success(this, opts, res, source);
	},

	/**
	* When a [commit]{@link enyo.Model#commit} has completed successfully, it is returned
	* to this method. This method handles special and important behavior; it should not be
	* called directly and, when overloading, care must be taken to ensure that you call the
	* super-method. This correctly sets the [status]{@link enyo.Model#status} and, in cases
	* where multiple [sources]{@link enyo.Model#source} were used, it waits until all have
	* responded before clearing the [COMMITTING]{@link enyo~States.COMMITTING} flag. If a
	* [success]{@link enyo.Model~Success} callback was provided, it will be called once for
	* each source.
	*
	* @param {enyo.Model~ActionOptions} opts - The original options passed to
	*	[commit()]{@link enyo.Model#commit}, merged with the defaults.
	* @param {*} [res] - The result provided from the given [source]{@link enyo.Model#source},
	* if any. This will vary depending on the source.
	* @param {String} source - The name of the source that has completed successfully.
	* @public
	*/
	committed: function (opts, res, source) {
		var idx;

		if (this._waiting) {
			idx = this._waiting.findIndex(function (ln) {
				return (ln instanceof Source ? ln.name : ln) == source;
			});
			if (idx > -1) this._waiting.splice(idx, 1);
			if (!this._waiting.length) this._waiting = null;
		}

		if (!this._waiting) {
			// we need to clear the COMMITTING bit and DIRTY bit as well as ensure that the
			// 'previous' hash is whatever the current attributes are
			this.previous = utils.clone(this.attributes);
			this.status = (this.status | States.CLEAN) & ~(States.COMMITTING | States.DIRTY);
		}

		if (opts && opts.success) opts.success(this, opts, res, source);
	},

	/**
	* When an action ([fetch()]{@link enyo.Model#fetch}, [commit()]{@link enyo.Model#commit},
	* or [destroy()]{@link enyo.Model#destroy}) has failed, it will be passed to this method.
	* This method handles special and important behavior; it should not be called directly
	* and, when overloading, care must be taken to ensure that you call the super-method.
	* This correctly sets the [status]{@link enyo.Model#status} to the known
	* [error state]{@link enyo~States.ERROR}, or to the
	* [unknown error state]{@link enyo~States.ERROR_UNKNOWN} if it the error state could not
	* be determined. If an [error callback]{@link enyo.Model~Error} was provided, this method
	* will execute it.
	*
	* @see enyo.StateSupport.clearError
	* @param {String} action - The action (one of `'FETCHING'`, `'COMMITTING'`, or
	* `'DESTROYING'`) that failed and is now in an [error state]{@link enyo~States.ERROR}.
	* @param {enyo.Model~ActionOptions} opts - The original options passed to the `action`
	* method, merged with the defaults.
	* @param {*} [res] - The result provided from the given [source]{@link enyo.Model#source},
	* if any. This will vary depending on the source.
	* @param {String} source - The name of the source that has returned an error.
	* @public
	*/
	errored: function (action, opts, res, source) {
		var stat,
			idx;

		// if the error action is a status number then we don't need to update it otherwise
		// we set it to the known state value
		if (typeof action == 'string') {

			// all built-in errors will pass this as their values are > 0 but we go ahead and
			// ensure that no developer used the 0x00 for an error code
			stat = States['ERROR_' + action];
		} else stat = action;

		if (isNaN(stat) || (stat & ~States.ERROR)) stat = States.ERROR_UNKNOWN;

		// correctly set the current status and ensure we clear any busy flags
		this.status = (this.status | stat) & ~States.BUSY;

		if (this._waiting) {
			idx = this._waiting.findIndex(function (ln) {
				return (ln instanceof Source ? ln.name : ln) == source;
			});
			if (idx > -1) this._waiting.splice(idx, 1);
			if (!this._waiting.length) this._waiting = null;
		}

		// we need to check to see if there is an options handler for this error
		if (opts && opts.error) opts.error(this, action, opts, res, source);
	}

});

/**
* @name enyo.Model.concat
* @static
* @private
*/
Model.concat = function (ctor, props) {
	var proto = ctor.prototype || ctor;

	if (props.options) {
		proto.options = utils.mixin({}, [proto.options, props.options]);
		delete props.options;
	}
};

/**
* @private
*/
kind.features.push(function (ctor) {
	if (ctor.prototype instanceof Model) {
		!Store.models[ctor.prototype.kindName] && (Store.models[ctor.prototype.kindName] = new ModelList());
	}
});
},{"../../enyo":12,"./BindingSupport":19,"./ComputedSupport":25,"./EventEmitter":34,"./ModelList":49,"./ObserverSupport":54,"./Source":69,"./StateSupport":70,"./States":71,"./Store":72,"./kind":96,"./utils":106}],23:[function(require,module,exports){
require('../../enyo');


var
	kind = require('./kind'),
	utils = require('./utils'),
	logger = require('./logger');

var
	CoreObject = require('./CoreObject'),
	ApplicationSupport = require('./ApplicationSupport'),
	ComponentBindingSupport = require('./ComponentBindingSupport'),
	Jobs = require('./jobs');

var
	kindPrefix = {},
	unnamedCounter = 0;
	
/**
* @callback enyo.Component~EventHandler
* @param {enyo.Component} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @param {Object} event - An [object]{@glossary Object} containing
*	event information.
* @returns {Boolean} A value indicating whether the event has been
*	handled or not. If `true`, then bubbling is stopped.
*/

/**
* A [hash]{@glossary Object} of references to all the [components]{@link enyo.Component}
* owned by this component. This property is updated whenever a new
* component is added; the new component may be accessed via its
* [name]{@link enyo.Component#name} property. We may also observe changes on
* properties of components referenced by the `$` property.
*
* Component access via the `$` hash:
* ```javascript
* var c = new enyo.Component({
*	name: 'me',
*	components: [
*		{kind: 'Component', name: 'other'}
*	]
* });
*
* // We can now access 'other' on the $ hash of 'c', via c.$.other
* ```
*
* Observing changes on a component referenced by the `$` property:
* ```javascript
* var c = new enyo.Component({
*	name: 'me',
*	components: [
*		{kind: 'Component', name: 'other'}
*	]
* });
*
* c.addObserver('$.other.active', function() {
*	// do something to respond to the "active" property of "other" changing
* })
*
* c.$.other.set('active', true); // this will trigger the observer to run its callback
* ```
*
* @name $
* @type {Object}
* @default null
* @memberof enyo.Component.prototype
* @readonly
* @public
*/

/**
* If `true`, this [component's]{@link enyo.Component} [owner]{@link enyo.Component#owner} will
* have a direct name reference to the owned component.
*
* @example
* var c = new enyo.Component({
*	name: 'me',
*	components: [
*		{kind: 'Component', name: 'other', publish: true}
*	]
* });
*
* // We can now access 'other' directly, via c.other
*
* @name publish
* @type {Boolean}
* @default undefined
* @memberOf enyo.Component.prototype
* @public
*/

/**
* If `true`, the [layout]{@glossary layout} strategy will adjust the size of this
* [component]{@link enyo.Component} to occupy the remaining available space.
*
* @name fit
* @type {Boolean}
* @default undefined
* @memberOf enyo.Component.prototype
* @public
*/

/**
* {@link enyo.Component} is the fundamental building block for Enyo applications.
* Components are designed to fit together, allowing complex behaviors to
* be fashioned from smaller bits of functionality.
*
* Component [constructors]{@glossary constructor} take a single
* argument (sometimes called a [component configuration]{@glossary configurationBlock}),
* a JavaScript [object]{@glossary Object} that defines various properties to be initialized on the
* component.  For example:
*
* ```javascript
* // create a new component, initialize its name property to 'me'
* var c = new enyo.Component({
*	name: 'me'
* });
* ```
*
* When a component is instantiated, items configured in its
* `components` property are instantiated, too:
*
* ```javascript
* // create a new component, which itself has a component
* var c = new enyo.Component({
*	name: 'me',
*	components: [
*		{kind: 'Component', name: 'other'}
*	]
* });
* ```
*
* In this case, when `me` is created, `other` is also created, and we say that `me` owns `other`.
* In other words, the [owner]{@link enyo.Component#owner} property of `other` equals `me`.
* Notice that you can specify the [kind]{@glossary kind} of `other` explicitly in its
* configuration block, to tell `me` what constructor to use to create `other`.
*
* Note that [kind]{@glossary kind} values may be references to actual
* kinds or string-names of kinds. Kind names that do not resolve directly to kinds
* are looked up in default namespaces. In this case, `kind: 'Component'` resolves to
* `enyo.Component`.
*
* To move a component, use the `setOwner()` method to change the
* component's owner. If you want a component to be unowned, use `setOwner(null)`.
*
* If you make changes to `enyo.Component`, be sure to add or update the appropriate
* {@linkplain https://github.com/enyojs/enyo/tree/master/tools/test/core/tests unit tests}.
*
* For more information, see the documentation on
* [Components]{@linkplain $dev-guide/key-concepts/components.html} in the
* Enyo Developer Guide.
*
* @class enyo.Component
* @extends enyo.Object
* @mixes enyo.ApplicationSupport
* @mixes enyo.ComponentBindingSupport
* @public
*/
var Component = module.exports = kind(
	/** @lends enyo.Component.prototype */ {

	name: 'enyo.Component',

	/**
	* @private
	*/
	kind: CoreObject,

	/**
	* @private
	*/


	/**
	* @private
	*/
	cachedBubble: true,

	/**
	* @private
	*/
	cachePoint: false,

	/**
	* @private
	*/
	published:
		/** @lends enyo.Component.prototype */ {

		/**
		* A unique name for the [component]{@link enyo.Component} within its
		* [owner]{@link enyo.Component#owner}. This is used to set the access name in the
		* owner's [$ hash]{@link enyo.Component#$}. If not
		* specified, a default name will be provided based on the name of the
		* [object's]{@link enyo.Object} [kind]{@glossary kind}, with a numeric
		* suffix appended if more than one instance exists in the owner.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		name: '',

		/**
		* A unique id for the [component]{@link enyo.Component}, usually automatically generated
		* based on its position within the component hierarchy, although
		* it may also be directly specified. {@link enyo.Control} uses this `id` value for the
		* DOM [id]{@link enyo.Control#id} attribute.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		id: '',

		/**
		* The [component]{@link enyo.Component} that owns this component.
		* It is usually defined implicitly at creation time based on the
		* [createComponent()]{@link enyo.Component#createComponent} call or
		* the `components` hash.
		*
		* @type {enyo.Component}
		* @default null
		* @public
		*/
		owner: null,

		/**
		* This can be a [hash]{@glossary Object} of features to apply to
		* [chrome]{@glossary chrome} [components]{@link enyo.Component} of the base
		* [kind]{@glossary kind}. They are matched by [name]{@link enyo.Component#name}
		* (if the component you wish to modify does not have a name, this will not work).
		* You can modify any properties of the component except for methods. Setting a
		* value for `componentOverrides` at runtime will have no effect.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		componentOverrides: null
	},

	/**
	* @private
	*/
	defaultKind: 'enyo.Component',

	/**
	* @private
	*/
	handlers: {},

	/**
	* @private
	*/
	mixins: [ApplicationSupport, ComponentBindingSupport],

	/**
	* @private
	*/
	toString: function () {
		return this.id + ' [' + this.kindName + ']';
	},

	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function (props) {
			// initialize instance objects
			this._componentNameMap = {};
			this.$ = {};
			this.cachedBubbleTarget = {};
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	constructed: kind.inherit(function (sup) {
		return function (props) {
			// perform initialization
			this.create(props);
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	create: function () {
		// stop and queue all of the notifications happening synchronously to allow
		// responders to only do single passes on work traversing the tree
		this.stopNotifications();
		this.ownerChanged();
		this.initComponents();
		// release the kraken!
		this.startNotifications();
	},

	/**
	* @private
	*/
	initComponents: function () {
		// The _components_ property in kind declarations is renamed to
		// _kindComponents_ by the Component subclass mechanism.  This makes it
		// easy for the developer to distinguish kindComponents from the components
		// in _this.components_, without having to worry about the actual difference.
		//
		// Specifically, the difference is that kindComponents are constructed as
		// owned by this control (whereas components in _this.components_ are not).
		// In addition, kindComponents are marked with the _isChrome: true_ flag.
		this.createChrome(this.kindComponents);
		this.createClientComponents(this.components);
	},

	/**
	* @private
	*/
	createChrome: function (comps) {
		this.createComponents(comps, {isChrome: true});
	},

	/**
	* @private
	*/
	createClientComponents: function (comps) {
		this.createComponents(comps, {owner: this.getInstanceOwner()});
	},

	/**
	* @private
	*/
	getInstanceOwner: function () {
		return (!this.owner || this.owner.notInstanceOwner) ? this : this.owner;
	},

	/**
	* Removes this [component]{@link enyo.Component} from its
	* [owner]{@link enyo.Component#owner} (setting `owner` to `null`)
	* and does any necessary cleanup. The component is flagged with
	* `destroyed: true`. Usually, the component will be suitable for garbage
	* collection after being destroyed, unless user code keeps a reference
	* to it.
	*
	* @returns {this} The callee for chaining.
	* @method
	* @public
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			this.destroyComponents();
			this.setOwner(null);
			sup.apply(this, arguments);
			this.stopAllJobs();
			return this;
		};
	}),

	/**
	* Destroys all owned [components]{@link enyo.Component}.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	destroyComponents: function () {
		var comps = this.getComponents(),
			comp,
			i;

		for (i = 0; i < comps.length; ++i) {
			comp = comps[i];
			// @todo: previous comment said list might be stale and ownership may have caused
			// components to be destroyed as a result of some inner-container...look into this
			// because that seems incorrect or avoidable
			if (!comp.destroyed) comp.destroy();
		}

		return this;
	},

	/**
	* @private
	*/
	makeId: function() {
		var delim = '_', pre = this.owner && this.owner.getId(),
			baseName = this.name || ('@@' + (++unnamedCounter));
		return (pre ? pre + delim : '') + baseName;
	},

	/**
	* @private
	*/
	ownerChanged: function (was) {
		if (was && was.removeComponent) was.removeComponent(this);
		if (this.owner && this.owner.addComponent) this.owner.addComponent(this);
		if (!this.id) this.id = this.makeId();
	},

	/**
	* @private
	*/
	nameComponent: function (comp) {
		var pre = prefixFromKindName(comp.kindName),
			last = this._componentNameMap[pre] || 0,
			nom;

		do {
			nom = pre + (++last > 1 ? String(last) : '');
		} while (this.$[nom]);

		this._componentNameMap[pre] = Number(last);
		/*jshint -W093 */
		return (comp.name = nom);
	},

	/**
	* Adds a [component]{@link enyo.Component} to the list of components
	* owned by the current component (i.e., [this.$]{@link enyo.Component#$}).
	*
	* @param {enyo.Component} comp - The [component]{@link enyo.Component} to add.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addComponent: function (comp) {
		var nom = comp.get('name');

		// if there is no name we have to come up with a generic name
		if (!nom) nom = this.nameComponent(comp);

		// if there already was a component by that name we issue a warning
		// @todo: if we're going to name rules being violated we need to normalize this approach
		// and ensure we have one for every warning/error we throw
		if (this.$[nom]) this.warn(
			'Duplicate component name ' + nom + ' in owner ' + this.id + ' violates ' +
			'unique-name-under-owner rule, replacing existing component in the hash and ' +
			'continuing, but this is an error condition and should be fixed.'
		);

		this.$[nom] = comp;
		this.notify('$.' + nom, null, comp);

		// if the component has the `publish` true property then we also create a reference to
		// it directly on the owner (this)
		if (comp.publish) {
			this[nom] = comp;

			// and to ensure that bindings are aware we have to notify them as well
			this.notify(nom, null, comp);
		}

		return this;
	},

	/**
	* Removes the passed-in [component]{@link enyo.Component} from those known
	* to be owned by this component. The component will be removed from the
	* [$ hash]{@link enyo.Component#$}, and from the [owner]{@link enyo.Component#owner}
	* directly if [publish]{@link enyo.Component#publish} is set to `true`.
	*
	* @param {enyo.Component} comp - The component to remove.
	* @returns {this} The callee for chaining.
	* @public
	*/
	removeComponent: function (comp) {
		var nom = comp.get('name');

		// remove it from the hash if it existed
		delete this.$[nom];

		// if it was published remove it from the component proper
		if (comp.publish) delete this[nom];

		return this;
	},

	/**
	* Returns an [array]{@glossary Array} of owned [components]{@link enyo.Component}; in
	* other words, converts the [$ hash]{@link enyo.Component#$} into an array
	* and returns the array.
	*
	* @returns {enyo.Component[]} The [components]{@link enyo.Component} found in the
	*	[$ hash]{@link enyo.Component#$}.
	* @public
	*/
	getComponents: function () {
		return utils.values(this.$);
	},

	/**
	* @private
	*/
	adjustComponentProps: function (props) {
		if (this.defaultProps) utils.mixin(props, this.defaultProps, {ignore: true});
		props.kind = props.kind || props.isa || this.defaultKind;
		props.owner = props.owner || this;
	},

	/**
	* @private
	*/
	_createComponent: function (props, ext) {
		var def = ext ? utils.mixin({}, [ext, props]) : utils.clone(props);

		// always adjust the properties according to the needs of the kind and parent kinds
		this.adjustComponentProps(def);

		// pass along for the final stage
		return Component.create(def);
	},

	/**
	* Creates and returns a [component]{@link enyo.Component} as defined by the combination of
	* a base and an additional property [hash]{@glossary Object}. The properties provided
	* in the standard property hash override those provided in the
	* additional property hash.
	*
	* The created component passes through initialization machinery
	* provided by the creating component, which may supply special
	* handling. Unless the [owner]{@link enyo.Component#owner} is explicitly specified, the new
	* component will be owned by the instance on which this method is called.
	*
	* @example
	* // Create a new component named 'dynamic', owned by 'this'
	* // (will be available as this.$.dynamic).
	* this.createComponent({name: 'dynamic'});
	*
	* @example
	* // Create a new component named 'another' owned by 'other'
	* // (will be available as other.$.another).
	* this.createComponent({name: 'another'}, {owner: other});
	*
	* @param {Object} props - The declarative [kind]{@glossary kind} definition.
	* @param {Object} ext - Additional properties to be applied (defaults).
	* @returns {enyo.Component} The instance created with the given parameters.
	* @public
	*/
	createComponent: function (props, ext) {
		// createComponent and createComponents both delegate to the protected method
		// (_createComponent), allowing overrides to customize createComponent and
		// createComponents separately.
		return this._createComponent(props, ext);
	},

	/**
	* Creates [components]{@link enyo.Component} as defined by the [arrays]{@glossary Array}
	* of base and additional property [hashes]{@glossary Object}. The standard and
	* additional property hashes are combined as described in
	* [createComponent()]{@link enyo.Component#createComponent}.
	*
	* @example
	* // ask foo to create components 'bar' and 'zot', but set the owner of
	* // both components to 'this'.
	* this.$.foo.createComponents([
	*	{name: 'bar'},
	*	{name: 'zot'}
	* ], {owner: this});
	*
	* @param {Object[]} props The array of {@link enyo.Component} definitions to be created.
	* @param {Object} ext - Additional properties to be supplied as defaults for each.
	* @returns {enyo.Component[]} The array of [components]{@link enyo.Component} that were
	*	created.
	* @public
	*/
	createComponents: function (props, ext) {
		var comps = [],
			comp,
			i;

		if (props) {
			for (i = 0; i < props.length; ++i) {
				comp = props[i];
				comps.push(this._createComponent(comp, ext));
			}
		}

		return comps;
	},

	/**
	* @private
	*/
	getBubbleTarget: function (nom, event) {
		if (event.delegate) return this.owner;
		else {
			return (
				this.bubbleTarget
				|| (this.cachedBubble && this.cachedBubbleTarget[nom])
				|| this.owner
			);
		}
	},

	/**
	* Bubbles an {@glossary event} up an [object]{@glossary Object} chain,
	* starting with `this`.
	*
	* A handler for an event may be specified. See {@link enyo.Component~EventHandler}
	* for complete details.
	*
	* @param {String} nom - The name of the {@glossary event} to bubble.
	* @param {Object} [event] - The event [object]{@glossary Object} to be passed along
	* while bubbling.
	* @param {enyo.Component} [sender=this] - The {@link enyo.Component} responsible for
	*	bubbling the event.
	* @returns {Boolean} `false` if unhandled or uninterrupted; otherwise, `true`.
	* @public
	*/
	bubble: function (nom, event, sender) {
		if (!this._silenced) {
			event = event || {};
			event.lastHandledComponent = null;
			event.bubbling = true;
			// deliberately done this way
			if (event.originator == null) event.originator = sender || this;
			return this.dispatchBubble(nom, event, sender || this);
		}
		return false;
	},

	/**
	* Bubbles an {@glossary event} up an [object]{@glossary Object} chain,
	* starting **above** `this`.
	*
	* A handler for an event may be specified. See {@link enyo.Component~EventHandler}
	* for complete details.
	*
	* @param {String} nom - The name of the {@glossary event}.
	* @param {Object} [event] - The event properties to pass along while bubbling.
	* @returns {Boolean} `false` if unhandled or uninterrupted; otherwise, `true`.
	* @public
	*/
	bubbleUp: function (nom, event) {
		var next;

		if (!this._silenced) {
			event = event || {};
			event.bubbling = true;
			next = this.getBubbleTarget(nom, event);
			if (next) {
				// use delegate as sender if it exists to preserve illusion
				// that event is dispatched directly from that, but we still
				// have to bubble to get decorations
				return next.dispatchBubble(nom, event, event.delegate || this);
			}
		}
		return false;
	},

	/**
	* Sends an {@glossary event} to a named [delegate]{@glossary delegate}.
	* This [object]{@glossary Object} may dispatch an event to
	* itself via a [handler]{@link enyo.Component~EventHandler}, or to its
	* [owner]{@link enyo.Component#owner} via an event property, e.g.:
	*
	*	handlers {
	*		// 'tap' events dispatched to this.tapHandler
	*		ontap: 'tapHandler'
	*	}
	*
	*	// 'tap' events dispatched to 'tapHandler' delegate in this.owner
	*	ontap: 'tapHandler'
	*
	* @private
	*/
	dispatchEvent: function (nom, event, sender) {
		var delegate,
			ret;

		if (!this._silenced) {
			// if the event has a delegate associated with it we grab that
			// for reference
			// NOTE: This is unfortunate but we can't use a pooled object here because
			// we don't know where to release it
			delegate = (event || (event = {})).delegate;

			// bottleneck event decoration w/ optimization to avoid call to empty function
			if (this.decorateEvent !== Component.prototype.decorateEvent) {
				this.decorateEvent(nom, event, sender);
			}

			// first, handle any delegated events intended for this object
			if (delegate && delegate.owner === this) {
				// the most likely case is that we have a method to handle this
				if (this[nom] && 'function' === typeof this[nom]) {
					return this.dispatch(nom, event, sender);
				}
				// but if we don't, just stop the event from going further
				return false;
			}

			// for non-delgated events, try the handlers block if possible
			if (!delegate) {
				var bHandler = this.handlers && this.handlers[nom];
				var bDelegatedFunction = this[nom] && utils.isString(this[nom]);
				var cachePoint = this.cachePoint || bHandler || bDelegatedFunction || this.id === "master" ;

				if (event.bubbling) {
					if (event.lastHandledComponent && cachePoint) {
						event.lastHandledComponent.cachedBubbleTarget[nom] = this;
						event.lastHandledComponent = null;
					}
					if (!event.lastHandledComponent && this.id !== "master") {
						event.lastHandledComponent = this;
					}
				}
				if (bHandler && this.dispatch(bHandler, event, sender)) {
					return true;
				}
				if (bDelegatedFunction) {
					// we dispatch it up as a special delegate event with the
					// component that had the delegation string property stored in
					// the 'delegate' property
					event.delegate = this;
					ret = this.bubbleUp(this[nom], event, sender);
					delete event.delegate;
					return ret;
				}
			}
		}
		return false;
	},

	/**
	* Internal - try dispatching {@glossary event} to self; if that fails,
	* [bubble it up]{@link enyo.Component#bubbleUp} the tree.
	*
	* @private
	*/
	dispatchBubble: function (nom, event, sender) {
		if (!this._silenced) {
			// Try to dispatch from here, stop bubbling on truthy return value
			if (this.dispatchEvent(nom, event, sender)) {
				return true;
			}
			// Bubble to next target
			return this.bubbleUp(nom, event, sender);
		}
		return false;
	},

	/**
	* @private
	*/
	decorateEvent: function (nom, event, sender) {
		// an event may float by us as part of a dispatchEvent chain
		// both call this method so intermediaries can decorate inEvent
	},

	/**
	* @private
	*/
	stopAllJobs: function () {
		var job;

		if (this.__jobs) for (job in this.__jobs) this.stopJob(job);
	},

	/**
	* Dispatches the {@glossary event} to named [delegate]{@glossary delegate} `nom`,
	* if it exists. [Subkinds]{@glossary subkind} may re-route dispatches. Note that
	* both 'handlers' events and events delegated from owned controls arrive here.
	* If you need to handle these types of events differently, you may also need to
	* override [dispatchEvent()]{@link enyo.Component#dispatchEvent}.
	*
	* @param {String} nom - The method name to dispatch the {@glossary event}.
	* @param {Object} [event] - The event [object]{@glossary Object} to pass along.
	* @param {enyo.Component} [sender=this] - The originator of the event.
	* @public
	*/
	dispatch: function (nom, event, sender) {
		var fn;

		if (!this._silenced) {
			fn = nom && this[nom];
			if (fn && typeof fn == 'function') {
				// @todo: deprecate sender
				return fn.call(this, sender || this, event);
			}
		}
		return false;
	},

	/**
	* Triggers the [handler]{@link enyo.Component~EventHandler} for a given
	* {@glossary event} type.
	*
	* @example
	* myControl.triggerHandler('ontap');
	*
	* @param {String} nom - The name of the {@glossary event} to trigger.
	* @param {Object} [event] - The event object to pass along.
	* @param {enyo.Component} [sender=this] - The originator of the event.
	* @returns {Boolean} `false` if unhandled or uninterrupted, `true` otherwise.
	* @public
	*/
	triggerHandler: function () {
		return this.dispatchEvent.apply(this, arguments);
	},

	/**
	* Sends a message to myself and all of my [components]{@link enyo.Component}.
	* You can stop a waterfall into components owned by a receiving object
	* by returning a truthy value from the {@glossary event}
	* [handler]{@link enyo.Component~EventHandler}.
	*
	* @param {String} nom - The name of the {@glossary event} to waterfall.
	* @param {Object} [event] - The event [object]{@glossary Object} to pass along.
	* @param {enyo.Component} [sender=this] - The originator of the event.
	* @returns {this} The callee for chaining.
	* @public
	*/
	waterfall: function(nom, event, sender) {
		if (!this._silenced) {
			event = event || {};
			event.bubbling = false;

			// give the locals an opportunity to interrupt the event
			if (this.dispatchEvent(nom, event, sender)) return true;

			// otherwise carry on
			this.waterfallDown(nom, event, sender || this);
		}

		return this;
	},

	/**
	* Sends a message to all of my [components]{@link enyo.Component}, but not myself. You can
	* stop a [waterfall]{@link enyo.Component#waterfall} into [components]{@link enyo.Component}
	* owned by a receiving [object]{@glossary Object} by returning a truthy value from the
	* {@glossary event} [handler]{@link enyo.Component~EventHandler}.
	*
	* @param {String} nom - The name of the {@glossary event}.
	* @param {Object} [event] - The event [object]{@glossary Object} to pass along.
	* @param {enyo.Component} [sender=this] - The event originator.
	* @returns {this} The callee for chaining.
	* @public
	*/
	waterfallDown: function(nom, event, sender) {
		var comp;
		event = event || {};
		event.bubbling = false;

		if (!this._silenced) {
			for (comp in this.$) this.$[comp].waterfall(nom, event, sender || this);
		}

		return this;
	},

	/**
	* @private
	*/
	_silenced: false,

	/**
	* @private
	*/
	_silenceCount: 0,

	/**
	* Sets a flag that disables {@glossary event} propagation for this
	* [component]{@link enyo.Component}. Also increments an internal counter that tracks
	* the number of times the [unsilence()]{@link enyo.Component#unsilence} method must
	* be called before event propagation will continue.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	silence: function () {
		this._silenced = true;
		this._silenceCount += 1;

		return this;
	},

	/**
	* Determines if the [object]{@glossary Object} is currently
	* [silenced]{@link enyo.Component#_silenced}, which will prevent propagation of
	* [events]{@glossary event} (of any kind).
	*
	* @returns {Boolean} `true` if silenced; otherwise, `false`.
	* @public
	*/
	isSilenced: function () {
		return this._silenced;
	},

	/**
	* Allows {@glossary event} propagation for this [component]{@link enyo.Component}
	* if the internal silence counter is `0`; otherwise, decrements the counter by one.
	* For event propagation to resume, this method must be called one time each call to
	* [silence()]{@link enyo.Component#silence}.
	*
	* @returns {Boolean} `true` if the {@link enyo.Component} is now unsilenced completely;
	*	`false` if it remains silenced.
	* @public
	*/
	unsilence: function () {
		if (0 !== this._silenceCount) --this._silenceCount;
		if (0 === this._silenceCount) this._silenced = false;
		return !this._silenced;
	},

	/**
	* Creates a new [job]{@link enyo.job} tied to this instance of the
	* [component]{@link enyo.Component}. If the component is
	* [destroyed]{@link enyo.Component#destroy}, any jobs associated with it
	* will be stopped.
	*
	* If you start a job with the same name as a pending job,
	* the original job will be stopped; this can be useful for resetting
	* timeouts.
	*
	* You may supply a priority level (1-10) at which the job should be
	* executed. The default level is `5`. Setting the priority lower than `5` (or setting it to
	* the string `"low"`) will defer the job if an animation is in progress,
	* which can help to avoid stuttering.
	*
	* @param {String} nom - The name of the [job]{@link enyo.job} to start.
	* @param {(Function|String)} job - Either the name of a method or a
	*	[function]{@glossary Function} to execute as the requested job.
	* @param {Number} wait - The number of milliseconds to wait before starting
	*	the job.
	* @param {Number} [priority=5] The priority value to be associated with this
	*	job.
	* @returns {this} The callee for chaining.
	* @public
	*/
	startJob: function (nom, job, wait, priority) {
		var jobs = (this.__jobs = this.__jobs || {});
		priority = priority || 5;
		// allow strings as job names, they map to local method names
		if (typeof job == 'string') job = this[job];
		// stop any existing jobs with same name
		this.stopJob(nom);
		jobs[nom] = setTimeout(this.bindSafely(function() {
			Jobs.add(this.bindSafely(job), priority, nom);
		}), wait);

		return this;
	},

	/**
	* Stops a [component]{@link enyo.Component}-specific [job]{@link enyo.job} before it has
	* been activated.
	*
	* @param {String} nom - The name of the [job]{@link enyo.job} to be stopped.
	* @returns {this} The callee for chaining.
	* @public
	*/
	stopJob: function (nom) {
		var jobs = (this.__jobs = this.__jobs || {});
		if (jobs[nom]) {
			clearTimeout(jobs[nom]);
			delete jobs[nom];
		}
		Jobs.remove(nom);
	},

	/**
	* Executes the specified [job]{@link enyo.job} immediately, then prevents
	* any other calls to `throttleJob()` with the same job name from running for
	* the specified amount of time.
	*
	* @param {String} nom - The name of the [job]{@link enyo.job} to throttle.
	* @param {(Function|String)} job - Either the name of a method or a
	*	[function]{@glossary Function} to execute as the requested job.
	* @param {Number} wait - The number of milliseconds to wait before executing the
	*	job again.
	* @returns {this} The callee for chaining.
	* @public
	*/
	throttleJob: function (nom, job, wait) {
		var jobs = (this.__jobs = this.__jobs || {});
		// if we still have a job with this name pending, return immediately
		if (!jobs[nom]) {
			// allow strings as job names, they map to local method names
			if (typeof job == 'string') job = this[job];
			job.call(this);
			jobs[nom] = setTimeout(this.bindSafely(function() {
				this.stopJob(nom);
			}), wait);
		}
		return this;
	}
});

/**
* @private
*/
kind.setDefaultCtor(Component);

/**
* Creates new instances from [config]{@glossary configurationBlock}
* [objects]{@glossary Object}. This method looks up the proper
* [constructor]{@glossary constructor} based on the provided [kind]{@glossary kind}
* attribute.
*
* @name enyo.create
* @param {Object} props - The properties that define the [kind]{@glossary kind}.
* @returns {*} An instance of the requested [kind]{@glossary kind}.
* @public
*/
Component.create = function (props) {
	var theKind,
		Ctor;

	if (!props.kind && props.hasOwnProperty('kind')) throw new Error(
		'enyo.create: Attempt to create a null kind. Check dependencies for [' + props.name + ']'
	);

	theKind = props.kind || props.isa || kind.getDefaultCtor();
	Ctor = kind.constructorForKind(theKind);

	if (!Ctor) {
		logger.error('No constructor found for kind ' + theKind);
		Ctor = Component;
	}

	return new Ctor(props);
};

/**
* @name enyo.Component.subclass
* @static
* @private
*/
Component.subclass = function (ctor, props) {
	// Note: To reduce API surface area, sub-components are declared only as
	// 'components' in both kind and instance declarations.
	//
	// However, 'components' from kind declarations must be handled separately
	// at creation time.
	//
	// We rename the property here to avoid having
	// to interrogate the prototype at creation time.
	//
	var proto = ctor.prototype;
	//
	if (props.components) {
		proto.kindComponents = props.components;
		delete proto.components;
	} else {
		// Feature to mixin overrides of super-kind component properties from named hash
		// (only applied when the sub-kind doesn't supply its own components block)
		if (props.componentOverrides) {
			proto.kindComponents = Component.overrideComponents(
				proto.kindComponents,
				props.componentOverrides,
				proto.defaultKind
			);
		}
	}
};

/**
* @name enyo.Component.concat
* @static
* @private
*/
Component.concat = function (ctor, props) {
	var proto = ctor.prototype || ctor,
		handlers;
	if (props.handlers) {
		handlers = proto.handlers ? utils.clone(proto.handlers) : {};
		proto.handlers = utils.mixin(handlers, props.handlers);
		delete props.handlers;
	}
	if (props.events) Component.publishEvents(proto, props);
};

/**
* @name enyo.Component.overrideComponents
* @static
* @private
*/
Component.overrideComponents = function (components, overrides, defaultKind) {
	var fn = function (k, v) { return !(utils.isFunction(v) || kind.isInherited(v)); };
	components = utils.clone(components);
	for (var i=0; i<components.length; i++) {
		var c = utils.clone(components[i]);
		var o = overrides[c.name];
		var ctor = kind.constructorForKind(c.kind || defaultKind);
		if (o) {

			// NOTE: You cannot overload mixins, observers or computed properties from
			// component overrides
			kind.concatHandler(c, o);
			var b = (c.kind && ((typeof c.kind == 'string' && utils.getPath(c.kind)) || (typeof c.kind == 'function' && c.kind))) || kind.getDefaultCtor();
			while (b) {
				if (b.concat) { b.concat(c, o, true); }
				b = b.prototype.base;
			}
			// All others just mix in
			utils.mixin(c, o, {filter: fn});
		}
		if (c.components) {
			c.components = Component.overrideComponents(c.components, overrides, ctor.prototype.defaultKind);
		}
		components[i] = c;
	}
	return components;
};

/**
* @name enyo.Component.publishEvents
* @static
* @private
*/
Component.publishEvents = function (ctor, props) {
	var events = props.events,
		event,
		proto;
	if (events) {
		proto = ctor.prototype || ctor;
		for (event in events) Component.addEvent(event, events[event], proto);
	}
};

/**
* @name enyo.Component.addEvent
* @static
* @private
*/
Component.addEvent = function (nom, val, proto) {
	var v, fn;
	if (!utils.isString(val)) {
		v = val.value;
		fn = val.caller;
	} else {
		if (nom.slice(0, 2) != 'on') {
			logger.warn('enyo.Component.addEvent: event names must start with "on". ' + proto.kindName + ' ' +
				'event "' + nom + '" was auto-corrected to "on' + nom + '".');
			nom = 'on' + nom;
		}
		v = val;
		fn = 'do' + utils.cap(nom.slice(2));
	}
	proto[nom] = v;
	if (!proto[fn]) {
		proto[fn] = function(payload, other) {
			// bubble this event

			// if the second parameter exists then we use that - this is for a single case
			// where a named event delegates happent to point to an auto generated event
			// bubbler like this one - in that case the first parameter is actually the
			// sender
			var e = other || payload;
			if (!e) {
				e = {};
			}
			var d = e.delegate;
			// delete payload.delegate;
			e.delegate = undefined;
			if (!utils.exists(e.type)) {
				e.type = nom;
			}
			this.bubble(nom, e);
			if (d) {
				e.delegate = d;
			}
		};
	}
};

/**
* @private
*/
function prefixFromKindName (nom) {
	var pre = kindPrefix[nom],
		last;

	if (!pre) {
		last = nom.lastIndexOf('.');
		pre = (last >= 0) ? nom.slice(last+1) : nom;
		pre = pre.charAt(0).toLowerCase() + pre.slice(1);
		kindPrefix[nom] = pre;
	}

	return pre;
}
},{"../../enyo":12,"./ApplicationSupport":16,"./ComponentBindingSupport":24,"./CoreObject":28,"./jobs":94,"./kind":96,"./logger":97,"./utils":106}],15:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	animation = require('./animation');

var
	Component = require('./Component'),
	Jobs = require('./jobs');

/**
* Fires when an animation step occurs.
*
* @event enyo.Animator#onStep
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when the animation finishes normally.
*
* @event enyo.Animator#onEnd
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when the animation is prematurely stopped.
*
* @event enyo.Animator#onStop
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Animator} is a basic animation [component]{@link enyo.Component}.  Call
* [play()]{@link enyo.Animator#play} to start the animation. The animation will run for
* the period (in milliseconds) specified by its [duration]{@link enyo.Animator#duration}
* property. [onStep]{@link enyo.Animator#onStep} [events]{@glossary event} will
* fire in quick succession and should be handled to do something based on the
* [value]{@link enyo.Animator#value} property.
*
* The `value` property will progress from [startValue]{@link enyo.Animator#startValue}
* to [endValue]{@link enyo.Animator#endValue} during the animation, based on the
* [function]{@glossary Function} referenced by the
* [easingFunction]{@link enyo.Animator#easingFunction} property.
* 
* Event handlers may be specified as functions. If specified, the handler function will
* be used to handle the event directly, without sending the event to its
* [owner]{@link enyo.Component#owner} or [bubbling]{@link enyo.Component#bubble} it.
* The [context]{@link enyo.Animator#context} property may be used to call the supplied
* event functions in a particular `this` context.
* 
* During animation, an {@link enyo.jobs} priority of 5 is registered to defer low priority 
* tasks.
*
* @class enyo.Animator
* @extends enyo.Component
* @public
*/
module.exports = kind(
	/** @lends enyo.Animator.prototype */ {

	/**
	* A context in which to run the specified {@glossary event} handlers. If this is
	* not specified or is falsy, then the [global object]{@glossary global} is used.
	* 
	* @name context
	* @type {Object}
	* @default undefined
	* @memberOf enyo.Animator.prototype
	* @public
	*/
		
	name: 'enyo.Animator',

	/**
	* @private
	*/
	kind: Component,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Animator.prototype */ {
		
		/** 
		* Animation duration in milliseconds
		*
		* @type {Number}
		* @default 350
		* @public
		*/
		duration: 350,

		/** 
		* Value of [value]{@link enyo.Animator#value} property at the beginning of an animation.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		startValue: 0,

		/** 
		* Value of [value]{@link enyo.Animator#value} property at the end of an animation.
		*
		* @type {Number}
		* @default 1
		* @public
		*/
		endValue: 1,

		/** 
		* Node that must be visible in order for the animation to continue. This reference is 
		* destroyed when the animation ceases.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		node: null,

		/** 
		* [Function]{@glossary Function} that determines how the animation progresses from 
		* [startValue]{@link enyo.Animator#startValue} to [endValue]{@link enyo.Animator#endValue}.
		* 
		* @type {Function}
		* @default enyo.easing.cubicOut
		* @public
		*/
		easingFunction: animation.easing.cubicOut
	},
	
	/*
	* @private
	*/
	events: {
		onStep: '',
		onEnd: '',
		onStop: ''
	},

	/**
	* @method
	* @private
	*/
	constructed: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this._next = this.bindSafely('next');
		};
	}),

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			this.stop();
			sup.apply(this, arguments);
		};
	}),

	/** 
	* Plays the animation.
	*
	* @param {Object} props - As a convenience, this [hash]{@glossary Object} will be mixed
	*	directly into this [object]{@glossary Object}.
	* @public
	*/
	play: function (props) {
		this.stop();
		this.reversed = false;
		if (props) {
			utils.mixin(this, props);
		}
		this.t0 = this.t1 = utils.perfNow();
		this.value = this.startValue;

		// register this jobPriority to block less urgent tasks from executing
		Jobs.registerPriority(5, this.id);

		this.job = true;
		this.next();
		return this;
	},

	/** 
	* Stops the animation and fires the associated {@glossary event}.
	*
	* @fires enyo.Animator#onStop
	* @returns {this} The callee for chaining.
	* @public
	*/
	stop: function () {
		if (this.isAnimating()) {
			this.cancel();
			this.fire('onStop');
			return this;
		}
	},

	/**
	* Stops the animation after a final step
	*
	* @returns {this} The callee for chaining
	* @public
	*/
	complete: function () {
		if (this.isAnimating()) {
			// set the start time such that the delta will always be greater than the duration
			// causing the animation to complete immediately
			this.t0 = -this.duration - 1;
			this.next();
		}

		return this;
	},

	/** 
	* Reverses the direction of a running animation.
	* 
	* @return {this} The callee for chaining.
	* @public
	*/
	reverse: function () {
		if (this.isAnimating()) {
			this.reversed = !this.reversed;
			var now = this.t1 = utils.perfNow();
			// adjust start time (t0) to allow for animation done so far to replay
			var elapsed = now - this.t0;
			this.t0 = now + elapsed - this.duration;
			// swap start and end values
			var startValue = this.startValue;
			this.startValue = this.endValue;
			this.endValue = startValue;
			return this;
		}
	},

	/**
	* Determines whether an animation is in progress.
	*
	* @returns {Boolean} `true` if there is an animation currently running; otherwise, `false`.
	* @private
	*/
	isAnimating: function () {
		return Boolean(this.job);
	},

	/**
	* @private
	*/
	requestNext: function () {
		this.job = animation.requestAnimationFrame(this._next, this.node);
	},

	/**
	* @private
	*/
	cancel: function () {
		animation.cancelRequestAnimationFrame(this.job);
		this.node = null;
		this.job = null;

		// unblock job queue
		Jobs.unregisterPriority(this.id);
	},

	/**
	* @private
	*/
	shouldEnd: function () {
		return (this.dt >= this.duration);
	},

	/**
	* Runs the next step of the animation.
	*
	* @fires enyo.Animator#onStep
	* @fires enyo.Animator#onEnd
	* @private
	*/
	next: function () {
		this.t1 = utils.perfNow();
		this.dt = this.t1 - this.t0;
		var args = this.easingFunction.length;
		var f;

		if (args === 1) {
			// time independent
			f = this.fraction = animation.easedLerp(this.t0, this.duration, this.easingFunction, this.reversed);
			this.value = this.startValue + f * (this.endValue - this.startValue);
		} else {
			this.value = animation.easedComplexLerp(this.t0, this.duration, this.easingFunction, this.reversed,
				this.dt, this.startValue, (this.endValue - this.startValue));
		}
		if (((f >= 1) && (args === 1)) || this.shouldEnd()) {
			this.value = this.endValue;
			this.fraction = 1;
			this.fire('onStep');
			this.cancel();
			utils.asyncMethod(this.bindSafely(function() {
				this.fire('onEnd');
			}));
		} else {
			this.fire('onStep');
			this.requestNext();
		}
	},

	/**
	* @private
	*/
	fire: function (nom) {
		var fn = this[nom];
		if (utils.isString(fn)) {
			this.bubble(nom);
		} else if (fn) {
			fn.call(this.context || global, this);
		}
	}
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./Component":23,"./animation":84,"./jobs":94,"./kind":96,"./utils":106}],22:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	Component = require('./Component'),
	EventEmitter = require('./EventEmitter'),
	Model = require('./Model'),
	ModelList = require('./ModelList'),
	StateSupport = require('./StateSupport'),
	Source = require('./Source'),
	Store = require('./Store'),
	States = require('./States');

/**
* This is only necessary because of the order in which mixins are applied.
*
* @class
* @private
*/
var BaseCollection = kind({
	kind: Component,
	mixins: [EventEmitter, StateSupport]
});

/**
* Fires when [models]{@link enyo.Model} have been [added]{@link enyo.Collection#add}
* to the [collection]{@link enyo.Collection}.
*
* @event enyo.Collection#add
* @type {Object}
* @property {enyo.Model[]} models - An [array]{@glossary Array} of
*	[models]{@link enyo.Model} that were [added]{@link enyo.Collection#add} to the
*	[collection]{@link enyo.Collection}.
* @property {enyo.Collection} collection - A reference to the
*	collection that [emitted]{@link enyo.EventEmitter.emit} the event.
* @property {Number} index - The index in the given collection where the models were inserted.
* @public
*/

/**
* Fires when [models]{@link enyo.Model} have been [removed]{@link enyo.Collection#remove}
* from the [collection]{@link enyo.Collection}.
*
* @event enyo.Collection#remove
* @type {Object}
* @property {enyo.Model[]} models - An [array]{@glossary Array} of
*	[models]{@link enyo.Model} that were [removed]{@link enyo.Collection#remove} from the
*	[collection]{@link enyo.Collection}.
* @property {enyo.Collection} collection - A reference to the
*	collection that [emitted]{@link enyo.EventEmitter.emit} the event.
* @public
*/

/**
* Fires when the [collection]{@link enyo.Collection} has been
* [sorted]{@link enyo.Collection#sort}.
*
* @event enyo.Collection#sort
* @type {Object}
* @property {enyo.Model[]} models - An [array]{@glossary Array} of all
*	[models]{@link enyo.Model} in the correct, [sorted]{@link enyo.Collection#sort} order.
* @property {enyo.Collection} collection - A reference to the
*	[collection]{@link enyo.Collection} that [emitted]{@link enyo.EventEmitter.emit} the event.
* @property {Function} comparator - A reference to the
*	[comparator]{@link enyo.Collection#comparator} that was used when
*	sorting the collection.
* @public
*/

/**
* Fires when the [collection]{@link enyo.Collection} has been reset and its
* contents have been updated arbitrarily.
*
* @event enyo.Collection#reset
* @type {Object}
* @property {enyo.Model[]} models - An [array]{@glossary Array} of all
*	[models]{@link enyo.Model} as they are currently.
* @property {enyo.Collection} collection - A reference to the
*	[collection]{@link enyo.Collection} that [emitted]{@link enyo.EventEmitter.emit} the event.
* @public
*/

/**
* The default configurable [options]{@link enyo.Collection#options} used by certain API
* methods of {@link enyo.Collection}.
*
* @typedef {Object} enyo.Collection~Options
* @property {Boolean} merge=true - If `true`, when data is being added to the
*	[collection]{@link enyo.Collection} that already exists (i.e., is matched by
*	[primaryKey]{@link enyo.Model#primaryKey}), the new data values will be set
* with the current [model]{@link enyo.Model} instance. This means that the
* existing values will be updated with the new ones by calling
* [set()]{@link enyo.Model#set} on the model.
* @property {Boolean} silent=false - Many accessor methods of the collection
*	will emit events and/or notifications. This value indicates whether or not
*	those events or notifications will be suppressed at times when that behavior
*	is necessary. Typically, you will not want to modify this value.
* @property {Boolean} purge=false - When [adding]{@link enyo.Collection#add}
*	models, this flag indicates whether or not to [remove]{@link enyo.Collection#remove}
* (purge) the existing models that are not included in the new dataset.
* @property {Boolean} parse=false - The collection's [parse()]{@link enyo.Collection#parse}
*	method can be executed automatically when incoming data is added via the
*	[constructor()]{@link enyo.Collection#constructor} method, or, later, via a
*	[fetch]{@link enyo.Collection#fetch}. You may need to examine the runtime
* configuration options of the method(s) to determine whether parsing is needed.
* In cases where parsing will always be necessary, this may be set to `true`.
* @property {Boolean} create=true - This value determines whether a new
*	model will be created when data being added to the collection cannot be found
* (or the [find]{@link enyo.Collection#options#find} flag is `false`). Models
* that are created by a collection have their [owner]{@link enyo.Model#owner}
* property set to the collection that instanced them.
* @property {Boolean} find=true - When data being added to the collection is not
* already a model instance, the collection will attempt to find an existing model
* by its `primaryKey`, if it exists. In most cases, this is the preferred behavior,
* but if the model [kind]{@glossary kind} being  instanced does not have a
* `primaryKey`, it is unnecessary and this value may be set to `false`.
* @property {Boolean} sort=false - When adding models to the collection, the
* collection can also be sorted. If the [comparator]{@link enyo.Collection#comparator}
* is a [function]{@glossary Function} and this value is `true`, the comparator
*	will be used to sort the entire collection. It may also be a function that
* will be used to sort the collection, instead of (or in the place of) a defined
*	comparator.
* @property {Boolean} commit=false - When modifications are made to the
*	collection, this flag ensures that those changes are
*	[committed]{@link enyo.Collection#commit} according to the configuration and
*	availability of a [source]{@link enyo.Collection#source}. This may also be
* configured per-call to methods that use it.
* @property {Boolean} destroy=false - When models are removed from the collection,
*	this flag indicates whether or not they will be [destroyed]{@link enyo.Model#destroy}
* as well. Note that this could have a significant impact if the same models are
* used in other collections.
* @property {Boolean} complete=false - When models are removed from the
* collection, this flag indicates whether or not they will also be removed from
* the [store]{@link enyo.Collection#store}. This is rarely necessary and can
* cause problems if the models are used in other collections. In addition, this
* value will be ignored if the [destroy]{@link enyo.Collection#options#destroy}
* flag is `true`.
* @property {Boolean} fetch=false - If `true`, when the collection is initialized,
* it will automatically attempt to fetch data if the
* [source]{@link enyo.Collection#source} and [url]{@link enyo.Collection#url}
*	or [getUrl]{@link enyo.Collection#getUrl} properties are properly configured.
* @property {Boolean} modelEvents=true - If `false`, this will keep the collection from
*	registering with each model for individual model events.
*/

/**
* The configuration options for [add()]{@link enyo.Collection#add}. For complete
* descriptions of the options and their default values, see
* {@link enyo.Collection#options}. Note that some properties have different
* meanings in different contexts. Please review the descriptions below to see
* how each property is used in this context.
* 
* @typedef {enyo.Collection~Options} enyo.Collection~AddOptions
* @property {Boolean} merge - Update existing [models]{@link enyo.Model} when found.
* @property {Boolean} purge - Remove existing models not in the new dataset.
* @property {Boolean} silent - Emit [events]{@glossary event} and notifications.
* @property {Boolean} parse - Parse the incoming dataset before evaluating.
* @property {Boolean} find - Look for an existing model.
* @property {(Boolean|Function)} sort - Sort the finalized dataset.
* @property {Boolean} commit - [Commit]{@link enyo.Collection#commit} changes to the
*	{@link enyo.Collection} after completing the [add]{@link enyo.Collection#add}
* operation.
* @property {Boolean} create - When an existing {@link enyo.Model} instance cannot be
*	resolved, a new instance should be created.
* @property {number} index - The index at which to add the new dataset. Defaults to the
*	end of the current dataset if not explicitly set or invalid.
* @property {Boolean} destroy - If `purge` is `true`, this will
* [destroy]{@link enyo.Model#destroy} any models that are
* [removed]{@link enyo.Collection#remove}.
* @property {Object} modelOptions - When instancing a model, this
*	[object]{@glossary Object} will be passed to the constructor as its `options`
*	parameter.
*/

/**
* The configuration options for [remove()]{@link enyo.Collection#remove}. For
* complete descriptions of the options and their defaults, see
* {@link enyo.Collection~Options}. Note that some properties have different
* meanings in different contexts. Please review the descriptions below to see
* how each property is used in this context.
* 
* @typedef {enyo.Collection~Options} enyo.Collection~RemoveOptions
* @property {Boolean} silent - Emit [events]{@glossary event} and notifications.
* @property {Boolean} commit - [Commit]{@link enyo.Collection#commit} changes to the
*	[collection]{@link enyo.Collection} after completing the
*	[remove]{@link enyo.Collection#remove} operation.
* @property {Boolean} complete - Remove the [model]{@link enyo.Model} from the
*	[store]{@link enyo.Collection#store} as well as the collection.
* @property {Boolean} destroy - [Destroy]{@link enyo.Model#destroy} models
*	that are removed from the collection.
*/

/**
* The configurable options for [fetch()]{@link enyo.Collection#fetch},
* [commit()]{@link enyo.Collection#commit}, and [destroy()]{@link enyo.Collection#destroy}.
*
* @typedef {enyo.Collection~Options} enyo.Collection~ActionOptions
* @property {enyo.Collection~Success} success - The callback executed upon successful
*	completion.
* @property {enyo.Collection~Error} error - The callback executed upon a failed attempt.
*/

/**
* @callback enyo.Collection~Success
* @param {enyo.Collection} collection - The [collection]{@link enyo.Collection}
* that is returning successfully.
* @param {enyo.Collection~ActionOptions} - opts The original options passed to the action method
*	that is returning successfully.
* @param {*} - res The result, if any, returned by the [source]{@link enyo.Source} that
*	executed it.
* @param {String} source - The name of the [source]{@link enyo.Collection#source} that has
*	returned successfully.
*/

/**
* @callback enyo.Collection~Error
* @param {enyo.Collection} collection - The [collection]{@link enyo.Collection}
* that is returning an error.
* @param {String} action - The name of the action that failed, one of `'FETCHING'`,
*	`'COMMITTING'`, or `'DESTROYING'`.
* @param {enyo.Collection~ActionOptions} opts - The original options passed to the
*	action method that is returning an error.
* @param {*} res - The result, if any, returned by the [source]{@link enyo.Source}
*	that executed it.
* @param {String} source - The name of the [source]{@link enyo.Collection#source}
*	that has returned an error.
*/

/**
* A method used to compare two elements in an {@link enyo.Collection}. Should be
* implemented like callbacks used with [Array.sort()]{@glossary Array.sort}.
*
* @see {@glossary Array.sort}
* @see enyo.Collection.sort
* @see enyo.Collection.comparator
* @callback enyo.Collection~Comparator
* @param {enyo.Model} a - The first [model]{@link enyo.Model} to compare.
* @param {enyo.Model} b - The second model to compare.
* @returns {Number} `-1` if `a` should have the lower index, `0` if they are the same,
* or `1` if `b` should have the lower index.
*/

/**
* An array-like structure designed to store instances of {@link enyo.Model}.
* 
* @class enyo.Collection
* @extends enyo.Component
* @mixes enyo.StateSupport
* @mixes enyo.EventEmitter
* @public
*/
var Collection = module.exports = kind(
	/** @lends enyo.Collection.prototype */ {
	
	name: 'enyo.Collection',
	
	/**
	* @private
	*/
	kind: BaseCollection,
	
	/**
	* @private
	*/

	
	/**
	* Used by various [sources]{@link enyo.Collection#source} as part of the
	* [URI]{@glossary URI} from which they may be [fetched]{@link enyo.Collection#fetch},
	* [committed]{@link enyo.Collection#commit}, or [destroyed]{@link enyo.Collection#destroy}.
	* Some sources may use this property in other ways.
	*
	* @see enyo.Collection.getUrl
	* @see enyo.Source
	* @see enyo.AjaxSource
	* @see enyo.JsonpSource
	* @type {String}
	* @default ''
	* @public
	*/
	url: '',
	
	/**
	* Implement this method to be used by [sources]{@link enyo.Model#source} to
	* dynamically derive the [URI]{@glossary URI} from which they may be
	* [fetched]{@link enyo.Collection#fetch}, [committed]{@link enyo.Collection#commit},
	* or [destroyed]{@link enyo.Collection#destroy}. Some
	* [sources]{@link enyo.Collection#source} may use this property in other ways.
	* Note that if this method is implemented, the [url]{@link enyo.Collection#url}
	* property will not be used.
	*
	* @see enyo.Collection.url
	* @see enyo.Source
	* @see enyo.AjaxSource
	* @see enyo.JsonpSource
	* @type {Function}
	* @default null
	* @virtual
	* @public
	*/
	getUrl: null,
	
	/**
	* The [kind]{@glossary kind) of {@link enyo.Model} that this
	* [collection]{@link enyo.Collection} will contain. This is important to set properly so
	* that when [fetching]{@link enyo.Collection#fetch}, the returned data will be instanced
	* as the correct model [subkind]{@glossary subkind}.
	* 
	* @type {(enyo.Model|String)}
	* @default enyo.Model
	* @public
	*/
	model: Model,
	
	/**
	* A special type of [array]{@glossary Array} used internally by
	* {@link enyo.Collection}. The array should not be modified directly, nor
	* should the property be set directly. It is used as a container by the
	* collection. If [set]{@link enyo.Collection#set} directly, it will
	* [emit]{@link enyo.EventEmitter.emit} a [reset]{@link enyo.Collection#reset}
	* event.
	*
	* @see enyo.Collection.modelsChanged
	* @type enyo.ModelList
	* @default null
	* @readonly
	* @protected
	*/
	models: null,
	
	/**
	* The current [state]{@link enyo~States} of the [collection]{@link enyo.Collection}.
	* This value changes automatically and may be observed for more complex state
	* monitoring. The default value is [READY]{@link enyo~States.READY}.
	* @type enyo.States
	* @default enyo~States.READY
	* @readonly
	* @public
	* @see enyo.States
	* @see enyo.StateSupport
	*/
	status: States.READY,
	
	/**
	* The configurable default [options]{@link enyo.Collection~Options}. These values will be
	* used to modify the behavior of the [collection]{@link enyo.Collection} unless additional
	* options are passed into the methods that use them. When modifying these values in a
	* [subkind]{@glossary subkind} of {@link enyo.Collection}, they will be merged with
	* existing values.
	* 
	* @type {enyo.Collection~Options}
	* @public
	*/
	options: {
		merge: true,
		silent: false,
		purge: false,
		parse: false,
		create: true,
		find: true,
		sort: false,
		commit: false,
		destroy: false,
		complete: false,
		fetch: false,
		modelEvents: true
	},
	
	/**
	* Modifies the structure of data so that it can be used by the
	* [add()]{@link enyo.Collection#add} method. This method will only be used
	* during initialization or after a successful [fetch]{@link enyo.Collection#fetch}
	* if the [parse]{@link enyo.Collection~Options.parse} flag is set to `true`.
	* It may be used for simple remapping, renaming, or complex restructuring of
	* data coming from a [source]{@link enyo.Collection#source} that requires
	* modification before it can be added to the [collection]{@link enyo.Collection}.
	* This is a virtual method and must be implemented.
	* 
	* @param {*} data - The incoming data passed to the
	*	[constructor]{@link enyo.Collection#constructor} or returned by a successful
	*	[fetch]{@link enyo.Collection#fetch}.
	* @returns {Array} The properly formatted data to be accepted by the
	*	[add()]{@link enyo.Collection#add} method.
	* @virtual
	* @public
	*/
	parse: function (data) {
		return data;
	},
	
	/**
	* Adds data to the [collection]{@link enyo.Collection}. This method can add an
	* individual [model]{@link enyo.Model} or an [array]{@glossary Array} of models.
	* It can splice them into the dataset at a designated index or remove models
	* from the existing dataset that are not included in the new one.
	* See {@link enyo.Collection~AddOptions} for detailed information on the
	* configuration options available for this method. This method is heavily
	* optimized for batch operations on arrays of models. For better performance,
	* ensure that loops do not consecutively call this method but instead
	* build an array to pass as the first parameter.
	* 
	* @fires enyo.Collection#add
	* @param {(Object|Object[]|enyo.Model|enyo.Model[])} models The data to add to the
	*	{@link enyo.Collection} that can be a [hash]{@glossary Object}, an array of
	*	hashes, an {@link enyo.Model} instance, or and array of `enyo.Model` instances.
	* Note that if the [parse]{@link enyo.Collection#options#parse} configuration
	* option is `true`, it will use the returned value as this parameter.
	* @param {enyo.Collection~AddOptions} [opts] - The configuration options that modify
	*	the behavior of this method. The default values will be merged with these options
	* before evaluating.
	* @returns {enyo.Model[]} The models that were added, if any.
	* @public
	*/
	add: function (models, opts) {
		var loc = this.models
			, len = this.length
			, ctor = this.model
			, options = this.options
			, pkey = ctor.prototype.primaryKey
			, idx = len
			, removedBeforeIdx = 0
			, added, keep, removed, model, attrs, found, id;
			
		// for backwards compatibility with earlier api standards we allow the
		// second paramter to be the index and third param options when
		// necessary
		!isNaN(opts) && (idx = opts);
		arguments.length > 2 && (opts = arguments[2]);
		
		// normalize options so we have values
		opts = opts? utils.mixin({}, [options, opts]): options;
		
		// our flags
		var merge = opts.merge
			, purge = opts.purge
			, silent = opts.silent
			, parse = opts.parse
			, find = opts.find
			, sort = opts.sort
			, commit = opts.commit
			, create = opts.create !== false
			, modelOpts = opts.modelOptions
			, index = opts.index;
			
		idx = !isNaN(index) ? Math.max(0, Math.min(len, index)) : idx;

		/*jshint -W018 */
		sort && !(typeof sort == 'function') && (sort = this.comparator);
		/*jshint +W018 */
		
		// for a special case purge to remove records that aren't in the current
		// set being added
		
		if (parse) models = this.parse(models);
			
		// we treat all additions as an array of additions
		!(models instanceof Array) && (models = [models]);
		
		for (var i=0, end=models.length; i<end; ++i) {
			model = models[i];
			attrs = null;
			
			if (!model && isNaN(model)) continue;
			
			// first determine if the model is an instance of model since
			// everything else hinges on this
			if (!(model instanceof Model)) {
				// we need to determine how to handle this
				attrs = model;
			}
			
			if (typeof attrs == 'string' || typeof attrs == 'number') {
				id = attrs;
				attrs = {};
				attrs[pkey] = id;
			} else id = attrs? attrs[pkey]: model;
				
			
			// see if we have an existing entry for this model/hash
			if (find) found = loc.has(id);
			
			// if it already existed...
			if (found) {
				
				// we need to ensure we've resolved the model (if necessary)
				found = loc.resolve(id);
				
				if (merge) {
					attrs || (attrs = model.attributes);
					found.set(attrs, opts);
				}
				// with the purge flag we endeavor on the expensive track of removing
				// those models currently in the collection that aren't in the incoming
				// dataset and aren't being created
				if (purge) {
					keep || (keep = {length: 0});
					keep[found.euid] = model;
					keep.length++;
				}
			} else if (attrs && find && (found = this.store.resolve(ctor, id))) {
				// in this case we were asked to search our store for an existing record
				// and we found one but we didn't previously have it so we are technically
				// adding it
				// @NOTE: Setting the _find_ option always assumes _merge_
				attrs || (attrs = model.attributes);
				parse && (attrs = found.parse(attrs));
				added || (added = []);
				added.push(found);
				this.prepareModel(found, opts);
				merge && found.set(attrs, opts);
			} else if (!attrs) {
				added || (added = []);
				added.push(model);
				this.prepareModel(model);
			} else if (create) {
				model = this.prepareModel(attrs || model, modelOpts);
				added || (added = []);
				added.push(model);
				
				// with the purge flag we endeavor on the expensive track of removing
				// those models currently in the collection that aren't in the incoming
				// dataset and aren't being created
				if (purge) {
					keep || (keep = {length: 0});
					keep[model.euid] = model;
					keep.length++;
				}
			}
		}
		
		// here we process those models to be removed if purge was true
		// the other guard is just in case we actually get to keep everything
		// so we don't do this unnecessary pass
		if (purge && (keep && keep.length)) {
			removed || (removed = []);
			keep || (keep = {});
			for (i=0; i<len; ++i) {
				if (!keep[(model = loc[i]).euid]) {
					removed.push(model);
					if (i < idx) removedBeforeIdx++;
				}
			} 
			// if we removed any we process that now
			removed.length && this.remove(removed, opts);
			idx = idx - removedBeforeIdx;
		}
		
		// added && loc.stopNotifications().add(added, idx).startNotifications();
		if (added) {
			loc.add(added, idx);
			sort && this.sort(sort, {silent: true});
			
			// we batch this operation to make use of its ~efficient array operations
			this.store.add(added); 
		}
		this.length = loc.length;
		
		
		if (!silent) {
			// notify observers of the length change
			len != this.length && this.notify('length', len, this.length);
			// notify listeners of the addition of records
			if (added) {
				this.emit('add', {models: added, collection: this, index: idx});
			}
		}
		
		// note that if commit is set but this was called from a successful fetch this will be
		// a nop (as intended)
		commit && added && this.commit(opts);
		
		return added || [];
	},
	
	/**
	* Removes data from the [collection]{@link enyo.Collection}. It can take a
	* [model]{@link enyo.Model} or an [array]{@glossary Array} of models.
	* If any of the instances are present in the collection, they will be
	* removed in the order in which they are encountered. Emits the
	* [remove]{@link enyo.Collection#remove} event if any models were found and
	* removed from the collection (and the `silent` option is not `true`).
	* 
	* @fires enyo.Collection#remove
	* @param {(enyo.Model|enyo.Model[])} models The [models]{@link enyo.Model} to remove		
	*	if they exist in the [collection]{@link enyo.Collection}.
	* @param {enyo.Collection~RemoveOptions} [opts] - The configuration options that modify
	*	the behavior of this method.
	* @returns {enyo.Model[]} The models that were removed, if any.
	* @public
	*/
	remove: function (models, opts) {
		var loc = this.models
			, len = loc.length
			, options = this.options
			, removed, model;
		
		// normalize options so we have values
		opts = opts? utils.mixin({}, [options, opts]): options;
		
		// our flags
		var silent = opts.silent
			, destroy = opts.destroy
			, complete = opts.complete
			, commit = opts.commit;
		
		// we treat all additions as an array of additions
		!(models instanceof Array) && (models = [models]);
		
		removed = loc.remove(models);
		
		if (removed.length) {
			
			// ensure that we can batch remove from the store
			opts.batching = true;
			
			for (var i=0, end=removed.length; i<end; ++i) {
				model = removed[i];
				
				// it is possible but highly, highly unlikely that this would have been set
				// to false by default and true at runtime...so we take our chances for the
				// small performance gain in those situations where it was defaulted to false
				if (options.modelEvents) model.off('*', this._modelEvent, this);
				if (destroy) model.destroy(opts);
			}
			
			// if complete or destroy was set we remove them from the store (batched op)
			if (complete || destroy) this.store.remove(removed);
		}
		
		this.length = loc.length;
		
		if (!silent) {
			len != this.length && this.notify('length', len, this.length);
			if (removed.length) {
				this.emit('remove', {models: removed, collection: this});
			}
		}
		
		// if this is called from an overloaded method (such as fetch or commit) or some 
		// success callback this will be a nop (as intended)
		commit && removed.length && this.commit();
		
		return removed;
	},
	
	/**
	* Retrieves a [model]{@link enyo.Model} for the provided index.
	* 
	* @param {Number} idx - The index to return from the [collection]{@link enyo.Collection}.
	* @returns {(enyo.Model|undefined)} The [model]{@link enyo.Model} at the given index or
	*	`undefined` if it cannot be found.
	* @public
	*/
	at: function (idx) {
		return this.models[idx];
	},
	
	/**
	* Returns the JSON serializable [array]{@glossary Array} of [models]{@link enyo.Model}
	* according to their own [raw()]{@link enyo.Model#raw} output.
	*
	* @returns {enyo.Model[]} The [models]{@link enyo.Model} according to their
	*	[raw()]{@link enyo.Model#raw} output.
	* @public
	*/
	raw: function () {
		return this.models.map(function (model) {
			return model.raw();
		});
	},
	
	/**
	* Determines if the specified [model]{@link enyo.Model} is contained by this
	* [collection]{@link enyo.Collection}.
	*
	* @param {enyo.Model} model - The [model]{@link enyo.Model} to check.
	* @returns {Boolean} Whether or not the model belongs to the
	*	[collection]{@link enyo.Collection}.
	* @public
	*/
	has: function (model) {
		return this.models.has(model);
	},
	
	/**
	* @see {@glossary Array.forEach}
	* @public
	*/
	forEach: function (fn, ctx) {
		
		// ensure that this is an immutable reference to the models such that changes will
		// not affect the entire loop - e.g. calling destroy on models won't keep this from
		// completing
		return this.models.slice().forEach(fn, ctx || this);
	},
	
	/**
	* @see {@glossary Array.filter}
	* @public
	*/
	filter: function (fn, ctx) {
		
		// ensure that this is an immutable reference to the models such that changes will
		// not affect the entire loop - e.g. calling destroy on models won't keep this from
		// completing
		return this.models.slice().filter(fn, ctx || this);
	},
	
	/**
	* @see {@glossary Array.find}
	* @public
	*/
	find: function (fn, ctx) {
		
		// ensure that this is an immutable reference to the models such that changes will
		// not affect the entire loop - e.g. calling destroy on models won't keep this from
		// completing
		return this.models.slice().find(fn, ctx || this);
	},
	
	/**
	* @see {@glossary Array.map}
	* @public
	*/
	map: function (fn, ctx) {
		
		// ensure that this is an immutable reference to the models such that changes will
		// not affect the entire loop - e.g. calling destroy on models won't keep this from
		// completing
		return this.models.slice().map(fn, ctx || this);
	},
	
	/**
	* @see {@glossary Array.indexOf}
	* @public
	*/
	indexOf: function (model, offset) {
		return this.models.indexOf(model, offset);
	},
	
	/**
	* Removes all [models]{@link enyo.Model} from the [collection]{@link enyo.Collection}.
	* Optionally, a model (or models) may be provided to replace the removed models.
	* If this operation is not `silent`, it will emit a `reset` event. Returns the
	* removed models, but be aware that, if the `destroy` configuration option is set,
	* the returned models will have limited usefulness.
	* 
	* @param {(enyo.Model|enyo.Model[])} [models] The [model or models]{@link enyo.Model}
	*	to use as a replacement for the current set of models in the
	*	{@link enyo.Collection}.
	* @param {enyo.Collection~Options} [opts] - The options that will modify the behavior
	*	of this method.
	* @returns {enyo.Model[]} The models that were removed from the collection.
	* @public
	*/
	empty: function (models, opts) {
		var silent,
			removed,
			len = this.length;
		
		if (models && !(models instanceof Array || models instanceof Model)) {
			// there were no models but instead some options only
			opts = models;
			models = null;
		}
		
		opts = opts || {};
		
		// just in case the entire thing was supposed to be silent
		silent = opts.silent;
		opts.silent = true;
		
		removed = this.remove(this.models, opts);
		
		// if there are models we are going to propagate the remove quietly and instead issue
		// a single reset with the new content
		if (models) this.add(models, opts);
		
		// now if the entire thing wasn't supposed to have been done silently we issue
		// a reset
		if (!silent) {
			if (len != this.length) this.notify('length', len, this.length);
			this.emit('reset', {models: this.models.copy(), collection: this});
		}
		
		return removed;
	},
	
	/**
	* Returns the [JSON]{@glossary JSON} serializable [raw()]{@link enyo.Collection#raw}
	* output of the [collection]{@link enyo.Collection}. Will automatically be executed by
	* [JSON.parse()]{@glossary JSON.parse}.
	*
	* @see enyo.Collection.raw
	* @returns {Object} The return value of [raw()]{@link enyo.Collection#raw}.
	* @public
	*/
	toJSON: function () {
		return this.raw();
	},
	
	/**
	* The default behavior of this method is the same as {@glossary Array.sort}. If the
	* [function]{@glossary Function} parameter is omitted, it will attempt to use the
	* [comparator]{@link enyo.Collection#comparator} (if any) from the
	* [collection]{@link enyo.Collection}. Note that the collection is sorted in-place
	* and returns a reference to itself. The collection
	* [emits]{@link enyo.EventEmitter.emit} the [sort]{@link enyo.Collection#sort}
	* event.
	*
	* @fires enyo.Collection#sort
	* @see {@glossary Array.sort}
	* @param {enyo.Collection~Comparator} [fn] - The [comparator]{@link enyo.Collection#comparator}
	* method.
	* @param {enyo.Collection~Options} [opts] - The configuration options.
	* @returns {this} The callee for chaining.
	* @public
	*/
	sort: function (fn, opts) {
		if (fn || this.comparator) {
			var options = {silent: false}, silent;
		
			opts = opts? utils.mixin({}, [options, opts]): options;
			silent = opts.silent;
			this.models.sort(fn || this.comparator);
			!silent && this.emit('sort', {
				comparator: fn || this.comparator,
				models: this.models.copy(),
				collection: this
			});
		}
		return this;
	},
	
	/**
	* Commits the [collection]{@link enyo.Collection} to a
	* [source]{@link enyo.Collection#source} or sources. An {@link enyo.Collection}
	* cannot be committed if it is in an [error]{@link enyo~States.ERROR}
	* ({@link enyo.StateSupport.isError}) or [busy]{@link enyo~States.BUSY}
	* ({@link enyo.StateSupport.isBusy}) [state]{@link enyo.Model#status}. While
	* executing, it will add the [COMMITTING]{@link enyo~States.COMMITTING} flag
	* to the collection's [status]{@link enyo.Collection#status}. Once it has
	* completed execution, it will remove this flag (even if it fails).
	*
	* @see enyo.Collection.committed
	* @see enyo.Collection.status
	* @param {enyo.Collection~ActionOptions} [opts] - Optional configuration options.
	* @returns {this} The callee for chaining.
	* @public
	*/
	commit: function (opts) {
		var options,
			source,
			it = this;
		
		// if the current status is not one of the error states we can continue
		if (!(this.status & (States.ERROR | States.BUSY))) {
			
			// if there were options passed in we copy them quickly so that we can hijack
			// the success and error methods while preserving the originals to use later
			options = opts ? utils.clone(opts, true) : {};
			
			// make sure we keep track of how many sources we're requesting
			source = options.source || this.source;
			if (source && ((source instanceof Array) || source === true)) {
				this._waiting = source.length ? source.slice() : Object.keys(Source.sources);
			}
				
			options.success = function (source, res) {
				it.committed(opts, res, source);
			};
			
			options.error = function (source, res) {
				it.errored('COMMITTING', opts, res, source);
			};
			
			// set the state
			this.set('status', (this.status | States.COMMITTING) & ~States.READY);
			
			// now pass this on to the source to execute as it sees fit
			Source.execute('commit', this, options);
		} else if (this.status & States.ERROR) this.errored(this.status, opts);
		
		return this;
	},
	
	/**
	* Fetches the [collection]{@link enyo.Collection} from a
	* [source]{@link enyo.Collection#source} or sources. An {@link enyo.Collection}
	* cannot be fetched if it is in an [error]{@link enyo~States.ERROR}
	* ({@link enyo.StateSupport.isError}) or [busy]{@link enyo~States.BUSY}
	* ({@link enyo.StateSupport.isBusy}) [state]{@link enyo.Model#status}. While
	* executing, it will add the [FETCHING]{@link enyo~States.FETCHING} flag to
	* the collection's [status]{@link enyo.Collection#status}. Once it has
	* completed execution, it will remove this flag (even if it fails).
	*
	* @see enyo.Collection.fetched
	* @see enyo.Collection.status
	* @param {enyo.Collection~ActionOptions} [opts] - Optional configuration options.
	* @returns {this} The callee for chaining.
	* @public
	*/
	fetch: function (opts) {
		var options,
			source,
			it = this;
			
		// if the current status is not one of the error states we can continue
		if (!(this.status & (States.ERROR | States.BUSY))) {
			
			// if there were options passed in we copy them quickly so that we can hijack
			// the success and error methods while preserving the originals to use later
			options = opts ? utils.clone(opts, true) : {};
			
			// make sure we keep track of how many sources we're requesting
			source = options.source || this.source;
			if (source && ((source instanceof Array) || source === true)) {
				this._waiting = source.length ? source.slice() : Object.keys(Source.sources);
			}
			
			options.success = function (source, res) {
				it.fetched(opts, res, source);
			};
			
			options.error = function (source, res) {
				it.errored('FETCHING', opts, res, source);
			};
			
			// set the state
			this.set('status', (this.status | States.FETCHING) & ~States.READY);
			
			// now pass this on to the source to execute as it sees fit
			Source.execute('fetch', this, options);
		} else if (this.status & States.ERROR) this.errored(this.status, opts);
		
		return this;
	},
	
	/**
	* Destroys the [collection]{@link enyo.Collection}. By default, the
	* collection will only be [destroyed]{@glossary destroy} in the client. To
	* execute with a [source]{@link enyo.Collection#source} or sources, the
	* [commit default option]{@link enyo.Collection#options} must be `true` or a
	* `source` property must be explicitly provided in the `opts` parameter. A
	* collection cannot be destroyed (using a source) if it is in an
	* [error]{@link enyo~States.ERROR} ({@link enyo.StateSupport.isError}) or
	* [busy]{@link enyo~States.BUSY} ({@link enyo.StateSupport.isBusy})
	* [state]{@link enyo.Collection#status}. While executing, it will add the
	* [DESTROYING]{@link enyo~States.DESTROYING} flag to the collection's
	* [status]{@link enyo.Collection#status}. Once it has completed execution,
	* it will remove this flag (even if it fails).
	*
	* @see enyo.Collection.status
	* @param {enyo.Collection~ActionOptions} [opts] - Optional configuration options.
	* @returns {this} The callee for chaining.
	* @method
	* @public
	*/
	destroy: kind.inherit(function (sup) {
		return function (opts) {
			var options = opts ? utils.mixin({}, [this.options, opts]) : this.options,
				it = this,
				idx;
						
			// this becomes an (potentially) async operation if we are committing this destroy
			// to a source and its kind of tricky to figure out because there are several ways
			// it could be flagged to do this
						
			if (options.commit || options.source) {
				
				// if the current status is not one of the error states we can continue
				if (!(this.status & (States.ERROR | States.BUSY))) {
				
					// remap to the originals
					options = opts ? utils.clone(opts, true) : {};
				
					options.success = function (source, res) {
				
						if (it._waiting) {
							idx = it._waiting.findIndex(function (ln) {
								return (ln instanceof Source ? ln.name : ln) == source;
							});
							if (idx > -1) it._waiting.splice(idx, 1);
							if (!it._waiting.length) it._waiting = null;
						}
				
						// continue the operation this time with commit false explicitly
						if (!it._waiting) {
							options.commit = options.source = null;
							it.destroy(options);
						}
						if (opts && opts.success) opts.success(this, opts, res, source);
					};
			
					options.error = function (source, res) {
				
						if (it._waiting) {
							idx = it._waiting.findIndex(function (ln) {
								return (ln instanceof Source ? ln.name : ln) == source;
							});
							if (idx > -1) it._waiting.splice(idx, 1);
							if (!it._waiting.length) it._waiting = null;
						}
				
						// continue the operation this time with commit false explicitly
						if (!it._waiting) {
							options.commit = options.source = null;
							it.destroy(options);
						}
				
						// we don't bother setting the error state if we aren't waiting because 
						// it will be cleared to DESTROYED and it would be pointless
						else this.errored('DESTROYING', opts, res, source);
					};
				
					this.set('status', (this.status | States.DESTROYING) & ~States.READY);
			
					Source.execute('destroy', this, options);
				} else if (this.status & States.ERROR) this.errored(this.status, opts);
				
				// we don't allow the destroy to take place and we don't forcibly break-down
				// the collection errantly so there is an opportuniy to resolve the issue
				// before we lose access to the collection's content!
				return this;
			}
			
			if (this.length && options.destroy) this.empty(options);
			
			// set the final resting state of this collection
			this.set('status', States.DESTROYED);
			
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* This is a virtual method that, when provided, will be used for sorting during
	* [add()]{@link enyo.Collection#add} when the `sort` flag is `true` or when the
	* [sort()]{@link enyo.Collection#sort} method is called without a passed-in
	* [function]{@glossary Function} parameter.
	*
	* @see enyo.Collection~Comparator
	* @type {enyo.Collection~Comparator}
	* @default null
	* @virtual
	* @method
	* @public
	*/
	comparator: null,
	
	/**
	* Used during [add()]{@link enyo.Collection#add} when `create` is `true` and
	* the data is a [hash]{@glossary Object}.
	*
	* @private
	*/
	prepareModel: function (attrs, opts) {
		var Ctor = this.model
			, options = this.options
			, model;
		
		attrs instanceof Ctor && (model = attrs);
		if (!model) {
			opts = opts || {};
			opts.noAdd = true;
			model = new Ctor(attrs, null, opts);
		}
		
		if (options.modelEvents) model.on('*', this._modelEvent, this);
		
		return model;
	},
	
	/**
	* When a [commit]{@link enyo.Collection#commit} has completed successfully, it is returned
	* to this method. This method handles special and important behavior; it should not be
	* called directly and, when overloading, care must be taken to ensure that the
	* super-method is called. This correctly sets the [status]{@link enyo.Collection#status}
	* and, in cases where multiple [sources]{@link enyo.Collection#source} were used, it waits
	* until all have responded before clearing the [COMMITTING]{@link enyo~States.COMMITTING}
	* flag. If a [success]{@link enyo.Collection~Success} callback was provided, it will be
	* called once for each source.
	*
	* @param {enyo.Collection~ActionOptions} opts - The original options passed to
	*	[commit()]{@link enyo.Collection#commit}, merged with the defaults.
	* @param {*} [res] - The result provided from the given
	* [source]{@link enyo.Collection#source}, if any. This will vary depending
	* on the source.
	* @param {String} source - The name of the source that has completed successfully.
	* @public
	*/
	committed: function (opts, res, source) {
		var idx;
		
		if (this._waiting) {
			idx = this._waiting.findIndex(function (ln) {
				return (ln instanceof Source ? ln.name : ln) == source;
			});
			if (idx > -1) this._waiting.splice(idx, 1);
			if (!this._waiting.length) this._waiting = null;
		}
		
		if (opts && opts.success) opts.success(this, opts, res, source);
		
		// clear the state
		if (!this._waiting) {
			this.set('status', (this.status | States.READY) & ~States.COMMITTING);
		}
	},
	
	/**
	* When a [fetch]{@link enyo.Collection#fetch} has completed successfully, it is returned
	* to this method. This method handles special and important behavior; it should not be
	* called directly and, when overloading, care must be taken to ensure that you call the
	* super-method. This correctly sets the [status]{@link enyo.Collection#status} and, in
	* cases where multiple [sources]{@link enyo.Collection#source} were used, it waits until
	* all have responded before clearing the [FETCHING]{@link enyo~States.FETCHING} flag. If
	* a [success]{@link enyo.Collection~Success} callback was provided, it will be called
	* once for each source.
	*
	* @param {enyo.Collection~ActionOptions} opts - The original options passed to
	*	[fetch()]{@link enyo.Collection#fetch}, merged with the defaults.
	* @param {*} [res] - The result provided from the given
	* [source]{@link enyo.Collection#source}, if any. This will vary depending
	*	on the source.
	* @param {String} source - The name of the source that has completed successfully.
	* @public
	*/
	fetched: function (opts, res, source) {
		var idx;
		
		if (this._waiting) {
			idx = this._waiting.findIndex(function (ln) {
				return (ln instanceof Source ? ln.name : ln) == source;
			});
			if (idx > -1) this._waiting.splice(idx, 1);
			if (!this._waiting.length) this._waiting = null;
		}
		
		// if there is a result we add it to the collection passing it any per-fetch options
		// that will override the defaults (e.g. parse) we don't do that here as it will
		// be done in the add method -- also note we reassign the result to whatever was
		// actually added and pass that to any other success callback if there is one
		if (res) res = this.add(res, opts);
		
		// now look for an additional success callback
		if (opts && opts.success) opts.success(this, opts, res, source);
		
		// clear the state
		if (!this._waiting) {
			this.set('status', (this.status | States.READY) & ~States.FETCHING);
		}
	},
	
	/**
	* If an error is encountered while [fetching]{@link enyo.Collection#fetch},
	* [committing]{@link enyo.Collection#commit}, or [destroying]{@link enyo.Collection#destroy}
	* the [collection]{@link enyo.Collection}, this method will be called. By
	* default, it updates the collection's [status]{@link enyo.Collection#status}
	* property and then checks to see if there is a provided
	* [error handler]{@link enyo.Collection~ErrorCallback}. If the error handler
	* exists, it will be called.
	* 
	* @param {String} action - The name of the action that failed,
	* one of `'FETCHING'` or `'COMMITTING'`.
	* @param {enyo.Collection~ActionOptions} opts - The options hash originally
	* passed along with the original action.
	* @param {*} [res] - The result of the requested `action`; varies depending on the
	*	requested [source]{@link enyo.Collection#source}.
	* @param {String} source - The name of the source that has returned an error.
	* @public
	*/
	errored: function (action, opts, res, source) {
		var stat;
		
		// if the error action is a status number then we don't need to update it otherwise
		// we set it to the known state value
		if (typeof action == 'string') {
			
			// all built-in errors will pass this as their values are > 0 but we go ahead and
			// ensure that no developer used the 0x00 for an error code
			stat = States['ERROR_' + action];
		} else stat = action;
		
		if (isNaN(stat) || !(stat & States.ERROR)) stat = States.ERROR_UNKNOWN;
		
		// if it has changed give observers the opportunity to respond
		this.set('status', (this.status | stat) & ~States.READY);
		
		// we need to check to see if there is an options handler for this error
		if (opts && opts.error) opts.error(this, action, opts, res, source);
	},
	
	/**
	* Overloaded version of the method to call [set()]{@link enyo.Collection#set}
	* instead of simply assigning the value. This allows it to
	* [notify observers]{@link enyo.ObserverSupport.notify} and thus update
	* [bindings]{@link enyo.BindingSupport.bindings} as well.
	*
	* @see enyo.StateSupport.clearError
	* @public
	*/
	clearError: function () {
		return this.set('status', States.READY);
	},
	
	/**
	* @private
	*/
	_modelEvent: function (model, e) {
		switch (e) {
		case 'change':
			this.emit('change', {model: model});
			break;
		case 'destroy':
			this.remove(model);
			break;
		}
	},
	
	/**
	* Responds to changes to the [models]{@link enyo.Collection#models} property.
	*
	* @see enyo.Collection.models
	* @fires enyo.Collection#reset
	* @type {enyo.ObserverSupport~Observer}
	* @public
	*/
	modelsChanged: function (was, is, prop) {
		var models = this.models.copy(),
			len = models.length;
		
		if (len != this.length) this.set('length', len);
		
		this.emit('reset', {models: models, collection: this});
	},
	
	/**
	* Initializes the [collection]{@link enyo.Collection}.
	*
	* @param {(Object|Object[]|enyo.Model[])} [recs] May be an [array]{@glossary Array}
	*	of either [models]{@link enyo.Model} or [hashes]{@glossary Object} used to
	* initialize the [collection]{@link enyo.Collection}, or an [object]{@glossary Object}
	*	equivalent to the `props` parameter.
	* @param {Object} [props] - A hash of properties to apply directly to the
	* collection.
	* @param {Object} [opts] - A hash.
	* @method
	* @public
	*/
	constructor: kind.inherit(function (sup) {
		return function (recs, props, opts) {
			// opts = opts? (this.options = enyo.mixin({}, [this.options, opts])): this.options;
			
			// if properties were passed in but not a records array
			props = recs && !(recs instanceof Array)? recs: props;
			if (props === recs) recs = null;
			// initialize our core records
			// this.models = this.models || new ModelList();
			!this.models && (this.set('models', new ModelList()));
			
			// this is backwards compatibility
			if (props && props.records) {
				recs = recs? recs.concat(props.records): props.records.slice();
				delete props.records;
			}
			
			if (props && props.models) {
				recs = recs? recs.concat(props.models): props.models.slice();
				delete props.models;
			}
			
			if (props && props.options) {
				this.options = utils.mixin({}, [this.options, props.options]);
				delete props.options;
			}
			
			opts = opts? utils.mixin({}, [this.options, opts]): this.options;
			
			// @TODO: For now, while there is only one property we manually check for it
			// if more options arrise that should be configurable this way it may need to
			// be modified
			opts.fetch && (this.options.fetch = opts.fetch);
			
			this.length = this.models.length;
			this.euid = utils.uid('c');
			
			sup.call(this, props);
			
			typeof this.model == 'string' && (this.model = kind.constructorForKind(this.model));
			this.store = this.store || Store;
			recs && recs.length && this.add(recs, opts);
		};
	}),
	
	/**
	* @method
	* @private
	*/
	constructed: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			
			// automatically attempt a fetch after initialization is complete
			if (this.options.fetch) this.fetch();
		};
	})
	
});

/**
* @name enyo.Collection.concat
* @static
* @private
*/
Collection.concat = function (ctor, props) {
	var proto = ctor.prototype || ctor;
	
	if (props.options) {
		proto.options = utils.mixin({}, [proto.options, props.options]);
		delete props.options;
	}
};
},{"../../enyo":12,"./Component":23,"./EventEmitter":34,"./Model":48,"./ModelList":49,"./Source":69,"./StateSupport":70,"./States":71,"./Store":72,"./kind":96,"./utils":106}],50:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	Component = require('./Component'),
	MultipleDispatchSupport = require('./MultipleDispatchSupport');

/**
* {@link enyo.MultipleDispatchComponent} is a purely abstract [kind]
* {@glossary kind} that simply provides a common ancestor for
* {@link enyo.Component} [objects]{@glossary Object} that need 
* the [MultipleDispatchSupport]{@link enyo.MultipleDispatchSupport}
* [mixin]{@glossary mixin}.
*
* @class enyo.MultipleDispatchComponent
* @extends enyo.Component
* @mixes enyo.MultipleDispatchSupport
* @public
*/
module.exports = kind(
	/** @lends enyo.MultipleDispatchComponent */ {

	/**
	* @private
	*/
	kind: Component,

	/**
	* @private
	*/
	mixins: [MultipleDispatchSupport]
});
},{"../../enyo":12,"./Component":23,"./MultipleDispatchSupport":51,"./kind":96}],63:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	platform = require('./platform'),
	animation = require('./animation');

var
	Component = require('./Component');

/**
* Fires when a scrolling action starts.
*
* @event enyo.ScrollMath#onScrollStart
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {enyo.Scroller~ScrollEvent} event - An [object]{@glossary Object} containing 
*	event information.
* @private
*/

/**
* Fires while a scrolling action is in progress.
*
* @event enyo.ScrollMath#onScroll
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {enyo.Scroller~ScrollEvent} event - An [object]{@glossary Object} containing 
*	event information.
* @private
*/

/**
* Fires when a scrolling action stops.
*
* @event enyo.ScrollMath#onScrollStop
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {enyo.Scroller~ScrollEvent} event - An [object]{@glossary Object} containing 
*	event information.
* @private
*/

/**
* {@link enyo.ScrollMath} implements a scrolling dynamics simulation. It is a
* helper [kind]{@glossary kind} used by other [scroller]{@link enyo.Scroller}
* kinds, such as {@link enyo.TouchScrollStrategy}.
* 
* `enyo.ScrollMath` is not typically created in application code.
*
* @class enyo.ScrollMath
* @protected
*/
module.exports = kind(
	/** @lends enyo.ScrollMath.prototype */ {

	name: 'enyo.ScrollMath',

	/**
	* @private
	*/
	kind: Component,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.ScrollMath.prototype */ {

		/** 
		* Set to `true` to enable vertical scrolling.
		*
		* @type {Boolean}
		* @default true
		* @private
		*/
		vertical: true,

		/** 
		* Set to `true` to enable horizontal scrolling.
		*
		* @type {Boolean}
		* @default true
		* @private
		*/
		horizontal: true
	},

	/**
	* @private
	*/
	events: {
		onScrollStart: '',
		onScroll: '',
		onScrollStop: '',
		onStabilize: ''
	},

	/**
	* "Spring" damping returns the scroll position to a value inside the boundaries. Lower 
	* values provide faster snapback.
	*
	* @private
	*/
	kSpringDamping: 0.93,

	/** 
	* "Drag" damping resists dragging the scroll position beyond the boundaries. Lower values 
	* provide more resistance.
	*
	* @private
	*/
	kDragDamping: 0.5,
	
	/** 
	* "Friction" damping reduces momentum over time. Lower values provide more friction.
	*
	* @private
	*/
	kFrictionDamping: 0.97,

	/** 
	* Additional "friction" damping applied when momentum carries the viewport into overscroll. 
	* Lower values provide more friction.
	*
	* @private
	*/
	kSnapFriction: 0.9,
	
	/** 
	* Scalar applied to `flick` event velocity.
	*
	* @private
	*/
	kFlickScalar: 15,

	/** 
	* Limits the maximum allowable flick. On Android > 2, we limit this to prevent compositing 
	* artifacts.
	*
	* @private
	*/
	kMaxFlick: platform.android > 2 ? 2 : 1e9,
	
	/** 
	* The value used in [friction()]{@link enyo.ScrollMath#friction} to determine if the delta 
	* (e.g., y - y0) is close enough to zero to consider as zero.
	*
	* @private
	*/
	kFrictionEpsilon: platform.webos >= 4 ? 1e-1 : 1e-2,
	
	/** 
	* Top snap boundary, generally `0`.
	*
	* @private
	*/
	topBoundary: 0,
	
	/** 
	* Right snap boundary, generally `(viewport width - content width)`.
	*
	* @private
	*/
	rightBoundary: 0,
	
	/** 
	* Bottom snap boundary, generally `(viewport height - content height)`.
	*
	* @private
	*/
	bottomBoundary: 0,
	
	/** 
	* Left snap boundary, generally `0`.
	*
	* @private
	*/
	leftBoundary: 0,
	
	/** 
	* Animation time step.
	*
	* @private
	*/
	interval: 20,
	
	/** 
	* Flag to enable frame-based animation; if `false`, time-based animation is used.
	*
	* @private
	*/
	fixedTime: true,

	/**
	* Simulation state.
	*
	* @private
	*/
	x0: 0,

	/**
	* Simulation state.
	*
	* @private
	*/
	x: 0,

	/**
	* Simulation state.
	*
	* @private
	*/
	y0: 0,

	/**
	* Simulation state.
	*
	* @private
	*/
	y: 0,

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			this.stop();
			sup.apply(this, arguments);
		};
	}),

	/**
	* Simple Verlet integrator for simulating Newtonian motion.
	*
	* @private
	*/
	verlet: function () {
		var x = this.x;
		this.x += x - this.x0;
		this.x0 = x;
		//
		var y = this.y;
		this.y += y - this.y0;
		this.y0 = y;
	},

	/**
	* Boundary damping function. Returns damped `value` based on `coeff` on one side of 
	* `origin`.
	*
	* @private
	*/
	damping: function (val, origin, coeff, sign) {
		var kEpsilon = 0.5;
		//
		// this is basically just value *= coeff (generally, coeff < 1)
		//
		// 'sign' and the conditional is to force the damping to only occur
		// on one side of the origin.
		//
		var dv = val - origin;
		// Force close-to-zero to zero
		if (Math.abs(dv) < kEpsilon) {
			return origin;
		}
		return val*sign > origin*sign ? coeff * dv + origin : val;
	},

	/**
	* Dual-boundary damping function. Returns damped `value` based on `coeff` when exceeding 
	* either boundary.
	*
	* @private
	*/
	boundaryDamping: function (val, aBoundary, bBoundary, coeff) {
		return this.damping(this.damping(val, aBoundary, coeff, 1), bBoundary, coeff, -1);
	},

	/**
	* Simulation constraints (spring damping occurs here).
	*
	* @private
	*/
	constrain: function () {
		var y = this.boundaryDamping(this.y, this.topBoundary, this.bottomBoundary, this.kSpringDamping);
		if (y != this.y) {
			// ensure snapping introduces no velocity, add additional friction
			this.y0 = y - (this.y - this.y0) * this.kSnapFriction;
			this.y = y;
		}
		var x = this.boundaryDamping(this.x, this.leftBoundary, this.rightBoundary, this.kSpringDamping);
		if (x != this.x) {
			this.x0 = x - (this.x - this.x0) * this.kSnapFriction;
			this.x = x;
		}
	},

	/**
	* The friction function.
	*
	* @private
	*/
	friction: function (ex, ex0, coeff) {
		// implicit velocity
		var dp = this[ex] - this[ex0];
		// let close-to-zero collapse to zero (i.e. smaller than epsilon is considered zero)
		var c = Math.abs(dp) > this.kFrictionEpsilon ? coeff : 0;
		// reposition using damped velocity
		this[ex] = this[ex0] + c * dp;
	},

	/** 
	* One unit of time for simulation.
	*
	* @private
	*/
	frame: 10,
	// piece-wise constraint simulation
	simulate: function (t) {
		while (t >= this.frame) {
			t -= this.frame;
			if (!this.dragging) {
				this.constrain();
			}
			this.verlet();
			this.friction('y', 'y0', this.kFrictionDamping);
			this.friction('x', 'x0', this.kFrictionDamping);
		}
		return t;
	},

	/**
	* @fires enyo.ScrollMath#onScrollStop
	* @private
	*/
	animate: function () {
		this.stop();
		// time tracking
		var t0 = utils.perfNow(), t = 0;
		// delta tracking
		var x0, y0;
		// animation handler
		var fn = this.bindSafely(function() {
			// wall-clock time
			var t1 = utils.perfNow();
			// schedule next frame
			this.job = animation.requestAnimationFrame(fn);
			// delta from last wall clock time
			var dt = t1 - t0;
			// record the time for next delta
			t0 = t1;
			// user drags override animation
			if (this.dragging) {
				this.y0 = this.y = this.uy;
				this.x0 = this.x = this.ux;
				this.endX = this.endY = null;
			}
			// frame-time accumulator
			// min acceptable time is 16ms (60fps)
			t += Math.max(16, dt);
			// prevent snapping to originally desired scroll position if we are in overscroll
			if (this.isInOverScroll()) {
				this.endX = null;
				this.endY = null;
			}
			// alternate fixed-time step strategy:
			else if (this.fixedTime) {
				t = this.interval;
			}
			// consume some t in simulation
			t = this.simulate(t);
			// scroll if we have moved, otherwise the animation is stalled and we can stop
			if (y0 != this.y || x0 != this.x) {
				this.scroll();
			} else if (!this.dragging) {
				// set final values
				if (this.endX != null) {
					this.x = this.x0 = this.endX;
				}
				if (this.endY != null) {
					this.y = this.y0 = this.endY;
				}

				this.stop();
				this.scroll();
				this.doScrollStop();

				this.endX = null;
				this.endY = null;
			}
			y0 = this.y;
			x0 = this.x;
		});
		this.job = animation.requestAnimationFrame(fn);
	},
	
	/**
	* @private
	*/
	start: function () {
		if (!this.job) {
			this.doScrollStart();
			this.animate();
		}
	},

	/**
	* @private
	*/
	stop: function (fire) {
		var job = this.job;
		if (job) {
			this.job = animation.cancelRequestAnimationFrame(job);
		}
		if (fire) {
			this.doScrollStop();

			this.endX = undefined;
			this.endY = undefined;
		}
	},

	/**
	* Adjusts the scroll position to be valid, if necessary (e.g., after the scroll contents
	* have changed).
	*
	* @private
	*/
	stabilize: function (opts) {
		var fire = !opts || opts.fire === undefined || opts.fire;
		var y = Math.min(this.topBoundary, Math.max(this.bottomBoundary, this.y));
		var x = Math.min(this.leftBoundary, Math.max(this.rightBoundary, this.x));
		if (y != this.y || x != this.x) {
			this.y = this.y0 = y;
			this.x = this.x0 = x;
			if (fire) {
				this.doStabilize();
			}
		}
	},

	/**
	* @private
	*/
	startDrag: function (e) {
		this.dragging = true;
		//
		this.my = e.pageY;
		this.py = this.uy = this.y;
		//
		this.mx = e.pageX;
		this.px = this.ux = this.x;
	},

	/**
	* @private
	*/
	drag: function (e) {
		var dy, dx, v, h;
		if (this.dragging) {
			v = this.canScrollY();
			h = this.canScrollX();
		
			dy = v ? e.pageY - this.my : 0;
			this.uy = dy + this.py;
			// provides resistance against dragging into overscroll
			this.uy = this.boundaryDamping(this.uy, this.topBoundary, this.bottomBoundary, this.kDragDamping);
			//
			dx = h ? e.pageX - this.mx : 0;
			this.ux = dx + this.px;
			// provides resistance against dragging into overscroll
			this.ux = this.boundaryDamping(this.ux, this.leftBoundary, this.rightBoundary, this.kDragDamping);
			//
			this.start();
			return true;
		}
	},

	/**
	* @private
	*/
	dragDrop: function () {
		if (this.dragging && !window.PalmSystem) {
			var kSimulatedFlickScalar = 0.5;
			this.y = this.uy;
			this.y0 = this.y - (this.y - this.y0) * kSimulatedFlickScalar;
			this.x = this.ux;
			this.x0 = this.x - (this.x - this.x0) * kSimulatedFlickScalar;
		}
		this.dragFinish();
	},

	/**
	* @private
	*/
	dragFinish: function () {
		this.dragging = false;
	},

	/**
	* @private
	*/
	flick: function (e) {
		var v;
		if (this.canScrollY()) {
			v = e.yVelocity > 0 ? Math.min(this.kMaxFlick, e.yVelocity) : Math.max(-this.kMaxFlick, e.yVelocity);
			this.y = this.y0 + v * this.kFlickScalar;
		}
		if (this.canScrollX()) {
			v = e.xVelocity > 0 ? Math.min(this.kMaxFlick, e.xVelocity) : Math.max(-this.kMaxFlick, e.xVelocity);
			this.x = this.x0 + v * this.kFlickScalar;
		}
		this.start();
	},

	/**
	* TODO: Refine and test newMousewheel, remove this
	* @private
	*/
	mousewheel: function (e) {
		var dy = this.vertical ? e.wheelDeltaY || (!e.wheelDeltaX ? e.wheelDelta : 0) : 0,
			dx = this.horizontal ? e.wheelDeltaX : 0,
			shouldScroll = false;
		if ((dy > 0 && this.y < this.topBoundary) || (dy < 0 && this.y > this.bottomBoundary)) {
			this.y = this.y0 = this.y0 + dy;
			shouldScroll = true;
		}
		if ((dx > 0 && this.x < this.leftBoundary) || (dx < 0 && this.x > this.rightBoundary)) {
			this.x = this.x0 = this.x0 + dx;
			shouldScroll = true;
		}
		this.stop(!shouldScroll);
		if (shouldScroll) {
			this.start();
			return true;
		}
	},

	/**
	* @private
	*/
	newMousewheel: function (e) {
		var wdY = (e.wheelDeltaY === undefined) ? e.wheelDelta : e.wheelDeltaY,
			dY = wdY,
			dX = e.wheelDeltaX,
			canY = this.canScrollY(),
			canX = this.canScrollX(),
			shouldScroll = false,
			m = 2,
			// TODO: Figure out whether we need to port the configurable
			// max / multiplier feature from Moonstone's implementation,
			// and (if so) how
			// max = 100,
			scr = this.isScrolling(),
			ovr = this.isInOverScroll(),
			refY = (scr && this.endY !== null) ? this.endY : this.y,
			refX = (scr && this.endX !== null) ? this.endX : this.x,
			tY = refY,
			tX = refX;

		if (ovr) {
			return true;
		}

		// If we're getting strictly vertical mousewheel events over a scroller that
		// can only move horizontally, the user is probably using a one-dimensional
		// mousewheel and would like us to scroll horizontally instead
		if (dY && !dX && canX && !canY) {
			dX = dY;
			dY = 0;
		}
		
		if (dY && canY) {
			tY = -(refY + (dY * m));
			shouldScroll = true;
		}
		if (dX && canX) {
			tX = -(refX + (dX * m));
			shouldScroll = true;
		}

		if (shouldScroll) {
			this.scrollTo(tX, tY, {allowOverScroll: true});
			return true;
		}
	},

	/**
	* @fires enyo.ScrollMath#onScroll
	* @private
	*/
	scroll: function () {
		this.doScroll();
	},

	// NOTE: Yip/Orvell method for determining scroller instantaneous velocity
	// FIXME: incorrect if called when scroller is in overscroll region
	// because does not account for additional overscroll damping.
	
	/**
	* Scrolls to the specified position.
	*
	* @param {Number} x - The `x` position in pixels.
	* @param {Number} y - The `y` position in pixels.
	* @param {Object} opts - TODO: Document. When behavior == 'instant', we skip animation.
	* @private
	*/
	scrollTo: function (x, y, opts) {
		var animate = !opts || opts.behavior !== 'instant',
			allowOverScroll = opts && opts.allowOverScroll,
			maxX = Math.abs(Math.min(0, this.rightBoundary)),
			maxY = Math.abs(Math.min(0, this.bottomBoundary));

		if (!animate || !allowOverScroll) {
			x = Math.max(0, Math.min(x, maxX));
			y = Math.max(0, Math.min(y, maxY));
		}

		if (-x == this.x && -y == this.y) return;

		if (!animate) {
			this.doScrollStart();
			this.setScrollX(-x);
			this.setScrollY(-y);
			this.doScroll();
			this.doScrollStop();
		}
		else {
			if (y !== null) {
				this.endY = -y;
				this.y = this.y0 - (y + this.y0) * (1 - this.kFrictionDamping);
			}
			if (x !== null) {
				this.endX = -x;
				this.x = this.x0 - (x + this.x0) * (1 - this.kFrictionDamping);
			}
			this.start();
		}
	},

	/**
	* Sets the scroll position along the x-axis.
	*
	* @param {Number} x - The x-axis scroll position in pixels.
	* @method
	* @private
	*/
	setScrollX: function (x) {
		this.x = this.x0 = x;
	},

	/**
	* Sets the scroll position along the y-axis.
	*
	* @param {Number} y - The y-axis scroll position in pixels.
	* @method
	* @private
	*/
	setScrollY: function (y) {
		this.y = this.y0 = y;
	},

	/**
	* Sets the scroll position; defaults to setting this position along the y-axis.
	*
	* @param {Number} pos - The scroll position in pixels.
	* @method
	* @private
	*/
	setScrollPosition: function (pos) {
		this.setScrollY(pos);
	},
	
	canScrollX: function() {
		return this.horizontal && this.rightBoundary < 0;
	},

	canScrollY: function() {
		return this.vertical && this.bottomBoundary < 0;
	},


	/** 
	* Determines whether or not the [scroller]{@link enyo.Scroller} is actively moving.
	* 
	* @return {Boolean} `true` if actively moving; otherwise, `false`.
	* @private
	*/
	isScrolling: function () {
		return Boolean(this.job);
	},

	/** 
	* Determines whether or not the [scroller]{@link enyo.Scroller} is in overscroll.
	* 
	* @return {Boolean} `true` if in overscroll; otherwise, `false`.
	* @private
	*/
	isInOverScroll: function () {
		return this.job && (this.x > this.leftBoundary || this.x < this.rightBoundary ||
			this.y > this.topBoundary || this.y < this.bottomBoundary);
	}
});
},{"../../enyo":12,"./Component":23,"./animation":84,"./kind":96,"./platform":102,"./utils":106}],67:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Component = require('./Component');

/**
* The extended {@glossary event} [object]{@glossary Object} that is provided
* when the [onSelect]{@link enyo.Selection#onSelect} and
* [onDeselect]{@link enyo.Selection#onDeselect} events are fired.
*
* @typedef {Object} enyo.Selection~SelectionEvent
* @property {Number|String} key The key that was used to register the
*	[selection]{@link enyo.Selection} (usually a row index).
* @property {Object} data - References data registered with the key by the code
* that made the original selection.
*/

/**
* Fires when an item is selected.
* 
* ```javascript
* {kind: "Selection", onSelect: "selectRow"...
* ...
* selectRow: function(inSender, inEvent) {
* ...
* ```
*
* @event enyo.Selection#onSelect
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {enyo.Selection~SelectionEvent} event - An [object]{@glossary Object}
*	containing event information.
* @public
*/

/**
* Fires when an item is deselected.
* 
* ```javascript
* {kind: "Selection", onSelect: "deselectRow"...
* ...
* deselectRow: function(inSender, inEvent)
* ...
* ```
*
* @event enyo.Selection#onDeselect
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {enyo.Selection~SelectionEvent} event - An [object]{@glossary Object}
*	containing event information.
* @public
*/

/**
* Fires when selection changes (but not when selection is cleared).
*
* @event enyo.Selection#onChange
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Selection} is used to manage row selection state for lists. It provides
* selection state management for both single-select and multi-select lists.
*
* ```javascript
* // The following is an excerpt from enyo.FlyweightRepeater.
* enyo.kind({
*	name: "enyo.FlyweightRepeater",
*	...
*	components: [
*		{kind: "Selection", onSelect: "selectDeselect", onDeselect: "selectDeselect"},
*		...
*	],
*	tap: function(inSender, inEvent) {
*		...
*		// mark the tapped row as selected
*		this.$.selection.select(inEvent.index);
*		...
*	},
*	selectDeselect: function(inSender, inEvent) {
*		// this is where a row selection highlight might be applied
*		this.renderRow(inEvent.key);
*	}
*	...
* });
* ```
*
* @class enyo.Selection
* @extends enyo.Component
* @public
*/
module.exports = kind(
	/** @lends enyo.Selection.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Selection',

	/**
	* @private
	*/
	kind: Component,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Selection.prototype */ {

		/**
		* If `true`, multiple selections are allowed.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		multi: false
	},

	/**
	* @private
	*/
	events: {
		onSelect: '',
		onDeselect: '',
		onChange: ''
	},
	
	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			this.clear();
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	multiChanged: function () {
		if (!this.multi) {
			this.clear();
		}
		this.doChange();
	},

	/**
	* @private
	*/
	highlander: function () {
		if (!this.multi) {
			this.deselect(this.lastSelected);
		}
	},

	/**
	* Removes all selections.
	* 
	* @public
	*/
	clear: function () {
		this.selected = {};
	},

	/**
	* Determines whether a particular row is selected.
	*
	* @param {Number|String} key - The unique identifier of the row.
	* @returns {Boolean} `true` if the specified row is selected; otherwise, `false`.
	* @public
	*/
	isSelected: function (key) {
		return this.selected[key];
	},

	/**
	* Manually sets a row's state to selected or unselected.
	*
	* @param {Number|String} key - The unique identifier of the row.
	* @param {Boolean} sel - `true` if the row should be selected; `false` if the row
	* should be unselected.
	* @param {Object} [data] - An optional data [object]{@glossary Object} to store
	*	in the selection for the key that will be sent with the
	*	[onSelect]{@link enyo.Selection#onSelect} or
	*	[onDeselect]{@link enyo.Selection#onDeselect} {@glossary event}. If
	*	not used, the `data` will be set to `true`.
	* @fires enyo.Selection#onChange
	* @public
	*/
	setByKey: function (key, sel, data) {
		if (sel) {
			this.selected[key] = (data || true);
			this.lastSelected = key;
			this.doSelect({key: key, data: this.selected[key]});
		} else {
			var was = this.isSelected(key);
			delete this.selected[key];
			this.doDeselect({key: key, data: was});
		}
		this.doChange();
	},

	/**
	* Deselects a row.
	*
	* @param {Number|String} key - The unique identifier of the row.
	* @public
	*/
	deselect: function (key) {
		if (this.isSelected(key)) {
			this.setByKey(key, false);
		}
	},

	/**
	* Selects a row. If the [multi]{@link enyo.Selection#multi} property is set to `false`,
	* this will also deselect the previous [selection]{@link enyo.Selection}.
	*
	* @param {Number|String} key - The unique identifier of the row.
	* @param {Object} [data] - An optional data [object]{@glossary Object} to store
	* in the selection for the key that will be sent with the
	*	[onSelect]{@link enyo.Selection#onSelect} or
	*	[onDeselect]{@link enyo.Selection#onDeselect} {@glossary event}. If
	*	not used, the `data` will be set to `true`.
	* @public
	*/
	select: function (key, data) {
		if (this.multi) {
			this.setByKey(key, !this.isSelected(key), data);
		} else if (!this.isSelected(key)) {
			this.highlander();
			this.setByKey(key, true, data);
		}
	},

	/**
	* Toggles [selection]{@link enyo.Selection} state for a row. If the
	* [multi]{@link enyo.Selection#multi} property is set to `false`, toggling a
	* selection "on" will deselect the previous selection.
	*
	* @param {Number|String} key - The unique identifier of the row.
	* @param {Object} [data] - An optional data [object]{@glossary Object} to store
	* in the selection for the key that will be sent with the
	*	[onSelect]{@link enyo.Selection#onSelect} or
	*	[onDeselect]{@link enyo.Selection#onDeselect} {@glossary event}. If
	*	not used, the `data` will be set to `true`.
	* @public
	*/
	toggle: function (key, data) {
		if (!this.multi && this.lastSelected != key) {
			this.deselect(this.lastSelected);
		}
		this.setByKey(key, !this.isSelected(key), data);
	},

	/**
	* Retrieves the current [selection]{@link enyo.Selection}.
	*
	* @returns {Object} The selection as a [hash]{@glossary Object} in which each
	* selected item has a value; unselected items are [undefined]{@glossary undefined}.
	* @public
	*/
	getSelected: function () {
		return this.selected;
	},

	/**
	* Removes a row that's included in the [selection]{@link enyo.Selection} set.
	* If this row is selected, it will be unselected.  Any rows above this row
	* will have their keys value reduced by one.
	*
	* @param {Number|String} key - The unique identifier of the row.
	* @public
	*/
	remove: function (key) {
		var newSelected = {};
		for (var row in this.selected) {
			if (row < key) {
				newSelected[row] = this.selected[row];
			} else if (row > key) {
				newSelected[row - 1] = this.selected[row];
			}
		}
		this.selected = newSelected;
	}
});
},{"../../enyo":12,"./Component":23,"./kind":96}],68:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	Component = require('./Component');

/**
* {@link enyo.Signals} is a [component]{@link enyo.Component} used to listen
* to global messages.
* 
* An object with a Signals component can listen to messages sent from anywhere
* by declaring handlers for them.
* 
* DOM [events]{@glossary event} that have no node targets are broadcast as
* signals. These events include Window events, such as `onload` and
* `onbeforeunload`, as well as events that occur directly on `document`, such
* as `onkeypress` if `document` has the focus.
* 
* For more information, see the documentation on [Event
* Handling]{@linkplain $dev-guide/key-concepts/event-handling.html} in the
* Enyo Developer Guide.
*
* @class enyo.Signals
* @extends enyo.Component
* @public
*/
var Signals = module.exports = kind(
	/** @lends enyo.Signals.prototype */ {

	name: 'enyo.Signals',

	/**
	* @private
	*/
	kind: Component,

	/**
	* Needed because of early calls to bind DOM {@glossary event} listeners
	* to the [enyo.Signals.send()]{@link enyo.Signals#send} call.
	* 
	* @private
	*/


	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			Signals.addListener(this);
		};
	}),

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			Signals.removeListener(this);
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	notify: function (msg, load) {
		this.dispatchEvent(msg, load);
	},

	/**
	* @private
	*/
	protectedStatics: {
		listeners: [],
		addListener: function(listener) {
			this.listeners.push(listener);
		},
		removeListener: function(listener) {
			utils.remove(listener, this.listeners);
		}
	},

	/**
	* @private
	*/
	statics: 
		/** @lends enyo.Signals.prototype */ {

		/**
		* Broadcasts a global message to be consumed by subscribers.
		* 
		* @param {String} msg - The message to send; usually the name of the
		*	{@glossary event}.
		* @param {Object} load - An [object]{@glossary Object} containing any
		*	associated event properties to be accessed by subscribers.
		* @public
		*/
		send: function (msg, load) {
			utils.forEach(this.listeners, function(l) {
				l.notify(msg, load);
			});
		}
	}
});
},{"../../enyo":12,"./Component":23,"./kind":96,"./utils":106}],277:[function(require,module,exports){
var
    dom = require('../../enyo/lib/dom'),
    logger = require('../../enyo/lib/logger'),
    Component = require('../../enyo/lib/Component');

/**
* {@link enyo.Spotlight.Container}
*
* @typedef {Object} enyo.Spotlight.Container definition
*
* @class enyo.Spotlight.Container
* @public
*/
module.exports = function (Spotlight) {

    //* @protected
    /************************************************************/

    var _oThis = this;

    /**
    * Creates `oSender._spotlight` object.
    *
    * @param  {Object} oSender - The object that will be initalized for Spotlight.
    * @private
    */
    var _initComponent = function(oSender) {
            var oLastFocusedChild;
            if (!_isInitialized(oSender)) {
                if (oSender.defaultSpotlightControl) {
                    if (oSender.$[oSender.defaultSpotlightControl]) {
                        oLastFocusedChild = oSender.$[oSender.defaultSpotlightControl];
                    } else if (oSender.owner.$[oSender.defaultSpotlightControl]) {
                        oLastFocusedChild = oSender.owner.$[oSender.defaultSpotlightControl];
                    } else {
                        throw 'Invalid default spotlight control specified in ' + oSender.name;
                    }
                } else {
                    oLastFocusedChild = Spotlight.getFirstChild(oSender);
                }

                if (oLastFocusedChild && oLastFocusedChild.isDescendantOf(oSender)) {
                    _oThis.setLastFocusedChild(oSender, oLastFocusedChild);
                }
            }
        },

        /**
        * Determines whether Spotlight has been initialized.
        *
        * @param  {Object} oSender - The object that will be checked for
        * Spotlight initalization.
        * @return {Boolean} `true` if Spotlight has been initialized; otherwise, `false`.
        * @private
        */
        _isInitialized = function(oSender) {
            return typeof oSender._spotlight.lastFocusedChild != 'undefined';
        },

        /**
        * Handles events bubbling from within the container.
        *
        * @param  {Object} oSender - The object that is sending the event.
        * @param  {Object} oEvent - The event to bubble.
        * @private
        */
        _handleEvent = function(oSender, oEvent) {
            oSender.cachePoint = true;
            switch (oEvent.type) {
                case 'onSpotlightFocus':
                    if (oEvent.originator !== oSender) {
                        _oThis.setLastFocusedChild(oSender, oEvent.originator);
                    }
                    break;
                case 'onSpotlightKeyDown':
                    // Inform other controls that spotlight 5-way event was generated within a container
                    oEvent.spotSentFromContainer = true;
                    break;
                case 'onSpotlightContainerEnter':
                    if(oEvent.last && oEvent.last.isDescendantOf(oSender)) {
                        return true;
                    }
                    break;
                case 'onSpotlightContainerLeave':
                    if(oEvent.commonAncestor && oEvent.commonAncestor.isDescendantOf(oSender)) {
                        return true;
                    }
                    break;
            }
        },

        /**
        * Determines whether last spotted control was the container's child.
        *
        * @param  {Object} oSender
        * @returns {Object}
        * @private
        */
        _hadFocus = function(oSender) {
            var oLastControl = Spotlight.getLastControl();
            if (oSender._spotlight.bEnorceOutsideIn) {
                return false;
            } // Programmatically spotted containers are always treated as not having focus
            if (!Spotlight.isSpottable(oLastControl)) {
                return false;
            } // Because oLastControl might have been DHD'd
            return Spotlight.Util.isChild(oSender, oLastControl);
        };

    /**
    * Starts intercepting events to keep track of last focus for container.
    * Call this API after dynamically setting Spotlight as "container".
    *
    * @param  {Object} control
    * @public
    */
    this.initContainer = function(control) {
        if (!control._spotlight || (control._spotlight && !control._spotlight.interceptEvents)) {
            control._spotlight = control._spotlight || {};
            control._spotlight.interceptEvents = true;
            Spotlight.Util.interceptEvents(control, _handleEvent);
        }
    };

    /**
    * Handles Spotlight focus event.
    *
    * @param  {Object} oSender - The sender of the event.
    * @param  {Object} oEvent - The focus event.
    * @public
    */
    this.onSpotlightFocus = function(oSender, oEvent) {
        oSender._spotlight = oSender._spotlight || {};
        oSender._spotlight.bEnorceOutsideIn = !oEvent.dir;
    };

    /**
    * Handles Spotlight focused event.
    *
    * @param  {Object} oSender - The sender of the event.
    * @param  {Object} oEvent - The focused event.
    * @returns {Boolean}
    * @public
    */
    this.onSpotlightFocused = function(oSender, oEvent) {
        if (Spotlight.isInitialized() && Spotlight.getPointerMode()) {
            return true;
        }
        _initComponent(oSender);

        var s5WayEventType = Spotlight.getLast5WayEvent() ? Spotlight.getLast5WayEvent().type : '';

        // Focus came from inside AND this was a 5-way move
        if (_hadFocus(oSender)) {
            if (s5WayEventType) {

                // Re-dispatch 5 way event
                Spotlight.Util.dispatchEvent(
                    s5WayEventType, {
                        spotSentFromContainer: true
                    },
                    oSender
                );
            }

            // Focus came from outside or this was a programmatic spot
        } else {
            var oLastFocusedChild = this.getLastFocusedChild(oSender);
            if (oLastFocusedChild) {
                Spotlight.spot(oLastFocusedChild);
            } else {
                if (s5WayEventType) {

                    // Re-dispatch 5 way event
                    Spotlight.Util.dispatchEvent(
                        s5WayEventType, {
                            spotSentFromContainer: true
                        },
                        oSender
                    );
                    return true;
                }
            }
        }

        return true;
    };

    /**
    * Returns last focused child of the container.
    *
    * @param  {Object} oSender
    * @returns {Object} - The last focused child of the container.
    * @public
    */
    this.getLastFocusedChild = function(oSender) {
        oSender._spotlight = oSender._spotlight || {};
        if (!oSender._spotlight.lastFocusedChild || !Spotlight.isSpottable(oSender._spotlight.lastFocusedChild)) {
            oSender._spotlight.lastFocusedChild = Spotlight.getChildren(oSender)[0];
        }
        return oSender._spotlight.lastFocusedChild;
    };

    /**
    * Sets last focused child for the container.
    *
    * @param  {Object} oSender
    * @param  {Object} oChild - The child to set as the last focused child.
    * @public
    */
    this.setLastFocusedChild = function(oSender, oChild) {
        if (!Spotlight.isSpottable(oChild)) {
            oChild = Spotlight.getFirstChild(oChild);
        }
        if (oChild) {
            oSender._spotlight = oSender._spotlight || {};
            oSender._spotlight.lastFocusedChild = oChild;
        } else {
            logger.warn('Spotlight Container attempting to set non-spottable lastFocusedChild');
        }
    };

    this.fireContainerEvents = function (blurredControl, focusedControl) {
        if(blurredControl) {
            var to = focusedControl.hasNode(),
                from = blurredControl,
                position = 0;

            // find common ancestor
            do {
                position = dom.compareDocumentPosition(to, from.hasNode());
                if(position & 8) {  // 8 == 'contains'
                    Spotlight.Util.dispatchEvent('onSpotlightContainerLeave', {
                        commonAncestor: from
                    }, blurredControl);
                    break;
                } else {
                    from = from.parent;
                }
            } while (from);
        }

        if(focusedControl) {
            Spotlight.Util.dispatchEvent('onSpotlightContainerEnter', {
                last: blurredControl,
                current: focusedControl
            }, focusedControl);
        }
    };

    /*
    Using the hack below to ensure that statically declared Spotlight containers are
    initialized upon creation. Our previous pass at this used enyo.Control.extend(),
    which meant it failed to work for Control subkinds whose constructors were created
    immediately (vs. being deferred). Unfortunately, this caused big problems in webOS,
    where the "container" app systematically disables the deferral of constructor
    creation.

    There is some discussion ongoing as to whether we need a nicer mechanism for
    extending functionality in cases like this (see comments in BHV-15323), but in
    the meantime we need to proceed with a quick fix for this issue.
    */

    var originalEnyoComponentCreate = Component.create;

    Component.create = function () {
        var component = originalEnyoComponentCreate.apply(Component, arguments);
        if (component.spotlight == 'container') {
            Spotlight.Container.initContainer(component);
        }
        return component;
    };
};
},{"../../enyo/lib/Component":23,"../../enyo/lib/dom":87,"../../enyo/lib/logger":97}],35:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var Collection = require('./Collection');

/**
* Used internally (re-use) for filters that do not have a valid filter. This means they will
* always keep a mirrored copy of the entire current dataset of the parent filter.
* 
* @private
*/
function alwaysTrue () {
	return true;
}

/**
* This is an abstract [kind]{@glossary kind} used by [subkinds]{@glossary subkind} to
* implement features relevant to filtered [collections]{@link enyo.Collection}. It does extend
* {@link enyo.Collection} but only implements a subset of its methods. Unlike a normal
* collection, which keeps its own set of [model]{@link enyo.Model} instances (and can
* create, remove, or destroy them), an {@link enyo.Filter} uses another instance of
* `enyo.Collection` as its dataset and safely proxies its models as a complete set or
* according to the needs of its subkind. `enyo.Filter` is not intended to communicate
* with [sources]{@link enyo.Source} (e.g., via [fetch()]{@link enyo.Collection#fetch}).
* It maintains an implementation-specific API (from its subkinds) and propagates the
* events and APIs inherited from `enyo.Collection` that are needed to interact with
* [controls]{@link enyo.Control}.
* 
* @class enyo.Filter
* @extends enyo.Collection
* @protected
*/
var Filter = module.exports = kind(
	/** @lends enyo.Filter.prototype */ {
	
	name: 'enyo.Filter',
	
	/**
	* @private
	*/
	kind: Collection,
	
	/**
	* @private
	*/

	
	/**
	* Provide a filter-method that will be applied to each [model]{@link enyo.Model} in the
	* current set of models. This method will accept parameters according to those supplied
	* with the native {@glossary Array.filter} method. If not provided a function that always
	* returns `true` will be used.
	*
	* @virtual
	* @type {Function}
	* @public
	*/
	method: null,
	
	/**
	* The actual {@link enyo.Collection} content to proxy. How the collection is
	* used varies depending on the [subkind]{@glossary subkind} implementing the
	* feature.
	* 
	* @type enyo.Collection
	* @default null
	* @public
	*/
	collection: null,
	
	/**
	* Once all components have been created, those that are [filters]{@link enyo.Filter}
	* (or [subkinds]{@glossary subkind}) will be added to this [array]{@glossary Array}.
	* This array is primarily for internal use and should not be modified directly.
	* 
	* @type Array
	* @default null
	* @readonly
	* @public
	*/
	filters: null,
	
	/**
	* @private
	*/
	defaultProps: {
		kind: null // replaced after the fact
	},
	
	/**
	* @private
	*/
	adjustComponentProps: kind.inherit(function (sup) {
		return function (props) {
			// all filters are public...always...except when they aren't...
			if (props.publish !== false) props.publish = true;
			
			sup.apply(this, arguments);
			
			// now to ensure that there is the correct kind associated with the child component
			if (typeof props.kind == 'string') props.kind = kind.constructorForKind(props.kind);
			if (props.kind && props.kind.prototype instanceof Filter) {
				if (!props.name) {
					throw 'enyo.Filter.adjustComponentProps: Child filters must have a name';
				}
				
				// if no method is named explicitly we assume the same name as the filter
				if (!props.method) props.method = props.name;
				
				// most likely it will be a string but it is possible that the filter method
				// be declared inline in the component descriptor block
				if (typeof props.method == 'string') props.method = this[props.method];
				
				// we assign an always true method if none exists just because we assume it was
				// mean to be a mirror filter for the entire dataset
				if (typeof props.method != 'function') {
					// check to see if the prototype has one already
					props.method = props.kind.prototype.method || alwaysTrue;
				}
			}
		};
	}),
	
	/**
	* @private
	*/
	addComponent: kind.inherit(function (sup) {
		return function (comp) {
			
			// if the component is a filter we add it to the array
			if (comp instanceof Filter) this.filters.push(comp);
			
			return sup.apply(this, arguments);
		};
	}),
	
	/**
	* Resets the [filter]{@link enyo.Filter} to its initial state. Behavior will
	* vary depending on the [subkind]{@glossary subkind} implementation.
	* 
	* @virtual
	* @method
	* @public
	*/
	reset: utils.nop,
	
	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			// ensure we have an array to work with
			this.filters = [];
			
			// unfortunately we must maintain data structures that need remain out of our
			// proxy path so we each must create a collection instance for internal use
			this._internal = new Collection({options: {modelEvents: false}});
			this._internal.on('*', this._internalEvent, this);
			
			sup.apply(this, arguments);
		};
	}),
	
	/**
	* @private
	*/
	constructed: kind.inherit(function (sup) {
		return function () {
			var collection,
				owner;
			
			sup.apply(this, arguments);
			
			// we allow filters to be nested so they need to receive events from the
			// parent-filter and do with them as they need
			this.isChildFilter = ((owner = this.owner) && owner instanceof Filter);
			if(this.isChildFilter) {
				
				// if we're a child collection we don't want to monitor our parent's own state
				// we want to monitor their entire dataset
				this.collection = owner._internal;
				
				// register especially for owner events as we will differentiate them from
				// normal collection events
				this.collection.on('*', this._ownerEvent, this);
			}
			
			collection = this.collection;
			
			// if there is a collection instance already we need to initialize it
			if (collection) this.collectionChanged(null, collection);
		};
	}),
	
	/**
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			var collection = this.collection;
			
			// make sure that we remove our listener if we're being destroyed for some
			// reason (this would seem to be an irregular practice)
			if (collection) {
				if (this.isChildFilter && collection === this.owner._internal) {
					collection.off('*', this._ownerEvent, this);
				} else {
					collection.off('*', this._collectionEvent, this);
				}
				
				collection.unobserve('destroyed', this._collectionDestroyed, this);
			}
			
			sup.apply(this, arguments);
			
			// free our internal collection
			this._internal.destroy();
			this._internal = null;
		};
	}),
	
	/**
	* @private
	*/
	collectionChanged: function (was, is) {
		var internal = this._internal;
		
		if (was) {
			was.off('*', this._collectionEvent, this);
			was.unobserve('destroyed', this._collectionDestroyed, this);
		}
		
		// ensure that child-filters cannot have their internal/external collections reset
		if (is && !(was && this.isChildFilter && was === this.owner._internal)) {
			
			// case of child-filter whose collection is its owner does not need to receive
			// these events since it will receive them in a special handler to differentiate
			// these cases
			if (!this.isChildFilter || (is !== this.owner._internal)) {
				is.on('*', this._collectionEvent, this);
			}
			
			// if for any reason the collection is destroyed we want to know about it
			is.observe('destroyed', this._collectionDestroyed, this);
			
			// reset the models (causing reset to propagate to children or bound parties)
			internal.set('models', is.models.copy());
		} else {
			// it was set to nothing so we should be nothing
			if (internal.length) internal.empty();
		}
	},
	
	/**
	* This method is invoked when events are received from a
	* [collection]{@link enyo.Collection} that is not the owner of this
	* [filter]{@link enyo.Filter} (meaning it is not a child, since all child-filters'
	* owners are also filters and their event handling happens in another method).
	* As long as we are consistent about applying the same action against ourselves,
	* we should remain in sync and propagate the same event again, except that
	* `sort` will end up being a `reset`.
	* 
	* @private
	*/
	_collectionEvent: function (sender, e, props) {
		// we are listening for particular events to signal that we should update according
		// to its changes if we are a nested filter
		
		var models = props.models,
			internal = this._internal;
		
		switch (e) {
		case 'add':
			
			// will ensure an add gets propagated if the models are new
			internal.add(models, {merge: false});
			break;
		case 'reset':
		case 'sort':
			
			// will ensure a reset gets propagated
			internal.empty(models);
			break;
		case 'remove':
			
			// will ensure a remove gets propagated (assuming something is removed)
			internal.remove(models);
			break;
		case 'change':
			
			// we need to propagate the change event as our internal collection's own so that
			// child filters and/or subclasses will be able to handle this as they need to
			internal.emit(e, props);
			break;
		}
	},
	
	/**
	* When the collection is destroyed we can't use it anymore so we need to remove it as our
	* collection to prevent weird things from happening.
	*
	* @private
	*/
	_collectionDestroyed: function () {
		this.set('collection', null);
	},
	
	/**
	* To be implemented by [subkind]{@glossary subkind}; for internal use only.
	*
	* @virtual
	* @private
	*/
	_internalEvent: utils.nop,
	
	/**
	* To be implemented by [subkind]{@glossary subkind}; for internal use only.
	*
	* @virtual
	* @private
	*/
	_ownerEvent: utils.nop,
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	add: utils.nop,
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	remove: utils.nop,
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	fetch: utils.nop,
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	sort: utils.nop,
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	commit: utils.nop,
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.at
	* @method
	* @public
	*/
	at: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this.models.at ? this.models : this, arguments) : undefined;
		};
	}),
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	raw: utils.nop,
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	toJSON: utils.nop,
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.has
	* @method
	* @public
	*/
	has: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this, arguments) : false;
		};
	}),
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.forEach
	* @method
	* @public
	*/
	forEach: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this, arguments) : undefined;
		};
	}),
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.filter
	* @method
	* @public
	*/
	filter: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this, arguments) : [];
		};
	}),
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.find
	* @method
	* @public
	*/
	find: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this, arguments) : undefined;
		};
	}),
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.map
	* @method
	* @public
	*/
	map: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this, arguments) : [];
		};
	}),
	
	/**
	* Overloaded implementation.
	*
	* @see enyo.Collection.indexOf
	* @method
	* @public
	*/
	indexOf: kind.inherit(function (sup) {
		return function () {
			return this.models ? sup.apply(this, arguments) : -1;
		};
	}),
	
	/**
	* Unavailable on {@link enyo.Filter} and [subkinds]{@glossary subkind}.
	*
	* @method
	* @public
	*/
	empty: utils.nop
});

Filter.prototype.defaultProps.kind = Filter;
},{"../../enyo":12,"./Collection":22,"./kind":96,"./utils":106}],27:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');

var
	MultipleDispatchComponent = require('./MultipleDispatchComponent');

/**
* {@link enyo.Controller} is the base [kind]{@glossary kind} for all
* controllers in Enyo. An abstract kind, `enyo.Controller` is a
* [delegate]{@glossary delegate}/[component]{@link enyo.Component} that
* is designed to be a proxy for information.
*
* @class enyo.Controller
* @extends enyo.MultipleDispatchComponent
* @public
*/
module.exports = kind(
	/** @lends enyo.Controller.prototype */ {

	name: 'enyo.Controller',

	/**
	* @private
	*/
	kind: MultipleDispatchComponent,

	/**
	* Set this flag to `true` to make this [controller]{@link enyo.Controller}
	* available globally, when instanced. When set to `true`, even the
	* [owner]{@link enyo.Component#owner} (if any) cannot
	* [destroy]{@link enyo.Component#destroy} it.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	global: false,

	/**
	* The default source of information for all instances of {@link enyo.Controller}
	* and its [subkinds]{@glossary subkind}. In some cases, this will be a
	* [computed property]{@link enyo.ComputedSupport} to facilitate overloading.
	* It may contain any type of data.
	*
	* @type {*}
	* @default null
	* @public
	*/
	data: null,

	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			if (this.global) {
				utils.setPath(this.name, this);
			}
		};
	}),
	_isController: true
});
},{"../../enyo":12,"./MultipleDispatchComponent":50,"./kind":96,"./utils":106}],92:[function(require,module,exports){
require('../../enyo');

var
	Signals = require('./Signals');

/**
* Provides a stub function for g11n string translation. This allows strings to be wrapped in
* preparation for localization. If a g11n library is not loaded, this function will return the
* string as is.
* 
* `$L('Welcome')`
* 
* If a compatible g11n library is loaded, this function will be replaced by the g11n library's
* version, which translates wrapped strings to strings from a developer-provided resource file
* corresponding to the current user locale.
*
* @name $L
* @scope global
* @type {Function}
* @param {String} str - The {@glossary String} to translate.
* @returns {String} The translated {@glossary String}.
* @public
*/
exports.$L = function (str) {
	return str;
};

/**
* THE BELOW MAY NOT BE RELEVANT MOVING FORWARD BUT IS RETAINED FOR POSTERITY.
*
* Enyo controls may register for an `onlocalechange` signal to dynamically update their
* presentation based on changes to the user's locale. This feature is currently used in webOS,
* where Cordova for webOS listens for changes to the system locales and fires a `localechange`
* event on the `document` object. Similar functionality could be implemented on other platforms
* via a Cordova plugin or by other means.
* 
* Enyo registers an event listener for the `localechange` event and broadcasts the
* `onlocalechange` signal when the locale has changed. Before broadcasting, Enyo calls
* `enyo.updateLocale()`. The default implementation of `enyo.updateLocale()` is a stub, but a
* g11n library may override it to update its internal state before the `onlocalechange` signal
* is broadcast.
* 
* This feature is not supported on IE8, which doesn't support `addEventListener()`.
*
* @private
*/
exports.updateLocale = function updateLocale () {
	// This is a stub, to be implemented by a g11n library as needed
	Signals.send('onlocalechange');
};

// this...may not work the way it used to...
if (document.addEventListener) {
	document.addEventListener('localechange', function(e) {
		exports.updateLocale();
	}, false);
}
},{"../../enyo":12,"./Signals":68}],98:[function(require,module,exports){
require('../../enyo');

var
	utils = require('./utils');
var
	Component = require('./Component'),
	Signals = require('./Signals');

/**
* Default owner assigned to ownerless [UiComponents]{@link enyo.UiComponent},
* to allow such UiComponents to be notified of important system events like window resize.
*
* NOTE: Ownerless [UiComponents]{@link enyo.UiComponent} will not be garbage collected unless 
* explicitly destroyed, as they will be referenced by `enyo.master`.
*
* @private
*/
var master = module.exports = new Component({
	name: 'master',
	notInstanceOwner: true,
	eventFlags: {showingOnly: true}, // don't waterfall these events into hidden controls
	getId: function () {
		return '';
	},
	isDescendantOf: utils.nop,
	bubble: function (nom, event) {
		//enyo.log('master event: ' + nom);
		if (nom == 'onresize') {
			// Resize is special; waterfall this message.
			// This works because master is a Component, so it waterfalls
			// to its owned Components (i.e., master has no children).
			master.waterfallDown('onresize', this.eventFlags);
			master.waterfallDown('onpostresize', this.eventFlags);
		} else {
			// All other top-level events are sent only to interested Signal
			// receivers.
			Signals.send(nom, event);
		}
	}
});
},{"../../enyo":12,"./Component":23,"./Signals":68,"./utils":106}],57:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	Filter = require('./Filter'),
	ModelList = require('./ModelList');

/**
* A primarily abstract {@glossary kind} of {@link enyo.Filter}. It serves the simple purpose
* of taking a [collection]{@link enyo.Collection} of [models]{@link enyo.Model} and
* progressively filtering its contents each time it is triggered. Because this is primarily
* an abstract kind, it makes no assumptions about how it is triggered.
* [Subkinds]{@glossary subkind} may provide a more defined API.
*
* @class enyo.ProgressiveFilter
* @extends enyo.Filter
* @public
*/
var ProgressiveFilter = module.exports = kind(
	/** @lends enyo.ProgressiveFilter.prototype */ {
	
	name: 'enyo.ProgressiveFilter',
	
	/**
	* @private
	*/
	kind: Filter,
	
	/**
	* @private
	*/
	defaultProps: {
		kind: null
	},
	
	/**
	* Whether or not the content is currently filtered.
	*
	* @type Boolean
	* @default false
	* @public
	*/
	filtered: false,
	
	/**
	* Resets the filtered set to the complete set of the proxied
	* [collection]{@link enyo.Collection}, if there is one, and sets the
	* [filtered]{@link enyo.ProgressiveFilter#filtered} property to `false`.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	reset: function () {
		if (this.collection) {
			
			// because we can't be certain that the models were completely replaced on the
			// the collection we have to make a new copy each time reset is called
			this._internal.set('models', this.collection.models.copy());
		}
		this.set('filtered', false);
		return this;
	},
	
	/**
	* An overloaded version of the normal [filter()]{@link enyo.Collection#filter} method.
	* This method may be called without parameters to trigger an in-place application of
	* the [_filter()]{@link enyo.ProgressiveFilter#_filter} method against the current set
	* or subset of [models]{@link enyo.Model}.
	*
	* @method
	* @public
	*/
	filter: kind.inherit(function (sup) {
		return function () {
			if (arguments.length > 0) return sup.apply(this, arguments);
			
			return this._filter();
		};
	}),
	
	/**
	* @method
	* @private
	*/
	collectionChanged: kind.inherit(function (sup) {
		return function (was, is) {
			sup.apply(this, arguments);
			
			// this ensures we aren't filtered anymore
			this.set('filtered', false);
		};
	}),
	
	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			
			// we need to always proxy a single targets content so, unlike bucket filters
			// we facade our 'models' as our internal collection
			this.models = this._internal;
		};
	}),
	
	/**
	* Abstracted to allow (internal) subkinds to overload the filter method and still call
	* this method for the same behavior if necessary.
	*
	* @private
	*/
	_filter: function () {
		var internal = this._internal,
			len = internal.length,
			res;
		
		if (len) {
			
			// skip one arbitrary level of abstraction to the lowest level implementation of
			// the filter that we can since we need an array that we can reuse anyway
			res = internal.models.filter(this.method, this);
			
			if (res.length != len) {
				internal.set('models', new ModelList(res.length ? res : null));
				this.set('filtered', true);
			}
		}
		
		return res || [];
	},
	
	/**
	* @private
	*/
	_internalEvent: function (sender, e, props) {
		
		// if our internal collection is what we are currently proxying then we need to
		// propagate the event, otherwise not
		if (this.models === sender) {
			
			if (sender.models.length != this.length) this.set('length', sender.models.length);
			
			this.emit(e, props);
		}
	},
	
	/*
	* See the comments on {@link enyo.Filter#_collectionEvent}.
	* 
	* @private
	*/
	_ownerEvent: function (sender, e, props) {
		this._collectionEvent(sender, e, props);
	},
	
	/**
	* This method is invoked when events are received from a
	* [collection]{@link enyo.Collection} that is not the owner of this
	* [filter]{@link enyo.Filter} (meaning it is not a child, since all child-filters'
	* owners are also filters and their event handling happens in another method).
	* As long as we are consistent about applying the same action against ourselves,
	* we should remain in sync and propagate the same event again, except that
	* `sort` will end up being a `reset`.
	* 
	* @private
	*/
	_collectionEvent: function (sender, e, props) {
		// we are listening for particular events to signal that we should update according
		// to its changes if we are a nested filter
		
		var models = props.models,
			internal = this._internal,
			filtered = this.get('filtered');
		
		switch (e) {
		case 'add':
			// to preserve the efficacy of the abstracted internal _filter method we need
			// to go ahead and allow all of the models to be added at the correct location
			// and then, if necessary filter but only emit events/changes for those that
			// are actually added
			if (filtered) internal.silence().stopNotifications(true);
			
			internal.add(models, {merge: false, index: props.index});
			
			if (filtered) {
				// here we let it update the filtered set
				internal.unsilence().startNotifications(true);
				this.filter();
				
				// there is the off-chance that the lengths don't get updated correctly
				if (this.length !== internal.length) this.set('length', internal.length);
			}
			break;
		case 'reset':
		case 'sort':
			
			if (filtered) internal.silence().stopNotifications(true);
			
			// will ensure a reset gets propagated
			internal.empty(models);
			
			if (filtered) {
				internal.unsilence().startNotifications(true);
				this.filter();
				
				// there is the off-chance that the lengths don't get updated correctly
				if (this.length !== internal.length) this.set('length', internal.length);
			}
			break;
		case 'remove':
			
			// will ensure a remove gets propagated (assuming something is removed)
			internal.remove(models);
			break;
		case 'change':
			
			// we only want to emit the event if the model exists in the filtered set
			// (if filtered)
			if (filtered && !internal.has(props.model)) break; 
			
			// we need to propagate the change event as our internal collection's own so that
			// child filters and/or subclasses will be able to handle this as they need to
			internal.emit(e, props);
			break;
		}
	}
	
});

// by default, only other ProgressiveFilters can be children of ProgressiveFilters
ProgressiveFilter.prototype.defaultProps.kind = ProgressiveFilter;
},{"../../enyo":12,"./Filter":35,"./ModelList":49,"./kind":96}],80:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	master = require('./master');

var
	Component = require('./Component');

/**
* {@link enyo.UiComponent} implements a container strategy suitable for presentation layers.
* 
* `UiComponent` itself is abstract. Concrete [subkinds]{@glossary subkind} include
* {@link enyo.Control} (for HTML/DOM) and
* {@link enyo.canvas.Control} (for Canvas contexts).
*
* @class enyo.UiComponent
* @extends enyo.Component
* @public
*/
var UiComponent = module.exports = kind(
	/** @lends enyo.UiComponent.prototype */ {

	name: 'enyo.UiComponent',

	/**
	* @private
	*/
	kind: Component,

	/**
	* @private
	*/
	published: 
		/** @lends  enyo.UiComponent.prototype */ {

		/** 
		* The [UiComponent]{@link enyo.UiComponent} that physically contains this 
		* [component]{@link enyo.Component} in the DOM.
		*
		* @type {enyo.UiComponent}
		* @default null
		* @public
		*/
		container: null,

		/**
		* The [UiComponent]{@link enyo.UiComponent} that owns this
		* [component]{@link enyo.Component} for purposes of {@glossary event}
		* propagation.
		*
		* @type {enyo.UiComponent}
		* @default null
		* @public
		*/
		parent: null,

		/**
		* The [UiComponent]{@link enyo.UiComponent} that will physically contain new items added
		* by calls to [createComponent()]{@link enyo.UiComponent#createComponent}.
		*
		* @type {String}
		* @default 'client'
		* @public
		*/
		controlParentName: 'client',
		
		/** 
		* A [kind]{@glossary kind} used to manage the size and placement of child 
		* [components]{@link enyo.Component}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		layoutKind: ''
	},

	/**
	* @private
	*/
	handlers: {
		onresize: 'handleResize'
	},

	/**
	* When set, provides a [control]{@link enyo.Control} reference used to indicate where a
	* newly-created [component]{@link enyo.Component} should be added in the
	* [UiComponent's]{@link enyo.UiComponent} [array]{@glossary Array} of children. This is
	* typically used when creating children dynamically (rather than at design time). If set
	* to `null`, the new control will be added at the beginning of the array; if set to a
	* specific existing control, the new control will be added before the specified
	* control. If left as `undefined`, the default behavior is to add the new control
	* at the end of the array.
	*
	* @type {enyo.Control}
	* @default undefined
	* @public
	*/
	addBefore: undefined,
	
	/**
	* @private
	*/
	protectedStatics: {
		_resizeFlags: {showingOnly: true} // don't waterfall these events into hidden controls
	},

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			this.controls = this.controls || [];
			this.children = this.children || [];
			this.containerChanged();
			sup.apply(this, arguments);
			this.layoutKindChanged();
		};
	}),

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			// Destroys all non-chrome controls (regardless of owner).
			this.destroyClientControls();
			// Removes us from our container.
			this.setContainer(null);
			// Destroys chrome controls owned by this.
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	importProps: kind.inherit(function (sup) {
		return function(inProps) {
			sup.apply(this, arguments);
			if (!this.owner) {
				this.owner = master;
			}
		};
	}),

	/**
	* Creates [components]{@link enyo.Component} as defined by the [arrays]{@glossary Array}
	* of base and additional property [hashes]{@glossary Object}. The standard and 
	* additional property hashes are combined as described in
	* {@link enyo.Component#createComponent}.
	* 
	* ```
	* // ask foo to create components 'bar' and 'zot', but set the owner of
	* // both components to 'this'.
	* this.$.foo.createComponents([
	*	{name: 'bar'},
	*	{name: 'zot'}
	* ], {owner: this});
	* ```
	*
	* As implemented, [controlParentName]{@link enyo.UiComponent#controlParentName} only works
	* to identify an owned control created via `createComponents()`
	* (i.e., usually in our `components` block). To attach a `controlParent` via other means, 
	* one must call [discoverControlParent()]{@link enyo.UiComponent#discoverControlParent} or 
	* set `controlParent` directly.
	* 
	* We could call `discoverControlParent()` in
	* [addComponent()]{@link enyo.Component#addComponent}, but that would
	* cause a lot of useless checking.
	* 
	* @param {Object[]} props The array of {@link enyo.Component} definitions to be created.
	* @param {Object} ext - Additional properties to be supplied as defaults for each.
	* @returns {enyo.Component[]} The array of components that were created.
	* @method
	* @public
	*/
	// 
	createComponents: kind.inherit(function (sup) {
		return function() {
			var results = sup.apply(this, arguments);
			this.discoverControlParent();
			return results;
		};
	}),

	/**
	* Determines and sets the current [control's]{@link enyo.Control} parent.
	*
	* @protected
	*/
	discoverControlParent: function () {
		this.controlParent = this.$[this.controlParentName] || this.controlParent;
	},

	/**
	* @method
	* @private
	*/
	adjustComponentProps: kind.inherit(function (sup) {
		return function(inProps) {
			// Components we create have us as a container by default.
			inProps.container = inProps.container || this;
			sup.apply(this, arguments);
		};
	}),

	/**
	* Containment
	* 
	* @method
	* @private
	*/
	containerChanged: function (container) {
		if (container) {
			container.removeControl(this);
		}
		if (this.container) {
			this.container.addControl(this, this.addBefore);
		}
	},

	/**
	* Parentage
	* 
	* @method
	* @private
	*/
	parentChanged: function (oldParent) {
		if (oldParent && oldParent != this.parent) {
			oldParent.removeChild(this);
		}
	},

	/**
	* Determines whether the [control]{@link enyo.Control} is a descendant of
	* another control.
	* 
	* Note: Oddly, a control is considered to be a descendant of itself.
	*
	* @param {enyo.Control} ancestor - The [control]{@link enyo.Control} whose lineage
	*	will be checked to determine whether the current control is a descendant.
	* @public
	*/
	isDescendantOf: function (ancestor) {
		var p = this;
		while (p && p!=ancestor) {
			p = p.parent;
		}
		return ancestor && (p === ancestor);
	},

	/**
	* Returns all controls.
	*
	* @returns {enyo.Control[]} An [array]{@glossary Array} of [controls]{@link enyo.Control}.
	* @public
	*/
	getControls: function () {
		return this.controls;
	},

	/**
	* Returns all non-chrome controls.
	*
	* @returns {enyo.Control[]} An [array]{@glossary Array} of [controls]{@link enyo.Control}.
	* @public
	*/
	getClientControls: function () {
		var results = [];
		for (var i=0, cs=this.controls, c; (c=cs[i]); i++) {
			if (!c.isChrome) {
				results.push(c);
			}
		}
		return results;
	},

	/**
	* Destroys "client controls", the same set of [controls]{@link enyo.Control} returned by 
	* [getClientControls()]{@link enyo.UiComponent#getClientControls}.
	*
	* @public
	*/
	destroyClientControls: function () {
		var c$ = this.getClientControls();
		for (var i=0, c; (c=c$[i]); i++) {
			c.destroy();
		}
	},
	
	/**
	* @private
	*/
	addControl: function (ctl, before) {
		// Called to add an already created control to the object's control list. It is
		// not used to create controls and should likely not be called directly.
		// It can be overridden to detect when controls are added.
		if (before !== undefined) {
			var idx = (before === null) ? 0 : this.indexOfControl(before);
			this.controls.splice(idx, 0, ctl);
		} else {
			this.controls.push(ctl);
		}
		// When we add a Control, we also establish a parent.
		this.addChild(ctl, before);
	},

	/**
	* @private
	*/
	removeControl: function (ctl) {
		// Called to remove a control from the object's control list. As with addControl it
		// can be overridden to detect when controls are removed.
		// When we remove a Control, we also remove it from its parent.
		ctl.setParent(null);
		return utils.remove(ctl, this.controls);
	},

	/**
	* @private
	*/
	indexOfControl: function (ctl) {
		return utils.indexOf(ctl, this.controls);
	},

	/**
	* @private
	*/
	indexOfClientControl: function (ctl) {
		return utils.indexOf(ctl, this.getClientControls());
	},

	/**
	* @private
	*/
	indexInContainer: function () {
		return this.container.indexOfControl(this);
	},

	/**
	* @private
	*/
	clientIndexInContainer: function () {
		return this.container.indexOfClientControl(this);
	},

	/**
	* @private
	*/
	controlAtIndex: function (idx) {
		return this.controls[idx];
	},
	
	/**
	* Determines what the following sibling [control]{@link enyo.Control} is for the current
	* [control]{@link enyo.Control}.
	*
	* @returns {enyo.Control | null} The [control]{@link enyo.Control} that is the] following
	*	sibling. If no following sibling exists, we return `null`.
	* @public
	*/
	getNextControl: function () {
		var comps = this.getParent().children,
			comp,
			sibling,
			i;
	
		for (i = comps.length - 1; i >= 0; i--) {
			comp = comps[i];
			if (comp === this) return sibling ? sibling : null;
			if (comp.generated) sibling = comp;
		}
	
		return null;
	},
	
	/**
	* Children
	* 
	* @private
	*/
	addChild: function (child, before) {
		// if before is undefined, add to the end of the child list.
		// If it's null, add to front of list, otherwise add before the
		// specified control.
		//
		// allow delegating the child to a different container
		if (this.controlParent /*&& !child.isChrome*/) {
			// this.controlParent might have a controlParent, and so on; seek the ultimate parent
			this.controlParent.addChild(child, before);
		} else {
			// NOTE: addChild drives setParent.
			// It's the opposite for setContainer, where containerChanged (in Containable)
			// drives addControl.
			// Because of the way 'parent' is derived from 'container', this difference is
			// helpful for implementing controlParent.
			// By the same token, since 'parent' is derived from 'container', setParent is
			// not intended to be called by client code. Therefore, the lack of parallelism
			// should be private to this implementation.
			// Set the child's parent property to this
			child.setParent(this);
			// track in children array
			if (before !== undefined) {
				var idx = (before === null) ? 0 : this.indexOfChild(before);
				this.children.splice(idx, 0, child);
			} else {
				this.children.push(child);
			}
		}
	},

	/**
	* @private
	*/
	removeChild: function (child) {
		return utils.remove(child, this.children);
	},

	/**
	* @private
	*/
	indexOfChild: function (child) {
		return utils.indexOf(child, this.children);
	},

	/**
	* @private
	*/
	layoutKindChanged: function () {
		if (this.layout) {
			this.layout.destroy();
		}
		this.layout = kind.createFromKind(this.layoutKind, this);
		if (this.generated) {
			this.render();
		}
	},

	/**
	* @private
	*/
	flow: function () {
		if (this.layout) {
			this.layout.flow();
		}
	},

	/**
	* CAVEAT: currently we use the entry point for both post-render layout work *and* 
	* post-resize layout work.
	* @private
	*/
	reflow: function () {
		if (this.layout) {
			this.layout.reflow();
		}
	},

	/**
	* Call after this [control]{@link enyo.Control} has been resized to allow it to process the 
	* size change. To respond to a resize, override `handleResize()` instead. Acts as syntactic 
	* sugar for `waterfall('onresize')`.
	* 
	* @public
	*/
	resize: function () {
		this.waterfall('onresize', UiComponent._resizeFlags);
		this.waterfall('onpostresize', UiComponent._resizeFlags);
	},
	
	/**
	* @private
	*/
	handleResize: function () {
		// FIXME: once we are in the business of reflowing layouts on resize, then we have an
		// inside/outside problem: some scenarios will need to reflow before child
		// controls reflow, and some will need to reflow after. Even more complex scenarios
		// have circular dependencies, and can require multiple passes or other resolution.
		// When we can rely on CSS to manage reflows we do not have these problems.
		this.reflow();
	},

	/**
	* Sends a message to all of my descendants, but not myself. You can stop a
	* [waterfall]{@link enyo.Component#waterfall} into [components]{@link enyo.Component}
	* owned by a receiving [object]{@glossary Object} by returning a truthy value from the
	* {@glossary event} [handler]{@link enyo.Component~EventHandler}.
	* 
	* @param {String} nom - The name of the {@glossary event}.
	* @param {Object} [event] - The event object to pass along.
	* @param {enyo.Component} [sender=this] - The event's originator.
	* @returns {this} The callee for chaining.
	* @public
	*/
	waterfallDown: function (nom, event, sender) {
		event = event || {};
		// Note: Controls will generally be both in a $ hash and a child list somewhere.
		// Attempt to avoid duplicated messages by sending only to components that are not
		// UiComponent, as those components are guaranteed not to be in a child list.
		// May cause a problem if there is a scenario where a UiComponent owns a pure
		// Component that in turn owns Controls.
		//
		// waterfall to all pure components
		for (var n in this.$) {
			if (!(this.$[n] instanceof UiComponent)) {
				this.$[n].waterfall(nom, event, sender);
			}
		}
		// waterfall to my children
		for (var i=0, cs=this.children, c; (c=cs[i]); i++) {
			// Do not send {showingOnly: true} events to hidden controls. This flag is set for resize events
			// which are broadcast from within the framework. This saves a *lot* of unnecessary layout.
			// TODO: Maybe remember that we did this, and re-send those messages on setShowing(true)?
			// No obvious problems with it as-is, though
			if (c.showing || !(event && event.showingOnly)) {
				c.waterfall(nom, event, sender);
			}
		}
	},

	/**
	* @private
	*/
	getBubbleTarget: function (nom, event) {
		if (event.delegate) return this.owner;
		else {
			return (
				this.bubbleTarget
				|| (this.cachedBubble && this.cachedBubbleTarget[nom])
				|| this.parent
				|| this.owner
			);
		}
	}
});
},{"../../enyo":12,"./Component":23,"./kind":96,"./master":98,"./utils":106}],86:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	logger = require('./logger'),
	master = require('./master'),
	utils = require('./utils'),
	platform = require('./platform');

var
	Dom = require('./dom');

/**
 * An [object]{@glossary Object} describing the the last known coordinates of the cursor or
 * user-interaction point in touch environments.
 *
 * @typedef {Object} enyo.dispatcher~CursorCoordinates
 * @property {Number} clientX - The horizontal coordinate within the application's client area.
 * @property {Number} clientY - The vertical coordinate within the application's client area.
 * @property {Number} pageX - The X coordinate of the cursor relative to the viewport, including any
 *   scroll offset.
 * @property {Number} pageY - The Y coordinate of the cursor relative to the viewport, including any
 *   scroll offset.
 * @property {Number} screenX - The X coordinate of the cursor relative to the screen, not including
 *   any scroll offset.
 * @property {Number} screenY - The Y coordinate of the cursor relative to the screen, not including
 *   any scroll offset.
 */

/**
* @private
*/

/**
* @private
*/
var dispatcher = module.exports = dispatcher =
	/** @lends enyo.dispatcher.prototype */ {

	$: {},

	/**
	* These events come from document
	*
	* @private
	*/
	events: ["mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "mousewheel",
		"click", "dblclick", "change", "keydown", "keyup", "keypress", "input",
		"paste", "copy", "cut", "webkitTransitionEnd", "transitionend", "webkitAnimationEnd", "animationend",
		"webkitAnimationStart", "animationstart", "webkitAnimationIteration", "animationiteration"],

	/**
	* These events come from window
	*
	* @private
	*/
	windowEvents: ["resize", "load", "unload", "message", "hashchange", "popstate", "focus", "blur"],

	/**
	* Feature plugins (aka filters)
	*
	* @private
	*/
	features: [],

	/**
	* @private
	*/
	connect: function() {
		var d = dispatcher, i, n;
		for (i=0; (n=d.events[i]); i++) {
			d.listen(document, n);
		}
		for (i=0; (n=d.windowEvents[i]); i++) {
			// Chrome Packaged Apps don't like "unload"
			if(n === "unload" &&
				(typeof global.chrome === "object") &&
				global.chrome.app) {
				continue;
			}

			d.listen(window, n);
		}
	},

	/**
	* @private
	*/
	listen: function(inListener, inEventName, inHandler) {
		if (inListener.addEventListener) {
			this.listen = function(inListener, inEventName, inHandler) {
				inListener.addEventListener(inEventName, inHandler || dispatch, false);
			};
		} else {
			//enyo.log("IE8 COMPAT: using 'attachEvent'");
			this.listen = function(inListener, inEvent, inHandler) {
				inListener.attachEvent("on" + inEvent, function(e) {
					e.target = e.srcElement;
					if (!e.preventDefault) {
						e.preventDefault = this.iePreventDefault;
					}
					return (inHandler || dispatch)(e);
				});
			};
		}
		this.listen(inListener, inEventName, inHandler);
	},

	/**
	* @private
	*/
	stopListening: function(inListener, inEventName, inHandler) {
		if (inListener.addEventListener) {
			this.stopListening = function(inListener, inEventName, inHandler) {
				inListener.removeEventListener(inEventName, inHandler || dispatch, false);
			};
		} else {
			//enyo.log("IE8 COMPAT: using 'detachEvent'");
			this.stopListening = function(inListener, inEvent, inHandler) {
				inListener.detachEvent("on" + inEvent, inHandler || dispatch);
			};
		}
		this.stopListening(inListener, inEventName, inHandler);
	},

	/**
	* Fires an event for Enyo to listen for.
	*
	* @private
	*/
	dispatch: function(e) {
		// Find the control who maps to e.target, or the first control that maps to an ancestor of e.target.
		var c = this.findDispatchTarget(e.target) || this.findDefaultTarget();
		// Cache the original target
		e.dispatchTarget = c;
		// support pluggable features return true to abort immediately or set e.preventDispatch to avoid processing.
		for (var i=0, fn; (fn=this.features[i]); i++) {
			if (fn.call(this, e) === true) {
				return;
			}
		}
		if (c && !e.preventDispatch) {
			return this.dispatchBubble(e, c);
		}
	},

	/**
	* Takes an event target and finds the corresponding Enyo control.
	*
	* @private
	*/
	findDispatchTarget: function(inNode) {
		var t, n = inNode;
		// FIXME: Mozilla: try/catch is here to squelch "Permission denied to access property xxx from a non-chrome context"
		// which appears to happen for scrollbar nodes in particular. It's unclear why those nodes are valid targets if
		// it is illegal to interrogate them. Would like to trap the bad nodes explicitly rather than using an exception block.
		try {
			while (n) {
				if ((t = this.$[n.id])) {
					// there could be multiple nodes with this id, the relevant node for this event is n
					// we don't push this directly to t.node because sometimes we are just asking what
					// the target 'would be' (aka, calling findDispatchTarget from handleMouseOverOut)
					t.eventNode = n;
					break;
				}
				n = n.parentNode;
			}
		} catch(x) {
			logger.log(x, n);
		}
		return t;
	},

	/**
	* Returns the default Enyo control for events.
	*
	* @private
	*/
	findDefaultTarget: function() {
		return master;
	},

	/**
	* @private
	*/
	dispatchBubble: function(e, c) {
		var type = e.type;
		type = e.customEvent ? type : "on" + type;
		return c.bubble(type, e, c);
	}
};

/**
* Called in the context of an event.
*
* @private
*/
dispatcher.iePreventDefault = function() {
	try {
		this.returnValue = false;
	}
	catch(e) {
		// do nothing
	}
};

/**
* @private
*/
function dispatch (inEvent) {
	return dispatcher.dispatch(inEvent);
}

/**
* @private
*/
dispatcher.bubble = function(inEvent) {
	// '|| window.event' clause needed for IE8
	var e = inEvent || global.event;
	if (e) {
		// We depend on e.target existing for event tracking and dispatching.
		if (!e.target) {
			e.target = e.srcElement;
		}
		dispatcher.dispatch(e);
	}
};

// This string is set on event handlers attributes for DOM elements that
// don't normally bubble (like onscroll) so that they can participate in the
// Enyo event system.
dispatcher.bubbler = "enyo.bubble(arguments[0])";

// The code below helps make Enyo compatible with Google Packaged Apps
// Content Security Policy(http://developer.chrome.com/extensions/contentSecurityPolicy.html),
// which, among other things, forbids the use of inline scripts.
// We replace online scripting with equivalent means, leaving enyo.bubbler
// for backward compatibility.
(function() {
	var bubbleUp = function() {
		dispatcher.bubble(arguments[0]);
	};

	/**
	* Makes given events bubble on a specified Enyo control.
	*
	* @private
	*/
	dispatcher.makeBubble = function() {
		var args = Array.prototype.slice.call(arguments, 0),
			control = args.shift();

		if((typeof control === "object") && (typeof control.hasNode === "function")) {
			utils.forEach(args, function(event) {
				if(this.hasNode()) {
					dispatcher.listen(this.node, event, bubbleUp);
				}
			}, control);
		}
	};

	/**
	* Removes the event listening and bubbling initiated by
	* [enyo.makeBubble()]{@link enyo.makeBubble} on a specific control.
	*
	* @private
	*/
	dispatcher.unmakeBubble = function() {
		var args = Array.prototype.slice.call(arguments, 0),
			control = args.shift();

		if((typeof control === "object") && (typeof control.hasNode === "function")) {
			utils.forEach(args, function(event) {
				if(this.hasNode()) {
					dispatcher.stopListening(this.node, event, bubbleUp);
				}
			}, control);
		}
	};
})();

/**
* @private
*/
// FIXME: we need to create and initialize dispatcher someplace else to allow overrides
Dom.requiresWindow(dispatcher.connect);

/**
* Generates a tapped event for a raw-click event.
*
* @private
*/
dispatcher.features.push(
	function (e) {
		if ("click" === e.type) {
			if (e.clientX === 0 && e.clientY === 0 && !e.detail) {
				// this allows the click to dispatch as well
				// but note the tap event will fire first
				var cp = utils.clone(e);
				cp.type = "tap";
				cp.preventDefault = utils.nop;
				dispatcher.dispatch(cp);
			}
		}
	}
);

/**
* Instead of having multiple `features` pushed and handled in separate methods
* for these events, we handle them uniformly here to expose the last known
* interaction coordinates as accurately as possible.
*
* @private
*/
var _xy = {};
dispatcher.features.push(
	function (e) {
		if (
			(e.type == "mousemove")  ||
			(e.type == "tap")        ||
			(e.type == "click")      ||
			(e.type == "touchmove")
		) {
			_xy.clientX = e.clientX;
			_xy.clientY = e.clientY;
			// note only ie8 does not support pageX/pageY
			_xy.pageX   = e.pageX;
			_xy.pageY   = e.pageY;
			// note ie8 and opera report these values incorrectly
			_xy.screenX = e.screenX;
			_xy.screenY = e.screenY;
		}
	}
);

/**
* Retrieves the last known coordinates of the cursor or user-interaction point
* in touch environments. Returns an immutable object with the `clientX`,
* `clientY`, `pageX`, `pageY`, `screenX`, and `screenY` properties. It is
* important to note that IE8 and Opera have improper reporting for the
* `screenX` and `screenY` properties (they both use CSS pixels as opposed to
* device pixels) and IE8 has no support for the `pageX` and `pageY` properties,
* so they are facaded.
*
* @returns {enyo.dispatcher~CursorCoordinates} An [object]{@glossary Object} describing the
*	the last known coordinates of the cursor or user-interaction point in touch environments.
* @public
*/
dispatcher.getPosition = function () {
	var p = utils.clone(_xy);
	// if we are in ie8 we facade the _pageX, pageY_ properties
	if (platform.ie < 9) {
		var d = (document.documentElement || document.body.parentNode || document.body);
		p.pageX = (p.clientX + d.scrollLeft);
		p.pageY = (p.clientY + d.scrollTop);
	}
	return p;
};


/**
* Key mapping feature: Adds a `keySymbol` property to key [events]{@glossary event},
* based on a global key mapping. Use
* [enyo.dispatcher.registerKeyMap()]{@link enyo.dispatcher.registerKeyMap} to add
* keyCode-to-keySymbol mappings via a simple hash. This method may be called
* multiple times from different libraries to mix different maps into the global
* mapping table; if conflicts arise, the last-in wins.
*
* ```
* enyo.dispatcher.registerKeyMap({
* 	415 : 'play',
* 	413 : 'stop',
* 	19  : 'pause',
* 	412 : 'rewind',
* 	417 : 'fastforward'
* });
* ```
* 
* @private
*/
dispatcher.features.push(function(e) {
	if ((e.type === 'keydown') || (e.type === 'keyup') || (e.type === 'keypress')) {
		e.keySymbol = this.keyMap[e.keyCode];
		// Dispatch key events to be sent via Signals
		var c = this.findDefaultTarget();
		if (e.dispatchTarget !== c) {
			this.dispatchBubble(e, c);
		}
	}
});

utils.mixin(dispatcher, {
	keyMap: {},
	registerKeyMap: function(map) {
		utils.mixin(this.keyMap, map);
	}
});


/**
* Event modal capture feature. Capture events to a specific control via
* [enyo.dispatcher.capture(inControl, inShouldForward)]{@linkcode enyo.dispatcher.capture};
* release events via [enyo.dispatcher.release()]{@link enyo.dispatcher.release}.
*
* @private
*/
dispatcher.features.push(function(e) {
	if (this.captureTarget) {
		var c = e.dispatchTarget;
		var eventName = (e.customEvent ? '' : 'on') + e.type;
		var handlerName = this.captureEvents[eventName];
		var handlerScope = this.captureHandlerScope || this.captureTarget;
		var handler = handlerName && handlerScope[handlerName];
		var shouldCapture = handler && !(c && c.isDescendantOf && c.isDescendantOf(this.captureTarget));
		if (shouldCapture) {
			var c1 = e.captureTarget = this.captureTarget;
			// NOTE: We do not want releasing capture while an event is being processed to alter
			// the way the event propagates. Therefore decide if the event should forward
			// before the capture target receives the event (since it may release capture).
			e.preventDispatch = handler && handler.apply(handlerScope, [c1, e]) && !this.autoForwardEvents[e.type];
		}
	}
});

//
//        NOTE: This object is a plug-in; these methods should
//        be called on `enyo.dispatcher`, and not on the plug-in itself.
//
utils.mixin(dispatcher, {

	/**
	* @private
	*/
	autoForwardEvents: {leave: 1, resize: 1},

	/**
	* @private
	*/
	captures: [],

	/** 
	* Captures [events]{@glossary event} for `inTarget`, where `inEvents` is specified as a
	* hash of event names mapped to callback handler names to be called on `inTarget` (or,
	* optionally, `inScope`). The callback is called when any of the captured events are
	* dispatched outside of the capturing control. Returning `true` from the callback stops
	* dispatch of the event to the original `dispatchTarget`.
	*
	* @private
	*/
	capture: function(inTarget, inEvents, inScope) {
		var info = {target: inTarget, events: inEvents, scope: inScope};
		this.captures.push(info);
		this.setCaptureInfo(info);
	},

	/**
	* Removes the specified target from the capture list.
	* 
	* @private
	*/
	release: function(inTarget) {
		for (var i = this.captures.length - 1; i >= 0; i--) {
			if (this.captures[i].target === inTarget) {
				this.captures.splice(i,1);
				this.setCaptureInfo(this.captures[this.captures.length-1]);
				break;
			}
		}
	},

	/**
	* Sets the information for a captured {@glossary event}.
	* 
	* @private
	*/
	setCaptureInfo: function(inInfo) {
		this.captureTarget = inInfo && inInfo.target;
		this.captureEvents = inInfo && inInfo.events;
		this.captureHandlerScope = inInfo && inInfo.scope;
	}
});


(function () {
	/**
	* Dispatcher preview feature
	* 
	* Allows {@link enyo.Control} ancestors of the {@glossary event} target
	* a chance (eldest first) to react by implementing `previewDomEvent`.
	*
	* @private
	*/
	var fn = 'previewDomEvent';
	var preview = 
		/** @lends enyo.dispatcher.features */ {

		/**
		* @private
		*/
		feature: function(e) {
			preview.dispatch(e, e.dispatchTarget);
		},

		/**
		* @returns {(Boolean|undefined)} Handlers return `true` to abort preview and prevent default
		*	event processing.
		*
		* @private
		*/
		dispatch: function(evt, control) {
			var i, l,
			lineage = this.buildLineage(control);
			for (i=0; (l=lineage[i]); i++) {
				if (l[fn] && l[fn](evt) === true) {
					evt.preventDispatch = true;
					return;
				}
			}
		},

		/**
		* We ascend, making a list of Enyo [controls]{@link enyo.Control}.
		*
		* Note that a control is considered to be its own ancestor.
		*
		* @private
		*/
		buildLineage: function(control) {
			var lineage = [],
				c = control;
			while (c) {
				lineage.unshift(c);
				c = c.parent;
			}
			return lineage;
		}
	};

	dispatcher.features.push(preview.feature);
})();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./dom":87,"./logger":97,"./master":98,"./platform":102,"./utils":106}],61:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	ready = require('./ready'),
	dispatcher = require('./dispatcher');

var
	Controller = require('./Controller');

/**
* Any instance of a router will be referenced here for the global hash change handler.
* 
* @private
*/
var listeners = [];

/**
* This is the intended global `window.hashchange` event handler. If another handler is
* arbitrarily registered for this event, then it will not fire.
* 
* @private
*/
var hashDidChange = function (hash) {
	var list = listeners;
	var len = list.length;
	var idx = 0;
	for (; idx < len; ++idx) {
		list[idx]._hashChanged(hash);
	}
};

/*
* @private
*/
var token = /\:[a-zA-Z0-9]*/g;

/*
* @private
*/
var prepare = function (str) {
	return str[0] === '#'? str.slice(1): str;
};

/**
* All of our actively-supported browsers support this method of registering
* for `hashchange` events.
* 
* @private
*/
ready(function () {
	dispatcher.listen(global, 'hashchange', hashDidChange);
});

/**
* {@link enyo.Router} is a controller with the ability to interpret changes in
* the URL and make changes to the URL in a manner that is compatible across
* browsers. With defined route handling, the application state can be managed
* more closely with respect to the location state of the browser. There may be
* multiple router instances active at any one time. Routers only interact with
* the hash portion of the browser location and will not force a reload of the
* current page.
*
* [Routes]{@link enyo.Router#routes} may be defined in several ways and
* may be added at startup or [added programmatically]{@link enyo.Router#addRoute}
* at a later time.
*
* A route is a declarative hash with the following structure:
*
* ```
* {path: 'some/path', handler: 'function', context: 'context'}
* ```
*
* The `path` is a string that may be static (explicitly matched) or dynamic
* (matched based on dynamic placeholders). Dynamic paths may name elements to
* be matched, e.g.:
*
* ```
* {path: ':user/:id'}
* ```
*
* In this case, `handler` would be called with two parameters filled with
* the values matched by that structure. It is important to note that a dynamic
* route will apply the first match it finds, so care must be taken to ensure
* that the correct route is matched (e.g., `/users/:user/:id` is more exact
* because it includes the static `users` portion of the path).
*
* `handler` may be a function reference or a string that will be mapped to a
* function. A check for the function's existence is conducted first on the
* router, then on any provided context, and finally in the global scope. If a
* context is provided, the function will be executed under that context
* regardless of where the function was found.
*
* The `context` property may be an object, an instance, or a string that will
* be mapped to an object, if possible.
*
* Note that, currently, only letters and numbers are supported in dynamic routes.
* 
* @class enyo.Router
* @extends enyo.Controller
* @public
*/
module.exports = kind(
	/** @lends enyo.Router.prototype */ {

	name: 'enyo.Router',

	// ...........................
	// PUBLIC PROPERTIES

	/**
	* If `true`, the router will respond to hash changes or internal events. If this flag is set
	* to `false`, it will stop responding. This may be changed at any time.
	* 
	* @type {Boolean}
	* @default true
	* @public
	*/
	listening: true,

	/**
	* If `true`, the router will neither respond to hash changes in the browser
	* nor be able to trigger them. Instead, the router may be used internally to
	* maintain or trigger state changes in an application without changing
	* location.
	* 
	* @type {Boolean}
	* @default false
	* @public
	*/
	internalOnly: false,

	/**
	* Set this to `true` to force the current browser location to a particular
	* path on startup. This flag will be ignored if
	* [triggerOnStart]{@link enyo.Router#triggerOnStart} is `false`.
	* 
	* @type {Boolean}
	* @default false
	* @public
	*/
	defaultPathOnStart: false,

	/**
	* The `defaultRoute` should have the same structure as a normal route (hash). It may be
	* arbitrarily assigned to this property or mixed into the
	* [routes]{@link enyo.Router#routes} array with a special `default: true` flag set. For
	* any unmatched hash changes, this route will be executed and passed the path that was not
	* matched.
	* 
	* @type {Object}
	* @default null
	* @public
	*/
	defaultRoute: null,

	/**
	* By default, when a router is created, it will attempt to trigger the correct route for the
	* current browser location. Set this flag to `false` to prevent this behavior.
	* 
	* @type {Boolean}
	* @default true
	* @public
	*/
	triggerOnStart: true,

	/**
	* The router will attempt to track history based on the events that have been generated
	* through it. This allows the usage of the browser's 'Back' and 'Forward' buttons.
	* 
	* @type {Boolean}
	* @default false
	* @public
	*/
	useHistory: false,

	/**
	* The `routes` [array]{@glossary Array} specifies the handlers for
	* the current Router instance. Routes are string paths, static or dynamic,
	* that route particular `hashchange` events. They are defined in an array of
	* [hashes]{@glossary Object} with a `handler` (function name), `path`
	* (for static and dynamic paths), an optional `context` (for the `handler`),
	* or a `default` Boolean `true`|`false` value indicating whether the handler
	* should be used when no other route can handle the `hashchange` event.
	* 
	* @example
	* routes: [
	*     {path: 'users/:userName', handler: 'loadUser'},
	*     {path: 'users', handler: 'usersIndex'},
	*     {path: 'about/moreDetail', handler: 'detailedAboutScreen'},
	*     {path: 'about', handler: 'aboutScreen'},
	*     {path: 'home', handler: 'homeScreen', default: true},
	*     {path: '', handler: 'handleBlankRoute'}
	* ]
	* 
	* @type {Array}
	* @public
	*/
	routes: null,

	// ...........................
	// PROTECTED PROPERTIES

	/*
	* @private
	*/
	kind: Controller,

	/*
	* @private
	*/
	_staticRoutes: null,

	/*
	* @private
	*/
	_dynamicRoutes: null,

	/*
	* @private
	*/
	_current: '',

	/*
	* @private
	*/
	_history: null,

	// ...........................
	// COMPUTED PROPERTIES
	
	computed: [
		{method: 'location', path: '_current', config: {cached: true}},
		{method: 'defaultPath'}
	],

	/**
	* A computed property that returns the location as known by this router. This property
	* will be synchronized with [window.location.hash]{@glossary window.location}
	* unless the [internalOnly]{@link enyo.Router#internalOnly} flag is set to `true`.
	* Passing a string to this property via `_set('location', 'mylocation')` will update the
	* inner location known by this router.
	*
	* @public
	*/
	location: function (loc) {
		if (loc) {
			loc = prepare(loc);
			if (!this.internalOnly) {
				utils.asyncMethod(this, 'trigger', {location: loc, change: true});
			} else {
				this.set('_current', loc);
			}
		} else {
			return prepare(this.get('_current'));
		}
	},

	/**
	* Returns the string for the default path, or an empty string if no default
	* path exists.
	*
	* @public
	*/
	defaultPath: function () {
		return this.defaultRoute ? this.defaultRoute.path: '';
	},

	// ...........................
	// PUBLIC METHODS

	/**
	* Triggers a change without necessarily requiring a change to occur. If
	* called without a parameter, it will force the route that matches the
	* current browser location to fire. If a string is passed in, this method
	* will trigger an internal-only event (i.e., the browser location will not
	* be changed). If it is passed a hash, the method will try to use a
	* `location` property while looking for optional `change` and `global`
	* properties.
	*
	* If the `change` property is present and `true`, it will force a
	* [location.hash]{@glossary window.location} change in the
	* browser (this is always global). If the `global` property is present and
	* `true` and `change` is not present or `false`, it will trigger an internal
	* event that all routers will respond to (not just this instance).
	*
	* @public
	*/
	trigger: function (params) {
		if (!params) {
			params = {location: this.get('_current')};
		} else if ('string' === typeof params) {
			params = {location: params};
		}
		var loc = params.location;
		var isGlobal = params.global;
		var change = params.change;
		var current = this.get('location');
		if (change) {
			if (current !== loc) {
				global.location.hash = loc;
			} else {
				this._hashChanged(loc);
			}
		} else {
			if (isGlobal) {
				hashDidChange(loc);
			} else {
				this._hashChanged(loc);
			}
		}
	},

	/**
	* In very rare circumstances, it may be useful to pass a path to the
	* [routes]{@link enyo.Router#routes} without using
	* [trigger()]{@link enyo.Router#trigger} or global hash changes with
	* `path` being a string that will be evaluated against the routes owned by
	* this router.
	*
	* @param {String} path - A path to test against this router's
	*	[routes]{@link enyo.Router#routes}.
	* @public
	*/
	handle: function (path) {
		// fast track is to check against static routes first
		if (this._handleStatic(path)) {
			return;
		}
		// then we check against dynamic paths in this simple scheme
		else if (this._handleDynamic(path)) {
			/* do nothing */
		}
		else {
			this._handleDefault(path);
		}
	},

	/**
	* If history is enabled and some history exists, attempts to revert the
	* current known location to the previous one in the stack.
	*
	* @public
	*/
	back: function () {
		if (this.useHistory) {
			if (this._history.length >= 2) {
				// we shift the current location off the stack
				this._history.shift();
				// we shift the requested location off the stack
				// but reapply it
				this.set('location', this._history.shift());
			}
		}
	},

	/**
	* Arbitrarily adds history. The optional second parameter may be set to a
	* boolean `true` to add the location at the lowest (first) position in the
	* stack, or to an integer indicating the exact position for the location in
	* the stack. If the index is out of bounds, the location will be added at
	* the lowest position (the same as if boolean `true` is passed as the second
	* parameter). Returns callee for chaining.
	*
	* @param {String} location - The location string to add to the history.
	* @param {(Number|Boolean)} [idx] - Position in the history stack where the
	* new location should be added. Pass `true` for the first/oldest position,
	* or a number indicating the index where the location should be added. If no
	* value (or `undefined`) is specified, the location will be added at the
	*	last/most-recent position in the history stack.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addHistory: function (location, idx) {
		if (this.useHistory) {
			switch (typeof idx) {
			case 'undefined':
				this._history.unshift(location);
				break;
			case 'number':
				if (idx >= 0 && idx < this._history.length) {
					this._history.splice(idx, 0, location);
				}
				break;
			case 'boolean':
				this._history.push(location);
				break;
			}
		}
		return this;
	},

	/**
	* Clears any history the router has stored. Returns callee for chaining.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	clearHistory: function () {
		this._history = [];
		return this;
	},

	/**
	* May be used to programmatically add [routes]{@link enyo.Router#routes}
	* to the router. `route` is a hash as described by the
	* [routes]{@link enyo.Router#routes} array. Returns callee for chaining.
	*
	* @param {Object} route - The route to add.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addRoute: function (route) {
		var statics = this._staticRoutes;
		var dynamic = this._dynamicRoutes;
		var regex;
		if (true === route['default']) {
			this.defaultRoute = route;
		}
		else if (token.test(route.path)) {
			token.lastIndex = 0;
			// regex = new RegExp(route.path.replace(token, '([a-zA-Z0-9-]*)'));
			regex = new RegExp(route.path.replace(token, '([a-zA-Z0-9-.]*)'));
			route.regex = regex;
			dynamic.push(route);
		} else {
			statics[route.path] = route;
		}
		return this;
	},

	// ...........................
	// PROTECTED METHODS

	/*
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			this._staticRoutes = {};
			this._dynamicRoutes = [];
			this.routes = this.routes || [];
			this._history = this._history || [];
			sup.apply(this, arguments);
		};
	}),

	/*
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			// make sure to initialize our routes prior
			// to registering for events
			this._setupRoutes();
			// make sure we're up to date
			this.set('_current', prepare(window.location.hash));
			// ok, register for events
			listeners.push(this);
			// ok, if we need to go ahead and route our current
			// location, lets do it, but let create finish first
			if (this.triggerOnStart) {
				if (this.defaultPathOnStart) {
					utils.asyncMethod(this, 'trigger', {change: true, location: this.get('defaultPath')});
				} else {
					utils.asyncMethod(this, 'trigger');

				}
			}
		};
	}),

	/*
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			var idx = utils.indexOf(this, listeners);
			if (!~idx) {
				listeners.splice(idx, 1);
			}
			sup.apply(this, arguments);
		};
	}),

	/*
	* @private
	*/
	_hashChanged: function (hash) {
		var $hash = (function (prop) {
			if (!utils.isString(prop)) {
				// some browsers do not support the newUrl property
				// so we're forced to look at the current hash
				prop = prop.newUrl || global.location.hash;
			}
			return prepare(prop);
		})(hash);
		if (this.listening) {
			this.set('_current', $hash);
			this.handle($hash);
		}
	},

	/*
	* @private
	*/
	_execHandler: function (context, handler, args, route) {
		var $fn = handler;
		var $ctx = 'string' === typeof context? utils.getPath.call(this, context): context;
		// if the handler is defined as a string, we need to determine if it is relative to the
		// router, relative to the owner, relative to the context, or a named function in the
		// global scope
		if ('string' === typeof handler) {
			if (typeof this[handler] === 'function') {
				$fn = this[handler];
				$ctx = $ctx || this;
			} else if (typeof this.owner[handler] === 'function') {
				$fn = this.owner[handler];
				$ctx = $ctx || this.owner;
			} else if (typeof $ctx[handler] === 'function') {
				$fn = $ctx[handler];
			}
			if ('function' === typeof $fn) {
				// in case we actually found it, let's not go hunting
				// next time
				route.handler = $fn;
				route.context = $ctx;
			}
		}
		// if we have an actual handler, let's execute it now
		if ($fn && 'function' === typeof $fn) {
			$fn.apply($ctx, args);
			return true;
		}
		// otherwise we couldn't determine what we were supposed to
		// do here
		return false;
	},

	/*
	* @private
	*/
	_handleStatic: function (path) {
		var statics = this._staticRoutes;
		var route;
		var handler;
		var context;
		if ((route = statics[path])) {
			handler = route.handler;
			context = route.context;
			return this._execHandler(context, handler, [path], route);
		}
		return false;
	},

	/*
	* @private
	*/
	_handleDynamic: function (path) {
		var dynamic = this._dynamicRoutes;
		var regex;
		var route;
		var handler;
		var context;
		var matches;
		var idx = 0;
		var len = dynamic.length;
		for (; idx < len; ++idx) {
			route = dynamic[idx];
			regex = route.regex;
			if ((matches = regex.exec(path))) {
				// we need to strip off the full match so we can
				// use the other matches as parameters
				matches = matches.slice(1);
				handler = route.handler;
				context = route.context;
				return this._execHandler(context, handler, matches, route);
			}
		}
		return false;
	},

	/*
	* @private
	*/
	_handleDefault: function (path) {
		var route = this.defaultRoute || {};
		var context = route.context;
		var handler = route.handler;
		return this._execHandler(context, handler, [path], route);
	},

	/*
	* @private
	*/
	_setupRoutes: function () {
		var routes = this.routes;
		var idx = 0;
		var len = routes.length;
		var route;
		for (; idx < len; ++idx) {
			route = routes[idx];
			if (!route) {
				continue;
			}
			this.addRoute(route);
		}
	},

	/*
	* @private
	*/
	_currentChanged: function () {
		if (this.useHistory) {
			this._history.unshift(this.get('location'));
		}
	}

});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./Controller":27,"./dispatcher":86,"./kind":96,"./ready":103,"./utils":106}],90:[function(require,module,exports){
require('../../../enyo');



var
	dispatcher = require('../dispatcher'),
	utils = require('../utils');
var
	Signals = require('../Signals'),
	Ready = require('../ready');

/**
* Normalizes and provides fullscreen support for [controls]{@link enyo.Control},
* based on the [fullscreen]{@glossary fullscreen} API.
*
* @name enyo.fullscreen
* @type Object
* @public
*/
var fullscreen = module.exports = {
	
	/**
	* Reference to the current fullscreen [control]{@link enyo.Control}.
	*
	* @private
	*/
	fullscreenControl: null,

	/**
	* Reference to the current fullscreen element (fallback for platforms
	* without native support).
	*
	* @private
	*/
	fullscreenElement: null,

	/** 
	* Reference to that [control]{@link enyo.Control} that requested fullscreen.
	* 
	* @private
	*/
	requestor: null,

	/** 
	* Native accessor used to get reference to the current fullscreen element.
	*
	* @private
	*/
	elementAccessor:
		('fullscreenElement' in document) ? 'fullscreenElement' :
		('mozFullScreenElement' in document) ? 'mozFullScreenElement' :
		('webkitFullscreenElement' in document) ? 'webkitFullscreenElement' :
		null,

	/** 
	* Native accessor used to request fullscreen.
	*
	* @private
	*/
	requestAccessor:
		('requestFullscreen' in document.documentElement) ? 'requestFullscreen' :
		('mozRequestFullScreen' in document.documentElement) ? 'mozRequestFullScreen' :
		('webkitRequestFullscreen' in document.documentElement) ? 'webkitRequestFullscreen' :
		null,

	/** 
	* Native accessor used to cancel fullscreen.
	*
	* @private
	*/
	cancelAccessor:
		('cancelFullScreen' in document) ? 'cancelFullScreen' :
		('mozCancelFullScreen' in document) ? 'mozCancelFullScreen' :
		('webkitCancelFullScreen' in document) ? 'webkitCancelFullScreen' :
		null,

	/**
	* Determines whether the platform supports the [fullscreen]{@glossary fullscreen} API.
	* 
	* @returns {Boolean} Returns `true` if platform supports all of the 
	*	[fullscreen]{@glossary fullscreen} API, `false` otherwise.
	* @public
	*/
	nativeSupport: function() {
		return (this.elementAccessor !== null && this.requestAccessor !== null && this.cancelAccessor !== null);
	},

	/** 
	* Normalizes `getFullscreenElement()`.
	*
	* @public
	*/
	getFullscreenElement: function() {
		return (this.nativeSupport()) ? document[this.elementAccessor] : this.fullscreenElement;
	},

	/** 
	* Returns current fullscreen [control]{@link enyo.Control}.
	*
	* @public
	*/
	getFullscreenControl: function() {
		return this.fullscreenControl;
	},

	/**
	* Normalizes `requestFullscreen()`.
	*
	* @public
	*/
	requestFullscreen: function(ctl) {
		if (this.getFullscreenControl() || !(ctl.hasNode())) {
			return false;
		}

		this.requestor = ctl;

		// Only use native request if platform supports all of the API
		if (this.nativeSupport()) {
			ctl.hasNode()[this.requestAccessor]();
		} else {
			this.fallbackRequestFullscreen();
		}

		return true;
	},

	/** 
	* Normalizes `cancelFullscreen()`.
	*
	* @public
	*/
	cancelFullscreen: function() {
		if (this.nativeSupport()) {
			document[this.cancelAccessor]();
		} else {
			this.fallbackCancelFullscreen();
		}
	},

	/** 
	* Fallback support for setting fullscreen element (done by browser on platforms with
	* native support).
	*
	* @private
	*/
	setFullscreenElement: function(node) {
		this.fullscreenElement = node;
	},

	/** 
	* Sets current fullscreen [control]{@link enyo.Control}.
	*
	* @private
	*/
	setFullscreenControl: function(ctl) {
		this.fullscreenControl = ctl;
	},

	/** 
	* Fallback fullscreen request for platforms without fullscreen support.
	*
	* @private
	*/
	fallbackRequestFullscreen: function() {
		var control = this.requestor;

		if (!control) {
			return;
		}

		// Get before node to allow us to exit floating layer to the proper position
		control.prevAddBefore = control.parent.controlAtIndex(control.indexInContainer() + 1);
		
		var floatingLayer = Control.floatingLayer;
		
		// Render floating layer if we need to
		if (!floatingLayer.hasNode()) {
			floatingLayer.render();
		}

		control.addClass('enyo-fullscreen');
		control.appendNodeToParent(floatingLayer.hasNode());
		control.resize();

		this.setFullscreenControl(control);
		this.setFullscreenElement(control.hasNode());
	},

	/** 
	* Fallback cancel fullscreen for platforms without fullscreen support.
	*
	* @private
	*/
	fallbackCancelFullscreen: function() {
		var control = this.fullscreenControl,
			beforeNode,
			parentNode
		;

		if (!control) {
			return;
		}

		// Find beforeNode based on _this.addBefore_ and _this.prevAddBefore_
		beforeNode = (control.prevAddBefore) ? control.prevAddBefore.hasNode() : null;
		parentNode = control.parent.hasNode();
		control.prevAddBefore = null;

		control.removeClass('enyo-fullscreen');

		if (!beforeNode) {
			control.appendNodeToParent(parentNode);
		} else {
			control.insertNodeInParent(parentNode, beforeNode);
		}

		control.resize();

		this.setFullscreenControl(null);
		this.setFullscreenElement(null);
	},

	/** 
	* Listens for fullscreen change {@glossary event} and broadcasts it as a
	* normalized event.
	*
	* @private
	*/
	detectFullscreenChangeEvent: function() {
		this.setFullscreenControl(this.requestor);
		this.requestor = null;

		// Broadcast change
		Signals.send('onFullscreenChange');
	}
};

/**
* Normalizes platform-specific fullscreen change [events]{@glossary event}.
*
* @private
*/
Ready(function() {
	// no need for IE8 fallback, since it won't ever send this event
	if (document.addEventListener) {
		document.addEventListener('webkitfullscreenchange', utils.bind(fullscreen, 'detectFullscreenChangeEvent'), false);
		document.addEventListener('mozfullscreenchange',    utils.bind(fullscreen, 'detectFullscreenChangeEvent'), false);
		document.addEventListener('fullscreenchange',       utils.bind(fullscreen, 'detectFullscreenChangeEvent'), false);
	}
});

/**
* If this platform doesn't have native support for fullscreen, add an escape handler to mimic 
* native behavior.
*/
if(!fullscreen.nativeSupport()) {
	dispatcher.features.push(
		function(e) {
			if (e.type === 'keydown' && e.keyCode === 27) {
				fullscreen.cancelFullscreen();
			}
		}
	);
}
},{"../../../enyo":12,"../Signals":68,"../dispatcher":86,"../ready":103,"../utils":106}],91:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	utils = require('./utils'),
	platform = require('./platform'),
	dispatcher = require('./dispatcher');

var
	Dom = require('./dom');


/**
* Enyo supports a set of normalized events that work similarly across all supported platforms.
* These events are provided so that users can write a single set of event handlers for
* applications that run on both mobile and desktop platforms. They are needed because desktop
* and mobile platforms handle basic input differently.
*
* For more information on normalized input events and their associated properties, see the
* documentation on [Event Handling]{@linkplain $dev-guide/key-concepts/event-handling.html}
* in the Enyo Developer Guide.
*
* @namespace gesture
* @public
*/
var gesture = module.exports =
	/** @lends gesture */ {

	/**
	* @private
	*/
	eventProps: ['target', 'relatedTarget', 'clientX', 'clientY', 'pageX', 'pageY',
		'screenX', 'screenY', 'altKey', 'ctrlKey', 'metaKey', 'shiftKey',
		'detail', 'identifier', 'dispatchTarget', 'which', 'srcEvent'],

	/**
	* Creates an {@glossary event} of type `type` and returns it.
	* `evt` should be an event [object]{@glossary Object}.
	*
	* @param {String} type - The type of {@glossary event} to make.
	* @param {(Event|Object)} evt - The event you'd like to clone or an object that looks like it.
	* @returns {Object} The new event [object]{@glossary Object}.
	* @public
	*/
	makeEvent: function(type, evt) {
		var e = {};
		e.type = type;
		for (var i=0, p; (p=this.eventProps[i]); i++) {
			e[p] = evt[p];
		}
		e.srcEvent = e.srcEvent || evt;
		e.preventDefault = this.preventDefault;
		e.disablePrevention = this.disablePrevention;

		if (Dom._bodyScaleFactorX !== 1 || Dom._bodyScaleFactorY !== 1) {
			// Intercept only these events, not all events, like: hold, release, tap, etc,
			// to avoid doing the operation again.
			if (e.type == 'move' || e.type == 'up' || e.type == 'down' || e.type == 'enter' || e.type == 'leave') {
				e.clientX *= Dom._bodyScaleFactorX;
				e.clientY *= Dom._bodyScaleFactorY;
			}
		}
		//
		// normalize event.which and event.pageX/event.pageY
		// Note that while 'which' works in IE9, it is broken for mousemove. Therefore,
		// in IE, use global.event.button
		if (platform.ie < 10) {
			//Fix for IE8, which doesn't include pageX and pageY properties
			if(platform.ie==8 && e.target) {
				e.pageX = e.clientX + e.target.scrollLeft;
				e.pageY = e.clientY + e.target.scrollTop;
			}
			var b = global.event && global.event.button;
			if (b) {
				// multi-button not supported, priority: left, right, middle
				// (note: IE bitmask is 1=left, 2=right, 4=center);
				e.which = b & 1 ? 1 : (b & 2 ? 2 : (b & 4 ? 3 : 0));
			}
		} else if (platform.webos || global.PalmSystem) {
			// Temporary fix for owos: it does not currently supply 'which' on move events
			// and the user agent string doesn't identify itself so we test for PalmSystem
			if (e.which === 0) {
				e.which = 1;
			}
		}
		return e;
	},

	/**
	* Handles "down" [events]{@glossary event}, including `mousedown` and `keydown`. This is
	* responsible for the press-and-hold key repeater.
	*
	* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.
	* @public
	*/
	down: function(evt) {
		var e = this.makeEvent('down', evt);

		// prepare for hold
		this.drag.prepareHold(e);

		// enable prevention of tap event
		e.preventTap = function() {
			e._tapPrevented = true;
		};

		dispatcher.dispatch(e);
		this.downEvent = e;

		// start hold, now that control has had a chance
		// to override the holdPulse configuration
		this.drag.beginHold(e);
	},

	/**
	* Handles `mousemove` [events]{@glossary event}.
	*
	* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.
	* @public
	*/
	move: function(evt) {
		var e = this.makeEvent('move', evt);
		// include delta and direction v. down info in move event
		e.dx = e.dy = e.horizontal = e.vertical = 0;
		if (e.which && this.downEvent) {
			e.dx = evt.clientX - this.downEvent.clientX;
			e.dy = evt.clientY - this.downEvent.clientY;
			e.horizontal = Math.abs(e.dx) > Math.abs(e.dy);
			e.vertical = !e.horizontal;
		}
		dispatcher.dispatch(e);
	},

	/**
	* Handles "up" [events]{@glossary event}, including `mouseup` and `keyup`.
	*
	* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.
	* @public
	*/
	up: function(evt) {
		var e = this.makeEvent('up', evt);

		// We have added some logic to synchronize up and down events in certain scenarios (i.e.
		// clicking multiple buttons with a mouse) and to generally guard against any potential
		// asymmetry, but a full solution would be to maintain a map of up/down events as an 
		// ideal solution, for future work.
		e._tapPrevented = this.downEvent && this.downEvent._tapPrevented && this.downEvent.which == e.which;
		e.preventTap = function() {
			e._tapPrevented = true;
		};

		dispatcher.dispatch(e);
		if (!e._tapPrevented && this.downEvent && this.downEvent.which == 1) {
			var target = this.findCommonAncestor(this.downEvent.target, evt.target);

			// the common ancestor of the down/up events is the target of the tap
			if(target) {
				if(this.supportsDoubleTap(target)) {
					this.doubleTap(e, target);
				} else {
					this.sendTap(e, target);
				}
			}
		}
		if (this.downEvent && this.downEvent.which == e.which) {
			this.downEvent = null;
		}
	},

	/**
	* Handles `mouseover` [events]{@glossary event}.
	*
	* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.
	* @public
	*/
	over: function(evt) {
		var e = this.makeEvent('enter', evt);
		dispatcher.dispatch(e);
	},

	/**
	* Handles `mouseout` [events]{@glossary event}.
	*
	* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.
	* @public
	*/
	out: function(evt) {
		var e = this.makeEvent('leave', evt);
		dispatcher.dispatch(e);
	},

	/**
	* Generates `tap` [events]{@glossary event}.
	*
	* @param {Event} evt - The standard {@glossary event} [object]{glossary Object}.
	* @public
	*/
	sendTap: function(evt, target) {
		var e = this.makeEvent('tap', evt);
		e.target = target;
		dispatcher.dispatch(e);
	},

	/**
	* @private
	*/
	tapData: {
		id: null,
		timer: null,
		start: 0
	},

	/**
	* Global configuration for double tap support. If this is true, all tap events for Controls
	* that do not have {@link enyo.Control#doubleTapEnabled} explicitly set to false will be
	* delayed by the {@link enyo.Control#doubleTapInterval}.
	*
	* @type {Boolean}
	* @default  false
	* @public
	*/
	doubleTapEnabled: false,

	/**
	* Determines if the provided target node supports double tap events
	*
	* @param {Node} target
	* @return {Boolean}
	* @private
	*/
	supportsDoubleTap: function(target) {
		var obj = dispatcher.findDispatchTarget(target);

		if(obj) {
			// Control.doubleTapEnabled is a tri-value property. The default is 'inherit'
			// which takes its cue from gesture's doubleTapEnabled. Values of true or false
			// override the default. So, if the global is true, any truthy value on Control
			// results in true. If the global is false, only an explicit true on Control
			// results in true.
			return this.doubleTapEnabled? !!obj.doubleTapEnabled : obj.doubleTapEnabled === true;
		} else {
			return false;
		}
	},

	/**
	* private
	*/
	doubleTap: function(evt, t) {
		var obj = dispatcher.findDispatchTarget(t);

		if(this.tapData.id !== obj.id) {	// this is the first tap
			this.resetTapData(true);

			this.tapData.id = obj.id;
			this.tapData.event = evt;
			this.tapData.target = t;
			this.tapData.timer = setTimeout(utils.bind(this, "resetTapData", true), obj.doubleTapInterval);
			this.tapData.start = utils.perfNow();
		} else {							// this is the double tap
			var e2 = this.makeEvent('doubletap', evt);
			e2.target = t;
			e2.tapInterval = utils.perfNow() - this.tapData.start;
			this.resetTapData(false);
			dispatcher.dispatch(e2);
		}
	},

	resetTapData: function(sendTap) {
		var data = this.tapData;

		if(sendTap && data.id) {
			this.sendTap(data.event, data.target);
		}

		clearTimeout(data.timer);
		data.id = data.start = data.event = data.target = data.timer = null;
	},

	/**
	* Given two [DOM nodes]{@glossary Node}, searches for a shared ancestor (looks up
	* the hierarchic [DOM]{@glossary DOM} tree of [nodes]{@glossary Node}). The shared
	* ancestor node is returned.
	*
	* @param {Node} controlA - Control one.
	* @param {Node} controlB - Control two.
	* @returns {(Node|undefined)} The shared ancestor.
	* @public
	*/
	findCommonAncestor: function(controlA, controlB) {
		var p = controlB;
		while (p) {
			if (this.isTargetDescendantOf(controlA, p)) {
				return p;
			}
			p = p.parentNode;
		}
	},

	/**
	* Given two controls, returns `true` if the `child` is inside the `parent`.
	*
	* @param {Node} child - The child to search for.
	* @param {Node} parent - The expected parent.
	* @returns {(Boolean|undefined)} `true` if the `child` is actually a child of `parent`.
	*/
	isTargetDescendantOf: function(child, parent) {
		var c = child;
		while(c) {
			if (c == parent) {
				return true;
			}
			c = c.parentNode;
		}
	}
};

/**
* Installed on [events]{@glossary event} and called in event context.
*
* @private
*/
gesture.preventDefault = function() {
	if (this.srcEvent) {
		this.srcEvent.preventDefault();
	}
};

/**
* @private
*/
gesture.disablePrevention = function() {
	this.preventDefault = utils.nop;
	if (this.srcEvent) {
		this.srcEvent.preventDefault = utils.nop;
	}
};

dispatcher.features.push(
	function(e) {
		// NOTE: beware of properties in gesture inadvertently mapped to event types
		if (gesture.events[e.type]) {
			return gesture.events[e.type](e);
		}
	}
);

/**
* @namespace gesture.events
* @public
*/
gesture.events =
	/** @lends gesture.events */ {

	/**
	* Shortcut to [gesture.down()]{@link gesture.down}.
	*
	* @public
	*/
	mousedown: function(e) {
		gesture.down(e);
	},

	/**
	* Shortcut to [gesture.up()]{@link gesture.up}.
	*
	* @public
	*/
	mouseup: function(e) {
		gesture.up(e);
	},

	/**
	* Shortcut to [gesture.move()]{@link gesture.move}.
	*
	* @public
	*/
	mousemove:  function(e) {
		gesture.move(e);
	},

	/**
	* Shortcut to [gesture.over()]{@link gesture.over}.
	*
	* @public
	*/
	mouseover:  function(e) {
		gesture.over(e);
	},

	/**
	* Shortcut to [gesture.out()]{@link gesture.out}.
	*
	* @public
	*/
	mouseout:  function(e) {
		gesture.out(e);
	}
};

// Firefox mousewheel handling
Dom.requiresWindow(function() {
	if (document.addEventListener) {
		document.addEventListener('DOMMouseScroll', function(inEvent) {
			var e = utils.clone(inEvent);
			e.preventDefault = function() {
				inEvent.preventDefault();
			};
			e.type = 'mousewheel';
			var p = e.VERTICAL_AXIS == e.axis ? 'wheelDeltaY' : 'wheelDeltaX';
			e[p] =  e.detail * -40;
			dispatcher.dispatch(e);
		}, false);
	}
});



/**
* The extended {@glossary event} [object]{@glossary Object} that is provided when we
* emulate iOS gesture events on non-iOS devices.
*
* @typedef {Object} enyo.gesture~EmulatedGestureEvent
* @property {Number} pageX - The x-coordinate of the center point between fingers.
* @property {Number} pageY - The y-coordinate of the center point between fingers.
* @property {Number} rotation - The degrees of rotation from the beginning of the gesture.
* @property {Number} scale - The percent change of distance between fingers.
*/

/**
* @private
*/
if (!platform.gesture && platform.touch) {
	dispatcher.features.push(function(e) {
		if (handlers[e.type]) {
			touchGestures[e.type](e);
		}
	});
}

/**
* @private
*/
var handlers = {
	touchstart: true,
	touchmove: true,
	touchend: true
};

/**
* @private
*/
var touchGestures = {

	/**
	* @private
	*/
	orderedTouches: [],

	/**
	* @private
	*/
	gesture: null,

	/**
	* @private
	*/
	touchstart: function (e) {
		// some devices can send multiple changed touches on start and end
		var i,
			changedTouches = e.changedTouches,
			length = changedTouches.length;

		for (i = 0; i < length; i++) {
			var id = changedTouches[i].identifier;

			// some devices can send multiple touchstarts
			if (utils.indexOf(id, this.orderedTouches) < 0) {
				this.orderedTouches.push(id);
			}
		}

		if (e.touches.length >= 2 && !this.gesture) {
			var p = this.gesturePositions(e);

			this.gesture = this.gestureVector(p);
			this.gesture.angle = this.gestureAngle(p);
			this.gesture.scale = 1;
			this.gesture.rotation = 0;
			var g = this.makeGesture('gesturestart', e, {vector: this.gesture, scale: 1, rotation: 0});
			dispatcher.dispatch(g);
		}
	},

	/**
	* @private
	*/
	touchend: function (e) {
		// some devices can send multiple changed touches on start and end
		var i,
			changedTouches = e.changedTouches,
			length = changedTouches.length;

		for (i = 0; i < length; i++) {
			utils.remove(changedTouches[i].identifier, this.orderedTouches);
		}

		if (e.touches.length <= 1 && this.gesture) {
			var t = e.touches[0] || e.changedTouches[e.changedTouches.length - 1];

			// gesture end sends last rotation and scale, with the x/y of the last finger
			dispatcher.dispatch(this.makeGesture('gestureend', e, {vector: {xcenter: t.pageX, ycenter: t.pageY}, scale: this.gesture.scale, rotation: this.gesture.rotation}));
			this.gesture = null;
		}
	},

	/**
	* @private
	*/
	touchmove: function (e) {
		if (this.gesture) {
			var g = this.makeGesture('gesturechange', e);
			this.gesture.scale = g.scale;
			this.gesture.rotation = g.rotation;
			dispatcher.dispatch(g);
		}
	},

	/**
	* @private
	*/
	findIdentifiedTouch: function (touches, id) {
		for (var i = 0, t; (t = touches[i]); i++) {
			if (t.identifier === id) {
				return t;
			}
		}
	},

	/**
	* @private
	*/
	gesturePositions: function (e) {
		var first = this.findIdentifiedTouch(e.touches, this.orderedTouches[0]);
		var last = this.findIdentifiedTouch(e.touches, this.orderedTouches[this.orderedTouches.length - 1]);
		var fx = first.pageX, lx = last.pageX, fy = first.pageY, ly = last.pageY;
		// center the first touch as 0,0
		var x = lx - fx, y = ly - fy;
		var h = Math.sqrt(x*x + y*y);
		return {x: x, y: y, h: h, fx: fx, lx: lx, fy: fy, ly: ly};
	},

	/**
	* Finds rotation angle.
	* 
	* @private
	*/
	gestureAngle: function (positions) {
		var p = positions;
		// yay math!, rad -> deg
		var a = Math.asin(p.y / p.h) * (180 / Math.PI);
		// fix for range limits of asin (-90 to 90)
		// Quadrants II and III
		if (p.x < 0) {
			a = 180 - a;
		}
		// Quadrant IV
		if (p.x > 0 && p.y < 0) {
			a += 360;
		}
		return a;
	},

	/**
	* Finds bounding box.
	* 
	* @private
	*/
	gestureVector: function (positions) {
		// the least recent touch and the most recent touch determine the bounding box of the gesture event
		var p = positions;
		// center the first touch as 0,0
		return {
			magnitude: p.h,
			xcenter: Math.abs(Math.round(p.fx + (p.x / 2))),
			ycenter: Math.abs(Math.round(p.fy + (p.y / 2)))
		};
	},

	/**
	* @private
	*/
	makeGesture: function (type, e, cache) {
		var vector, scale, rotation;
		if (cache) {
			vector = cache.vector;
			scale = cache.scale;
			rotation = cache.rotation;
		} else {
			var p = this.gesturePositions(e);
			vector = this.gestureVector(p);
			scale = vector.magnitude / this.gesture.magnitude;
			// gestureEvent.rotation is difference from the starting angle, clockwise
			rotation = (360 + this.gestureAngle(p) - this.gesture.angle) % 360;
		}
		var event = utils.clone(e);
		return utils.mixin(event, {
			type: type,
			scale: scale,
			pageX: vector.xcenter,
			pageY: vector.ycenter,
			rotation: rotation
		});
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./dispatcher":86,"./dom":87,"./platform":102,"./utils":106}],118:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	dispatcher = require('../../../enyo/lib/dispatcher'),
	dom = require('../../../enyo/lib/dom'),
	platform = require('../../../enyo/lib/platform'),
	utils = require('../../../enyo/lib/utils'),
	Animator = require('../../../enyo/lib/Animator');

var
	CardArranger = require('../CardArranger');

/**
* Fires at the start of a panel transition, when [setIndex()]{@link enyo.Panels#setIndex}
* is called, and also during dragging.
*
* @event enyo.Panels#onTransitionStart
* @type {Object}
* @property {Number} fromIndex - The index of the old panel.
* @property {Number} toIndex   - The index of the new panel.
* @public
*/

/**
* Fires at the end of a panel transition, when [setIndex()]{@link enyo.Panels#setIndex}
* is called, and also during dragging.
*
* @event enyo.Panels#onTransitionFinish
* @type {Object}
* @property {Number} fromIndex - The index of the old panel.
* @property {Number} toIndex   - The index of the new panel.
* @public
*/

/**
* The {@link enyo.Panels} kind is designed to satisfy a variety of common use cases
* for application layout. Using `enyo.Panels`, controls may be arranged as (among
* other things) a carousel, a set of collapsing panels, a card stack that fades
* between panels, or a grid.
*
* Any Enyo control may be placed inside an `enyo.Panels`, but by convention we
* refer to each of these controls as a "panel". From the set of panels in an
* `enyo.Panels`, one is considered to be active. The active panel is set by index
* using the [setIndex()]{@link enyo.Panels#setIndex} method. The actual layout of
* the panels typically changes each time the active panel is set, such that the new
* active panel has the most prominent position.
*
* For more information, see the documentation on
* [Panels]{@linkplain $dev-guide/building-apps/layout/panels.html} in the
* Enyo Developer Guide.
*
* @ui
* @class enyo.Panels
* @extends enyo.Control
* @public
*/
var Panels = module.exports = kind(
	/** @lends  enyo.Panels.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Panels',

	/**
	* @private
	*/
	classes: 'enyo-panels',

	/**
	* @lends enyo.Panels.prototype
	* @private
	*/
	published: {
		/**
		* The index of the active panel. The layout of panels is controlled by the
		* [layoutKind]{@link enyo.Panels#layoutKind}, but as a rule, the active panel
		* is displayed in the most prominent position. For example, in the (default)
		* {@link enyo.CardArranger} layout, the active panel is shown and the other
		* panels are hidden.
		*
		* @type {Number}
		* @default  0
		* @public
		*/
		index: 0,

		/**
		* Indicates whether the user may drag between panels.
		*
		* @type {Boolean}
		* @default  true
		* @public
		*/
		draggable: true,

		/**
		* Indicates whether the panels animate when transitioning, e.g., when
		* [setIndex()]{@link enyo.Panels#setIndex} is called.
		*
		* @type {Boolean}
		* @default  true
		* @public
		*/
		animate: true,

		/**
		* Indicates whether panels "wrap around" when moving past the end.
		* The actual effect depends upon the arranger in use.
		*
		* @type {Boolean}
		* @default  false
		* @public
		*/
		wrap: false,

		/**
		* The arranger kind to be used for dynamic layout.
		*
		* @type {String}
		* @default  'CardArranger'
		* @public
		*/
		arrangerKind: CardArranger,

		/**
		* By default, each panel will be sized to fit the Panels' width when the
		* screen size is sufficiently narrow (less than 800px). Set to `false` to
		* avoid this behavior.
		*
		* @type {Boolean}
		* @default  true
		* @public
		*/
		narrowFit: true
	},

	/**
	* @private
	*/
	events: {
		onTransitionStart: '',
		onTransitionFinish: ''
	},

	/**
	* @private
	*/
	handlers: {
		ondragstart: 'dragstart',
		ondrag: 'drag',
		ondragfinish: 'dragfinish',
		onscroll: 'domScroll'
	},

	/**
	* @private
	*/
	tools: [
		{kind: Animator, onStep: 'step', onEnd: 'animationEnded'}
	],

	/**
	* Tracks completion percentage for a transition between two panels.
	*
	* @private
	*/
	fraction: 0,

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			this.transitionPoints = [];
			sup.apply(this, arguments);
			this.arrangerKindChanged();
			this.narrowFitChanged();
			this.indexChanged();
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			dispatcher.makeBubble(this, 'scroll');
		};
	}),

	/**
	* @private
	*/
	domScroll: function (sender, event) {
		if (this.hasNode()) {
			if (this.node.scrollLeft > 0) {
				// Reset scrollLeft position
				this.node.scrollLeft = 0;
			}
		}
	},

	/**
	* @method
	* @private
	*/
	initComponents: kind.inherit(function (sup) {
		return function () {
			this.createChrome(this.tools);
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	arrangerKindChanged: function () {
		this.setLayoutKind(this.arrangerKind);
	},

	/**
	* @private
	*/
	narrowFitChanged: function () {
		this.addRemoveClass(Panels.getNarrowClass(), this.narrowFit);
	},

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			// When the entire panels is going away, take note so we don't try and do single-panel
			// remove logic such as changing the index and reflowing when each panel is destroyed
			this.destroying = true;
			sup.apply(this, arguments);
		};
	}),

	/**
	* Adjusts the index if the removed control is the active panel and reflows the layout.
	*
	* @method
	* @private
	*/
	removeControl: kind.inherit(function (sup) {
		return function (control) {
			// Skip extra work during panel destruction.
			if (this.destroying) {
				return sup.apply(this, arguments);
			}
			// adjust index if the current panel is being removed
			// so it's either the previous panel or the first one.
			var newIndex = -1;
			var controlIndex = utils.indexOf(control, this.controls);
			if (controlIndex === this.index) {
				newIndex = Math.max(controlIndex - 1, 0);
			}
			sup.apply(this, arguments);
			if (newIndex !== -1 && this.controls.length > 0) {
				this.setIndex(newIndex);
				this.flow();
				this.reflow();
			}
		};
	}),

	/**
	* Designed to be overridden in kinds derived from Panels that have
	* non-panel client controls.
	*
	* @return {Boolean} [description]
	* @protected
	* @todo  Assume that this should take a control as a parameter.
	*/
	isPanel: function () {
		return true;
	},

	/**
	* @method
	* @private
	*/
	flow: kind.inherit(function (sup) {
		return function () {
			this.arrangements = [];
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	reflow: kind.inherit(function (sup) {
		return function () {
			this.arrangements = [];
			sup.apply(this, arguments);
			this.refresh();
		};
	}),

	/**
	* Returns the array of contained panels. Subclasses may override this if they
	* don't want the arranger to lay out all of their children.
	*
	* @return {enyo.Control[]} - The array of contained panels.
	*/
	getPanels: function () {
		var p = this.controlParent || this;
		return p.children;
	},

	/**
	* Returns a reference to the active panel--i.e., the panel at the specified index.
	*
	* @return {enyo.Control} - The active panel.
	*/
	getActive: function () {
		var p$ = this.getPanels();
		//Constrain the index within the array of panels, needed if wrapping is enabled
		var index = this.index % p$.length;
		if (index < 0) {
			index += p$.length;
		}
		return p$[index];
	},

	/**
	* Returns a reference to the {@link enyo.Animator} instance used to
	* animate panel transitions. The Panels' animator may be used to set the
	* duration of panel transitions, e.g.:
	*
	* ```
	* this.getAnimator().setDuration(1000);
	* ```
	*
	* @return {enyo.Animator} - The {@link enyo.Animator} instance used to animate
	* panel transitions.
	* @public
	*/
	getAnimator: function () {
		return this.$.animator;
	},

	/**
	* Sets the active panel to the panel specified by the given index.
	* Note that if the [animate]{@link enyo.Panels#animate} property is set to
	* `true`, the active panel will animate into view.
	*
	* @param {Number} index - The index of the panel to activate.
	* @public
	*/
	setIndex: function (index) {
		// override setIndex so that indexChanged is called
		// whether this.index has actually changed or not. Also, do
		// index clamping here.
		var prevIndex = this.get('index'),
			newIndex = this.clamp(index);
		this.index = newIndex;
		this.notifyObservers('index', prevIndex, newIndex);
	},

	/**
	* Sets the active panel to the panel specified by the given index.
	* The transition to the next panel will be immediate and will not be animated,
	* regardless of the value of the [animate]{@link enyo.Panels#animate} property.
	*
	* @param {Number} index - The index of the panel to activate.
	* @public
	*/
	setIndexDirect: function (index) {
		if (this.animate) {
			this.animate = false;
			this.setIndex(index);
			this.animate = true;
		} else {
			this.setIndex(index);
		}
	},

	/**
	* Selects the named component owned by the Panels and returns its index.
	*
	* @param  {String} name - The name of the panel to activate.
	* @return {Number} The index of the newly activated panel.
	* @public
	*/
	selectPanelByName: function (name) {
		if (!name) {
			return;
		}
		var idx = 0;
		var panels = this.getPanels();
		var len = panels.length;
		for (; idx < len; ++idx) {
			if (name === panels[idx].name) {
				this.setIndex(idx);
				return idx;
			}
		}
	},

	/**
	* Transitions to the previous panel--i.e., the panel whose index value is one
	* less than that of the current active panel.
	*
	* @public
	*/
	previous: function () {
		var prevIndex = this.index - 1;
		if (this.wrap && prevIndex < 0) {
			prevIndex = this.getPanels().length - 1;
		}
		this.setIndex(prevIndex);
	},

	/**
	* Transitions to the next panel--i.e., the panel whose index value is one
	* greater than that of the current active panel.
	*
	* @public
	*/
	next: function () {
		var nextIndex = this.index+1;
		if (this.wrap && nextIndex >= this.getPanels().length) {
			nextIndex = 0;
		}
		this.setIndex(nextIndex);
	},

	/**
	* Ensures that `value` references a valid panel, accounting for
	* [wrapping]{@link enyo.Panels#wrap}.
	*
	* @param  {Number} value - The index of a panel.
	* @return {Number}       - The valid index of a panel.
	* @private
	*/
	clamp: function (value) {
		var l = this.getPanels().length;
		if (this.wrap) {
			// FIXME: dragging makes assumptions about direction and from->start indexes.
			//return value < 0 ? l : (value > l ? 0 : value);
			value %= l;
			return (value < 0) ? value + l : value;
		} else {
			return Math.max(0, Math.min(value, l - 1));
		}
	},

	/**
	* @private
	*/
	indexChanged: function (old) {
		this.lastIndex = old;
		if (!this.dragging && this.$.animator && this.hasNode()) {
			if (this.shouldAnimate()) {
				// If we're mid-transition, complete it and indicate we need to transition
				if (this.$.animator.isAnimating()) {
					this.transitionOnComplete = true;
					this.$.animator.complete();
				} else {
					this.animateTransition();
				}
			} else {
				this.directTransition();
			}
		}
	},

	/**
	* Returns `true` if the panels should animate in the transition from `fromIndex` to
	* `toIndex`. This can be overridden in a {@glossary subkind} for greater customization.
	*
	* @protected
	*/
	shouldAnimate: function () {
		return this.animate;
	},

	/**
	* @private
	*/
	step: function (sender) {
		this.fraction = sender.value;
		this.stepTransition();
		return true;
	},

	/**
	* @private
	*/
	animationEnded: function (sender, event) {
		this.completed();
	},

	/**
	* @private
	*/
	completed: function () {
		this.finishTransition();

		// Animator.onEnd fires asynchronously so we need an internal flag to indicate we need
		// to start the next transition when the previous completes
		if (this.transitionOnComplete) {
			this.transitionOnComplete = false;
			this.animateTransition();
		}

		return true;
	},

	/**
	* @private
	*/
	dragstart: function (sender, event) {
		if (this.draggable && this.layout && this.layout.canDragEvent(event)) {
			event.preventDefault();
			this.dragstartTransition(event);
			this.dragging = true;
			this.$.animator.stop();
			return true;
		}
	},

	/**
	* @private
	*/
	drag: function (sender, event) {
		if (this.dragging) {
			event.preventDefault();
			this.dragTransition(event);
		}
	},

	/**
	* @private
	*/
	dragfinish: function (sender, event) {
		if (this.dragging) {
			this.dragging = false;
			event.preventTap();
			this.dragfinishTransition(event);
		}
	},

	/**
	* @private
	*/
	dragstartTransition: function (event) {
		if (!this.$.animator.isAnimating()) {
			var f = this.fromIndex = this.index;
			this.toIndex = f - (this.layout ? this.layout.calcDragDirection(event) : 0);
		} else {
			this.verifyDragTransition(event);
		}
		this.fromIndex = this.clamp(this.fromIndex);
		this.toIndex = this.clamp(this.toIndex);
		//this.log(this.fromIndex, this.toIndex);
		this.fireTransitionStart();
		if (this.layout) {
			this.layout.start();
		}
	},

	/**
	* @private
	*/
	dragTransition: function (event) {
		// note: for simplicity we choose to calculate the distance directly between
		// the first and last transition point.
		var d = this.layout ? this.layout.calcDrag(event) : 0;
		var t$ = this.transitionPoints, s = t$[0], f = t$[t$.length-1];
		var as = this.fetchArrangement(s);
		var af = this.fetchArrangement(f);
		var dx = this.layout ? this.layout.drag(d, s, as, f, af) : 0;
		var dragFail = d && !dx;
		if (dragFail) {
			//this.log(dx, s, as, f, af);
		}
		this.fraction += dx;
		var fr = this.fraction;
		if (fr > 1 || fr < 0 || dragFail) {
			if (fr > 0 || dragFail) {
				this.dragfinishTransition(event);
			}
			this.dragstartTransition(event);
			this.fraction = 0;
			// FIXME: account for lost fraction
			//this.dragTransition(event);
		}
		this.stepTransition();
	},

	/**
	* @private
	*/
	dragfinishTransition: function (event) {
		this.verifyDragTransition(event);
		this.setIndex(this.toIndex);
		// note: if we're still dragging, then we're at a transition boundary
		// and should fire the finish event
		if (this.dragging) {
			this.fireTransitionFinish();
		}
	},

	/**
	* @private
	*/
	verifyDragTransition: function (event) {
		var d = this.layout ? this.layout.calcDragDirection(event) : 0;
		var f = Math.min(this.fromIndex, this.toIndex);
		var t = Math.max(this.fromIndex, this.toIndex);
		if (d > 0) {
			var s = f;
			f = t;
			t = s;
		}
		if (f != this.fromIndex) {
			this.fraction = 1 - this.fraction;
		}
		//this.log('old', this.fromIndex, this.toIndex, 'new', f, t);
		this.fromIndex = f;
		this.toIndex = t;
	},

	/**
	* Resets the panels without sending any events.
	*
	* @private
	*/
	refresh: function () {
		if (this.$.animator && this.$.animator.isAnimating()) {
			this.$.animator.stop();
		}
		this.setupTransition();
		this.fraction = 1;
		this.stepTransition();
		this.transitioning = false;
		this.completeTransition();
	},

	/**
	* Transitions to the new index without animation
	*
	* @private
	*/
	directTransition: function () {
		this.startTransition();
		this.fraction = 1;
		this.stepTransition();
		this.finishTransition();
	},

	/**
	* Animates the transition to the new index
	*
	* @private
	*/
	animateTransition: function () {
		this.startTransition();
		this.$.animator.play({
			startValue: this.fraction
		});
	},

	/**
	* Starts the transition between two panels. if a transition is already in progress, this is
	* a no-op.
	*
	* @private
	*/
	startTransition: function () {
		if (!this.transitioning) {
			this.transitioning = true;
			this.setupTransition();
			this.fireTransitionStart();
		}
	},

	/**
	* Sets up transition state
	*
	* @private
	*/
	setupTransition: function () {
		this.fromIndex = this.fromIndex != null ? this.fromIndex : this.lastIndex || 0;
		this.toIndex = this.toIndex != null ? this.toIndex : this.index;
		if (this.layout) {
			this.layout.start();
		}
	},

	/**
	* Completes the transition between two panels.
	*
	* @private
	*/
	finishTransition: function () {
		this.transitioning = false;
		this.completeTransition(true);
	},

	/**
	* Completes the transition by performing any tasks to be run when the transition ends,
	* including firing events and clean-up.
	*
	* @param {Boolean} [fire] - If `true`, will fire the {@link enyo.Panels#onTransitionFinish}
	*	event if deemed necessary.
	* @private
	*/
	completeTransition: function (fire) {
		if (this.layout) {
			this.layout.finish();
		}

		if (fire) {
			this.fireTransitionFinish(true);
		} else {
			this.clearTransitionData();
		}
	},

	/**
	* Clears transition-related data.
	*
	* @private
	*/
	clearTransitionData: function() {
		this.transitionPoints = [];
		this.fraction = 0;
		this.fromIndex = this.toIndex = null;
	},

	/**
	* @fires enyo.Panels#onTransitionStart
	* @private
	*/
	fireTransitionStart: function () {
		var t = this.startTransitionInfo;
		if (this.hasNode() && (!t || (t.fromIndex != this.fromIndex || t.toIndex != this.toIndex))) {
			this.startTransitionInfo = {fromIndex: this.fromIndex, toIndex: this.toIndex};
			this.doTransitionStart(utils.clone(this.startTransitionInfo));
		}
	},

	/**
	* @fires enyo.Panels#onTransitionFinish
	* @param {Boolean} [clearData] - If `true`, {@link enyo.Panels#clearTransitionData} will be
	*	called after recording the values needed for the callback.
	* @private
	*/
	fireTransitionFinish: function (clearData) {
		var t = this.finishTransitionInfo,
			fromIndex = t ? t.fromIndex : null,
			toIndex = t ? t.toIndex : null;
		if (this.hasNode() && (!t || (fromIndex != this.fromIndex || toIndex != this.toIndex))) {
				if (this.transitionOnComplete) {
				this.finishTransitionInfo = {fromIndex: toIndex, toIndex: this.lastIndex};
				} else {
					this.finishTransitionInfo = {fromIndex: this.lastIndex, toIndex: this.index};
				}
			if (clearData) {
				this.clearTransitionData();
			}
				this.doTransitionFinish(utils.clone(this.finishTransitionInfo));
		} else if (clearData) {
			this.clearTransitionData();
		}
	},

	/**
	* Interpolates between arrangements as needed.
	*
	* @private
	*/
	stepTransition: function () {
		if (this.hasNode()) {
			// select correct transition points and normalize fraction.
			var t$ = this.transitionPoints;
			var r = (this.fraction || 0) * (t$.length-1);
			var i = Math.floor(r);
			r = r - i;
			var s = t$[i], f = t$[i+1];
			// get arrangements and lerp between them
			var s0 = this.fetchArrangement(s);
			var s1 = this.fetchArrangement(f);
			this.arrangement = s0 && s1 ? Panels.lerp(s0, s1, r) : (s0 || s1);
			if (this.arrangement && this.layout) {
				this.layout.flowArrangement();
			}
		}
	},

	/**
	* Fetches the arrangement at a specified index, initializing it if necessary.
	*
	* @param  {Number} index - The index of the desired arrangement from `transitionPoints`.
	* @return {Object} The desired arrangement object.
	* @private
	*/
	fetchArrangement: function (index) {
		if ((index != null) && !this.arrangements[index] && this.layout) {
			this.layout._arrange(index);
			this.arrangements[index] = this.readArrangement(this.getPanels());
		}
		return this.arrangements[index];
	},

	/**
	* Iterates over `panels` and retrieves a copy of each panel's `_arranger`.
	*
	* @param  {enyo.Control[]} panels - The array of panels.
	* @return {Object[]}              - The array of arrangement objects.
	*/
	readArrangement: function (panels) {
		var r = [];
		for (var i=0, c$=panels, c; (c=c$[i]); i++) {
			r.push(utils.clone(c._arranger));
		}
		return r;
	},

	/**
	* @lends  enyo.Panels
	* @private
	*/
	statics: {
		/**
		* Returns `true` for iOS and Android phone form factors, or when window width
		* is 800px or less. Approximates work done using media queries in `Panels.css`.
		*
		* @return {Boolean} `true` for narrow devices or viewports; otherwise, `false`.
		* @public
		*/
		isScreenNarrow: function () {
			if(Panels.isNarrowDevice()) {
				return true;
			} else {
				return dom.getWindowWidth() <= 800;
			}
		},

		/**
		* Returns the class name to apply for narrow fitting. See media queries
		* in `Panels.css`.
		*
		* @return {String} The CSS class name to apply.
		*/
		getNarrowClass: function () {
			if(Panels.isNarrowDevice()) {
				return 'enyo-panels-force-narrow';
			} else {
				return 'enyo-panels-fit-narrow';
			}
		},

		/**
		* Lerps between arrangements.
		*
		* @param  {Object[]} a0     - Array of current arrangement objects.
		* @param  {Object[]} a1     - Array of target arrangement object.
		* @param  {Number} fraction - The fraction (between 0 and 1) with which to lerp.
		* @return {Object[]}        - Array of arrangements that is `fraction` between
		* 	`a0` and `a1`.
		* @private
		*/
		lerp: function (a0, a1, fraction) {
			var r = [];
			for (var i=0, k$=utils.keys(a0), k; (k=k$[i]); i++) {
				r.push(this.lerpObject(a0[k], a1[k], fraction));
			}
			return r;
		},

		/**
		* Lerps between the values of arrangement objects.
		*
		* @param  {Object} a0       - The source arragement.
		* @param  {Object} a1       - The destination arragement.
		* @param  {Number} fraction - The fraction (between 0 and 1) with which to lerp.
		*
		* @return {Object}          - The lerped arrangement.
		* @private
		*/
		lerpObject: function (a0, a1, fraction) {
			var b = utils.clone(a0), n, o;
			// a1 might be undefined when deleting panels
			if (a1) {
				for (var i in a0) {
					n = a0[i];
					o = a1[i];
					if (n != o) {
						b[i] = n - (n - o) * fraction;
					}
				}
			}
			return b;
		},

		/**
		* Tests User Agent strings to identify narrow devices.
		*
		* @return {Boolean} `true` if the current device is a narrow device;
		* otherwise, `false`.
		*/
		isNarrowDevice: function () {
			var ua = navigator.userAgent;
			switch (platform.platformName) {
				case 'ios':
					return (/iP(?:hone|od;(?: U;)? CPU) OS (\d+)/).test(ua);
				case 'android':
					return (/Mobile/).test(ua) && (platform.android > 2);
				case 'androidChrome':
					return (/Mobile/).test(ua);
			}
			return false;
		}
	}
});
},{"../../../enyo/lib/Animator":15,"../../../enyo/lib/dispatcher":86,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/platform":102,"../../../enyo/lib/utils":106,"../CardArranger":109}],26:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind'),
	utils = require('../utils'),
	platform = require('../platform'),
	dispatcher = require('../dispatcher'),
	fullscreen = require('../fullscreen'),
	roots = require('../roots');

var
	UiComponent = require('../UiComponent'),
	HTMLStringDelegate = require('../HTMLStringDelegate'),
	Dom = require('../dom'),
	FloatingLayer = require('../floatingLayer');

var nodePurgatory;

/**
* Called by `Control.teardownRender()`. In certain circumstances,
* we need to temporarily keep a DOM node around after tearing down
* because we're still acting on a stream of touch events emanating
* from the node. See `Control.retainNode()` for more information.
*
* @private
*/
function storeRetainedNode (control) {
	var p = getNodePurgatory(),
		n = control._retainedNode;
	if (n) {
		p.appendChild(n);
	}
	control._retainedNode = null;
}

/**
* Called (via a callback) when it's time to release a DOM node
* that we've retained.
*
* @private
*/
function releaseRetainedNode (retainedNode) {
	var p = getNodePurgatory();
	if (retainedNode) {
		p.removeChild(retainedNode);
	}
}

/**
* Lazily add a hidden `<div>` to `document.body` to serve as a
* container for retained DOM nodes.
*
* @private
*/
function getNodePurgatory () {
	var p = nodePurgatory;
	if (!p) {
		p = nodePurgatory = document.createElement("div");
		p.id = "node_purgatory";
		p.style.display = "none";
		document.body.appendChild(p);
	}
	return p;
}

/**
* {@link enyo.Control} is a [component]{@link enyo.UiComponent} that controls
* a [DOM]{@glossary DOM} [node]{@glossary Node} (i.e., an element in the user
* interface). Controls are generally visible and the user often interacts with
* them directly. While things like buttons and input boxes are obviously
* controls, in Enyo, a control may be as simple as a text item or as complex
* as an entire application. Both inherit the same basic core capabilities from
* this kind.
*
* For more information, see the documentation on
* [Controls]{@linkplain $dev-guide/key-concepts/controls.html} in the
* Enyo Developer Guide.
*
* **If you make changes to `enyo.Control`, be sure to add or update the
* appropriate unit tests.**
*
* @class enyo.Control
* @extends enyo.UiComponent
* @ui
* @public
*/
var Control = module.exports = kind(
	/** @lends enyo.Control.prototype */ {

	name: 'enyo.Control',

	/**
	* @private
	*/
	kind: UiComponent,

	/**
	* @private
	*/


	/**
	* @type {String}
	* @default 'enyo.Control'
	* @public
	*/
	defaultKind: null, // set after the fact

	/**
	* The [DOM node]{@glossary DOM} tag name that should be created.
	*
	* @type {String}
	* @default 'div'
	* @public
	*/
	tag: 'div',

	/**
	* A [hash]{@glossary Object} of attributes to be applied to the created
	* [DOM]{@glossary DOM} node.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	attributes: null,

	/**
	* [Boolean]{@glossary Boolean} flag indicating whether this element should
	* "fit", or fill its container's size.
	*
	* @type {Boolean}
	* @default null
	* @public
	*/
	fit: null,

	/**
	* [Boolean]{@glossary Boolean} flag indicating whether HTML is allowed in
	* this control's [content]{@link enyo.Control#content} property. If `false`
	* (the default), HTML will be encoded into [HTML entities]{@glossary entity}
	* (e.g., `&lt;` and `&gt;`) for literal visual representation.
	*
	* @type {Boolean}
	* @default null
	* @public
	*/
	allowHtml: false,

	/**
	* Mimics the HTML `style` attribute.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	style: '',

	/**
	* @private
	*/
	kindStyle: '',

	/**
	* Mimics the HTML `class` attribute.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	classes: '',

	/**
	* @private
	*/
	kindClasses: '',

	/**
	* [Classes]{@link enyo.Control#classes} that are applied to all controls.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	controlClasses: '',

	/**
	* The text-based content of the Control. If the [allowHtml]{@link enyo.Control#allowHtml}
	* flag is set to `true`, you may set this property to an HTML string.
	* @public
	*/
	content: '',

	/**
	* If true or 'inherit' and enyo.gesture.doubleTabEnabled == true, will fire a doubletap
	* event, and will temporarily suppress a single tap while waiting for a double tap.
	*
	* @type {String|Boolean}
	* @default 'inherit'
	* @public
	*/
	doubleTapEnabled: 'inherit',

	/**
	* Time in milliseconds to wait to detect a double tap
	*
	* @type {Number}
	* @default 300
	* @public
	*/
	doubleTapInterval: 300,

	/**
	* If set to `true`, the [control]{@link enyo.Control} will not be rendered until its
	* [showing]{@link enyo.Control#showing} property has been set to `true`. This can be used
	* directly or is used by some widgets to control when children are rendered.
	*
	* It is important to note that setting this to `true` will _force_
	* [canGenerate]{@link enyo.Control#canGenerate} and [showing]{@link enyo.Control#showing}
	* to be `false`. Arbitrarily modifying the values of these properties prior to its initial
	* render may have unexpected results.
	*
	* Once a control has been shown/rendered with `renderOnShow` `true` the behavior will not
	* be used again.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	renderOnShow: false,
	
	/**
	* @todo Find out how to document "handlers".
	* @public
	*/
	handlers: {
		ontap: 'tap',
		onShowingChanged: 'showingChangedHandler'
	},

	/**
	* @private
	*/
	strictlyInternalEvents: {onenter: 1, onleave: 1},

	/**
	* @private
	*/
	isInternalEvent: function (event) {
		var rdt = dispatcher.findDispatchTarget(event.relatedTarget);
		return rdt && rdt.isDescendantOf(this);
	},

	// .................................
	// DOM NODE MANIPULATION API

	/**
	* Gets the bounds for this control. The `top` and `left` properties returned
	* by this method represent the control's positional distance in pixels from
	* either A) the first parent of this control that is absolutely or relatively
	* positioned, or B) the `document.body`.
	*
	* This is a shortcut convenience method for {@link enyo.dom.getBounds}.
	*
	* @returns {Object} An [object]{@glossary Object} containing `top`, `left`,
	* `width`, and `height` properties.
	* @public
	*/
	getBounds: function () {
		var node = this.hasNode(),
			bounds = node && Dom.getBounds(node);

		return bounds || {left: undefined, top: undefined, width: undefined, height: undefined};
	},

	/**
	* Sets the absolute/relative position and/or size for this control. Values
	* of `null` or `undefined` for the `bounds` properties will be ignored. You
	* may optionally specify a `unit` (i.e., a valid CSS measurement unit) as a
	* [string]{@glossary String} to be applied to each of the position/size
	* assignments.
	*
	* @param {Object} bounds - An [object]{@glossary Object}, optionally
	* containing one or more of the following properties: `width`, `height`,
	* `top`, `right`, `bottom`, and `left`.
	* @param {String} [unit='px']
	* @public
	*/
	setBounds: function (bounds, unit) {
		var newStyle = '',
			extents = ['width', 'height', 'left', 'top', 'right', 'bottom'],
			i = 0,
			val,
			ext;

		// if no unit is supplied, we default to pixels
		unit = unit || 'px';

		for (; (ext = extents[i]); ++i) {
			val = bounds[ext];
			if (val || val === 0) {
				newStyle += (ext + ':' + val + (typeof val == 'string' ? '' : unit) + ';');
			}
		}

		this.set('style', this.style + newStyle);
	},

	/**
	* Gets the bounds for this control. The `top` and `left` properties returned
	* by this method represent the control's positional distance in pixels from
	* `document.body`. To get the bounds relative to this control's parent(s),
	* use [getBounds()]{@link enyo.Control#getBounds}.
	*
	* This is a shortcut convenience method for {@link enyo.dom.getAbsoluteBounds}.
	*
	* @returns {Object} An [object]{@glossary Object} containing `top`, `left`,
	* `width`, and `height` properties.
	* @public
	*/
	getAbsoluteBounds: function () {
		var node = this.hasNode(),
			bounds = node && Dom.getAbsoluteBounds(node);

		return bounds || {
			left: undefined,
			top: undefined,
			width: undefined,
			height: undefined,
			bottom: undefined,
			right: undefined
		};
	},

	/**
	* Shortcut method to set [showing]{@link enyo.Control#showing} to `true`.
	*
	* @public
	*/
	show: function () {
		this.set('showing', true);
	},

	/**
	* Shortcut method to set [showing]{@link enyo.Control#showing} to `false`.
	*
	* @public
	*/
	hide: function () {
		this.set('showing', false);
	},

	/**
	* Sets this control to be [focused]{@glossary focus}.
	*
	* @public
	*/
	focus: function () {
		if (this.hasNode()) this.node.focus();
	},

	/**
	* [Blurs]{@glossary blur} this control. (The opposite of
	* [focus()]{@link enyo.Control#focus}.)
	*
	* @public
	*/
	blur: function () {
		if (this.hasNode()) this.node.blur();
	},

	/**
	* Determines whether this control currently has the [focus]{@glossary focus}.
	*
	* @returns {Boolean} Whether this control has focus. `true` if the control
	* has focus; otherwise, `false`.
	* @public
	*/
	hasFocus: function () {
		if (this.hasNode()) return document.activeElement === this.node;
	},

	/**
	* Determines whether this control's [DOM node]{@glossary Node} has been created.
	*
	* @returns {Boolean} Whether this control's [DOM node]{@glossary Node} has
	* been created. `true` if it has been created; otherwise, `false`.
	* @public
	*/
	hasNode: function () {
		return this.generated && (this.node || this.findNodeById());
	},

	/**
	* Gets the requested property (`name`) from the control's attributes
	* [hash]{@glossary Object}, from its cache of node attributes, or, if it has
	* yet to be cached, from the [node]{@glossary Node} itself.
	*
	* @param {String} name - The attribute name to get.
	* @returns {(String|Null)} The value of the requested attribute, or `null`
	* if there isn't a [DOM node]{@glossary Node} yet.
	* @public
	*/
	getAttribute: function (name) {
		var node;

		// TODO: This is a fixed API assuming that no changes will happen to the DOM that
		// do not use it...original implementation of this method used the node's own
		// getAttribute method every time it could but we really only need to do that if we
		// weren't the ones that set the value to begin with -- in slow DOM situations this
		// could still be faster but it needs to be verified
		if (this.attributes.hasOwnProperty(name)) return this.attributes[name];
		else {
			node = this.hasNode();

			// we store the value so that next time we'll know what it is
			/*jshint -W093 */
			return (this.attributes[name] = (node ? node.getAttribute(name) : null));
			/*jshint +W093 */
		}
	},

	/**
	* Assigns an attribute to a control's [node]{@glossary Node}. Assigning
	* `name` a value of `null`, `false`, or the empty string `("")` will remove
	* the attribute from the node altogether.
	*
	* @param {String} name - Attribute name to assign/remove.
	* @param {(String|Number|null)} value - The value to assign to `name`
	* @returns {this} Callee for chaining.
	* @public
	*/
	setAttribute: function (name, value) {
		var attrs = this.attributes,
			node = this.hasNode(),
			delegate = this.renderDelegate || Control.renderDelegate;

		if (name) {
			attrs[name] = value;

			if (node) {
				if (value == null || value === false || value === '') {
					node.removeAttribute(name);
				} else node.setAttribute(name, value);
			} else delegate.invalidate(this, 'attributes');
		}

		return this;
	},

	/**
	* Reads the `name` property directly from the [node]{@glossary Node}. You
	* may provide a default (`def`) to use if there is no node yet.
	*
	* @param {String} name - The [node]{@glossary Node} property name to get.
	* @param {*} def - The default value to apply if there is no node.
	* @returns {String} The value of the `name` property, or `def` if the node
	* was not available.
	* @public
	*/
	getNodeProperty: function (name, def) {
		return this.hasNode() ? this.node[name] : def;
	},

	/**
	* Sets the value of a property (`name`) directly on the [node]{@glossary Node}.
	*
	* @param {String} name - The [node]{@glossary Node} property name to set.
	* @param {*} value - The value to assign to the property.
	* @returns {this} The callee for chaining.
	* @public
	*/
	setNodeProperty: function (name, value) {
		if (this.hasNode()) this.node[name] = value;
		return this;
	},

	/**
	* Appends additional content to this control.
	*
	* @param {String} content - The new string to add to the end of the `content`
	* property.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addContent: function (content) {
		return this.set('content', this.get('content') + content);
	},

	// .................................

	// .................................
	// STYLE/CLASS API

	/**
	* Determines whether this control has the class `name`.
	*
	* @param {String} name - The name of the class (or classes) to check for.
	* @returns {Boolean} Whether the control has the class `name`.
	* @public
	*/
	hasClass: function (name) {
		return name && (' ' + this.classes + ' ').indexOf(' ' + name + ' ') > -1;
	},

	/**
	* Adds the specified class to this control's list of classes.
	*
	* @param {String} name - The name of the class to add.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addClass: function (name) {
		var classes = this.classes || '';

		// NOTE: Because this method accepts a string and for efficiency does not wish to
		// parse it to determine if it is actually multiple classes we later pull a trick
		// to keep it normalized and synchronized with our attributes hash and the node's
		if (!this.hasClass(name)) {

			// this is hooked
			this.set('classes', classes + (classes ? (' ' + name) : name));
		}

		return this;
	},

	/**
	* Removes the specified class from this control's list of classes.
	*
	* **Note: It is not advisable to pass a string of multiple, space-delimited
	* class names into this method. Instead, call the method once for each class
	* name that you want to remove.**
	*
	* @param {String} name - The name of the class to remove.
	* @returns {this} The callee for chaining.
	* @public
	*/
	removeClass: function (name) {
		var classes = this.classes;

		if (name) {
			this.set('classes', (' ' + classes + ' ').replace(' ' + name + ' ', ' ').trim());
		}

		return this;
	},

	/**
	* Adds or removes the specified class conditionally, based on the state
	* of the `add` argument.
	*
	* @param {String} name - The name of the class to add or remove.
	* @param {Boolean} add - If `true`, `name` will be added as a class; if
	* `false`, it will be removed.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addRemoveClass: function (name, add) {
		return name ? this[add ? 'addClass' : 'removeClass'](name) : this;
	},

	/**
	* @private
	*/
	classesChanged: function () {
		var classes = this.classes,
			node = this.hasNode(),
			attrs = this.attributes,
			delegate = this.renderDelegate || Control.renderDelegate;

		if (node) {
			if (classes || this.kindClasses) {
				node.setAttribute('class', classes || this.kindClasses);
			} else node.removeAttribute('class');

			this.classes = classes = node.getAttribute('class');
		}

		// we need to update our attributes.class value and flag ourselves to be
		// updated
		attrs['class'] = classes;

		// we want to notify the delegate that the attributes have changed in case it wants
		// to handle this is some special way
		delegate.invalidate(this, 'attributes');
	},

	/**
	* Applies a CSS style directly to the control. Use the `prop` argument to
	* specify the CSS property name you'd like to set, and `value` to specify
	* the desired value. Setting `value` to `null` will remove the CSS property
	* `prop` altogether.
	*
	* @param {String} prop - The CSS property to assign.
	* @param {(String|Number|null|undefined)} value - The value to assign to
	* `prop`. Setting a value of `null`, `undefined`, or the empty string `("")`
	* will remove the property `prop` from the control.
	* @returns {this} Callee for chaining.
	* @public
	*/
	applyStyle: function (prop, value) {

		// NOTE: This method deliberately avoids calling set('style', ...) for performance
		// as it will have already been parsed by the browser so we pass it on via the
		// notification system which is the same

		// TODO: Wish we could delay this potentially...
		// if we have a node we render the value immediately and update our style string
		// in the process to keep them synchronized
		var node = this.hasNode(),
			style = this.style,
			delegate = this.renderDelegate || Control.renderDelegate;

		// FIXME: This is put in place for a Firefox bug where setting a style value of a node
		// via its CSSStyleDeclaration object (by accessing its node.style property) does
		// not work when using a CSS property name that contains one or more dash, and requires
		// setting the property via the JavaScript-style property name. This fix should be
		// removed once this issue has been resolved in the Firefox mainline and its variants
		// (it is currently resolved in the 36.0a1 nightly):
		// https://bugzilla.mozilla.org/show_bug.cgi?id=1083457
		if (node && (platform.firefox < 35 || platform.firefoxOS || platform.androidFirefox)) {
			prop = prop.replace(/-([a-z])/gi, function(match, submatch) {
				return submatch.toUpperCase();
			});
		}

		if (value !== null && value !== '' && value !== undefined) {
			// update our current cached value
			if (node) {
				node.style[prop] = value;

				// cssText is an internal property used to help know when to sync and not
				// sync with the node in styleChanged
				this.style = this.cssText = node.style.cssText;

				// we need to invalidate the style for the delegate
				delegate.invalidate(this, 'style');

				// otherwise we have to try and prepare it for the next time it is rendered we
				// will need to update it because it will not be synchronized
			} else this.set('style', style + (' ' + prop + ':' + value + ';'));
		} else {

			// in this case we are trying to clear the style property so if we have the node
			// we let the browser handle whatever the value should be now and otherwise
			// we have to parse it out of the style string and wait to be rendered

			if (node) {
				node.style[prop] = '';
				this.style = this.cssText = node.style.cssText;

				// we need to invalidate the style for the delegate
				delegate.invalidate(this, 'style');
			} else {

				// this is a rare case to nullify the style of a control that is not
				// rendered or does not have a node
				style = style.replace(new RegExp(
					// This looks a lot worse than it is. The complexity stems from needing to
					// match a url container that can have other characters including semi-
					// colon and also that the last property may/may-not end with one
					'\\s*' + prop + '\\s*:\\s*[a-zA-Z0-9\\ ()_\\-\'"%,]*(?:url\\(.*\\)\\s*[a-zA-Z0-9\\ ()_\\-\'"%,]*)?\\s*(?:;|;?$)',
					'gi'
				),'');
				this.set('style', style);
			}
		}

		return this;
	},

	/**
	* Allows the addition of several CSS properties and values at once, via a
	* single string, similar to how the HTML `style` attribute works.
	*
	* @param {String} css - A string containing one or more valid CSS styles.
	* @returns {this} The callee for chaining.
	* @public
	*/
	addStyles: function (css) {
		var key,
			newStyle = '';

		if (typeof css == 'object') {
			for (key in css) newStyle += (key + ':' + css[key] + ';');
		} else newStyle = css || '';

		this.set('style', this.style + newStyle);
	},

	/**
	* @private
	*/
	styleChanged: function () {
		var delegate = this.renderDelegate || Control.renderDelegate;

		// if the cssText internal string doesn't match then we know style was set directly
		if (this.cssText !== this.style) {

			// we need to render the changes and synchronize - this means that the style
			// property was set directly so we will reset it prepending it with the original
			// style (if any) for the kind and keeping whatever the browser is keeping
			if (this.hasNode()) {
				this.node.style.cssText = this.kindStyle + (this.style || '');
				// now we store the parsed version
				this.cssText = this.style = this.node.style.cssText;
			}

			// we need to ensure that the delegate has an opportunity to handle this change
			// separately if it needs to
			delegate.invalidate(this, 'style');
		}
	},

	/**
	* Retrieves a control's CSS property value. This doesn't just pull the
	* assigned value of `prop`; it returns the browser's understanding of `prop`,
	* the "computed" value. If the control isn't been rendered yet, and you need
	* a default value (such as `0`), include it in the arguments as `def`.
	*
	* @param {String} prop - The property name to get.
	* @param {*} [def] - An optional default value, in case the control isn't
	* rendered yet.
	* @returns {(String|Number)} The computed value of `prop`, as the browser
	* sees it.
	* @public
	*/
	getComputedStyleValue: function (prop, def) {
		return this.hasNode() ? Dom.getComputedStyleValue(this.node, prop) : def;
	},

	/**
	* @private
	*/
	findNodeById: function () {
		return this.id && (this.node = Dom.byId(this.id));
	},

	/**
	* @private
	*/
	idChanged: function (was) {
		if (was) Control.unregisterDomEvents(was);
		if (this.id) {
			Control.registerDomEvents(this.id, this);
			this.setAttribute('id', this.id);
		}
	},

	/**
	* @private
	*/
	contentChanged: function () {
		var delegate = this.renderDelegate || Control.renderDelegate;
		delegate.invalidate(this, 'content');
	},

	/**
	* If the control has been generated, re-flows the control.
	*
	* @public
	*/
	beforeChildRender: function () {
		// if we are generated, we should flow before rendering a child;
		// if not, the render context isn't ready anyway
		if (this.generated) this.flow();
	},

	/**
	* @private
	*/
	showingChanged: function (was) {
		var nextControl;
		// if we are changing from not showing to showing we attempt to find whatever
		// our last known value for display was or use the default
		if (!was && this.showing) {
			this.applyStyle('display', this._display || '');
			
			// note the check for generated and canGenerate as changes to canGenerate will force
			// us to ignore the renderOnShow value so we don't undo whatever the developer was
			// intending
			if (!this.generated && !this.canGenerate && this.renderOnShow) {
				nextControl = this.getNextControl();
				if (nextControl && !this.addBefore) this.addBefore = nextControl;
				this.set('canGenerate', true);
				this.render();
			}
			
			this.sendShowingChangedEvent(was);
		}

		// if we are supposed to be hiding the control then we need to cache our current
		// display state
		else if (was && !this.showing) {
			this.sendShowingChangedEvent(was);
			// we can't truly cache this because it _could_ potentially be set to multiple
			// values throughout its lifecycle although that seems highly unlikely...
			this._display = this.hasNode() ? this.node.style.display : '';
			this.applyStyle('display', 'none');
		}

	},

	/**
	* @private
	*/
	renderOnShowChanged: function () {
		// ensure that the default value assigned to showing is actually a boolean
		// and that it is only true if the renderOnShow is also false
		this.showing = ((!!this.showing) && !this.renderOnShow);
		// we want to check and make sure that the canGenerate value is correct given
		// the state of renderOnShow
		this.canGenerate = (this.canGenerate && !this.renderOnShow);
	},
	
	/**
	* @private
	*/
	sendShowingChangedEvent: function (was) {
		var waterfall = (was === true || was === false),
			parent = this.parent;

		// make sure that we don't trigger the waterfall when this method
		// is arbitrarily called during _create_ and it should only matter
		// that it changed if our parent's are all showing as well
		if (waterfall && (parent ? parent.getAbsoluteShowing(true) : true)) {
			this.waterfall('onShowingChanged', {originator: this, showing: this.showing});
		}
	},

	/**
	* Returns `true` if this control and all parents are showing.
	*
	* @param {Boolean} ignoreBounds - If `true`, it will not force a layout by retrieving
	*	computed bounds and rely on the return from [showing]{@link enyo.Control#showing}
	* exclusively.
	* @returns {Boolean} Whether the control is showing (visible).
	* @public
	*/
	getAbsoluteShowing: function (ignoreBounds) {
		var bounds = !ignoreBounds ? this.getBounds() : null,
			parent = this.parent;

		if (!this.generated || this.destroyed || !this.showing || (bounds &&
			bounds.height === 0 && bounds.width === 0)) {
			return false;
		}

		if (parent && parent.getAbsoluteShowing) {

			// we actually don't care what the parent says if it is the floating layer
			if (!this.parentNode || (this.parentNode !== Control.floatingLayer.hasNode())) {
				return parent.getAbsoluteShowing(ignoreBounds);
			}
		}

		return true;
	},

	/**
	* Handles the `onShowingChanged` event that is waterfalled by controls when
	* their `showing` value is modified. If the control is not showing itself
	* already, it will not continue the waterfall. Overload this method to
	* provide additional handling for this event.
	*
	* @private
	*/
	showingChangedHandler: function (sender, event) {
		return sender === this ? false : !this.showing;
	},

	/**
	* @private
	*/
	fitChanged: function () {
		this.parent.reflow();
	},

	/**
	* Determines whether we are in fullscreen mode or not.
	*
	* @returns {Boolean} Whether we are currently in fullscreen mode.
	* @public
	*/
	isFullscreen: function () {
		return (this.hasNode() && this.node === fullscreen.getFullscreenElement());
	},

	/**
	* Requests that this control be displayed fullscreen (like a video
	* container). If the request is granted, the control fills the screen and
	* `true` is returned; if the request is denied, the control is not resized
	* and `false` is returned.
	*
	* @returns {Boolean} `true` on success; otherwise, `false`.
	* @public
	*/
	requestFullscreen: function () {
		if (!this.hasNode()) return false;

		if (fullscreen.requestFullscreen(this)) {
			return true;
		}

		return false;
	},

	/**
	* Ends fullscreen mode for this control.
	*
	* @returns {Boolean} If the control was in fullscreen mode before this
	* method was called, it is taken out of that mode and `true` is returned;
	* otherwise, `false` is returned.
	* @public
	*/
	cancelFullscreen: function() {
		if (this.isFullscreen()) {
			fullscreen.cancelFullscreen();
			return true;
		}

		return false;
	},

	// .................................

	// .................................
	// RENDER-SCHEME API

	/**
	* Indicates whether the control is allowed to be generated, i.e., rendered
	* into the [DOM]{@glossary DOM} tree.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	canGenerate: true,

	/**
	* Indicates whether the control is visible.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	showing: true,

	/**
	* The [node]{@glossary Node} that this control will be rendered into.
	*
	* @type {enyo.Control}
	* @default null
	* @public
	*/
	renderDelegate: null,

	/**
	* Indicates whether the control has been generated yet.
	*
	* @type {Boolean}
	* @default false
	* @private
	*/
	generated: false,

	/**
	* Forces the control to be rendered. You should use this sparingly, as it
	* can be costly, but it may be necessary in cases where a control or its
	* contents have been updated surreptitiously.
	*
	* @returns {this} The callee for chaining.
	* @public
	*/
	render: function () {

		// prioritize the delegate set for this control otherwise use the default
		var delegate = this.renderDelegate || Control.renderDelegate;

		// the render delegate acts on the control
		delegate.render(this);

		return this;
	},

	/**
	* Takes this control and drops it into a (new/different)
	* [DOM node]{@glossary Node}. This will replace any existing nodes in the
	* target `parentNode`.
	*
	* @param {Node} parentNode - The new parent of this control.
	* @param {Boolean} preventRooting - If `true`, this control will not be treated as a root
	*	view and will not be added to the set of roots.
	* @returns {this} The callee for chaining.
	* @public
	*/
	renderInto: function (parentNode, preventRooting) {
		var delegate = this.renderDelegate || Control.renderDelegate,
			noFit = this.fit === false;

		// attempt to retrieve the parentNode
		parentNode = Dom.byId(parentNode);

		// teardown in case of previous render
		delegate.teardownRender(this);

		if (parentNode == document.body && !noFit) this.setupBodyFitting();
		else if (this.fit) this.addClass('enyo-fit enyo-clip');

		// for IE10 support, we want full support over touch actions in enyo-rendered areas
		this.addClass('enyo-no-touch-action');

		// add css to enable hw-accelerated scrolling on non-android platforms
		// ENYO-900, ENYO-901
		this.setupOverflowScrolling();

		// if there are unflushed body classes we flush them now...
		Dom.flushBodyClasses();

		// we inject this as a root view because, well, apparently that is just an assumption
		// we've been making...
		if (!preventRooting) {
			roots.addToRoots(this);
		}

		// now let the delegate render it the way it needs to
		delegate.renderInto(this, parentNode);

		Dom.updateScaleFactor();

		return this;
	},

	/**
	* A function that fires after the control has rendered. This performs a
	* reflow.
	*
	* @public
	*/
	rendered: function () {
		var child,
			i = 0;

		// CAVEAT: Currently we use one entry point ('reflow') for
		// post-render layout work *and* post-resize layout work.
		this.reflow();

		for (; (child = this.children[i]); ++i) {
			if (child.generated) child.rendered();
		}
	},

	/**
	* You should generally not need to call this method in your app code.
	* It is used internally by some Enyo UI libraries to handle a rare
	* issue that sometimes arises when using a virtualized list or repeater
	* on a touch device.
	*
	* This issue occurs when a gesture (e.g. a drag) originates with a DOM
	* node that ends up being destroyed in mid-gesture as the list updates.
	* When the node is destroyed, the stream of DOM events representing the
	* gesture stops, causing the associated action to stop or otherwise
	* fail.
	*
	* You can prevent this problem from occurring by calling `retainNode`
	* on the {@link enyo.Control} from which the gesture originates. Doing
	* so will cause Enyo to keep the DOM node around (hidden from view)
	* until you explicitly release it. You should call `retainNode` in the
	* event handler for the event that starts the gesture.
	*
	* `retainNode` returns a function that you must call when the gesture
	* ends to release the node. Make sure you call this function to avoid
	* "leaking" the DOM node (failing to remove it from the DOM).
	*
	* @param {Node} node - Optional. Defaults to the node associated with
	* the Control (`Control.node`). You can generally omit this parameter
	* when working with {@link enyo.DataList} or {@link enyo.DataGridList},
	* but should generally pass in the event's target node (`event.target`)
	* when working with {@link enyo.List}. (Because {@link enyo.List} is
	* based on the Flyweight pattern, the event's target node is often not
	* the node currently associated with the Control at the time the event
	* occurs.)
	* @returns {Function} Keep a reference to this function and call it
	* to release the node when the gesture has ended.
	* @public
	*/
	retainNode: function(node) {
		var control = this,
			retainedNode = this._retainedNode = (node || this.hasNode());
		return function() {
			if (control && (control._retainedNode == retainedNode)) {
				control._retainedNode = null;
			} else {
				releaseRetainedNode(retainedNode);
			}
		};
	},

	/**
	* @param {Boolean} [cache] - Whether or not we are tearing down as part of a destroy
	*	operation, or if we are just caching. If `true`, the `showing` and `canGenerate`
	*	properties of the control will not be reset.
	* @private
	*/
	teardownRender: function (cache) {
		var delegate = this.renderDelegate || Control.renderDelegate;

		if (this._retainedNode) {
			storeRetainedNode(this);
		}

		delegate.teardownRender(this, cache);

		// if the original state was set with renderOnShow true then we need to reset these
		// values as well to coordinate the original intent
		if (this.renderOnShow && !cache) {
			this.set('showing', false);
			this.set('canGenerate', false);
		}
	},

	/**
	* @private
	*/
	teardownChildren: function () {
		var delegate = this.renderDelegate || Control.renderDelegate;

		delegate.teardownChildren(this);
	},

	/**
	* @private
	*/
	addNodeToParent: function () {
		var pn;

		if (this.node) {
			pn = this.getParentNode();
			if (pn) {
				if (this.addBefore !== undefined) {
					this.insertNodeInParent(pn, this.addBefore && this.addBefore.hasNode());
				} else this.appendNodeToParent(pn);
			}
		}
	},

	/**
	* @private
	*/
	appendNodeToParent: function(parentNode) {
		parentNode.appendChild(this.node);
	},

	/**
	* @private
	*/
	insertNodeInParent: function(parentNode, beforeNode) {
		parentNode.insertBefore(this.node, beforeNode || parentNode.firstChild);
	},

	/**
	* @private
	*/
	removeNodeFromDom: function() {
		if (this.hasNode() && this.node.parentNode) {
			this.node.parentNode.removeChild(this.node);
		}
	},

	/**
	* @private
	*/
	getParentNode: function () {
		return this.parentNode || (this.parent && (
			this.parent.hasNode() || this.parent.getParentNode())
		);
	},

	// .................................

	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function (props) {
			var attrs = props && props.attributes;

			// ensure that we both keep an instance copy of defined attributes but also
			// update the hash with any additional instance definitions at runtime
			this.attributes = this.attributes ? utils.clone(this.attributes) : {};
			if (attrs) {
				utils.mixin(this.attributes, attrs);
				delete  props.attributes;
			}

			return sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function (props) {
			var classes;

			// initialize the styles for this instance
			this.style = this.kindStyle + this.style;

			// set initial values based on renderOnShow
			this.renderOnShowChanged();

			// super initialization
			sup.apply(this, arguments);

			// ensure that if we aren't showing -> true then the correct style
			// is applied - note that there might be issues with this because we are
			// trying not to have to parse out any other explicit display value during
			// initialization and we can't check because we haven't rendered yet
			if (!this.showing) this.style += ' display: none;';

			// try and make it so we only need to call the method once during
			// initialization and only then when we have something to add
			classes = this.kindClasses;
			if (classes && this.classes) classes += (' ' + this.classes);
			else if (this.classes) classes = this.classes;

			// if there are known classes needed to be applied from the kind
			// definition and the instance definition (such as a component block)
			this.classes = this.attributes['class'] = classes ? classes.trim() : classes;

			// setup the id for this control if we have one
			this.idChanged();
			this.contentChanged();
		};
	}),

	/**
	* Destroys the control and removes it from the [DOM]{@glossary DOM}. Also
	* removes the control's ability to receive bubbled events.
	*
	* @public
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			// if the control has been rendered we ensure it is removed from the DOM
			this.removeNodeFromDom();

			// ensure no other bubbled events can be dispatched to this control
			dispatcher.$[this.id] = null;
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	dispatchEvent: kind.inherit(function (sup) {
		return function (name, event, sender) {
			// prevent dispatch and bubble of events that are strictly internal (e.g.
			// enter/leave)
			if (this.strictlyInternalEvents[name] && this.isInternalEvent(event)) {
				return true;
			}
			return sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	addChild: kind.inherit(function (sup) {
		return function (control) {
			control.addClass(this.controlClasses);
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	removeChild: kind.inherit(function (sup) {
		return function (control) {
			sup.apply(this, arguments);
			control.removeClass(this.controlClasses);
		};
	}),

	/**
	* @private
	*/
	set: kind.inherit(function (sup) {
		return function (path, value, opts) {
			// this should be updated if a better api for hooking becomes available but for
			// now we just do this directly to ensure that the showing value is actually
			// a boolean
			if (path == 'showing') {
				return sup.call(this, path, !! value, opts);
			} else return sup.apply(this, arguments);
		};
	}),

	// .................................
	// BACKWARDS COMPATIBLE API, LEGACY METHODS AND PUBLIC PROPERTY
	// METHODS OR PROPERTIES THAT PROBABLY SHOULD NOT BE HERE BUT ARE ANYWAY

	/**
	* Apparently used by Ares 2 still but we have the property embedded in the kind...
	*
	* @deprecated
	* @private
	*/
	isContainer: false,

	/**
	* @private
	*/
	rtl: false,

	/**
	* @private
	*/
	setupBodyFitting: function () {
		Dom.applyBodyFit();
		this.addClass('enyo-fit enyo-clip');
	},

	/*
	* If the platform is Android or Android-Chrome, don't include the css rule
	* `-webkit-overflow-scrolling: touch`, as it is not supported in Android and leads to
	* overflow issues (ENYO-900 and ENYO-901). Similarly, BB10 has issues repainting
	* out-of-viewport content when `-webkit-overflow-scrolling` is used (ENYO-1396).
	*
	* @private
	*/
	setupOverflowScrolling: function () {
		if(platform.android || platform.androidChrome || platform.blackberry) {
			return;
		}
		Dom.addBodyClass('webkitOverflowScrolling');
	},

	/**
	* Sets the control's directionality based on its content, or an optional `stringInstead`.
	*
	* @param {String} [stringInstead] An alternate string for consideration may be sent instead,
	*	in-case the string to test the directionality of the control is stored in `this.value`,
	*	or some other property, for example.
	* @private
	*/
	detectTextDirectionality: function (stringInstead) {
		// If an argument was supplied at all, use it, even if it's undefined.
		// Values that are null or undefined, or are numbers, arrays, and some objects are safe
		// to be tested.
		var str = (arguments.length) ? stringInstead : this.content;
		if (str || str === 0) {
			this.rtl = utils.isRtl(str);
			this.applyStyle('direction', this.rtl ? 'rtl' : 'ltr');
		} else {
			this.applyStyle('direction', null);
		}

	},

	// .................................

	// .................................
	// DEPRECATED

	/**
	* @deprecated
	* @public
	*/
	getTag: function () {
		return this.tag;
	},

	/**
	* @deprecated
	* @public
	*/
	setTag: function (tag) {
		var was = this.tag;

		if (tag && typeof tag == 'string') {
			this.tag = tag;
			if (was !== tag) this.notify('tag', was, tag);
		}
		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getAttributes: function () {
		return this.attributes;
	},

	/**
	* @deprecated
	* @public
	*/
	setAttributes: function (attrs) {
		var was = this.attributes;

		if (typeof attrs == 'object') {
			this.attributes = attrs;
			if (attrs !== was) this.notify('attributes', was, attrs);
		}

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getClasses: function () {
		return this.classes;
	},

	/**
	* @deprecated
	* @public
	*/
	setClasses: function (classes) {
		var was = this.classes;

		this.classes = classes;
		if (was != classes) this.notify('classes', was, classes);

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getStyle: function () {
		return this.style;
	},

	/**
	* @deprecated
	* @public
	*/
	setStyle: function (style) {
		var was = this.style;

		this.style = style;
		if (was != style) this.notify('style', was, style);

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getContent: function () {
		return this.content;
	},

	/**
	* @deprecated
	* @public
	*/
	setContent: function (content) {
		var was = this.content;
		this.content = content;

		if (was != content) this.notify('content', was, content);

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getShowing: function () {
		return this.showing;
	},

	/**
	* @deprecated
	* @public
	*/
	setShowing: function (showing) {
		var was = this.showing;

		// force the showing property to always be a boolean value
		this.showing = !! showing;

		if (was != showing) this.notify('showing', was, showing);

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getAllowHtml: function () {
		return this.allowHtml;
	},

	/**
	* @deprecated
	* @public
	*/
	setAllowHtml: function (allow) {
		var was = this.allowHtml;
		this.allowHtml = !! allow;

		if (was !== allow) this.notify('allowHtml', was, allow);

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getCanGenerate: function () {
		return this.canGenerate;
	},

	/**
	* @deprecated
	* @public
	*/
	setCanGenerate: function (can) {
		var was = this.canGenerate;
		this.canGenerate = !! can;

		if (was !== can) this.notify('canGenerate', was, can);

		return this;
	},

	/**
	* @deprecated
	* @public
	*/
	getFit: function () {
		return this.fit;
	},

	/**
	* @deprecated
	* @public
	*/
	setFit: function (fit) {
		var was = this.fit;
		this.fit = !! fit;

		if (was !== fit) this.notify('fit', was, fit);

		return this;
	},

	/**
	* @ares
	* @deprecated
	* @public
	*/
	getIsContainer: function () {
		return this.isContainer;
	},

	/**
	* @ares
	* @deprecated
	* @public
	*/
	setIsContainer: function (isContainer) {
		var was = this.isContainer;
		this.isContainer = !! isContainer;

		if (was !== isContainer) this.notify('isContainer', was, isContainer);

		return this;
	}

	// .................................

});

/**
* @static
* @public
*/
kind.setDefaultCtor(Control);

/**
* @static
* @public
*/
Control.renderDelegate = HTMLStringDelegate;

/**
* @private
*/
Control.registerDomEvents = function (id, control) {
	dispatcher.$[id] = control;
};

/**
* @private
*/
Control.unregisterDomEvents = function (id) {
	dispatcher.$[id] = null;
};

/**
* @private
*/
Control.normalizeCssStyleString = function (style) {
	return style ? (
		(";" + style)
		// add a semi-colon if it's not the last character (also trim possible unnecessary whitespace)
		.replace(/([^;])\s*$/, "$1;")
		// ensure we have one space after each colon or semi-colon
		.replace(/\s*;\s*([\w-]+)\s*:\s*/g, "; $1: ")
		// remove first semi-colon and space
		.substr(2).trim()
	) : "";
};

/**
* @private
*/
Control.concat = function (ctor, props, instance) {
	var proto = ctor.prototype || ctor,
		attrs,
		str;

	if (props.classes) {
		if (instance) {
			str = (proto.classes ? (proto.classes + ' ') : '') + props.classes;
			proto.classes = str;
		} else {
			str = (proto.kindClasses || '') + (proto.classes ? (' ' + proto.classes) : '');
			proto.kindClasses = str;
			proto.classes = props.classes;
		}
		delete props.classes;
	}

	if (props.style) {
		if (instance) {
			str = (proto.style ? (proto.style + ';') : '') + (props.style + ';');
			proto.style = Control.normalizeCssStyleString(str);
		} else {
			str = proto.kindStyle ? proto.kindStyle : '';
			str += proto.style ? (';' + proto.style) : '';
			str += props.style;

			// moved it all to kindStyle so that it will be available whenever instanced
			proto.kindStyle = Control.normalizeCssStyleString(str);
		}
		delete props.style;
	}

	if (props.attributes) {
		attrs = proto.attributes;
		proto.attributes = attrs ? utils.mixin({}, [attrs, props.attributes]) : props.attributes;
		delete props.attributes;
	}
};

Control.prototype.defaultKind = Control;

// Control has to be *completely* set up before creating the floating layer otherwise things will
// error out during construction.

/**
* @static
* @public
*/
Control.FloatingLayer = FloatingLayer(Control);

/**
* @static
* @public
*/
Control.floatingLayer = new Control.FloatingLayer({id: 'floatingLayer'});
},{"../../../enyo":12,"../HTMLStringDelegate":39,"../UiComponent":80,"../dispatcher":86,"../dom":87,"../floatingLayer":89,"../fullscreen":90,"../kind":96,"../platform":102,"../roots":105,"../utils":106}],88:[function(require,module,exports){
require('../../enyo');

var
	dispatcher = require('./dispatcher'),
	gesture = require('./gesture'),
	platform = require('./platform'),
	utils = require('./utils');

/**
* @private
*/
dispatcher.features.push(
	function(e) {
		// NOTE: beware of properties in gesture inadvertently mapped to event types
		if (gesture.drag[e.type]) {
			return gesture.drag[e.type](e);
		}
	}
);

/**
* Enyo supports a cross-platform set of drag [events]{@glossary event}. These
* events allow users to write a single set of event handlers for applications
* that run on both mobile and desktop platforms.
*
* The following events are provided:
*
* * 'dragstart'
* * 'dragfinish'
* * 'drag'
* * 'drop'
* * 'dragover'
* * 'dragout'
* * 'hold'
* * 'release'
* * 'holdpulse'
* * 'flick'
*
* For more information on these events, see the documentation on
* [Event Handling]{@linkplain $dev-guide/key-concepts/event-handling.html} in
* the Enyo Developer Guide.
*
* @namespace gesture.drag
* @public
*/
module.exports = gesture.drag =
	/** @lends gesture.drag */ {

	/**
	* @private
	*/
	holdPulseDefaultConfig: {
		frequency: 200,
		events: [{name: 'hold', time: 200}],
		resume: false,
		moveTolerance: 16,
		endHold: 'onMove'
	},

	/**
	* Call this method to specify the framework's 'holdPulse' behavior, which
	* determines the nature of the events generated when a user presses and holds
	* on a user interface element.
	*
	* By default, an `onhold` event fires after 200 ms. After that, an `onholdpulse`
	* event fires every 200 ms until the user stops holding, at which point a
	* `onrelease` event fires.
	*
	* To change the default behavior, call this method and pass it a holdPulse
	* configuration object. The holdPulse configuration object has a number of
	* properties.
	*
	* You can specify a set of custom hold events by setting the `events` property
	* to an array containing one or more objects. Each object specifies a custom
	* hold event, in the form of a `name` / `time` pair. Notes:
	*
	*  * Your custom event names should not include the 'on' prefix; that will be
	*    added automatically by the framework.
	*
	*  * Times should be specified in milliseconds.
	*
	*  * Your `events` array overrides the framework defaults entirely, so if you
	*    want the standard `hold` event to fire at 200 ms (in addition to whatever
	*    custom events you define), you'll need to redefine it yourself as part of
	*    your `events` array.
	*
	* Regardless of how many custom hold events you define, `onholdpulse` events
	* will start firing after the first custom hold event fires, and continue until
	* the user stops holding. Likewise, only one `onrelease` event will fire,
	* regardless of how many custom hold events you define.
	*
	* The`frequency` parameter determines not only how often `holdpulse` events are
	* sent, but the frequency with which the hold duration is measured. This means
	* that the value you set for `frequency` should always be a common factor of the
	* times you set for your custom hold events, to ensure accurate event timing.
	*
	* You can use the `endHold` property to specify the circumstances under which a
	* hold is considered to end. Set `endHold` to `onMove` (the default) if you want
	* the hold to end as soon as the user's finger or pointer moves. Set `endHold`
	* to `onLeave` if you want the hold to end only when the finger or pointer
	* leaves the element altogether. When specifying `onMove`, you can also provide
	* a `moveTolerance` value (default: `16`) that determines how tolerant you want
	* to be of small movements when deciding whether a hold has ended. The higher
	* the value, the further a user's finger or pointer may move without causing
	* the hold to end.
	*
	* Finally, the `resume` parameter (default: `false`) specifies whether a hold
	* that has ended due to finger / pointer movement should be resumed if the
	* user's finger or pointer moves back inside the tolerance threshold (in the
	* case of `endHold: onMove`) or back over the element (in the case of
	* `endHold: onLeave`).
	*
	* Here is an example:
	*
	* ```
	* gesture.drag.configureHoldPulse({
	*     frequency: 100,
	*     events: [
	*         {name: 'hold', time: 200},
	*         {name: 'longpress', time: 500}
	*     ],
	*     endHold: 'onLeave',
	*     resume: true
	* });
	* ```
	* For comparison, here are the out-of-the-box defaults:
	*
	* ```
	* gesture.drag.configureHoldPulse({
	*     frequency: 200,
	*     events: [
	*         {name: 'hold', time: 200}
	*     ],
	*     endHold: 'onMove',
	*     moveTolerance: 16,
	*     resume: false
	* });
	* ```
	*
	* The settings you provide via this method will be applied globally, affecting
	* every Control. Note that you can also override the defaults on a case-by-case
	* basis by handling the `down` event for any Control and calling the
	* `configureHoldPulse` method exposed by the event itself. That method works
	* exactly like this one, except that the settings you provide will apply only to
	* holds on that particular Control.
	*
	* @public
	*/
	configureHoldPulse: function(config) {
		// TODO: Might be nice to do some validation, error handling
		this.holdPulseDefaultConfig = config;
	},

	/**
	* @private
	*/
	holdPulseConfig: {},

	/**
	* @private
	*/
	trackCount: 5,

	/**
	* @private
	*/
	minFlick: 0.1,

	/**
	* @private
	*/
	minTrack: 8,

	/**
	* @private
	*/
	down: function(e) {
		// tracking if the mouse is down
		//enyo.log('tracking ON');
		// Note: 'tracking' flag indicates interest in mousemove, it's turned off
		// on mouseup
		// make sure to stop dragging in case the up event was not received.
		this.stopDragging(e);
		this.target = e.target;
		this.startTracking(e);
	},

	/**
	* @private
	*/
	move: function(e) {
		if (this.tracking) {
			this.track(e);
			// If the mouse is not down and we're tracking a drag, abort.
			// this error condition can occur on IE/Webkit after interaction with a scrollbar.
			if (!e.which) {
				this.stopDragging(e);
				this.endHold();
				this.tracking = false;
				//enyo.log('gesture.drag: mouse must be down to drag.');
				return;
			}
			if (this.dragEvent) {
				this.sendDrag(e);
			} else if (this.holdPulseConfig.endHold === 'onMove') {
				if (this.dy*this.dy + this.dx*this.dx >= this.holdPulseConfig.moveTolerance) { // outside of target
					if (this.holdJob) { // only stop/cancel hold job if it currently exists
						if (this.holdPulseConfig.resume) { // pause hold to potentially resume later
							this.suspendHold();
						} else { // completely cancel hold
							this.endHold();
							this.sendDragStart(e);
						}
					}
				} else if (this.holdPulseConfig.resume && !this.holdJob) { // when moving inside target, only resume hold job if it was previously paused
					this.resumeHold();
				}
			}
		}
	},

	/**
	* @private
	*/
	up: function(e) {
		this.endTracking(e);
		this.stopDragging(e);
		this.endHold();
		this.target = null;
	},

	/**
	* @private
	*/
	enter: function(e) {
		// resume hold when re-entering original target when using 'onLeave' endHold value
		if (this.holdPulseConfig.resume && this.holdPulseConfig.endHold === 'onLeave' && this.target && e.target === this.target) {
			this.resumeHold();
		}
	},

	/**
	* @private
	*/
	leave: function(e) {
		if (this.dragEvent) {
			this.sendDragOut(e);
		} else if (this.holdPulseConfig.endHold === 'onLeave') {
			if (this.holdPulseConfig.resume) { // pause hold to potentially resume later
				this.suspendHold();
			} else { // completely cancel hold
				this.endHold();
				this.sendDragStart(e);
			}
		}
	},

	/**
	* @private
	*/
	stopDragging: function(e) {
		if (this.dragEvent) {
			this.sendDrop(e);
			var handled = this.sendDragFinish(e);
			this.dragEvent = null;
			return handled;
		}
	},

	/**
	* @private
	*/
	makeDragEvent: function(inType, inTarget, inEvent, inInfo) {
		var adx = Math.abs(this.dx), ady = Math.abs(this.dy);
		var h = adx > ady;
		// suggest locking if off-axis < 22.5 degrees
		var l = (h ? ady/adx : adx/ady) < 0.414;
		var e = {};
		// var e = {
		e.type = inType;
		e.dx = this.dx;
		e.dy = this.dy;
		e.ddx = this.dx - this.lastDx;
		e.ddy = this.dy - this.lastDy;
		e.xDirection = this.xDirection;
		e.yDirection = this.yDirection;
		e.pageX = inEvent.pageX;
		e.pageY = inEvent.pageY;
		e.clientX = inEvent.clientX;
		e.clientY = inEvent.clientY;
		e.horizontal = h;
		e.vertical = !h;
		e.lockable = l;
		e.target = inTarget;
		e.dragInfo = inInfo;
		e.ctrlKey = inEvent.ctrlKey;
		e.altKey = inEvent.altKey;
		e.metaKey = inEvent.metaKey;
		e.shiftKey = inEvent.shiftKey;
		e.srcEvent = inEvent.srcEvent;
		// };
		//Fix for IE8, which doesn't include pageX and pageY properties
		if(platform.ie==8 && e.target) {
			e.pageX = e.clientX + e.target.scrollLeft;
			e.pageY = e.clientY + e.target.scrollTop;
		}
		e.preventDefault = gesture.preventDefault;
		e.disablePrevention = gesture.disablePrevention;
		return e;
	},

	/**
	* @private
	*/
	sendDragStart: function(e) {
		//enyo.log('dragstart');
		this.dragEvent = this.makeDragEvent('dragstart', this.target, e);
		dispatcher.dispatch(this.dragEvent);
	},

	/**
	* @private
	*/
	sendDrag: function(e) {
		//enyo.log('sendDrag to ' + this.dragEvent.target.id + ', over to ' + e.target.id);
		// send dragOver event to the standard event target
		var synth = this.makeDragEvent('dragover', e.target, e, this.dragEvent.dragInfo);
		dispatcher.dispatch(synth);
		// send drag event to the drag source
		synth.type = 'drag';
		synth.target = this.dragEvent.target;
		dispatcher.dispatch(synth);
	},

	/**
	* @private
	*/
	sendDragFinish: function(e) {
		//enyo.log('dragfinish');
		var synth = this.makeDragEvent('dragfinish', this.dragEvent.target, e, this.dragEvent.dragInfo);
		synth.preventTap = function() {
			if (e.preventTap) {
				e.preventTap();
			}
		};
		dispatcher.dispatch(synth);
	},

	/**
	* @private
	*/
	sendDragOut: function(e) {
		var synth = this.makeDragEvent('dragout', e.target, e, this.dragEvent.dragInfo);
		dispatcher.dispatch(synth);
	},

	/**
	* @private
	*/
	sendDrop: function(e) {
		var synth = this.makeDragEvent('drop', e.target, e, this.dragEvent.dragInfo);
		synth.preventTap = function() {
			if (e.preventTap) {
				e.preventTap();
			}
		};
		dispatcher.dispatch(synth);
	},

	/**
	* @private
	*/
	startTracking: function(e) {
		this.tracking = true;
		// note: use clientX/Y to be compatible with ie8
		this.px0 = e.clientX;
		this.py0 = e.clientY;
		// this.flickInfo = {startEvent: e, moves: []};
		this.flickInfo = {};
		this.flickInfo.startEvent = e;
		// FIXME: so we're trying to reuse objects where possible, should
		// do the same in scenarios like this for arrays
		this.flickInfo.moves = [];
		this.track(e);
	},

	/**
	* @private
	*/
	track: function(e) {
		this.lastDx = this.dx;
		this.lastDy = this.dy;
		this.dx = e.clientX - this.px0;
		this.dy = e.clientY - this.py0;
		this.xDirection = this.calcDirection(this.dx - this.lastDx, 0);
		this.yDirection = this.calcDirection(this.dy - this.lastDy, 0);
		//
		var ti = this.flickInfo;
		ti.moves.push({
			x: e.clientX,
			y: e.clientY,
			t: utils.perfNow()
		});
		// track specified # of points
		if (ti.moves.length > this.trackCount) {
			ti.moves.shift();
		}
	},

	/**
	* @private
	*/
	endTracking: function() {
		this.tracking = false;
		var ti = this.flickInfo;
		var moves = ti && ti.moves;
		if (moves && moves.length > 1) {
			// note: important to use up time to reduce flick
			// velocity based on time between move and up.
			var l = moves[moves.length-1];
			var n = utils.perfNow();
			// take the greatest of flick between each tracked move and last move
			for (var i=moves.length-2, dt=0, x1=0, y1=0, x=0, y=0, sx=0, sy=0, m; (m=moves[i]); i--) {
				// this flick (this move - last move) / (this time - last time)
				dt = n - m.t;
				x1 = (l.x - m.x) / dt;
				y1 = (l.y - m.y) / dt;
				// establish flick direction
				sx = sx || (x1 < 0 ? -1 : (x1 > 0 ? 1 : 0));
				sy = sy || (y1 < 0 ? -1 : (y1 > 0 ? 1 : 0));
				// if either axis is a greater flick than previously recorded use this one
				if ((x1 * sx > x * sx) || (y1 * sy > y * sy)) {
					x = x1;
					y = y1;
				}
			}
			var v = Math.sqrt(x*x + y*y);
			if (v > this.minFlick) {
				// generate the flick using the start event so it has those coordinates
				this.sendFlick(ti.startEvent, x, y, v);
			}
		}
		this.flickInfo = null;
	},

	/**
	* @private
	*/
	calcDirection: function(inNum, inDefault) {
		return inNum > 0 ? 1 : (inNum < 0 ? -1 : inDefault);
	},

	/**
	* Translate the old format for holdPulseConfig to the new one, to
	* preserve backward compatibility.
	*
	* @private
	*/
	normalizeHoldPulseConfig: function (oldOpts) {
		var nOpts = utils.clone(oldOpts);
		nOpts.frequency = nOpts.delay;
		nOpts.events = [{name: 'hold', time: nOpts.delay}];
		return nOpts;
	},

	/**
	* Method to override holdPulseConfig for a given gesture. This method isn't
	* accessed directly from gesture.drag, but exposed by the `down` event.
	* See `prepareHold()`.
	*
	* @private
	*/
	_configureHoldPulse: function(opts) {
		var nOpts = (opts.delay === undefined) ?
			opts :
			this.normalizeHoldPulseConfig(opts);
		utils.mixin(this.holdPulseConfig, nOpts);
	},

	/**
	* @private
	*/
	prepareHold: function(e) {
		// quick copy as the prototype of the new overridable config
		this.holdPulseConfig = utils.clone(this.holdPulseDefaultConfig, true);

		// expose method for configuring holdpulse options
		e.configureHoldPulse = this._configureHoldPulse.bind(this);
	},

	/**
	* @private
	*/
	beginHold: function(e) {
		var ce;
		// cancel any existing hold since it's possible in corner cases to get a down without an up
		this.endHold();
		this.holdStart = utils.perfNow();
		this._holdJobFunction = utils.bind(this, 'handleHoldPulse');
		// clone the event to ensure it stays alive on IE upon returning to event loop
		ce = this._holdJobEvent = utils.clone(e);
		ce.srcEvent = utils.clone(e.srcEvent);
		this._pulsing = false;
		this._unsent = utils.clone(this.holdPulseConfig.events);
		this._unsent.sort(this.sortEvents);
		this._next = this._unsent.shift();
		if (this._next) {
			this.holdJob = setInterval(this._holdJobFunction, this.holdPulseConfig.frequency);
		}
	},

	/**
	* @private
	*/
	resumeHold: function() {
		this.handleHoldPulse();
		this.holdJob = setInterval(this._holdJobFunction, this.holdPulseConfig.frequency);
	},

	/**
	* @private
	*/
	sortEvents: function(a, b) {
			if (a.time < b.time) return -1;
			if (a.time > b.time) return 1;
			return 0;
	},

	/**
	* @private
	*/
	endHold: function() {
		var e = this._holdJobEvent;
		this.suspendHold();
		if (e && this._pulsing) {
			this.sendRelease(e);
		}
		this._pulsing = false;
		this._unsent = null;
		this._holdJobFunction = null;
		this._holdJobEvent = null;
		this._next = null;
	},

	/**
	* @private
	*/
	suspendHold: function() {
		clearInterval(this.holdJob);
		this.holdJob = null;
	},

	/**
	* @private
	*/
	handleHoldPulse: function() {
		var holdTime = utils.perfNow() - this.holdStart,
			hje = this._holdJobEvent,
			e;
		this.maybeSendHold(hje, holdTime);
		if (this._pulsing) {
			e = gesture.makeEvent('holdpulse', hje);
			e.holdTime = holdTime;
			dispatcher.dispatch(e);
		}
	},

	/**
	* @private
	*/
	maybeSendHold: function(inEvent, inHoldTime) {
		var n = this._next;
		while (n && n.time <= inHoldTime) {
			var e = gesture.makeEvent(n.name, inEvent);
			this._pulsing = true;
			dispatcher.dispatch(e);
			n = this._next = this._unsent.shift();
		}
	},

	/**
	* @private
	*/
	sendRelease: function(inEvent) {
		var e = gesture.makeEvent('release', inEvent);
		dispatcher.dispatch(e);
	},

	/**
	* @private
	*/
	sendFlick: function(inEvent, inX, inY, inV) {
		var e = gesture.makeEvent('flick', inEvent);
		e.xVelocity = inX;
		e.yVelocity = inY;
		e.velocity = inV;
		dispatcher.dispatch(e);
	}
};
},{"../../enyo":12,"./dispatcher":86,"./gesture":91,"./platform":102,"./utils":106}],9:[function(require,module,exports){
/*
 * glue.js - glue code to fit ilib into enyo
 *
 * Copyright Â© 2013-2014 LG Electronics, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var
	dom = require('../../enyo/lib/dom'),
	hooks = require('../../enyo/lib/hooks'),
	platform = require('../../enyo/lib/platform'),
	utils = require('../../enyo/lib/utils'),
	Ajax = require('../../enyo/lib/Ajax'),
	Control = require('../../enyo/lib/Control');

var
	ZoneInfoFile = require('./zoneinfo');

module.exports = function (ilib) {

	var enyoLoader = function() {
		this.base = "ilib/";
		if (platform.platformName === "webos") {
			this.webos = true;
		}
	};

	enyoLoader.prototype = new ilib.Loader();
	enyoLoader.prototype.constructor = enyoLoader;

	enyoLoader.prototype._createZoneFile = function (path) {
		var zone = path.substring(path.indexOf("zoneinfo"));

		// remove the .json suffix to get the name of the zone
		zone = zone.substring(0, zone.length-5);

		try {
			var zif = new ZoneInfoFile("/usr/share/" + zone);

			// only get the info for this year. Later we can get the info
			// for any historical or future year too
			return zif.getIlibZoneInfo(new Date());
		} catch (e) {
			// no file, so just return nothing
			return undefined;
		}
	};

	enyoLoader.prototype._pathjoin = function (root, subpath) {
		if (!root || !root.length) {
			return subpath;
		}
		if (!subpath || !subpath.length) {
			return root;
		}
		return root + (root.charAt(root.length-1) !== '/' ? '/' : "") + subpath;
	};

	/**
	 * Load the list of files asynchronously. This uses recursion in
	 * order to create a queue of files that will be loaded serially.
	 * Each layer, starting at the bottom, loads a file and then loads
	 * the layer on top of it. The very top file on the stack will have
	 * zero files to load, so instead it will be the one to call the
	 * callback to notify the caller that all the content is loaded.
	 *
	 * @param {Object} context function to call this method in the context of
	 * @param {Array.<string>} paths array of strings containing relative paths for required locale data files
	 * @param {Array} results empty array in which to place the resulting json when it is loaded from a file
	 * @param {Object} params An object full of parameters that the caller is passing to this function to help load the files
	 * @param {function(Array.<Object>)} callback callback to call when this function is finished attempting
	 * to load all the files that exist and can be loaded
	 */
	enyoLoader.prototype._loadFilesAsync = function (context, paths, results, params, callback) {
		var root = "resources";
		if (params && typeof(params.root) !== "undefined") {
			root = params.root;
		}
		if (paths.length > 0) {
			var path = paths.shift(),
				url = undefined;

			if (this.webos && path.indexOf("zoneinfo") !== -1) {
				results.push(this._createZoneFile(path));
			} else {
				if (this.isAvailable(root, path)) {
					url = this._pathjoin(root, path);
				} else if (this.isAvailable(this.base + "locale", path)) {
					url = this._pathjoin(this._pathjoin(this.base, "locale"), path)
				}

				var resultFunc = function(inSender, json) {
	                // console.log("enyo-ilib/glue: " + (!inSender.failed && json ? "success" : "failed"));
					results.push(!inSender.failed && (typeof(json) === 'object') ? json : undefined);
					if (paths.length > 0) {
						this._loadFilesAsync(context, paths, results, params, callback);
					} else {
						// only the bottom item on the stack will call
						// the callback
						callback.call(context, results);
					}
				};

				if (url) {
					var ajax = new Ajax({
						url: url,
						cacheBust: false
					});
					// console.log("enyo-ilib/glue: browser/async: attempting to load " + url);
					ajax.response(this, resultFunc);
					ajax.error(this, resultFunc);
					ajax.go();
				} else {
					// nothing to load, so go to the next file
					resultFunc({}, undefined);
				}
			}
		}
	};

	enyoLoader.prototype.loadFiles = function(paths, sync, params, callback) {
		if (sync) {
			var ret = [];
			var root = "resources";
			var locdata = this._pathjoin(this.base, "locale");
			if (params && typeof(params.root) !== "undefined") {
				root = params.root;
			}
			// synchronous
			utils.forEach(paths, function (path) {
				if (this.webos && path.indexOf("zoneinfo") !== -1) {
					ret.push(this._createZoneFile(path));
				} else {
					var found = false;

					var handler = function(inSender, json) {
	                    // console.log((!inSender.failed && json ? "success" : "failed"));
						if (!inSender.failed && typeof(json) === 'object') {
							ret.push(json);
							found = true;
						}
					};

					// console.log("browser/sync: attempting to load lib/enyo-ilib/ilib/locale/" + path);
					if (this.isAvailable(root, path)) {
						var ajax = new Ajax({
							url: this._pathjoin(root, path),
							sync: true,
							cacheBust: false
						});

						ajax.response(this, handler);
						ajax.error(this, handler);
						ajax.go();
					}

					if (!found && this.isAvailable(locdata, path)) {
						var ajax = new Ajax({
							url: this._pathjoin(locdata, path),
							sync: true,
							cacheBust: false
						});

						ajax.response(this, handler);
						ajax.error(this, handler);
						ajax.go();
					}

					if (!found) {
						// not there, so fill in a blank entry in the array
						ret.push(undefined);
					}
				}
			}, this);

			if (typeof(callback) === 'function') {
				callback.call(this, ret);
			}
			return ret;
		}

		// asynchronous
		var results = [];
		this._loadFilesAsync(this, paths, results, params, callback);
	};

	enyoLoader.prototype._loadManifest = function (root, subpath) {
		if (!this.manifest) {
			this.manifest = {};
		}

		var dirpath = this._pathjoin(root, subpath);
		var filepath = this._pathjoin(dirpath, "ilibmanifest.json");

		// util.print("enyo loader: loading manifest " + filepath + "\n");
		var ajax = new Ajax({
			url: filepath,
			sync: true,
			cacheBust: false,
			handleAs: "json"
		});

		var handler = function(inSender, json) {
	        // console.log((!inSender.failed && json ? "success" : "failed"));
			// star indicates there was no ilibmanifest.json, so always try to load files from that dir
			this.manifest[dirpath] = (!inSender.failed && typeof(json) === 'object') ? json.files : "*";
		};

		ajax.response(this, handler);
		ajax.error(this, handler);
		ajax.go();
	},

	enyoLoader.prototype._loadStandardManifests = function() {
		// util.print("enyo loader: load manifests\n");
		if (!this.manifest) {
			this._loadManifest(this.base, "locale"); // standard ilib locale data
			this._loadManifest("", "resources");     // the app's resources dir
		}
	};
	enyoLoader.prototype.listAvailableFiles = function() {
		// util.print("enyo loader: list available files called\n");
		this._loadStandardManifests();
		return this.manifest;
	};
	enyoLoader.prototype.isAvailable = function(root, path) {
		this._loadStandardManifests();

		if (!this.manifest[root]) {
			// maybe it's a custom root? If so, try to load
			// the manifest file first in case it is there
			this._loadManifest(root, "");
		}

		// util.print("enyo loader: isAvailable " + path + "? ");
		// star means attempt to load everything because there was no manifest in that dir
		if (this.manifest[root] === "*" || ilib.indexOf(this.manifest[root], path) !== -1) {
			// util.print("true\n");
			return true;
		}

		// util.print("false\n");
		return false;
	};

	ilib.setLoaderCallback(new enyoLoader());

	if (typeof(window.UILocale) !== 'undefined') {
		// this is a hack until GF-1581 is fixed
		ilib.setLocale(window.UILocale);
	}

	/*
	 * Tell whether or not the given locale is considered a non-Latin locale for webOS purposes. This controls
	 * which fonts are used in various places to show the various languages. An undefined spec parameter means
	 * to test the current locale.
	 *
	 * @param {ilib.Locale|string|undefined} spec locale specifier or locale object of the locale to test, or undefined
	 * to test the current locale
	 */
	function isNonLatinLocale (spec) {
		var li = new ilib.LocaleInfo(spec),
			locale = li.getLocale();

	    // We use the non-latin fonts for these languages (even though their scripts are technically considered latin)
	    var nonLatinLanguageOverrides = ["bs", "cs", "ha", "hr", "hu", "lv", "lt", "pl", "ro", "sr", "sl", "tr", "vi"];
	    // We use the latin fonts (with non-Latin fallback) for these languages (even though their scripts are non-latin)
	    var latinLanguageOverrides = ["ko"];
		return ((li.getScript() !== "Latn" || utils.indexOf(locale.getLanguage(), nonLatinLanguageOverrides) !== -1) &&
			(utils.indexOf(locale.getLanguage(), latinLanguageOverrides) < 0));
	};

	// enyo.updateI18NClasses should be called after every setLocale, but there isn't such a callback in current version
	function updateI18NClasses () {
	    var li = new ilib.LocaleInfo(); // for the current locale
	    var locale = li.getLocale();
		var base = "enyo-locale-";

	    // Remove old style definitions (hack style becouse enyo.dom doesn't have methods like enyo.dom.getBodyClasses, enyo.dom.removeBodyClass)
	    if (document && document.body && document.body.className && document.body.className) {
	        document.body.className = document.body.className.replace(new RegExp('(^|\\s)'+ base +'[^\\s]*', 'g'), '');
	    }

		if (isNonLatinLocale(locale)) {
			// allow enyo to define other fonts for non-Latin languages, or for certain
			// Latin-based languages where the characters with some accents don't appear in the
			// regular fonts, creating a strange "ransom note" look with a mix of fonts in the
			// same word. So, treat it like a non-Latin language in order to get all the characters
			// to display with the same font.
			dom.addBodyClass(base + "non-latin");
		}

		var scriptName = li.getScript();
		if (scriptName !== 'Latn' && scriptName !== 'Cyrl' && scriptName !== 'Grek') {
			// GF-45884: allow enyo to avoid setting italic fonts for those scripts that do not
			// commonly use italics
			dom.addBodyClass(base + "non-italic");
		}

		// allow enyo to apply right-to-left styles to the app and widgets if necessary
		var script = new ilib.ScriptInfo(scriptName);
		if (script.getScriptDirection() === "rtl") {
			dom.addBodyClass(base + "right-to-left");
			Control.prototype.rtl = true;
		} else {
			Control.prototype.rtl = false;
		}

		// allow enyo or the apps to give CSS classes that are specific to the language, country, or script
		if (locale.getLanguage()) {
			dom.addBodyClass(base + locale.getLanguage());
			if (locale.getScript()) {
				dom.addBodyClass(base + locale.getLanguage() + "-" + locale.getScript());
				if (locale.getRegion()) {
					dom.addBodyClass(base + locale.getLanguage() + "-" + locale.getScript() + "-" + locale.getRegion());
				}
			} else if (locale.getRegion()) {
				dom.addBodyClass(base + locale.getLanguage() + "-" + locale.getRegion());
			}
		}
		if (locale.getScript()) {
			dom.addBodyClass(base + locale.getScript());
		}
		if (locale.getRegion()) {
			dom.addBodyClass(base + locale.getRegion());
		}
		// Recreate the case mappers to use the just-recently-set locale
	 	setCaseMappers();
	};

	/*
	 * Reset the $L function to use ilib instead of the dummy function that enyo
	 * comes with by default.
	 */
	hooks.$L = function (string) {
		var str;
		if (!hooks.$L.rb) {
			hooks.$L.setLocale();
		}
		if (typeof(string) === 'string') {
			if (!hooks.$L.rb) {
				return string;
			}
			str = hooks.$L.rb.getString(string);
		} else if (typeof(string) === 'object') {
			if (typeof(string.key) !== 'undefined' && typeof(string.value) !== 'undefined') {
				if (!hooks.$L.rb) {
					return string.value;
				}
				str = hooks.$L.rb.getString(string.value, string.key);
			} else {
				str = "";
			}
		} else {
			str = string;
		}
		return str.toString();
	};

	/**
	 * Set the locale for the strings that $L loads. This may reload the
	 * string resources if necessary.
	 * @param {string} spec the locale specifier
	 */
	hooks.$L.setLocale = function (spec) {
		var locale = new ilib.Locale(spec);
		if (!hooks.$L.rb || spec !== hooks.$L.rb.getLocale().getSpec()) {
			hooks.$L.rb = new ilib.ResBundle({
				locale: locale,
				type: "html",
				name: "strings",
				sync: true,
				lengthen: true		// if pseudo-localizing, this tells it to lengthen strings
			});
		}
	};

	var toLowerCaseMapper, toUpperCaseMapper;

	/**
	 * Set CaseMapper object references to ilib's current locale (its most recently set, by default)
	 */
	function setCaseMappers () {
		toLowerCaseMapper = new ilib.CaseMapper({direction: "tolower"});
		toUpperCaseMapper = new ilib.CaseMapper({direction: "toupper"});
	};

	/**
	 * Override Enyo's toLowerCase and toUpperCase methods with these fancy ones
	 * that call iLib's locale-safe case mapper.
	 */
	utils.toLowerCase = function (inString) {
		if (inString != null) {
			return toLowerCaseMapper.map(inString.toString());
		}
		return inString;
	};
	utils.toUpperCase = function (inString) {
		if (inString != null) {
			return toUpperCaseMapper.map(inString.toString());
		}
		return inString;
	};

	/**
	 * This Enyo hook lets us know that the system locale has changed and gives
	 * us a chance to update the iLib locale before Enyo broadcasts its
	 * `onlocalechange` signal.
	 * Provide an inLocale string, like "en-US" or "ja-JP", to conveniently set
	 * that locale immediately. Provide nothing, and reset the locale back to the
	 * browser's default language.
	 */
	(function(originalUpdateLocale) {
		hooks.updateLocale = function(inLocale) {
			// blow away the cache to force it to reload the manifest files for the new app
			if (ilib._load) ilib._load.manifest = undefined;
			ilib.setLocale(inLocale || navigator.language);
			hooks.$L.setLocale(inLocale || navigator.language);
			updateI18NClasses();
			originalUpdateLocale();
		};
	})(hooks.updateLocale);

	// we go ahead and run this once during loading of iLib settings are valid
	// during the loads of later libraries.
	hooks.updateLocale(null, true);

	return {
		updateI18NClasses: updateI18NClasses,
		isNonLatinLocale: isNonLatinLocale
	};
};
},{"../../enyo/lib/Ajax":13,"../../enyo/lib/Control":26,"../../enyo/lib/dom":87,"../../enyo/lib/hooks":92,"../../enyo/lib/platform":102,"../../enyo/lib/utils":106,"./zoneinfo":11}],31:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');
var
	Control = require('./Control'),
	RepeaterChildSupport = require('./RepeaterChildSupport');

/**
* {@link enyo.DataRepeater} iterates over the items in an {@link enyo.Collection} to
* repeatedly render and synchronize records (instances of {@link enyo.Model}) to its
* own children. For any record in the collection, a new child will be rendered in
* the repeater. If the record is destroyed, the child will be destroyed. These
* [controls]{@link enyo.Control} will automatically update when properties on the
* underlying records are modified if they have been bound using
* [bindings]{@link enyo.Binding}.
*
* @class enyo.DataRepeater
* @extends enyo.Control
* @ui
* @public
*/
var DataRepeater = module.exports = kind(
	/** @lends enyo.DataRepeater.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.DataRepeater',

	/**
	* @private
	*/
	kind: Control,

	/**
	* Set this to `true` to enable selection support. Note that selection stores a
	* reference to the [model]{@link enyo.Model} that is selected, via the
	* [selected]{@link enyo.DataRepeater#selected} method.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	selection: true,

	/**
	* Specifies the type of selection (if enabled), that we want to enable. The possible values
	* are 'single', 'multi', and 'group'. The default is 'single' selection mode, which enables
	* selection and deselection of a single item at a time. The 'multi' selection mode allows
	* multiple children to be selected simultaneously, while the 'group' selection mode allows
	* group-selection behavior such that only one child may be selected at a time and, once a
	* child is selected, it cannot be deselected via user input. The child may still be 
	* deselected via the selection API methods.
	* 
	* @type {String}
	* @default 'single'
	* @public
	*/
	selectionType: 'single',

	/**
	* Set this to `true` to allow multiple children to be selected simultaneously.
	*
	* @deprecated since version 2.6
	* @type {Boolean}
	* @default false
	* @public
	*/
	multipleSelection: false,

	/**
	* Set this to `true` to allow group-selection behavior such that only one child
	* may be selected at a time and, once a child is selected, it cannot be
	* deselected via user input. The child may still be deselected via the selection
	* API methods. Note that setting this property to `true` will set the
	* [multipleSelection]{@link enyo.DataRepeater#multipleSelection} property to
	* `false`.
	*
	* @deprecated since version 2.6
	* @type {Boolean}
	* @default false
	* @public
	*/
	groupSelection: false,

	/**
	* This class will be applied to the [repeater]{@link enyo.DataRepeater} when
	* [selection]{@link enyo.DataRepeater#selection} is enabled. It will also be
	* applied if [multipleSelection]{@link enyo.DataRepeater#multipleSelection}
	* is `true`.
	*
	* @type {String}
	* @default 'selection-enabled'
	* @public
	*/
	selectionClass: 'selection-enabled',

	/**
	* This class will be applied to the [repeater]{@link enyo.DataRepeater} when
	* [selectionType]{@link enyo.DataRepeater#selectionType} is `multi`.
	* When that is the case, the [selectionClass]{@link enyo.DataRepeater#selectionClass}
	* will also be applied.
	*
	* @type {String}
	* @default 'multiple-selection-enabled'
	* @public
	*/
	multipleSelectionClass: 'multiple-selection-enabled',

	/**
	* In cases where selection should be detected from the state of the
	* [model]{@link enyo.Model}, this property should be set to the property on
	* the model that the [repeater]{@link enyo.DataRepeater} should observe for
	* changes. If the model changes, the repeater will reflect the change without
	* having to interact directly with the model. Note that this property must be
	* part of the model's schema, or else its changes will not be detected
	* properly.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	selectionProperty: '',

	/**
	* Set this to a space-delimited string of [events]{@glossary event} or an
	* [array]{@glossary Array} that can trigger the selection of a particular
	* child. To prevent selection entirely, set
	* [selection]{@link enyo.DataRepeater#selection} to `false`.
	*
	* @type {String}
	* @default 'ontap'
	* @public
	*/
	selectionEvents: 'ontap',

	/**
	* Use this [hash]{@glossary Object} to define default [binding]{@link enyo.Binding}
	* properties for **all** children (even children of children) of this
	* [repeater]{@link enyo.DataRepeater}. This can eliminate the need to write the
	* same paths over and over. You may also use any binding macros. Any property
	* defined here will be superseded by the same property if defined for an individual
	* binding.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	childBindingDefaults: null,

	/**
	* @private
	*/
	initComponents: function () {
		this.initContainer();
		var components = this.kindComponents || this.components || [],
			owner = this.getInstanceOwner(),
			props = this.defaultProps? utils.clone(this.defaultProps, true): (this.defaultProps = {});
		// ensure that children know who their binding owner is
		props.bindingTransformOwner = this;
		props.bindingDefaults = this.childBindingDefaults;
		if (components) {
			// if there are multiple components in the components block they will become nested
			// children of the default kind set for the repeater
			if (components.length > 1) {
				props.components = components;
			}
			// if there is only one child, the properties will be the default kind of the repeater
			else {
				utils.mixin(props, components[0]);
			}
			props.repeater = this;
			props.owner = owner;
			props.mixins = props.mixins? props.mixins.concat(this.childMixins): this.childMixins;
		}

		this.defaultProps = props;
	},

	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			this._selection = [];
			// we need to initialize our selectionEvents array
			var se = this.selectionEvents;
			this.selectionEvents = (typeof se == 'string'? se.split(' '): se);
			// we need to pre-bind these methods so they can easily be added
			// and removed as listeners later
			var h = this._handlers = utils.clone(this._handlers);
			for (var e in h) {
				h[e] = this.bindSafely(h[e]);
			}
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.collectionChanged();
			// Converting deprecated selection properties to our current selection API
			this.selectionType = this.multipleSelection ? (this.groupSelection ? 'group' : 'multi') : this.selectionType;
			this.selectionTypeChanged();
		};
	}),

	/**
	* @private
	*/
	groupSelectionChanged: function () {
		this.set('selectionType', this.groupSelection ? 'group' : 'single');
	},

	/**
	* @private
	*/
	multipleSelectionChanged: function () {
		this.set('selectionType', this.multipleSelection ? 'multi' : 'single');
	},

	/**
	* @private
	*/
	selectionTypeChanged: function (was) {
		// Synchronizing our deprecated properties
		this.groupSelection = this.selectionType == 'group';
		this.multipleSelection = this.selectionType == 'multi';

		if (was == 'multi') {
			if (this._selection.length > 1) {
				this.deselectAll();
			}
		}
		this.selectionChanged();
	},

	/**
	* @private
	*/
	selectionChanged: function () {
		this.addRemoveClass(this.selectionClass, this.selection);
		this.addRemoveClass(this.multipleSelectionClass, this.selectionType == 'multi' && this.selection);
	},

	/**
	* Destroys any existing children in the [repeater]{@link enyo.DataRepeater} and creates all
	* new children based on the current [data]{@link enyo.Repeater#data}.
	*
	* @public
	*/
	reset: function () {
		// use the facaded dataset because this could be any
		// collection of records
		var dd = this.get('data');
		// destroy the client controls we might already have
		this.destroyClientControls();
		// and now we create new ones for each new record we have
		for (var i=0, r; (r=dd.at(i)); ++i) {
			this.add(r, i);
		}
		this.hasReset = true;
	},
	/**
	* Refreshes each [control]{@link enyo.Control} in the dataset.
	*
	* @param {Boolean} immediate - If `true`, refresh will occur immediately; otherwise,
	* it will be queued up as a job.
	* @public
	*/
	refresh: function (immediate) {
		if (!this.hasReset) { return this.reset(); }
		var refresh = this.bindSafely(function () {
			var dd = this.get('data'),
				cc = this.getClientControls();
			for (var i=0, c, d; (d=dd.at(i)); ++i) {
				c = cc[i];
				if (c) {
					c.set('model', d);
				} else {
					this.add(d, i);
				}
			}
			this.prune();
		});

		// refresh is used as the event handler for
		// collection resets so checking for truthy isn't
		// enough. it must be true.
		if(immediate === true) {
			refresh();
		} else {
			this.startJob('refreshing', refresh, 16);
		}
	},

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			if (this.collection && this.collection.length) {
				this.reset();
			}
			this.hasRendered = true;
		};
	}),

	/**
	* Adds a [record]{@link enyo.Model} at a particular index.
	*
	* @param {enyo.Model} rec - The [record]{@link enyo.Model} to add.
	* @param {Number} idx - The index at which the record should be added.
	* @public
	*/
	add: function (rec, idx) {
		var c = this.createComponent({model: rec, index: idx});
		if (this.generated && !this.batching) {
			c.render();
		}
	},

	/**
	* Removes the [record]{@link enyo.Model} at a particular index.
	*
	* @param {Number} idx - The index of the [record]{@link enyo.Model} to be removed.
	* @public
	*/
	remove: function (idx) {
		var controls = this.getClientControls()
			, control;

		control = controls[idx];

		if (control) control.destroy();
	},

	/**
	* Removes any [controls]{@link enyo.Control} that are outside the boundaries of the
	* [data]{@link enyo.DataRepeater#data} [collection]{@link enyo.Collection} for the
	* [repeater]{@link enyo.DataRepeater}.
	*
	* @public
	*/
	prune: function () {
		var g = this.getClientControls()
			, len = (this.collection? this.collection.length: 0)
			, x;
		if (g.length > len) {
			x = g.slice(len);
			for (var i=0, c; (c=x[i]); ++i) {
				c.destroy();
			}
		}
	},

	/**
	* @private
	*/
	initContainer: function () {
		var ops = this.get('containerOptions'),
			nom = ops.name || (ops.name = this.containerName);
		this.createChrome([ops]);
		this.discoverControlParent();
		if (nom != this.containerName) {
			this.$[this.containerName] = this.$[nom];
		}
	},

	/**
	* @private
	*/
	handlers: {
		onSelected: 'childSelected',
		onDeselected: 'childDeselected'
	},

	/**
	* @private
	*/
	_handlers: {
		add: 'modelsAdded',
		remove: 'modelsRemoved',
		reset: 'refresh',
		sort: 'refresh',
		filter: 'refresh'
	},

	/**
	* @private
	*/
	componentsChanged: function (p) {
		this.initComponents();
		this.reset();
	},

	/**
	* @private
	*/
	collectionChanged: function (p) {
		var c = this.collection;
		if (typeof c == 'string') {
			c = this.collection = utils.getPath.call(global, c);
		}
		if (c) {
			this.initCollection(c, p);
		}
	},

	/**
	* @private
	*/
	initCollection: function (c, p) {
		var e;
		if (c && c.addListener) {
			for (e in this._handlers) {
				c.addListener(e, this._handlers[e]);
			}
		}
		if (p && p.removeListener) {
			for (e in this._handlers) {
				p.removeListener(e, this._handlers[e]);
			}
		}
	},

	/**
	* @private
	*/
	modelsAdded: function (sender, e, props) {
		if (sender === this.collection) this.refresh();
	},

	/**
	* @private
	*/
	modelsRemoved: function (sender, e, props) {
		if (sender === this.collection) {
			this.deselectRemovedModels(props.models);
			this.refresh();
		}
	},

	/**
	* Deselect removed models from _selected array.
	* After calling it, we can ensure that the removed models aren't currently selected.
	* @param {array} models - The array of models that are removed from collection.
	* @private
	*/
	deselectRemovedModels: function(models) {
		var selected = this._selection,
			orig,
			model,
			idx,
			len = selected && selected.length,
			i = models.length - 1;

		// We have selected models
		if (len) {
			// unfortunately we need to make a copy to preserve what the original was
			// so we can pass it with the notification if any of these are deselected
			orig = selected.slice();

			// we have _selected array to track currently selected models
			// if some removed models are in _selected, we should remove them from _selected
			// clearly we won't need to continue checking if selected does not have any models
			for (; (model = models[i]) && selected.length; --i) {
				idx = selected.indexOf(model);
				if (idx > -1) selected.splice(idx, 1);
			}

			// Some selected models are discovered, so we need to notify
			if (len != selected.length) {
				if (this.selection) {
					if (this.selectionType == 'multi') this.notify('selected', orig, selected);
					else this.notify('selected', orig[0], selected[0] || null);
				}
			}
		}
	},

	/**
	* @private
	*/
	batchingChanged: function (prev, val) {
		if (this.generated && false === val) {
			this.$[this.containerName].render();
			this.refresh(true);
		}
	},

	/**
	* Calls [childForIndex()]{@link enyo.DataRepeater#getChildForIndex}. Leaving for posterity.
	*
	* @param {Number} idx - The index of the child to retrieve.
	* @returns {enyo.Control|undefined} The [control]{@link enyo.Control} at the specified
	* index, or `undefined` if it could not be found or the index is out of bounds.
	* @public
	*/
	getChildForIndex: function (idx) {
		return this.childForIndex(idx);
	},

	/**
	* Attempts to return the [control]{@link enyo.Control} representation at a particular index.
	*
	* @param {Number} idx - The index of the child to retrieve.
	* @returns {enyo.Control|undefined} The [control]{@link enyo.Control} at the specified
	* index, or `undefined` if it could not be found or the index is out of bounds.
	* @public
	*/
	childForIndex: function (idx) {
		return this.$.container.children[idx];
	},

	/**
	* Retrieves the data associated with the [repeater]{@link enyo.DataRepeater}.
	*
	* @returns {enyo.Collection} The {@link enyo.Collection} that comprises the data.
	* @public
	*/
	data: function () {
		return this.collection;
	},

	/**
	* Consolidates selection logic and allows for deselection of a [model]{@link enyo.Model}
	* that has already been removed from the [collection]{@link enyo.Collection}.
	*
	* @private
	*/
	_select: function (idx, model, select) {
		if (!this.selection) {
			return;
		}

		var c = this.getChildForIndex(idx),
			s = this._selection,
			i = utils.indexOf(model, s);

		if (select) {
			if(i == -1) {
				if(this.selectionType != 'multi') {
					while (s.length) {
						i = this.collection.indexOf(s.pop());
						this.deselect(i);
					}
				}

				s.push(model);
			}
		} else {
			if(i >= 0) {
				s.splice(i, 1);
			}
		}

		if (c) {
			c.set('selected', select);
		}
		if (this.selectionProperty && model) {
			(s=this.selectionProperty) && model.set(s, select);
		}
		this.notifyObservers('selected');
	},

	/**
	* Selects the item at the given index.
	*
	* @param {Number} idx - The index of the item to select.
	* @public
	*/
	select: function (idx) {
		this._select(idx, this.collection.at(idx), true);
	},

	/**
	* Deselects the item at the given index.
	*
	* @param {Number} idx - The index of the item to deselect.
	* @public
	*/
	deselect: function (idx) {
		this._select(idx, this.collection.at(idx), false);
	},

	/**
	* Determines whether a [model]{@link enyo.Model} is currently selected.
	*
	* @param {enyo.Model} model - The [model]{@link enyo.Model} whose selection status
	* is to be determined.
	* @returns {Boolean} `true` if the given model is selected; otherwise, `false`.
	* @public
	*/
	isSelected: function (model) {
		return !!~utils.indexOf(model, this._selection);
	},

	/**
	* Selects all items (if [selectionType]{@link enyo.DataRepeater#selectionType} is `multi`).
	*
	* @public
	*/
	selectAll: function () {
		if (this.selectionType == 'multi') {
			this.stopNotifications();
			var s = this._selection
				, len = this.collection? this.collection.length: 0;
			s.length = 0;
			for (var i=0; i<len; ++i) {
				this.select(i);
			}
			this.startNotifications();
		}
	},

	/**
	* Deselects all items.
	*
	* @public
	*/
	deselectAll: function () {
		if (this.selection) {
			this.stopNotifications();
			var s = this._selection, m, i;
			while (s.length) {
				m = s.pop();
				i = this.collection.indexOf(m);
				this.deselect(i);
			}
			this.startNotifications();
		}
	},

	/**
	* A computed property that returns the currently selected [model]{@link enyo.Model}
	* (if [selectionType]{@link enyo.DataRepeater#selectionType} is not `multi'`),
	* or an immutable [array]{@glossary Array} of all currently selected models (if
	* `selectionType` is `multi'`).
	*
	* @public
	*/
	selected: function() {
		// to ensure that bindings will clear properly according to their api
		return (this.selectionType == 'multi' ? this._selection : this._selection[0]) || null;
	},

	/**
	* @private
	*/
	dataChanged: function () {
		if (this.collection && this.hasRendered) {
			this.reset();
		}
	},

	/**
	* @private
	*/
	computed: [
		{method: 'selected'},
		{method: 'data', path: ['controller', 'collection']}
	],

	/**
	* @private
	*/


	/**
	* @private
	*/
	childMixins: [RepeaterChildSupport],

	/**
	* @private
	*/
	controlParentName: 'container',

	/**
	* @private
	*/
	containerName: 'container',

	/**
	* @private
	*/
	containerOptions: {name: 'container', classes: 'enyo-fill enyo-data-repeater-container'},

	/**
	* @private
	*/
	batching: false,

	/**
	* @private
	*/
	_selection: null
});

/**
* @static
* @private
*/
DataRepeater.concat = function (ctor, props) {
	var p = ctor.prototype || ctor;
	if (props.childMixins) {
		p.childMixins = (p.childMixins? utils.merge(p.childMixins, props.childMixins): props.childMixins.slice());
		delete props.childMixins;
	}
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./Control":26,"./RepeaterChildSupport":59,"./kind":96,"./utils":106}],32:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');

var
	Animator = require('../../enyo/lib/Animator'),
	Control = require('./Control');

/**
* Fires when the [drawer]{@link enyo.Drawer} has been opened or closed. The handler can 
* determine whether the drawer was just opened or just closed based on the
* [open]{@link enyo.Drawer#open} property. If `this.getOpen()` returns `true`,
* the drawer was opened; if not, it was closed.
*
* @event enyo.Drawer#onDrawerAnimationStep
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when the [drawer]{@link enyo.Drawer} has been opened or closed. The handler
* can determine whether the drawer was just opened or just closed based on the
* [open]{@link enyo.Drawer#open} property. If `this.getOpen()` returns `true`,
* the drawer was opened; if not, it was closed.
*
* @event enyo.Drawer#onDrawerAnimationEnd
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Drawer} is a control that appears or disappears based on its
* [open]{@link enyo.Drawer#open} property. By default, the drawer appears
* or disappears with a sliding animation whose direction is determined by the
* [orient]{@link enyo.Drawer#orient} property.
*
* For more information, see the documentation on
* [Drawers]{@linkplain $dev-guide/building-apps/layout/drawers.html} in the
* Enyo Developer Guide.
*
* @class enyo.Drawer
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Drawer.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Drawer',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Drawer.prototype */ {
		
		/**
		* The visibility state of the [drawer's]{@link enyo.Drawer} associated control.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		open : true,

		/**
		* The direction of the opening/closing animation; will be either `'v'` for vertical
		* or `'h'` for horizontal.
		* 
		* @type {String}
		* @default 'v'
		* @public
		*/
		orient : 'v',

		/**
		* If `true`, the opening/closing transition will be animated.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		animated : true,

		/**
		* If `true`, the [drawer]{@link enyo.Drawer} will resize its container as it is
		* animating, which is useful when the drawer is placed inside a
		* [FittableLayout]{@link enyo.FittableLayout}.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		resizeContainer: true
	},

	/**
	* @private
	*/
	events: {
		onDrawerAnimationStep: '',
		onDrawerAnimationEnd: ''
	},
	
	/**
	* @private
	*/
	style: 'overflow: hidden; position: relative;',

	/**
	* @private
	*/
	tools: [
		{kind: Animator, onStep: 'animatorStep', onEnd: 'animatorEnd'},
		{name: 'client', style: 'position: relative;', classes: 'enyo-border-box'}
	],

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.animatedChanged();
			this.openChanged();
		};
	}),

	/**
	* @method
	* @private
	*/
	initComponents: kind.inherit(function (sup) {
		return function() {
			this.createChrome(this.tools);
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	animatedChanged: function () {
		if (!this.animated && this.hasNode() && this.$.animator.isAnimating()) {
			this.$.animator.stop();
			this.animatorEnd();
		}
	},

	/**
	* @private
	*/
	openChanged: function () {
		this.$.client.show();
		if (this.hasNode()) {
			if (this.$.animator.isAnimating()) {
				this.$.animator.reverse();
			} else {
				var v = this.orient == 'v';
				var d = v ? 'height' : 'width';
				var p = v ? 'top' : 'left';
				// unfixing the height/width is needed to properly
				// measure the scrollHeight/Width DOM property, but
				// can cause a momentary flash of content on some browsers
				this.applyStyle(d, null);
				var s = this.hasNode()[v ? 'scrollHeight' : 'scrollWidth'];
				if (this.animated) {
					this.$.animator.play({
						startValue: this.open ? 0 : s,
						endValue: this.open ? s : 0,
						dimension: d,
						position: p
					});
				} else {
					// directly run last frame if not animating
					this.animatorEnd();
				}
			}
		} else {
			this.$.client.setShowing(this.open);
		}
	},

	/**
	* @private
	*/
	animatorStep: function (sender) {
		// the actual drawer DOM node adjusts its height
		if (this.hasNode()) {
			var d = sender.dimension;
			this.applyStyle(d, sender.value + 'px');
		}
		// while the client inside the drawer adjusts its position to move out of the visible area
		var cn = this.$.client.hasNode();
		if (cn) {
			var p = sender.position;
			var o = (this.open ? sender.endValue : sender.startValue);
			this.$.client.applyStyle(p, (sender.value - o) + 'px');
		}
		if (this.container && this.resizeContainer) {
			this.container.resize();
		}
		this.doDrawerAnimationStep();
		return true;
	},

	/**
	* @private
	*/
	animatorEnd: function () {
		if (!this.open) {
			this.$.client.hide();
		}
		else {
			var v = (this.orient == 'v');
			var d = v ? 'height' : 'width';
			var p = v ? 'top' : 'left';
			var cn = this.$.client.hasNode();
			// clear out changes to container position & node dimension
			if (cn) {
				this.$.client.applyStyle(p, null);
			}
			if (this.node) {
				this.applyStyle(d, null);
			}
		}
		if (this.container && this.resizeContainer) {
			this.container.resize();
		}
		this.doDrawerAnimationEnd();
		return true;
	}
});
},{"../../enyo":12,"../../enyo/lib/Animator":15,"./Control":26,"./kind":96}],37:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Control = require('./Control');

/**
* The extended {@glossary event} [object]{@glossary Object} that is provided when the
* [onActiveChanged]{@link enyo.Group#onActiveChanged} event is fired.
*
* @typedef {Object} enyo.Group~ActiveChangedEvent
* @property {enyo.Control} active - The active [control]{@link enyo.Control} for the
*	[group]{@link enyo.Group}.
*/

/**
* Fires when the active control is changed.
*
* @event enyo.Group#onActiveChanged
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {enyo.Group~ActiveChangedEvent} event - An [object]{@glossary Object} containing
*	event information.
* @public
*/

/**
* {@link enyo.Group} provides a wrapper around multiple elements. It enables the creation of
* radio groups from arbitrary [components]{@link enyo.Component} that support the
* {@link enyo.GroupItem} API.
*
* @class enyo.Group
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Group.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Group',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Group.prototype */ {
		
		/**
		* If `true`, only one [GroupItem]{@link enyo.GroupItem} in the 
		* [component]{@link enyo.Component} list may be active at a given time.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		highlander: true,

		/**
		* If `true`, an active highlander item may be deactivated.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		allowHighlanderDeactivate: false,

		/**
		* The [control]{@link enyo.Control} that was last selected.
		* 
		* @type {Object}
		* @default null
		* @public
		*/
		active: null,
	
		/**
		* This property is used to scope this [group]{@link enyo.Group} to a certain
		* set of [controls]{@link enyo.Control}.  When this is used, the group only
		* controls activation of controls that have the same `groupName` property set
		* on them.
		* 
		* @type {String}
		* @default null
		* @public
		*/
		groupName: ''
	},

	/**
	* @private
	*/
	events: {
		onActiveChanged: ""
	},
	
	/**
	* @private
	*/
	handlers: {
		onActivate: 'activate'
	},

	/**
	* @private
	*/
	activate: function (sender, e) {
		if ((this.groupName || e.originator.groupName) && (e.originator.groupName != this.groupName)) {
			return;
		}
		if (this.highlander) {
			// we can optionally accept an `allowHighlanderDeactivate` property in e without directly 
			// specifying it when instatiating the group - used mainly for custom kinds requiring deactivation  
			if (e.allowHighlanderDeactivate !== undefined && e.allowHighlanderDeactivate !== this.allowHighlanderDeactivate) {
				this.setAllowHighlanderDeactivate(e.allowHighlanderDeactivate);
			}
			// deactivation messages are ignored unless it's an attempt
			// to deactivate the highlander
			if (!e.originator.active) {
				// this clause prevents deactivating a grouped item once it's been active,
				// as long as `allowHighlanderDeactivate` is false. Otherwise, the only
				// proper way to deactivate a grouped item is to choose a new highlander.
				if (e.originator == this.active) {
					if (!this.allowHighlanderDeactivate) {
						this.active.setActive(true);
					} else {
						this.setActive(null);
					}
				}
			} else {
				this.setActive(e.originator);
			}
		}
	},

	/**
	* @fires enyo.Group#onActiveChanged
	* @private
	*/
	activeChanged: function (was) {
		if (was && !was.destroyed) {
			was.setActive(false);
			was.removeClass('active');
		}
		if (this.active) {
			this.active.addClass('active');
		}
		this.doActiveChanged({active: this.active});
	}
});
},{"../../enyo":12,"./Control":26,"./kind":96}],38:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Control = require('./Control');

/**
* Fires when the [active state]{@link enyo.GroupItem#active} has changed.
*
* @event enyo.GroupItem#onActivate
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.GroupItem} is the base [kind]{@glossary kind} for the
* [Grouping]{@link enyo.Group} API. It manages the
* [active state]{@link enyo.GroupItem#active} of the [component]{@link enyo.Component}
* (or the [inheriting]{@glossary subkind} component). A subkind may call `setActive()` 
* to set the [active]{@link enyo.GroupItem#active} property to the desired state; this
* will additionally [bubble]{@link enyo.Component#bubble} an 
* [onActivate]{@link enyo.GroupItem#onActivate} {@glossary event}, which may
* be handled as needed by the containing components. This is useful for creating
* groups of items whose state should be managed collectively.
*
* For an example of how this works, see the {@link enyo.Group} kind, which enables the
* creation of radio groups from arbitrary components that	support the Grouping API.
*
* @class enyo.GroupItem
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Groupitem.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.GroupItem',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Groupitem.prototype */ {

		/**
		* Will be `true` if the item is currently selected.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false
	},
	
	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.activeChanged();
		};
	}),

	/**
	* @fires enyo.GroupItem#onActivate
	* @private
	*/
	activeChanged: function () {
		this.bubble('onActivate');
	}
});
},{"../../enyo":12,"./Control":26,"./kind":96}],41:[function(require,module,exports){
require('../../../enyo');

var
	kind = require('../kind'),
	ri = require('../resolution'),
	dispatcher = require('../dispatcher'),
	path = require('../pathResolver');
var
	Control = require('../Control');

/**
* Fires when the [image]{@link enyo.Image} has loaded.
*
* @event enyo.Image#onload
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when there has been an error while loading the [image]{@link enyo.Image}.
*
* @event enyo.Image#onerror
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Image} implements an HTML [&lt;img&gt;]{@glossary img} element and, optionally,
* [bubbles]{@link enyo.Component#bubble} the [onload]{@link enyo.Image#onload} and
* [onerror]{@link enyo.Image#onerror} [events]{@glossary event}. Image dragging is suppressed by
* default, so as not to interfere with touch interfaces.
*
* {@link enyo.Image} also has support for multi-resolution images. If you are developing assets
* for specific screen sizes, HD (720p), FHD (1080p), UHD (4k), for example, you may provide
* specific image assets in a hash/object format to the `src` property, instead of the usual
* string. The image sources will be used automatically when the screen resolution is less than
* or equal to those screen types. For more informaton on our resolution support, and how to
* enable this feature, see our [resolution independence docs]{@link enyo.ri}.
*
* ```
* // Take advantage of the multi-rez mode
* {kind: 'enyo.Image', src: {
* 	'hd': 'http://lorempixel.com/64/64/city/1/',
* 	'fhd': 'http://lorempixel.com/128/128/city/1/',
* 	'uhd': 'http://lorempixel.com/256/256/city/1/'
* }, alt: 'Multi-rez'},
* // Standard string `src`
* {kind: 'enyo.Image', src: http://lorempixel.com/128/128/city/1/', alt: 'Large'},
* ```
*
* @class enyo.Image
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Image.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Image',

	/**
	* @private
	*/
	kind: Control,

	/**
	* When `true`, no [onload]{@link enyo.Image#onload} or
	* [onerror]{@link enyo.Image#onerror} {@glossary event} handlers will be
	* created.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	noEvents: false,

	/**
	* @private
	*/
	published:
		/** @lends enyo.Image.prototype */ {

		/**
		* Maps to the `src` attribute of an [&lt;img&gt; tag]{@glossary img}. This also supports
		* a multi-resolution hash object. See
		* [the above description of enyo.Image]{@link enyo.Image} for more details and examples
		* or our [resolution independence docs]{@link enyo.ri}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		src: '',

		/**
		* Maps to the `alt` attribute of an [&lt;img&gt; tag]{@glossary img}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		alt: '',

		/**
		* By default, the [image]{@link enyo.Image} is rendered using an `<img>` tag.
		* When this property is set to `'cover'` or `'constrain'`, the image will be
		* rendered using a `<div>`, utilizing `background-image` and `background-size`.
		*
		* Set this property to `'constrain'` to letterbox the image in the available
		* space, or `'cover'` to cover the available space with the image (cropping the
		* larger dimension).  Note that when `sizing` is set, the control must be
		* explicitly sized.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		sizing: '',

		/**
		* When [sizing]{@link enyo.Image#sizing} is used, this property sets the positioning of
		* the [image]{@link enyo.Image} within the bounds, corresponding to the
		* [`background-position`]{@glossary backgroundPosition} CSS property.
		*
		* @type {String}
		* @default 'center'
		* @public
		*/
		position: 'center'
	},

	/**
	* @private
	*/
	tag: 'img',

	/**
	* @private
	*/
	classes: 'enyo-image',

	/**
	* @type {Object}
	* @property {Boolean} draggable - This attribute will take one of the following
	*	[String]{@glossary String} values: 'true', 'false' (the default), or 'auto'.
	* Setting Boolean `false` will remove the attribute.
	* @public
	*/
	attributes: {
		draggable: 'false'
	},

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			if (this.noEvents) {
				delete this.attributes.onload;
				delete this.attributes.onerror;
			}
			sup.apply(this, arguments);
			this.altChanged();
			this.sizingChanged();
			this.srcChanged();
			this.positionChanged();
		};
	}),

	/**
	* @private
	*/
	srcChanged: function () {
		var src = ri.selectSrc(this.src);
		if (this.sizing) {
			this.applyStyle('background-image', src ? 'url(' + path.rewrite(src) + ')' : 'none');
		} else {
			if (!src) {
				// allow us to clear the src property
				this.setAttribute('src', '');
			} else {
				this.setAttribute('src', path.rewrite(src));
			}
		}
	},

	/**
	* @private
	*/
	altChanged: function () {
		this.setAttribute('alt', this.alt);
	},

	/**
	* @private
	*/
	sizingChanged: function (was) {
		this.tag = this.sizing ? 'div' : 'img';
		this.addRemoveClass('sized', !!this.sizing);
		if (was) {
			this.removeClass(was);
		}
		if (this.sizing) {
			this.addClass(this.sizing);
		}
		if (this.generated) {
			this.srcChanged();
			this.render();
		}
	},

	/**
	* @private
	*/
	positionChanged: function () {
		if (this.sizing) {
			this.applyStyle('background-position', this.position);
		}
	},

	/**
	* @fires enyo.Image#onload
	* @fires enyo.Image#onerror
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			dispatcher.makeBubble(this, 'load', 'error');
		};
	}),

	/**
	* @private
	*/
	statics: {
		/**
			A globally accessible data URL that describes a simple
			placeholder image that may be used in samples and applications
			until final graphics are provided. As an SVG image, it will
			expand to fill the desired width and height set in the style.
		*/
		placeholder:
			'data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC' +
			'9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj48cmVjdCB3aWR0aD0iMTAw' +
			'JSIgaGVpZ2h0PSIxMDAlIiBzdHlsZT0ic3Ryb2tlOiAjNDQ0OyBzdHJva2Utd2lkdGg6IDE7IGZpbGw6ICNhYW' +
			'E7IiAvPjxsaW5lIHgxPSIwIiB5MT0iMCIgeDI9IjEwMCUiIHkyPSIxMDAlIiBzdHlsZT0ic3Ryb2tlOiAjNDQ0' +
			'OyBzdHJva2Utd2lkdGg6IDE7IiAvPjxsaW5lIHgxPSIxMDAlIiB5MT0iMCIgeDI9IjAiIHkyPSIxMDAlIiBzdH' +
			'lsZT0ic3Ryb2tlOiAjNDQ0OyBzdHJva2Utd2lkdGg6IDE7IiAvPjwvc3ZnPg=='
	}
});
},{"../../../enyo":12,"../Control":26,"../dispatcher":86,"../kind":96,"../pathResolver":101,"../resolution":104}],42:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	dispatcher = require('./dispatcher'),
	platform = require('./platform');
var
	Control = require('./Control');

/**
* Fires immediately when the text changes.
*
* @event enyo.Input#oninput
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when the text has changed and the [input]{@link enyo.Input} subsequently loses
* focus.
*
* @event enyo.Input#onchange
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when the [input]{@link enyo.Input} is disabled or enabled.
*
* @event enyo.Input#onDisabledChange
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Input} implements an HTML [&lt;input&gt;]{@glossary input} element
* with cross-platform support for change [events]{@glossary event}.
*
* You may listen for [oninput]{@link enyo.Input#oninput} and
* [onchange]{@link enyo.Input#onchange} [DOM events]{@glossary DOMEvent} from
* this [control]{@link enyo.Control} to know when the text inside has been modified.
*
* For more information, see the documentation on
* [Text Fields]{@linkplain $dev-guide/building-apps/controls/text-fields.html}
* in the Enyo Developer Guide.
*
* @class enyo.Input
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Input.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Input',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	published:
		/** @lends enyo.Input.prototype */ {

		/**
		* Value of the [input]{@link enyo.Input}. Use this property only to initialize the
		* value. Call `getValue()` and `setValue()` to manipulate the value at runtime.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		value: '',

		/**
		* Text to display when the [input]{@link enyo.Input} is empty
		*
		* @type {String}
		* @default ''
		* @public
		*/
		placeholder: '',

		/**
		* Type of [input]{@link enyo.Input}; if not specified, it's treated as `'text'`.
		* This may be anything specified for the `type` attribute in the HTML
		* specification, including `'url'`, `'email'`, `'search'`, or `'number'`.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		type: '',

		/**
		* When `true`, prevents input into the [control]{@link enyo.Control}. This maps
		* to the `disabled` DOM attribute.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* When `true`, the contents of the [input]{@link enyo.Input} will be selected
		* when the input gains focus.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		selectOnFocus: false
	},

	/**
	* @private
	*/
	events: {
		onDisabledChange: ''
	},

	/**
	* Set to `true` to focus this [control]{@link enyo.Control} when it is rendered.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	defaultFocus: false,

	/**
	* @private
	*/
	tag: 'input',

	/**
	* @private
	*/
	classes: 'enyo-input',

	/**
	* @private
	*/
	handlers: {
		onfocus: 'focused',
		oninput: 'input',
		onclear: 'clear',
		ondragstart: 'dragstart'
	},

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			if (platform.ie) {
				this.handlers.onkeyup = 'iekeyup';
			}
			if (platform.windowsPhone) {
				this.handlers.onkeydown = 'iekeydown';
			}
			sup.apply(this, arguments);
			this.placeholderChanged();
			// prevent overriding a custom attribute with null
			if (this.type) {
				this.typeChanged();
			}
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);

			dispatcher.makeBubble(this, 'focus', 'blur');

			//Force onchange event to be bubbled inside Enyo for IE8
			if(platform.ie == 8){
				this.setAttribute('onchange', dispatcher.bubbler);
			}

			this.disabledChanged();
			if (this.defaultFocus) {
				this.focus();
			}
		};
	}),

	/**
	* @private
	*/
	typeChanged: function () {
		this.setAttribute('type', this.type);
	},

	/**
	* @private
	*/
	placeholderChanged: function () {
		this.setAttribute('placeholder', this.placeholder);
		this.valueChanged();
	},

	/**
	* @fires enyo.Input#onDisabledChange
	* @private
	*/
	disabledChanged: function () {
		this.setAttribute('disabled', this.disabled);
		this.bubble('onDisabledChange');
	},

	/**
	* @private
	*/
	valueChanged: function () {
		var node = this.hasNode(),
			attrs = this.attributes;
		if (node) {
			if (node.value !== this.value) {
				node.value = this.value;
			}
			// we manually update the cached value so that the next time the
			// attribute is requested or the control is re-rendered it will
			// have the correct value - this is because calling setAttribute()
			// in some cases does not receive an appropriate response from the
			// browser
			attrs.value = this.value;
		} else {
			this.setAttribute('value', this.value);
		}
		this.detectTextDirectionality((this.value || this.value === 0) ? this.value : this.get('placeholder'));
	},

	/**
	* @private
	*/
	iekeyup: function (sender, e) {
		var ie = platform.ie, kc = e.keyCode;
		// input event missing on ie 8, fails to fire on backspace and delete keys in ie 9
		if (ie <= 8 || (ie == 9 && (kc == 8 || kc == 46))) {
			this.bubble('oninput', e);
		}
	},

	/**
	* @private
	*/
	iekeydown: function (sender, e) {
		var wp = platform.windowsPhone, kc = e.keyCode, dt = e.dispatchTarget;
		// onchange event fails to fire on enter key for Windows Phone 8, so we force blur
		if (wp <= 8 && kc == 13 && this.tag == 'input' && dt.hasNode()) {
			dt.node.blur();
		}
	},

	/**
	* @private
	*/
	clear: function () {
		this.setValue('');
	},

	// note: we disallow dragging of an input to allow text selection on all platforms
	/**
	* @private
	*/
	dragstart: function () {
		return this.hasFocus();
	},

	/**
	* @private
	*/
	focused: function () {
		if (this.selectOnFocus) {
			utils.asyncMethod(this, 'selectContents');
		}
	},

	/**
	* @private
	*/
	selectContents: function () {
		var n = this.hasNode();

		if (n && n.setSelectionRange) {
			n.setSelectionRange(0, n.value.length);
		} else if (n && n.createTextRange) {
			var r = n.createTextRange();
			r.expand('textedit');
			r.select();
		}
	},

	/**
	* @private
	*/
	input: function () {
		var val = this.getNodeProperty('value');
		this.setValue(val);
	}
});
},{"../../enyo":12,"./Control":26,"./dispatcher":86,"./kind":96,"./platform":102,"./utils":106}],46:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	path = require('./pathResolver');
var
	Control = require('./Control');

/**
* Fires when the `src` or `type` of the {@link enyo.MediaSource} changes.
*
* @event enyo.MediaSource#onChangeSource
* @type {Object}
* @public
*/

/**
* A media source for {@link enyo.Audio} or {@link enyo.Video}.
*
* ```
* {kind: 'Video', components: [
* 	{src: 'video.mp4', type: 'video/mp4'},
* 	{src: 'video.ogg', type: 'video/ogg'},
* 	{src: 'video.webm', type: 'video/webm'}
* ]}
* ```
* 
* @ui
* @class enyo.MediaSource
* @extends enyo.Control
* @public
*/
module.exports = kind(
	/** @lends enyo.MediaSource.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.MediaSource',
	
	/**
	* @private
	*/
	kind: Control,
	
	/**
	* @private
	*/
	tag: 'source',
	
	/**
	* Path to the source.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	src: '',
	
	/**
	* MIME Type of the source.
	*
	* @type {String}
	* @default ''
	* @public
	*/
	type: '',
	
	/**
	* @private
	*/
	events: {
		onChangeSource: ''
	},
	
	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);

			// import the value from attributes if it was specified there instead of the property
			this.syncAttribute('src');
			this.syncAttribute('type');
		};
	}),
	
	/**
	* @fires enyo.MediaSource#onChangeSource
	* @private
	*/
	srcChanged: function () {
		this.setAttribute('src', path.rewrite(this.src));
		this.doChangeSource();
	},
	
	/**
	* @fires enyo.MediaSource#onChangeSource
	* @private
	*/
	typeChanged: function () {
		this.setAttribute('type', this.type);
		this.doChangeSource();
	},
	
	/**
	* Synchronizes initial property values with attributes. If the property is valued, it is set
	* on the attribute. If not and the attribute is valued, import it onto the property
	* 
	* @private
	*/
	syncAttribute: function (name) {
		var attr = this.getAttribute(name);

		if(!this[name] && attr) {
			this[name] = attr;
		} else {
			this.setAttribute(name, this[name]);
		}
	}
});
},{"../../enyo":12,"./Control":26,"./kind":96,"./pathResolver":101}],58:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils');
var
	Control = require('./Control');

/**
* The extended {@glossary event} [object]{@glossary Object} that is provided
* when the [onSetupItem]{@link enyo.Repeater#onSetupItem} event is fired.
*
* @typedef {Object} enyo.Repeater~SetupItemEvent
* @property {Number} index - The item's index.
* @property {Object} item - The item control, for decoration.
*/

/**
* Fires when each item is created.
*
* @event enyo.Repeater#onSetupItem
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {enyo.Repeater~SetupItemEvent} event - An [object]{@glossary Object} containing
*	event information.
* @public
*/
	
/**
* Sometimes client [controls]{@link enyo.Control} are intermediated with null-controls.
* These overrides reroute [events]{@glossary event} from such controls to the nominal
* [delegate]{@glossary delegate}, as would happen in the absence of intermediation.
* 
* @class enyo.OwnerProxy
* @extends enyo.Control
* @private
*/
var OwnerProxy = kind(
	/** @lends enyo.OwnerProxy.prototype */ {

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	tag: null,

	/**
	* @method
	* @private
	*/
	decorateEvent: kind.inherit(function (sup) {
		return function(inEventName, inEvent, inSender) {
			if (inEvent) {
				// preserve an existing index property.
				if (utils.exists(inEvent.index)) {
					// if there are nested indices, store all of them in an array
					// but leave the innermost one in the index property
					inEvent.indices = inEvent.indices || [inEvent.index];
					inEvent.indices.push(this.index);
				} else {
					// for a single level, just decorate the index property
					inEvent.index = this.index;
				}
				// update delegate during bubbling to account for proxy
				// by moving the delegate up to the repeater level
				if (inEvent.delegate && inEvent.delegate.owner === this) {
					inEvent.delegate = this.owner;
				}
			}
			sup.apply(this, arguments);
		};
	})
});

/**
* {@link enyo.Repeater} is a simple [control]{@link enyo.Control} for making lists of items.
*
* The [components]{@link enyo.Component} of a repeater are copied for each item created,
* and are wrapped in a control that keeps the state of the item index.
* 
* ```javascript
* {kind: 'Repeater', count: 2, onSetupItem: 'setImageSource', components: [
*	{kind: 'Image'}
* ]}
* 
* setImageSource: function(inSender, inEvent) {
*	var index = inEvent.index;
*	var item = inEvent.item;
*	item.$.image.setSrc(this.imageSources[index]);
*	return true;
* }
* ```
* 
* Be sure to return `true` from your `onSetupItem` handler to avoid having other 
* {@glossary event} handlers further up the tree try to modify your item control.
* 
* For more information, see the documentation on
* [Lists]{@linkplain $dev-guide/building-apps/layout/lists.html} in the
* Enyo Developer Guide.
*
* @class enyo.Repeater
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Repeater.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Repeater',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Repeater.prototype */ {
		
		/**
		* The number of items to be repeated.
		* 
		* @type {Number}
		* @default 0
		* @public
		*/
		count: 0
	},

	/**
	* @private
	*/
	events: {
		onSetupItem: ''
	},

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.countChanged();
		};
	}),
	
	/**
	* @method
	* @private
	*/
	initComponents: kind.inherit(function (sup) {
		return function() {
			this.itemComponents = this.components || this.kindComponents;
			this.components = this.kindComponents = null;
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	countChanged: function () {
		this.build();
	},

	/**
	* @private
	*/
	itemAtIndex: function (idx) {
		return this.controlAtIndex(idx);
	},

	/** 
	* Renders the [collection]{@link enyo.Collection} of items. This will delete any
	* existing items and recreate the [repeater]{@link enyo.Repeater} if called after
	* the repeater has been rendered. This is called automatically when the
	* [count]{@link enyo.Repeater#count} property changes. To set the `count` property
	* and force a re-render, such as when a [data model]{@link enyo.Model} changes,
	* use `set('count', newCount, true)`, where the last parameter forces the change
	* handler to be called, even if the `count` remains the same.
	*
	* @fires enyo.Repeater#onSetupItem
	* @public
	*/
	build: function () {
		this.destroyClientControls();
		for (var i=0, c; i<this.count; i++) {
			c = this.createComponent({kind: OwnerProxy, index: i});
			// do this as a second step so 'c' is the owner of the created components
			c.createComponents(this.itemComponents);
			// invoke user's setup code
			this.doSetupItem({index: i, item: c});
		}
		this.render();
	},
	/**
	* Renders a specific item in the [collection]{@link enyo.Collection}. This does not
	* destroy the item, but just calls the `onSetupItem` {@glossary event} handler again
	* for it, so any state stored in the item is preserved.
	*
	* @param {Number} idx - The index of the item to render.
	* @fires enyo.Repeater#onSetupItem
	* @public
	*/
	renderRow: function (idx) {
		var c = this.itemAtIndex(idx);
		this.doSetupItem({index: idx, item: c});
	},

	/**
	* A legacy method that sets the number of items to be repeated and effectively forces a 
	* rebuild of the [repeater]{@link enyo.Repeater}, regardless of whether or not the count has
	* changed.
	*
	* @param {Number} count - The number of items to be repeated.
	* @public
	*/
	setCount: function (count) {
		this.set('count', count, {force: true});
	}
});
},{"../../enyo":12,"./Control":26,"./kind":96,"./utils":106}],62:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind'),
	utils = require('../utils');

var
	Control = require('../Control');

/**
* {@link enyo.Scrim} provides an overlay that will prevent taps from propagating
* to the controls that it covers.  A scrim may be "floating" or "non-floating".
* A floating scrim will fill the entire viewport, while a non-floating scrim will
* be constrained by the dimensions of its container.
*
* The scrim should have a CSS class of `enyo-scrim-transparent`,
* `enyo-scrim-translucent`, or any other class that has
* `pointer-events: auto` in its style properties.
*
* You may specify the `z-index` at which you want the scrim to appear by calling
* [showAtZIndex()]{@link enyo.Scrim#showAtZIndex}. If you do so, you must call
* [hideAtZIndex()]{@link enyo.Scrim#hideAtZIndex} with the same value to hide the
* scrim.
*
* @class  enyo.Scrim
* @extends enyo.Control
* @ui
* @public
*/
var Scrim = module.exports = kind(
	/** @lends enyo.Scrim.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Scrim',

	kind: Control,

	/**
	* Current visibility state
	*
	* @type {Boolean}
	* @private
	*/
	showing: false,

	/**
	* @private
	*/
	classes: 'enyo-scrim enyo-fit',

	/**
	* If `true`, the scrim is rendered in a floating layer outside of other
	* controls. This can be used to guarantee that the scrim will be shown
	* on top of other controls.
	*
	* @type {Boolean}
	* @default  false
	* @public
	*/
	floating: false,

	/**
	* @private
	*/
	create: function () {
		this.inherited(arguments);
		this.zStack = [];
		if (this.floating) {
			this.setParent(Control.floatingLayer);
		}
	},

	/**
	* @private
	*/
	showingChanged: function () {
		// auto render when shown.
		if (this.floating && this.showing && !this.hasNode()) {
			this.render();
		}
		this.inherited(arguments);
		//this.addRemoveClass(this.showingClassName, this.showing);
	},

	/**
	* @private
	*/
	addZIndex: function (zIndex) {
		if (utils.indexOf(zIndex, this.zStack) < 0) {
			this.zStack.push(zIndex);
		}
	},

	/**
	* @private
	*/
	removeZIndex: function (control) {
		utils.remove(control, this.zStack);
	},

	/**
	* Shows scrim at the specified z-index. Note that if you call
	* `showAtZIndex()`, you must call [hideAtZIndex()]{@link enyo.Scrim#hideAtZIndex}
	* to properly unwind the z-index stack.
	*
	* @param  {Number} zIndex - z-index for the scrim
	* @public
	*/
	showAtZIndex: function (zIndex) {
		this.addZIndex(zIndex);
		if (zIndex !== undefined) {
			this.setZIndex(zIndex);
		}
		this.show();
	},

	/**
	* Hides scrim at the specified z-index.
	*
	* @param  {Number} zIndex - z-index of the scrim
	* @public
	*/
	hideAtZIndex: function (zIndex) {
		this.removeZIndex(zIndex);
		if (!this.zStack.length) {
			this.hide();
		} else {
			var z = this.zStack[this.zStack.length-1];
			this.setZIndex(z);
		}
	},

	/**
	* @private
	*/
	setZIndex: function (zIndex) {
		this.zIndex = zIndex;
		this.applyStyle('z-index', zIndex);
	},

	/**
	* @private
	*/
	make: function () {
		return this;
	}
});

/**
* Scrim singleton exposing a subset of the Scrim API;
* it is replaced with a proper {@link enyo.Scrim} instance.
*
* @class  enyo.scrimSingleton
* @private
*/
var ScrimSingleton = kind(
	/** @lends  enyo.scrimSingleton.prototype */ {

	/**
	* @private
	*/
	kind: null,

	/**
	* @private
	*/
	constructor: function (props) {
		this.instanceName = name;
		this.props = props || {};
	},

	/**
	* @private
	*/
	make: function () {
		var s = new Scrim(this.props);
		return s;
	},

	/**
	* @private
	*/
	showAtZIndex: function (zIndex) {
		var s = this.make();
		s.showAtZIndex(zIndex);
	},

	/**
	* In case somebody does this out of order
	*
	* @private
	*/
	hideAtZIndex: utils.nop,

	/**
	* @private
	*/
	show: function () {
		var s = this.make();
		s.show();
	}
});

Scrim.scrim = new ScrimSingleton({floating: true, classes: 'enyo-scrim-translucent'});
Scrim.scrimTransparent = new ScrimSingleton({floating: true, classes: 'enyo-scrim-transparent'});
Scrim.ScrimSingleton = ScrimSingleton;
},{"../../../enyo":12,"../Control":26,"../kind":96,"../utils":106}],64:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	dispatcher = require('./dispatcher');

var
	Control = require('./Control');

/**
* {@link enyo.ScrollStrategy} is a helper [kind]{@glossary kind} that implements a default 
* scrolling strategy for an {@link enyo.Scroller}.
* 
* `enyo.ScrollStrategy` is not typically created in application code. Instead, it is specified 
* as the value of the [strategyKind]{@link enyo.Scroller#strategyKind} property of an
* `enyo.Scroller` or {@link enyo.List}, or is used by the framework implicitly.
*
* @class enyo.ScrollStrategy
* @protected
*/
module.exports = kind(
	/** @lends enyo.ScrollStrategy.prototype */ {

	name: 'enyo.ScrollStrategy',

	kind: Control,

	/**
	* @private
	*/
	tag: null,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.ScrollStrategy.prototype */ {
		
		/**
		* Specifies how to vertically scroll.  Acceptable values are `'scroll'`, `'auto'`,
		* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the
		* scroll strategy.
		* 
		* @type {String}
		* @default 'default'
		* @public
		*/
		vertical: 'default',
		
		/**
		* Specifies how to horizontally scroll.  Acceptable values are `'scroll'`, `'auto'`,
		* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the
		* scroll strategy.
		* 
		* @type {String}
		* @default 'default'
		* @public
		*/
		horizontal: 'default',
		
		/**
		* The horizontal scroll position.
		* 
		* @type {Number}
		* @default 0
		* @public
		*/
		scrollLeft: 0,
		
		/**
		* The vertical scroll position.
		* 
		* @type {Number}
		* @default 0
		* @public
		*/
		scrollTop: 0,
		
		/**
		* Maximum height of the scroll content.
		* 
		* @type {Number}
		* @default null
		* @public
		*/
		maxHeight: null,
		
		/**
		* Indicates whether mouse wheel may be used to move the [scroller]{@link enyo.Scroller}.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		useMouseWheel: true
	},
	
	/**
	* @private
	*/
	events: {
		onScrollStart: '',
		onScrollStop: ''
	},

	/**
	* @private
	*/
	handlers: {
		ondragstart: 'dragstart',
		ondragfinish: 'dragfinish',
		ondown: 'down',
		onmove: 'move',
		onmousewheel: 'mousewheel',
		onscroll: 'domScroll'
	},

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.horizontalChanged();
			this.verticalChanged();
			this.maxHeightChanged();
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			dispatcher.makeBubble(this.container, 'scroll');
			this.scrollNode = this.calcScrollNode();
		};
	}),

	/**
	* @method
	* @private
	*/
	teardownRender: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.scrollNode = null;
		};
	}),

	/**
	* @private
	*/
	calcScrollNode: function () {
		return this.container.hasNode();
	},

	/**
	* @private
	*/
	horizontalChanged: function () {
		this.container.applyStyle('overflow-x', this.horizontal == 'default' ? 'auto' : this.horizontal);
	},

	/**
	* @private
	*/
	verticalChanged: function () {
		this.container.applyStyle('overflow-y', this.vertical == 'default' ? 'auto' : this.vertical);
	},

	/**
	* @private
	*/
	maxHeightChanged: function () {
		this.container.applyStyle('max-height', this.maxHeight);
	},

	/** 
	* Scrolls to the specified position.
	*
	* @param {Number} x - The `x` position in pixels.
	* @param {Number} y - The `y` position in pixels.
	* @public
	*/
	scrollTo: function (x, y) {
		if (this.scrollNode) {
			this.setScrollLeft(x);
			this.setScrollTop(y);
		}
	},

	/** 
	* Ensures that the given node is visible in the [scroller's]{@link enyo.Scroller} viewport.
	*
	* @param {Node} node - The node to make visible in the [scroller's]{@link enyo.Scroller}
	*	viewport.
	* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the
	*	scroller.
	* @public
	*/
	scrollToNode: function (node, alignWithTop) {
		if (this.scrollNode) {
			var sb = this.getScrollBounds();
			var n = node;
			var b = {height: n.offsetHeight, width: n.offsetWidth, top: 0, left: 0};
			while (n && n.parentNode && n.id != this.scrollNode.id) {
				b.top += n.offsetTop;
				b.left += n.offsetLeft;
				n = n.parentNode;
			}
			// By default, the element is scrolled to align with the top of the scroll area.
			this.setScrollTop(Math.min(sb.maxTop, alignWithTop === false ? b.top - sb.clientHeight + b.height : b.top));
			this.setScrollLeft(Math.min(sb.maxLeft, alignWithTop === false ? b.left - sb.clientWidth + b.width : b.left));
		}
	},

	/**
	* Scrolls the given [control]{@link enyo.Control} into view.
	*
	* @param {enyo.Control} ctl - The [control]{@link enyo.Control} to make visible in the
	*	[scroller's]{@link enyo.Scroller} viewport.
	* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the
	*	scroller.
	* @public
	*/
	scrollIntoView: function (ctl, alignWithTop) {
		if (ctl.hasNode()) {
			ctl.node.scrollIntoView(alignWithTop);
		}
	},
	isInView: function(inNode) {
		var sb = this.getScrollBounds();
		var ot = inNode.offsetTop;
		var oh = inNode.offsetHeight;
		var ol = inNode.offsetLeft;
		var ow = inNode.offsetWidth;
		return (ot >= sb.top && ot + oh <= sb.top + sb.clientHeight) && (ol >= sb.left && ol + ow <= sb.left + sb.clientWidth);
	},

	/**
	* Sets the vertical scroll position.
	*
	* @param {Number} top - The vertical scroll position in pixels.
	* @public
	*/
	setScrollTop: function (top) {
		this.scrollTop = top;
		if (this.scrollNode) {
			this.scrollNode.scrollTop = this.scrollTop;
		}
	},

	/**
	* Sets the horizontal scroll position.
	*
	* @param {Number} left - The horizontal scroll position in pixels.
	* @public
	*/
	setScrollLeft: function (left) {
		this.scrollLeft = left;
		if (this.scrollNode) {
			this.scrollNode.scrollLeft = this.scrollLeft;
		}
	},

	/**
	* Retrieves the horizontal scroll position.
	*
	* @returns {Number} The horizontal scroll position in pixels.
	* @public
	*/
	getScrollLeft: function () {
		return this.scrollNode ? this.scrollNode.scrollLeft : this.scrollLeft;
	},

	/**
	* Retrieves the vertical scroll position.
	*
	* @returns {Number} The vertical scroll position in pixels.
	* @private
	*/
	getScrollTop: function () {
		return this.scrollNode ? this.scrollNode.scrollTop : this.scrollTop;
	},

	/**
	* @private
	*/
	_getScrollBounds: function () {
		var s = this.getScrollSize(), cn = this.container.hasNode();
		var b = {
			left: this.getScrollLeft(),
			top: this.getScrollTop(),
			clientHeight: cn ? cn.clientHeight : 0,
			clientWidth: cn ? cn.clientWidth : 0,
			height: s.height,
			width: s.width
		};
		b.maxLeft = Math.max(0, b.width - b.clientWidth);
		b.maxTop = Math.max(0, b.height - b.clientHeight);
		return b;
	},

	/**
	* @private
	*/
	getScrollSize: function () {
		var n = this.scrollNode;
		return {width: n ? n.scrollWidth : 0, height: n ? n.scrollHeight : 0};
	},

	/**
	* Retrieves the scroll boundaries of the [scroller]{@link enyo.Scroller}.
	* 
	* @returns {enyo.Scroller~BoundaryObject} An [object]{@glossary Object} describing the 
	*	scroll boundaries.
	* @public
	*/
	getScrollBounds: function () {
		return this._getScrollBounds();
	},

	/**
	* @private
	*/
	calcStartInfo: function () {
		var sb = this.getScrollBounds();
		var y = this.getScrollTop(), x = this.getScrollLeft();
		this.canVertical = sb.maxTop > 0 && this.vertical != 'hidden';
		this.canHorizontal = sb.maxLeft > 0 && this.horizontal != 'hidden';
		this.startEdges = {
			top: y === 0,
			bottom: y === sb.maxTop,
			left: x === 0,
			right: x === sb.maxLeft
		};
	},

	// NOTE: down, move, and drag handlers are needed only for native touch scrollers

	/**
	* @private
	*/
	shouldDrag: function (e) {
		var requestV = e.vertical;
		return (requestV && this.canVertical  || !requestV && this.canHorizontal) /*&& !this.isOobVerticalScroll(event)*/;
	},

	/**
	* @private
	*/
	dragstart: function (sender, e) {
		this.dragging = this.shouldDrag(e);
		if (this.dragging) {
			return this.preventDragPropagation;
		}
	},

	/**
	* @private
	*/
	dragfinish: function (sender, e) {
		if (this.dragging) {
			this.dragging = false;
			e.preventTap();
		}
	},

	/**
	* Avoid allowing scroll when starting at a vertical boundary to prevent iOS from window 
	* scrolling.
	* 
	* @private
	*/
	down: function (sender, e) {
		if (this.isScrolling()) {
			e.preventTap();
		}
		this.calcStartInfo();
	},

	/**
	* NOTE: Mobile native [scrollers]{@link enyo.Scroller} need `touchmove`. Indicate this by 
	* setting the `requireTouchmove` property to `true`.
	* 
	* @private
	*/
	move: function (sender, e) {
		if (e.which && (this.canVertical && e.vertical || this.canHorizontal && e.horizontal)) {
			e.disablePrevention();
		}
	},

	/**
	* @private
	*/
	mousewheel: function (sender, e) {
		//* We disable mouse wheel scrolling by preventing the default
		if (!this.useMouseWheel) {
			e.preventDefault();
		}
	},

	/**
	* @private
	*/
	domScroll: function(sender, e) {
		if (!this._scrolling) {
			this.doScrollStart();
		}
		this._scrolling = true;
		this.startJob('stopScrolling', function() {
			this._scrolling = false;
			this.doScrollStop();
		}, 100);
	},

	/**
	* @public
	*/
	isScrolling: function() {
		return this._scrolling;
	}
});
},{"../../enyo":12,"./Control":26,"./dispatcher":86,"./kind":96}],65:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind');

var
	Control = require('../Control'),
	Dom = require('../dom');

/**
* {@link enyo.ScrollThumb} is a helper [kind]{@glossary kind} used by 
* {@link enyo.TouchScrollStrategy} and {@link enyo.TranslateScrollStrategy} to
* display a small visual scroll indicator.
* 
* `enyo.ScrollThumb` is not typically created in application code.
*
* @class enyo.ScrollThumb
* @protected
*/
module.exports = kind(
	/** @lends enyo.ScrollThumb.prototype */ {
	
	name: 'enyo.ScrollThumb',
	
	kind: Control,

	/**
	* The orientation of the scroll indicator bar; 'v' for vertical or 'h' for horizontal.
	* 
	* @type {String}
	* @default 'v'
	* @public
	*/
	axis: 'v',

	/**
	* Minimum size of the indicator.
	* 
	* @private
	*/
	minSize: 4,

	/**
	* Size of the indicator's corners.
	* 
	* @private
	*/
	cornerSize: 6,

	/**
	* @private
	*/
	classes: 'enyo-thumb',

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			var v = this.axis == 'v';
			this.dimension = v ? 'height' : 'width';
			this.offset = v ? 'top' : 'left';
			this.translation = v ? 'translateY' : 'translateX';
			this.positionMethod = v ? 'getScrollTop' : 'getScrollLeft';
			this.sizeDimension = v ? 'clientHeight' : 'clientWidth';
			this.addClass('enyo-' + this.axis + 'thumb');
			this.transform = Dom.canTransform();
			if (Dom.canAccelerate()) {
				Dom.transformValue(this, 'translateZ', 0);
			}
		};
	}),

	/** 
	* Syncs the scroll indicator bar to the [scroller]{@link enyo.Scroller} size and position,
	* as determined by the passed-in scroll strategy.
	*
	* @param {enyo.ScrollStrategy} strategy - The scroll strategy to be synced with.
	* @public
	*/
	sync: function (strategy) {
		this.scrollBounds = strategy._getScrollBounds();
		this.update(strategy);
	},

	/**
	* Updates the scroll indicator bar based on the scroll bounds of the strategy, the available
	* scroll area, and whether there is overscrolling. If the scroll indicator bar is not
	* needed, it will be not be displayed.
	* 
	* @param {enyo.ScrollStrategy} strategy - The scroll strategy to update from.
	* @public
	*/
	update: function (strategy) {
		if (this.showing) {
			var d = this.dimension, o = this.offset;
			var bd = this.scrollBounds[this.sizeDimension], sbd = this.scrollBounds[d];
			var overs = 0, overp = 0, over = 0;
			if (bd >= sbd) {
				this.hide();
				return;
			}
			if (strategy.isOverscrolling()) {
				over = strategy.getOverScrollBounds()['over' + o];
				overs = Math.abs(over);
				overp = Math.max(over, 0);
			}
			var sbo = strategy[this.positionMethod]() - over;
			// calc size & position
			var bdc = bd - this.cornerSize;
			var s = Math.floor((bd * bd / sbd) - overs);
			s = Math.max(this.minSize, s);
			var p = Math.floor((bdc * sbo / sbd) + overp);
			p = Math.max(0, Math.min(bdc - this.minSize, p));
			// apply thumb styling
			this.needed = s < bd;
			if (this.needed && this.hasNode()) {
				if (this._pos !== p) {
					this._pos = p;
					if(!this.transform) {
						//adjust top/left for browsers that don't support translations
						if(this.axis=='v') {
							this.setBounds({top:p + 'px'});
						} else {
							this.setBounds({left:p + 'px'});
						}
					} else {
						Dom.transformValue(this, this.translation, p + 'px');
					}
				}
				if (this._size !== s) {
					this._size = s;
					this.applyStyle(d, s + 'px');
				}
			} else {
				this.hide();
			}
		}
	},

	/**
	* We implement `setShowing()` and cancel the [delayHide()]{@link enyo.ScrollThumb#delayHide} 
	* because [showing]{@link enyo.Control#showing} is not changed while we execute
	* `delayHide()`.
	*
	* @param {Boolean} showing - If `true`, displays the {@link enyo.ScrollThumb} if appropriate;
	*	otherwise, hides the ScrollThumb.
	* @public
	*/
	setShowing: function (showing) {
		if (showing && showing != this.showing) {
			if (this.scrollBounds[this.sizeDimension] >= this.scrollBounds[this.dimension]) {
				return;
			}
		}
		if (this.hasNode()) {
			this.cancelDelayHide();
		}
		if (showing != this.showing) {
			var last = this.showing;
			this.showing = showing;
			this.showingChanged(last);
		}
	},

	/**
	* Delays automatic hiding of the {@link enyo.ScrollThumb}.
	*
	* @param {Number} delay - The number of milliseconds to delay hiding of the
	*	{@link enyo.ScrollThumb}.
	* @public
	*/
	delayHide: function (delay) {
		if (this.showing) {
			this.startJob('hide', this.hide, delay || 0);
		}
	},

	/**
	* Cancels any pending [delayHide()]{@link enyo.ScrollThumb#delayHide} jobs.
	* 
	* @public
	*/
	cancelDelayHide: function () {
		this.stopJob('hide');
	}
});
},{"../../../enyo":12,"../Control":26,"../dom":87,"../kind":96}],74:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Control = require('./Control');

/**
* {@link enyo.TableCell} implements an HTML [&lt;td&gt;]{@glossary td} element.
*
* @class enyo.TableCell
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.TableCell.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.TableCell',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	tag: 'td'
});
},{"../../enyo":12,"./Control":26,"./kind":96}],114:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control'),
	Layout = require('../../../enyo/lib/Layout');

var detector = document.createElement('div'),
	flexAvailable =
		(detector.style.flexBasis !== undefined) ||
		(detector.style.webkitFlexBasis !== undefined) ||
		(detector.style.mozFlexBasis !== undefined) ||
		(detector.style.msFlexBasis !== undefined);

/**
* {@link enyo.FittableLayout} provides the base positioning and boundary logic for
* the fittable layout strategy. The fittable layout strategy is based on
* laying out items in either a set of rows or a set of columns, with most of
* the items having natural size, but one item expanding to fill the remaining
* space. The item that expands is labeled with the attribute `fit: true`.
*
* The subkinds {@link enyo.FittableColumnsLayout} and {@link enyo.FittableRowsLayout}
* (or _their_ subkinds) are used for layout rather than `enyo.FittableLayout` because
* they specify properties that the framework expects to be available when laying items
* out.
*
* When available on the platform, you can opt-in to have `enyo.FittableLayout` use CSS
* flexible box (flexbox) to implement fitting behavior on the platform for better
* performance; Enyo will fall back to JavaScript-based layout on older platforms.
* Three subtle differences between the flexbox and JavaScript implementations
* should be noted:

* - When using flexbox, vertical margins (i.e., `margin-top`, `margin-bottom`) will
* not collapse; when using JavaScript layout, vertical margins will collapse according
* to static layout rules.
*
* - When using flexbox, non-fitting children of the Fittable must not be sized
* using percentages of the container (even if set to `position: relative`);
* this is explicitly not supported by the flexbox 2013 spec.
*
* - The flexbox-based Fittable implementation will respect multiple children
* with `fit: true` (the fitting space will be divided equally between them).
* This is NOT supported by the JavaScript implementation, and you should not rely
* upon this behavior if you are deploying to platforms without flexbox support.
*
* The flexbox implementation was added to Enyo 2.5.0 as an optional performance
* optimization; to use the optimization, set `useFlex: true` on the Fittable
* container.  This will cause flexbox to be used when possible.
*
* @class  enyo.FittableLayout
* @extends enyo.Layout
* @public
*/
var FittableLayout = module.exports = kind(/** @lends  enyo.FittableLayout.prototype */{
	name: 'enyo.FittableLayout',

	/**
	* @private
	*/
	kind: Layout,

	/**
	* @private
	*/
	noDefer: true,

	/**
	* @method
	* @private
	*/
	constructor: function () {
		Layout.prototype._constructor.apply(this, arguments);

		// Add the force-ltr class if we're in RTL mode, but this control is set explicitly to NOT be in RTL mode.
		this.container.addRemoveClass('force-left-to-right', (Control.prototype.rtl && !this.container.get('rtl')) );

		// Flexbox optimization is determined by global flexAvailable and per-instance opt-in useFlex flag
		this.useFlex = flexAvailable && (this.container.useFlex === true);
		if (this.useFlex) {
			this.container.addClass(this.flexLayoutClass);
		} else {
			this.container.addClass(this.fitLayoutClass);
		}
	},

	/**
	* @private
	*/
	calcFitIndex: function () {
		var aChildren = this.container.children,
			oChild,
			n;

		for (n=0; n<aChildren.length; n++) {
			oChild = aChildren[n];
			if (oChild.fit && oChild.showing) {
				return n;
			}
		}
	},

	/**
	* @private
	*/
	getFitControl: function () {
		var aChildren = this.container.children,
			oFitChild = aChildren[this.fitIndex];

		if (!(oFitChild && oFitChild.fit && oFitChild.showing)) {
			this.fitIndex = this.calcFitIndex();
			oFitChild = aChildren[this.fitIndex];
		}
		return oFitChild;
	},

	/**
	* @private
	*/
	shouldReverse: function () {
		return this.container.rtl && this.orient === 'h';
	},
	
	/**
	* @private
	*/
	destroy: function () {
		Layout.prototype.destroy.apply(this, arguments);
		
		if (this.container) {
			this.container.removeClass(this.useFlex ? this.flexLayoutClass : this.fitLayoutClass);
		}
	},

	/**
	* @private
	*/
	getFirstChild: function() {
		var aChildren = this.getShowingChildren();

		if (this.shouldReverse()) {
			return aChildren[aChildren.length - 1];
		} else {
			return aChildren[0];
		}
	},

	/**
	* @private
	*/
	getLastChild: function() {
		var aChildren = this.getShowingChildren();

		if (this.shouldReverse()) {
			return aChildren[0];
		} else {
			return aChildren[aChildren.length - 1];
		}
	},

	/**
	* @private
	*/
	getShowingChildren: function() {
		var a = [],
			n = 0,
			aChildren = this.container.children,
			nLength   = aChildren.length;

		for (;n<nLength; n++) {
			if (aChildren[n].showing) {
				a.push(aChildren[n]);
			}
		}

		return a;
	},

	/**
	* @private
	*/
	_reflow: function(sMeasureName, sClienMeasure, sAttrBefore, sAttrAfter) {
		this.container.addRemoveClass('enyo-stretch', !this.container.noStretch);

		var oFitChild       = this.getFitControl(),
			oContainerNode  = this.container.hasNode(),  // Container node
			nTotalSize     = 0,                          // Total container width or height without padding
			nBeforeOffset   = 0,                         // Offset before fit child
			nAfterOffset    = 0,                         // Offset after fit child
			oPadding,                                    // Object containing t,b,r,l paddings
			oBounds,                                     // Bounds object of fit control
			oLastChild,
			oFirstChild,
			nFitSize;

		if (!oFitChild || !oContainerNode) { return; }

		oPadding   = dom.calcPaddingExtents(oContainerNode);
		oBounds    = oFitChild.getBounds();
		nTotalSize = oContainerNode[sClienMeasure] - (oPadding[sAttrBefore] + oPadding[sAttrAfter]);

		if (this.shouldReverse()) {
			oFirstChild  = this.getFirstChild();
			nAfterOffset = nTotalSize - (oBounds[sAttrBefore] + oBounds[sMeasureName]);

			var nMarginBeforeFirstChild = dom.getComputedBoxValue(oFirstChild.hasNode(), 'margin', sAttrBefore) || 0;

			if (oFirstChild == oFitChild) {
				nBeforeOffset = nMarginBeforeFirstChild;
			} else {
				var oFirstChildBounds      = oFirstChild.getBounds(),
					nSpaceBeforeFirstChild = oFirstChildBounds[sAttrBefore];

				nBeforeOffset = oBounds[sAttrBefore] + nMarginBeforeFirstChild - nSpaceBeforeFirstChild;
			}
		} else {
			oLastChild    = this.getLastChild();
			nBeforeOffset = oBounds[sAttrBefore] - (oPadding[sAttrBefore] || 0);

			var nMarginAfterLastChild = dom.getComputedBoxValue(oLastChild.hasNode(), 'margin', sAttrAfter) || 0;

			if (oLastChild == oFitChild) {
				nAfterOffset = nMarginAfterLastChild;
			} else {
				var oLastChildBounds = oLastChild.getBounds(),
					nFitChildEnd     = oBounds[sAttrBefore] + oBounds[sMeasureName],
					nLastChildEnd    = oLastChildBounds[sAttrBefore] + oLastChildBounds[sMeasureName] +  nMarginAfterLastChild;

				nAfterOffset = nLastChildEnd - nFitChildEnd;
			}
		}

		nFitSize = nTotalSize - (nBeforeOffset + nAfterOffset);
		oFitChild.applyStyle(sMeasureName, nFitSize + 'px');
	},

	/**
	* Assigns any static layout properties not dependent on changes to the
	* rendered component or container sizes, etc.
	* 
	* @public
	*/
	flow: function() {
		if (this.useFlex) {
			var i,
				children = this.container.children,
				child;
			this.container.addClass(this.flexLayoutClass);
			this.container.addRemoveClass('nostretch', this.container.noStretch);
			for (i=0; i<children.length; i++) {
				child = children[i];
				child.addClass('enyo-flex-item');
				child.addRemoveClass('flex', child.fit);
			}
		}
	},

	/**
	* Updates the layout to reflect any changes made to the layout container or
	* the contained components.
	*
	* @public
	*/
	reflow: function() {
		if (!this.useFlex) {
			if (this.orient == 'h') {
				this._reflow('width', 'clientWidth', 'left', 'right');
			} else {
				this._reflow('height', 'clientHeight', 'top', 'bottom');
			}
		}
	},

	/**
	* @private
	* @lends  enyo.FittableLayout.prototype
	*/
	statics: {
		/**
		* Indicates whether flexbox optimization can be used.
		*
		* @type {Boolean}
		* @default  false
		* @private
		*/
		flexAvailable: flexAvailable
	}
});

/**
* {@link enyo.FittableColumnsLayout} provides a container in which items are laid
* out in a set of vertical columns, with most of the items having natural
* size, but one expanding to fill the remaining space. The one that expands is
* labeled with the attribute `fit: true`.
*
* `enyo.FittableColumnsLayout` is meant to be used as a value for the
* `layoutKind` property of other kinds. `layoutKind` provides a way to add
* layout behavior in a pluggable fashion while retaining the ability to use a
* specific base kind.
*
* For more information, see the documentation on
* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the
* Enyo Developer Guide.
*
* @class  enyo.FittableColumnsLayout
* @extends enyo.FittableLayout
* @public
*/
FittableLayout.Columns = kind(/** @lends  enyo.FittableColumnsLayout.prototype */{
	name        : 'enyo.FittableColumnsLayout',
	kind        : FittableLayout,
	orient      : 'h',
	fitLayoutClass : 'enyo-fittable-columns-layout',
	flexLayoutClass: 'enyo-flex-container columns'
});


/**
* {@link enyo.FittableRowsLayout} provides a container in which items are laid out
* in a set of horizontal rows, with most of the items having natural size, but
* one expanding to fill the remaining space. The one that expands is labeled
* with the attribute `fit: true`.
*
* `enyo.FittableRowsLayout` is meant to be used as a value for the
* `layoutKind` property of other kinds. `layoutKind` provides a way to add
* layout behavior in a pluggable fashion while retaining the ability to use a
* specific base kind.
*
* For more information, see the documentation on
* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the
* Enyo Developer Guide.
*
* @class  enyo.FittableRowsLayout
* @extends enyo.FittableLayout
* @public
*/
FittableLayout.Rows = kind(
	/** @lends enyo.FittableRowsLayout.prototype */ {

	/**
	* @private
	*/
	name        : 'enyo.FittableRowsLayout',

	/**
	* @private
	*/
	kind        : FittableLayout,

	/**
	* Layout CSS class used to fit rows.
	*
	* @type {String}
	* @default 'enyo-fittable-rows-layout'
	* @public
	*/
	fitLayoutClass : 'enyo-fittable-rows-layout',

	/**
	* The orientation of the layout.
	*
	* @type {String}
	* @default 'v'
	* @public
	*/
	orient      : 'v',

	/**
	* @private
	*/
	flexLayoutClass: 'enyo-flex-container rows'
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Layout":43,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96}],116:[function(require,module,exports){
var
	kind = require('../../enyo/lib/kind'),
	dom = require('../../enyo/lib/dom'),
	utils = require('../../enyo/lib/utils'),
	Control = require('../../enyo/lib/Control'),
	HTMLStringDelegate = require('../../enyo/lib/HTMLStringDelegate'),
	Selection = require('../../enyo/lib/Selection');

var FlyweightRepeaterDelegate = Object.create(HTMLStringDelegate);

FlyweightRepeaterDelegate.generateInnerHtml = function (control) {
	var h = '';
	control.index = null;
	// note: can supply a rowOffset
	// and indicate if rows should be rendered top down or bottomUp
	for (var i=0, r=0; i<control.count; i++) {
		r = control.rowOffset + (this.bottomUp ? control.count - i-1 : i);
		control.setupItem(r);
		control.$.client.setAttribute('data-enyo-index', r);
		if (control.orient == 'h') {
			control.$.client.setStyle('display:inline-block;');
		}
		h += HTMLStringDelegate.generateChildHtml(control);
		control.$.client.teardownRender();
	}
	return h;
};

/**
* Fires once per row at render time.
*
* @event enyo.FlyweightRepeater#onSetupItem
* @type {Object}
* @property {Number} index     - The index of the row being rendered.
* @property {Boolean} selected - `true` if the row is selected; otherwise, `false`.
* @public
*/

/**
* Fires after an individual row has been rendered.
*
* @event enyo.FlyweightRepeater#onRenderRow
* @type {Object}
* @property {Number} rowIndex - The index of the row that was rendered.
* @public
*/

/**
* {@link enyo.FlyweightRepeater} is a control that displays a repeating list of
* rows, suitable for displaying medium-sized lists (up to ~100 items). A
* flyweight strategy is employed to render one set of row controls, as needed,
* for as many rows as are contained in the repeater.
*
* The FlyweightRepeater's `components` block contains the controls to be used
* for a single row. This set of controls will be rendered for each row. You
* may customize row rendering by handling the
* [onSetupItem]{@link enyo.FlyweightRepeater#onSetupItem} event.
*
* The controls inside a FlyweightRepeater are non-interactive. This means that
* calling methods that would normally cause rendering to occur (e.g.,
* `set('content', <value>)`) will not do so. However, you may force a row to
* render by calling [renderRow()]{@link enyo.FlyweightRepeater#renderRow}.
*
* In addition, you may force a row to be temporarily interactive by calling
* [prepareRow()]{@link enyo.FlyweightRepeater#prepareRow}. Call
* [lockRow()]{@link enyo.FlyweightRepeater#lockRow} when the interaction
* is complete.
*
* For more information, see the documentation on
* [Lists]{@linkplain $dev-guide/building-apps/layout/lists.html} in the
* Enyo Developer Guide.
*
* @ui
* @class enyo.FlyweightRepeater
* @extends enyo.Control
* @public
*/
var FlyweightRepeater = module.exports = kind(
	/** @lends enyo.FlyweightRepeater.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.FlyweightRepeater',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @lends enyo.FlyweightRepeater.prototype
	* @private
	*/
	published: {
		/**
		 * The number of rows to render.
		 *
		 * @type {Number}
		 * @default 0
		 * @public
		 */
		count: 0,

		/**
		* If `true`, the selection mechanism is disabled. Tap events are still
		* sent, but items won't be automatically re-rendered when tapped.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		noSelect: false,

		/**
		 * If `true`, multiple selection is allowed.
		 *
		 * @type {Boolean}
		 * @default false
		 * @public
		 */
		multiSelect: false,

		/**
		 * If `true`, the selected item will toggle.
		 *
		 * @type {Boolean}
		 * @default false
		 * @public
		 */
		toggleSelected: false,

		/**
		* Used to specify CSS classes for the repeater's wrapper component (client).
		* Input is identical to that of {@link enyo.Control#setClasses}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		clientClasses: '',

		/**
		* Used to specify custom styling for the repeater's wrapper component
		* (client). Input is identical to that of {@link enyo.Control#setStyle}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		clientStyle: '',

		/**
		* Numerical offset applied to row number during row generation. Allows items
		* to have natural indices instead of `0`-based ones. This value must be
		* positive, as row number `-1` is used to represent undefined rows in the
		* event system.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		rowOffset: 0,

		/**
		* Direction in which items will be laid out. Valid values are `'v'` for
		* vertical or `'h'` for horizontal.
		*
		* @type {String}
		* @default 'h'
		* @public
		*/
		orient: 'v'
	},

	/**
	* @private
	*/
	events: {
		onSetupItem: '',
		onRenderRow: ''
	},

	/**
	* Setting cachePoint: true ensures that events from the repeater's subtree will
	* always bubble up through the repeater, allowing the events to be decorated with repeater-
	* related metadata and references.
	*
	* @type {Boolean}
	* @default true
	* @private
	*/
	cachePoint: true,

	/**
	* Design-time attribute indicating whether row indices run
	* from `0` to [`count`]{@link enyo.FlyweightRepeater#count}`-1` `(false)` or
	* from [`count`]{@link enyo.FlyweightRepeater#count}`-1` to `0` `(true)`.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	bottomUp: false,

	/**
	* @private
	*/
	renderDelegate: FlyweightRepeaterDelegate,

	/**
	* @private
	*/
	components: [
		{kind: Selection, onSelect: 'selectDeselect', onDeselect: 'selectDeselect'},
		{name: 'client'}
	],

	/**
	* @method
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.noSelectChanged();
		this.multiSelectChanged();
		this.clientClassesChanged();
		this.clientStyleChanged();
	},

	/**
	* @private
	*/
	noSelectChanged: function () {
		if (this.noSelect) {
			this.$.selection.clear();
		}
	},

	/**
	* @private
	*/
	multiSelectChanged: function () {
		this.$.selection.setMulti(this.multiSelect);
	},

	/**
	* @private
	*/
	clientClassesChanged: function () {
		this.$.client.setClasses(this.clientClasses);
	},

	/**
	* @private
	*/
	clientStyleChanged: function () {
		this.$.client.setStyle(this.clientStyle);
	},

	/**
	* @fires enyo.FlyweightRepeater#onSetupItem
	* @private
	*/
	setupItem: function (index) {
		this.doSetupItem({index: index, selected: this.isSelected(index)});
	},

	/**
	* Renders the list.
	*
	* @private
	*/
	generateChildHtml: function () {
		return this.renderDelegate.generateInnerHtml(this);
	},

	/**
	* @todo add link to preview.js
	* @private
	*/
	previewDomEvent: function (event) {
		var i = this.index = this.rowForEvent(event);
		event.rowIndex = event.index = i;
		event.flyweight = this;
	},

	/**
	* @method
	* @private
	*/
	decorateEvent: function (eventName, event, sender) {
		// decorate event with index found via dom iff event does not already contain an index.
		var i = (event && event.index != null) ? event.index : this.index;
		if (event && i != null) {
			event.index = i;
			event.flyweight = this;
		}
		Control.prototype.decorateEvent.apply(this, arguments);
	},

	/**
	* @private
	*/
	tap: function (sender, event) {
		// ignore taps if selecting is disabled or if they don't target a row
		if (this.noSelect || event.index === -1) {
			return;
		}
		if (this.toggleSelected) {
			this.$.selection.toggle(event.index);
		} else {
			this.$.selection.select(event.index);
		}
	},

	/**
	* Handler for selection and deselection.
	*
	* @private
	*/
	selectDeselect: function (sender, event) {
		this.renderRow(event.key);
	},

	/**
	* Returns the repeater's [selection]{@link enyo.Selection} component.
	*
	* @return {enyo.Selection} The repeater's selection component.
	* @public
	*/
	getSelection: function () {
		return this.$.selection;
	},

	/**
	* Gets the selection state for the given row index.
	*
	* @return {Boolean} `true` if the row is currently selected; otherwise, `false`.
	* @public
	*/
	isSelected: function (index) {
		return this.getSelection().isSelected(index);
	},

	/**
	* Renders the row with the specified index.
	*
	* @param {Number} index - The index of the row to render.
	* @fires enyo.FlyweightRepeater#onRenderRow
	* @public
	*/
	renderRow: function (index) {
		// do nothing if index is out-of-range
		if (index < this.rowOffset || index >= this.count + this.rowOffset) {
			return;
		}
		//this.index = null;
		// always call the setupItem callback, as we may rely on the post-render state
		this.setupItem(index);
		var node = this.fetchRowNode(index);
		if (node) {
			// hack to keep this working...
			var delegate = HTMLStringDelegate;

			dom.setInnerHtml(node, delegate.generateChildHtml(this.$.client));
			this.$.client.teardownChildren();
			this.doRenderRow({rowIndex: index});
		}
	},

	/**
	* Fetches the DOM node for the given row index.
	*
	* @param {Number} index - The index of the row whose DOM node is to be fetched.
	* @return {Node} The DOM node for the specified row.
	* @public
	*/
	fetchRowNode: function (index) {
		if (this.hasNode()) {
			return this.node.querySelector('[data-enyo-index="' + index + '"]');
		}
	},

	/**
	* Fetches the row number corresponding to the target of a given event.
	*
	* @param {Object} event - Event object.
	* @return {Number} The index of the row corresponding to the event's target.
	* @public
	*/
	rowForEvent: function (event) {
		if (!this.hasNode()) {
			return -1;
		}
		var n = event.target;
		while (n && n !== this.node) {
			var i = n.getAttribute && n.getAttribute('data-enyo-index');
			if (i !== null) {
				return Number(i);
			}
			n = n.parentNode;
		}
		return -1;
	},

	/**
	* Prepares the specified row such that changes made to the controls inside
	* the repeater will be rendered for the row.
	*
	* @param {Number} index - The index of the row to be prepared.
	* @public
	*/
	prepareRow: function (index) {
		// do nothing if index is out-of-range
		if (index < this.rowOffset || index >= this.count + this.rowOffset) {
			return;
		}
		// update row internals to match model
		this.setupItem(index);
		var n = this.fetchRowNode(index);
		FlyweightRepeater.claimNode(this.$.client, n);
	},

	/**
	* Prevents rendering of changes made to controls inside the repeater.
	*
	* @public
	*/
	lockRow: function () {
		this.$.client.teardownChildren();
	},

	/**
	* Prepares the specified row such that changes made to the controls in the
	* repeater will be rendered in the row; then performs the function `func`
	* and, finally, locks the row.
	*
	* @param {Number} index   - The index of the row to be acted upon.
	* @param {Function} func  - The function to perform.
	* @param {Object} context - The context to which `func` is bound.
	* @private
	*/
	performOnRow: function (index, func, context) {
		// do nothing if index is out-of-range
		if (index < this.rowOffset || index >= this.count + this.rowOffset) {
			return;
		}
		if (func) {
			this.prepareRow(index);
			utils.call(context || null, func);
			this.lockRow();
		}
	},

	/**
	* @lends enyo.FlyweightRepeater
	* @private
	*/
	statics: {
		/**
		* Associates a flyweight rendered control (`control`) with a
		* rendering context specified by `node`.
		*
		* @param {enyo.Control} control - A flyweight-rendered control.
		* @param {Node} node - The DOM node to be associated with `control`.
		* @public
		*/
		claimNode: function (control, node) {
			var n;
			if (node) {
				if (node.id !== control.id) {
					n = node.querySelector('#' + control.id);
				} else {
					// node is already the right node, so just use it
					n = node;
				}
			}
			// FIXME: consider controls generated if we found a node or tag: null, the later so can teardown render
			control.generated = Boolean(n || !control.tag);
			control.node = n;
			if (control.node) {
				control.rendered();
			} else {
				//enyo.log('Failed to find node for',  control.id, control.generated);
			}
			// update control's class cache based on the node contents
			for (var i=0, c$=control.children, c; (c=c$[i]); i++) {
				this.claimNode(c, node);
			}
		}
	}
});
},{"../../enyo/lib/Control":26,"../../enyo/lib/HTMLStringDelegate":39,"../../enyo/lib/Selection":67,"../../enyo/lib/dom":87,"../../enyo/lib/kind":96,"../../enyo/lib/utils":106}],283:[function(require,module,exports){
var
    dispatcher = require('../../enyo/lib/dispatcher'),
    dom = require('../../enyo/lib/dom'),
    utils = require('../../enyo/lib/utils'),
    Control = require('../../enyo/lib/Control');

/**
* {@link enyo.Spotlight.Util} provides a collection of utility methods for use
* with Spotlight.
*
* @typedef {Object} enyo.Spotlight.Util definition
*
* @class enyo.Spotlight.Util
* @public
*/
var Util = module.exports = function (Spotlight) {

    /**
    * Attempts to dispatch all Spotlight events through the low-level dispatcher
    * or directly through the originating control.
    *
    * @param  {String} sEvent - The current event to validate.
    * @param  {Object} oInData - The callback to be executed.
    * @param  {Object} oControl - The dispatch originator.
    * @public
    */
    this.dispatchEvent = function(sEvent, oInData, oControl) {
        var oData;

        if (!oControl || oControl.destroyed) {
            return;
        }

        if (Spotlight.isFrozen()) {
            if (sEvent == 'onSpotlightBlur') {
                return;
            }
            oControl = Spotlight.getCurrent();
        }

        if (oInData) {
            oData = utils.clone(oInData);
        } else {
            oData = {};
        }

        oData.type = sEvent;
        oData.originator = oControl;
        oData.originator.timestamp = oData.timeStamp;
        oData.target = oControl.hasNode();
        oData.customEvent = (oData.customEvent === undefined) ? true : oData.customEvent;

        if (oData.target) {
            // We attempt to dispatch all spotlight events through the low-level dispatcher,
            // so that they can be filtered through features like the modal/capture feature
            return dispatcher.dispatch(oData);
        } else {
            // However, if a control has been teardownRendered (and has no node) we still
            // need to ensure it gets lifecycle events like onSpotlightBlur, so we dispatch
            // directly to the control
            return dispatcher.dispatchBubble(oData, oControl);
        }
    };

    /**
    * Attaches event hook to capture events coming from within the container.
    *
    * @param  {Object} oControl - The dispatch originator.
    * @param  {Function} fHandler - The event handler function.
    * @public
    */
    this.interceptEvents = function(oControl, fHandler) {
        var f = oControl.dispatchEvent;

        oControl.dispatchEvent = function(sEventName, oEvent, oEventSender) {
            // If handler returns true - prevent default
            if (!oEvent.delegate && fHandler(oControl, oEvent)) {
                oEvent.type = null;
                return true;
            } else {
                // If handler returns false - call original dispatcher and allow bubbling
                return f.apply(oControl, [sEventName, oEvent, oEventSender]);
            }
        };
    };

    /**
    * Determines whether one control is a child of another control.
    *
    * @param  {Object} oParent - The parent control.
    * @param  {Object} oChild - The potential child control.
    * @return {Boolean} `true` if `oChild` is a child of `oParent`; otherwise,
    * `false`.
    * @public
    */
    this.isChild = function(oParent, oChild) {
        if (!oParent) {
            return false;
        }
        if (!oChild) {
            return false;
        }

        while (oChild.parent) {
            oChild = oChild.parent;
            if (oChild === oParent) {
                return true;
            }
        }
        return false;
    };

    /**
    * Preserved for backward compatibility; users should instead call
    * [getAbsoluteBounds()]{@link enyo.Control#getAbsoluteBounds} on the
    * {@link enyo.Control} instance (or
    * [enyo.dom.getAbsoluteBounds()]{@link enyo.dom#getAbsoluteBounds} for the
    * node).
    *
    * @param  {Object} oControl - The control to query for bounds.
    * @public
    */
    this.getAbsoluteBounds = function(oControl) {
        var node = oControl instanceof Control ? oControl.hasNode() : oControl;
        return dom.getAbsoluteBounds(node);
    };

    /**
    * Determines whether a control has a given CSS class applied.
    *
    * @param  {enyo.Control} o - The control to query.
    * @param  {String} s - The name of the CSS class.
    * @return {Boolean} `true` if the class is applied to the control; otherwise, `false`.
    * @public
    */
    this.hasClass = function(o, s) {
        if (!o || !o.className) {
            return;
        }
        return (' ' + o.className + ' ').indexOf(' ' + s + ' ') >= 0;
    };

    /**
    * Applies a CSS class to a control.
    *
    * @param  {enyo.Control} o - The control to be styled.
    * @param  {String} s - The name of the CSS class to apply.
    * @public
    */
    this.addClass = function(o, s) {
        if (o && !this.hasClass(o, s)) {
            var ss = o.className;
            o.className = (ss + (ss ? ' ' : '') + s);
        }
    };

    /**
    * Removes a CSS class from a control.
    *
    * @param  {Object} o - The control from which to remove the class.
    * @param  {String} s - The name of the CSS class name to remove.
    * @public
    */
    this.removeClass = function(o, s) {
        if (o && this.hasClass(o, s)) {
            var ss = o.className;
            o.className = (' ' + ss + ' ').replace(' ' + s + ' ', ' ').slice(1, -1);
        }
    };

    /**
    * Queries a string for the presence of a given suffix.
    *
    * @param  {String} s - The string to query.
    * @param  {String} sSuffix - The suffix to look for.
    * @return {Boolean} `true` if the string ends in the specified suffix;
    * otherwise, `false`.
    * @public
    */
    this.stringEndsWith = function(s, sSuffix) {
        return s.indexOf(sSuffix, s.length - sSuffix.length) !== -1;
    };

    /**
    * Translates a direction to an appropriate Spotlight event.
    *
    * @param  {String} sDirection - The direction of acceleration.
    * @return {String} The name of the corresponding Spotlight event.
    * @public
    */
    this.directionToEvent = function(sDirection) {
        return 'onSpotlight' + sDirection.charAt(0).toUpperCase() + sDirection.substr(1).toLowerCase();
    };

    /**
    * Gets the default control to move to in a particular direction.
    *
    * @param  {String} sDirection - The direction of movement.
    * @param  {Object} oControl - The control from which movement will occur.
    * @public
    */
    this.getDefaultDirectionControl = function(sDirection, oControl) {
        var sProperty = 'defaultSpotlight' + sDirection.charAt(0).toUpperCase() + sDirection.substr(1).toLowerCase(),
            oNeighbor;
        if (typeof oControl[sProperty] == 'string') {
            oNeighbor = oControl.owner.$[oControl[sProperty]];
            if (typeof oNeighbor != 'undefined') {
                return oNeighbor;
            }
        }
        return null;
    };

    /**
    * Determines whether the given event is a simulated click.
    * We use the same check as in dispatcher to know when it's simulated: looking for x/y == 0.
    *
    * @param  {Object} oEvent - The current event.
    * @return {Boolean} `true` if event is a simulated click; otherwise, `false`.
    * @public
    */
    this.isSimulatedClick = function(oEvent) {
        return (
            oEvent.clientX === 0 && oEvent.clientY === 0 && !oEvent.detail &&
            (oEvent.type == 'click' || oEvent.type == 'tap')
        );
    };
};

// use faster classList interface if it exists
if (document.createElement('div').classList) {
    Util.hasClass = function(o, s) {
        if (o) {
            return o.classList.contains(s);
        }
    };
    Util.addClass = function(o, s) {
        if (o) {
            return o.classList.add(s);
        }
    };
    Util.removeClass = function(o, s) {
        if (o) {
            return o.classList.remove(s);
        }
    };
}

},{"../../enyo/lib/Control":26,"../../enyo/lib/dispatcher":86,"../../enyo/lib/dom":87,"../../enyo/lib/utils":106}],8:[function(require,module,exports){
var
	glue = require('./lib/glue'),
	ilib = require('./ilib/js/ilib-dyn-standard').ilib;

ilib.enyo = glue(ilib);
ilib.enyo.version = '2.6.0-pre.5-dev';

module.exports = ilib;
},{"./ilib/js/ilib-dyn-standard":7,"./lib/glue":9}],144:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Drawer = require('../../../enyo/lib/Drawer');

var
	options = require('../options');

/**
* @class moon.ExpandableListDrawer
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ExpandableListDrawer.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandableListDrawer',

	/**
	* @private
	*/
	kind: Drawer,

	/**
	* @private
	*/
	open: false,

	/**
	* @private
	*/
	renderOnShow: options.renderOnShow && options.renderOnShow.expandableListDrawer,

	/**
	* @private
	*/
	openChanged: function () {
		if (this.open && this.renderOnShow && !this.showing && !this.generated) this.show();
		Drawer.prototype.openChanged.apply(this, arguments);
	}
});
},{"../../../enyo/lib/Drawer":32,"../../../enyo/lib/kind":96,"../options":204}],77:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind');
var
	GroupItem = require('../GroupItem');

/**
* {@link enyo.ToolDecorator} lines up [components]{@link enyo.Component} in a row,
* centered vertically.
*
* @class enyo.ToolDecorator
* @extends enyo.GroupItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.ToolDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.ToolDecorator',

	/**
	* @private
	*/
	kind: GroupItem,

	/**
	* @private
	*/
	classes: 'enyo-tool-decorator'
});
},{"../../../enyo":12,"../GroupItem":38,"../kind":96}],117:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Img = require('../../../enyo/lib/Image'),
	EmptyBinding = require('../../../enyo/lib/EmptyBinding');

/**
* {@link enyo.GridListImageItem} is a convenience component that may be used inside
* an {@link enyo.DataGridList} to display an image grid with an optional caption and
* subcaption.
*
* @ui
* @class enyo.GridListImageItem
* @extends enyo.Control
* @public
*/
module.exports = kind(
	/** @lends enyo.GridListImageItem.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.GridListImageItem',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'enyo-gridlist-imageitem',

	/**
	* @private
	*/
	components: [
		{name: 'image', kind: Img, classes:'image'},
		{name: 'caption', kind: Control, classes: 'caption'},
		{name: 'subCaption', kind: Control, classes: 'sub-caption'}
	],

	/**
	* @lends enyo.GridListImageItem.prototype
	* @private
	*/
	published: {
		/**
		* The absolute URL path to the image.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		source: '',

		/**
		* The primary caption to be displayed with the image.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		caption: '',

		/**
		* The second caption line to be displayed with the image.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		subCaption: '',

		/**
		* Set to `true` to add the `selected` CSS class to the image tile; set to
		* `false` to remove the `selected` class.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		selected: false,

		/**
		* When `true`, the caption and subcaption are centered; otherwise, they are
		* left-aligned.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		centered: true,

		/**
		* By default, the width of the image fits the width of the item, and the
		* height is sized naturally, based on the image's aspect ratio. Set this
		* property to `'constrain'` to letterbox the image in the available space,
		* or `'cover'` to cover the available space with the image (cropping the
		* larger dimension). Note that when `imageSizing` is explicitly specified,
		* you must indicate whether the caption and subcaption are used (by setting
		* the [useCaption]{@link enyo.GridListImageItem#useCaption} and
		* [useSubCaption]{@link enyo.GridListImageItem#useSubCaption} flags) to
		* ensure proper sizing.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		imageSizing: '',

		/**
		* When an [imageSizing]{@link enyo.GridListImageItem#imageSizing} option is
		* explicitly specified, set this to `false` if the caption space should not
		* be reserved. This property has no effect when `imageSizing` retains its
		* default value.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		useCaption: true,

		/**
		* When an [imageSizing]{@link enyo.GridListImageItem#imageSizing} option is
		* explicitly specified, set this to `false` if the subcaption space should
		* not be reserved. This property has no effect when `imageSizing` retains
		* its default value.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		useSubCaption: true
	},

	/**
	* @private
	*/
	bindings: [
		{from: '.source', to: '.$.image.src'},
		{from: '.caption', to: '.$.caption.content'},
		{from: '.caption', to: '.$.caption.showing', kind: EmptyBinding},
		{from: '.subCaption', to: '.$.subCaption.content'},
		{from: '.subCaption', to: '.$.subCaption.showing', kind: EmptyBinding}
	],

	/**
	* @method
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.selectedChanged();
		this.imageSizingChanged();
		this.centeredChanged();
	},

	/**
	* @private
	*/
	selectedChanged: function () {
		this.addRemoveClass('selected', this.selected);
	},

	/**
	* @private
	*/
	disabledChanged: function () {
		this.addRemoveClass('disabled', this.disabled);
	},

	/**
	* @private
	*/
	imageSizingChanged: function () {
		this.$.image.setSizing(this.imageSizing);
		this.addRemoveClass('sized-image', !!this.imageSizing);
		if (this.imageSizing) {
			this.useCaptionChanged();
			this.useSubCaptionChanged();
		}
	},

	/**
	* @private
	*/
	useCaptionChanged: function () {
		this.addRemoveClass('use-caption', this.useCaption);
	},

	/**
	* @private
	*/
	useSubCaptionChanged: function () {
		this.addRemoveClass('use-subcaption', this.useSubCaption);
	},

	/**
	* @private
	*/
	centeredChanged: function () {
		this.addRemoveClass('centered', this.centered);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/EmptyBinding":33,"../../../enyo/lib/Image":41,"../../../enyo/lib/kind":96}],21:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	platform = require('./platform');
var
	Input = require('./Input');

/**
* Fires when checkbox is tapped.
*
* @event enyo.Checkbox#onActivate
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Checkbox} implements an HTML checkbox [input]{@glossary input}, with
* support for grouping using {@link enyo.Group}.
*
* @class enyo.Checkbox
* @extends enyo.Input
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Checkbox.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Checkbox',

	/**
	* @private
	*/
	kind: Input,

	/**
	* @private
	*/
	classes: 'enyo-checkbox',

	/**
	* @private
	*/
	events: {
		onActivate: ''
	},

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Checkbox.prototype */ {
		
		/**
		* Value of the checkbox; will be `true` if checked.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		checked: false,
		
		/**
		* A [Group API]{@link enyo.Group} requirement for determining the selected item.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false,
		
		/**
		* @private
		*/
		type: 'checkbox'
	},
	
	/**
	* Disable classes inherited from {@link enyo.Input}.
	* 
	* @private
	*/
	kindClasses: "",

	/**
	* @private
	*/
	handlers: {
		onchange: 'change',
		onclick: 'click'
	},

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			if (this.active) {
				this.activeChanged();
			}
			this.checkedChanged();
		};
	}),

	/**
	* @private
	*/
	checkedChanged: function () {
		this.setNodeProperty('checked', this.checked);
		this.setAttribute('checked', this.checked ? 'checked' : '');
		this.setActive(this.checked);
	},

	/**
	* The [active]{@link enyo.Checkbox#active} property and `onActivate`
	* {@glossary event} are part of the [GroupItem]{@link enyo.GroupItem}
	* interface supported by this [object]{@glossary Object}.
	* 
	* @private
	*/
	activeChanged: function () {
		this.active = utils.isTrue(this.active);
		this.setChecked(this.active);
		this.bubble('onActivate');
	},

	/**
	* All [input]{@link enyo.Input} type [controls]{@link enyo.Control} support the 
	* [value]{@link enyo.Input#value} property.
	*
	* @param {Boolean} val - Whether or not the [checkbox]{@link enyo.Checkbox} should
	* be checked. The value will be treated as `true` if it is truthy; otherwise,
	* `false`.
	* @public
	*/
	setValue: function (val) {
		this.setChecked(utils.isTrue(val));
	},

	/**
	* Retrieves the current [value]{@link enyo.Input#value} of the
	* [checkbox]{@link enyo.Checkbox}.
	*
	* @returns {Boolean} `true` if the [checkbox]{@link enyo.Checkbox} is checked;
	* otherwise, `false`.
	* @public
	*/
	getValue: function () {
		return this.getChecked();
	},

	/**
	* @private
	*/
	valueChanged: function () {

	/**
	* @private
	*/
	// inherited behavior is to set "value" attribute and node-property
	// which does not apply to checkbox (uses "checked") so
	// we squelch the inherited method
	},
	change: function () {
		var nodeChecked = utils.isTrue(this.getNodeProperty('checked'));
		this.setActive(nodeChecked);
	},

	/**
	* @private
	*/
	click: function (sender, e) {
		// Various versions of IE (notably IE8) do not fire 'onchange' for
		// checkboxes, so we discern change via 'click'.
		// Note: keyboard interaction (e.g. pressing space when focused) fires
		// a click event.
		if (platform.ie <= 8) {
			this.bubble('onchange', e);
		}
	}
});
},{"../../enyo":12,"./Input":42,"./kind":96,"./platform":102,"./utils":106}],60:[function(require,module,exports){
(function (global){
require('../../../enyo');



var
	kind = require('../kind'),
	utils = require('../utils'),
	platform = require('../platform');
var
	Input = require('../Input');

/**
* The type of change to apply. Possible values are `'move'` and `'extend'`.
*
* @typedef {String} enyo.RichText~ModifyType
*/

/**
* The direction in which to apply the change. Possible values include: `'forward'`,
* `'backward'`, `'left'`, and `'right'`.
*
* @typedef {String} enyo.RichText~ModifyDirection
*/

/**
* The granularity of the change. Possible values include: `'character'`, `'word'`,
* `'sentence'`, `'line'`, `'paragraph'`, `'lineboundary'`, `'sentenceboundary'`,
* `'paragraphboundary'`, and `'documentboundary'`.
*
* @typedef {String} enyo.RichText~ModifyAmount
*/

/**
* {@link enyo.RichText} is a multi-line text [input]{@link enyo.Input} that supports rich
* formatting, such as bold, italics, and underlining.
*
* The content displayed in a RichText may be accessed at runtime via `get('value')`
* and `set('value')`.
*
* For more information, see the documentation on
* [Text Fields]{@linkplain $dev-guide/building-apps/controls/text-fields.html}
* in the Enyo Developer Guide.
*
* @class enyo.RichText
* @extends enyo.Input
* @ui
* @public
*/
var RichText = module.exports = kind(
	/** @lends enyo.RichText.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.RichText',

	/**
	* @private
	*/
	kind: Input,

	/**
	* @private
	*/
	classes: 'enyo-richtext enyo-selectable',

	/**
	* @private
	*/
	published:
		/** @lends enyo.RichText.prototype */ {

		/**
		* This flag is enabled by default in {@link enyo.RichText} to take advantage
		* of all the rich editing properties. However, this allows for **any** HTML to be
		* inserted into the RichText, including [&lt;iframe&gt;]{@glossary iframe} and
		* [&lt;script&gt;]{@glossary script} tags, which can be a security concern in
		* some situations. If set to `false`, any inserted HTML will be escaped.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		allowHtml: true,

		/**
		* If `true`, the [RichText]{@link enyo.RichText} will not accept input or generate
		* [events]{@glossary event}.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* Value of the text field.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		value: ''
	},

	/**
	* Set to `true` to focus this [control]{@link enyo.Control} when it is rendered.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	defaultFocus: false,

	/**
	* @private
	*/
	protectedStatics: {
		osInfo: [
			{os: 'android', version: 3},
			{os: 'ios', version: 5}
		],
		//* Returns true if the platform has contenteditable attribute.
		hasContentEditable: function() {
			for (var i=0, t; (t=RichText.osInfo[i]); i++) {
				if (platform[t.os] < t.version) {
					return false;
				}
			}
			return true;
		}
	},

	/**
	* @private
	*/
	attributes: {
		contenteditable: true
	},

	/**
	* @private
	*/
	handlers: {
		onfocus: 'focusHandler',
		onblur: 'blurHandler',
		onkeyup: 'updateValue',
		oncut: 'updateValueAsync',
		onpaste: 'updateValueAsync',
		// prevent oninput handler from being called lower in the inheritance chain
		oninput: null
	},

	/**
	* Creates [RichText]{@link enyo.RichText} as a `<div>` if the platform has the
	* `contenteditable` attribute; otherwise, creates it as a `<textarea>`.
	*
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			this.setTag(RichText.hasContentEditable()?'div':'textarea');
			sup.apply(this, arguments);
			this.disabledChanged();
		};
	}),

	/**
	* @private
	*/
	focusHandler: function () {
		this._value = this.get('value');
	},
	/**
	* Simulates [onchange]{@link enyo.Input#onchange} {@glossary event}
	* exposed by [inputs]{@link enyo.Input}.
	*
	* @fires enyo.Input#onchange
	* @private
	*/
	blurHandler: function () {
		if (this._value !== this.get('value')) {
			this.bubble('onchange');
		}
	},
	/**
	* @private
	*/
	valueChanged: function () {
		var val = this.get('value');
		if (this.hasFocus() && val !== this.node.innerHTML) {
			this.selectAll();
			this.insertAtCursor(val);
		} else if(!this.hasFocus()) {
			this.set('content', val);
		}
		this.detectTextDirectionality((this.value || this.value === 0) ? this.value : '');
	},
	/**
	* @private
	*/
	disabledChanged: function () {
		if(this.tag === 'div') {
			this.setAttribute('contenteditable', this.disabled ? null : 'true');
		} else {
			this.setAttribute('disabled', this.disabled);
		}
		this.bubble('onDisabledChange');
	},
	/**
	* @private
	*/
	updateValue: function () {
		var val = this.node.innerHTML;
		this.set('value', val);
	},
	/**
	* @private
	*/
	updateValueAsync: function () {
		utils.asyncMethod(this.bindSafely('updateValue'));
	},

	/**
	* Determines whether this [control]{@link enyo.Control} has focus.
	*
	* @returns {Boolean} `true` if the [RichText]{@link enyo.RichText} is focused;
	* otherwise, `false`.
	* @public
	*/
	hasFocus: function () {
		if (this.hasNode()) {
			return document.activeElement === this.node;
		}
	},
	/**
	* Retrieves the current [selection]{@glossary Selection} from the
	* [RichText]{@link enyo.RichText}.
	*
	* @returns {Selection} The [selection]{@glossary Selection} [object]{@glossary Object}.
	* @public
	*/
	getSelection: function () {
		if (this.hasFocus()) {
			return global.getSelection();
		}
	},

	/**
	* Removes the [selection]{@glossary Selection} [object]{@glossary Object}.
	*
	* @param {Boolean} start - If `true`, the [selection]{@glossary Selection} is
	*	[collapsed to the start]{@glossary Selection.collapseToStart} of the
	*	[range]{@glossary Range}; otherwise, it is
	*	[collapsed to the end]{@glossary Selection.collapseToEnd} of the range.
	* @public
	*/
	removeSelection: function (start) {
		var s = this.getSelection();
		if (s) {
			s[start ? 'collapseToStart' : 'collapseToEnd']();
		}
	},

	/**
	* Modifies the [selection]{@glossary Selection} [object]{@glossary Object}. Please
	* see the [Selection.modify]{@glossary Selection.modify} API for more information.
	*
	* @param {enyo.RichText~ModifyType} type - The type of change to apply.
	* @param {enyo.RichText~ModifyDirection} dir - The direction in which to apply the change.
	* @param {enyo.RichText~ModifyAmount} amount - The granularity of the change.
	* @public
	*/
	modifySelection: function (type, dir, amount) {
		var s = this.getSelection();
		if (s) {
			s.modify(type || 'move', dir, amount);
		}
	},

	/**
	* Moves the cursor according to the [Editing API]{@glossary Selection.modify}.
	*
	* @param {enyo.RichText~ModifyDirection} dir - The direction in which to apply the change.
	* @param {enyo.RichText~ModifyAmount} amount - The granularity of the change.
	* @public
	*/
	moveCursor: function (dir, amount) {
		this.modifySelection('move', dir, amount);
	},

	/**
	* Moves the cursor to end of text field.
	*
	* @public
	*/
	moveCursorToEnd: function () {
		this.moveCursor('forward', 'documentboundary');
	},

	/**
	* Moves the cursor to start of text field.
	*
	* @public
	*/
	moveCursorToStart: function () {
		this.moveCursor('backward', 'documentboundary');
	},

	/**
	* Selects all content in text field.
	*
	* @public
	*/
	selectAll: function () {
		if (this.hasFocus()) {
			document.execCommand('selectAll');
		}
	},

	/**
	* Inserts HTML at the cursor position. HTML will be escaped unless the
	* [allowHtml]{@link enyo.RichText#allowHtml} property is `true`.
	*
	* @param {String} val - The HTML to insert at the current cursor position.
	* @public
	*/
	insertAtCursor: function (val) {
		if (this.hasFocus()) {
			var v = this.allowHtml ? val : Control.escapeHtml(val).replace(/\n/g, '<br/>');
			document.execCommand('insertHTML', false, v);
		}
	}
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../../enyo":12,"../Input":42,"../kind":96,"../platform":102,"../utils":106}],76:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Input = require('./Input');

/**
* {@link enyo.TextArea} implements an HTML [&lt;textarea&gt;]{@glossary textarea}
* element with cross-platform support for change [events]{@glossary event}.
*
* For more information, see the documentation on
* [Text Fields]{@linkplain $dev-guide/building-apps/controls/text-fields.html}
* in the Enyo Developer Guide.
*
* @class enyo.TextArea
* @extends enyo.Input
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.TextArea.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.TextArea',

	/**
	* @private
	*/
	kind: Input,

	/**
	* @private
	*/
	tag: 'textarea',

	/**
	* @private
	*/
	classes: 'enyo-textarea',

	/**
	* [TextArea]{@link enyo.TextArea} does use the [value]{@link enyo.Input#value} attribute;
	* it needs to be kicked when rendered.
	*
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.valueChanged();
		};
	})
});
},{"../../enyo":12,"./Input":42,"./kind":96}],83:[function(require,module,exports){
(function (global){
require('../../enyo');

var
	kind = require('./kind'),
	dispatcher = require('./dispatcher'),
	path = require('./path'),
	platform = require('./platform'),
	utils = require('./utils');
var
	Control = require('./Control'),
	MediaSource = require('./MediaSource'),
	Job = require('./job');

/**
* Fires when [playbackRate]{@link enyo.Video#playbackRate} is changed to an integer greater than `1`.
*
* @event enyo.Video#onFastforward
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when [playbackRate]{@link enyo.Video#playbackRate} is changed to a value between `0` and `1`.
*
* @event enyo.Video#onSlowforward
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when [playbackRate]{@link enyo.Video#playbackRate} is changed to an integer less than `-1`.
*
* @event enyo.Video#onRewind
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when [playbackRate]{@link enyo.Video#playbackRate} is changed to a value less than `0`
* but greater than or equal to `-1`.
*
* @event enyo.Video#onSlowrewind
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when [jumpForward()]{@link enyo.Video#jumpForward} is called.
*
* @event enyo.Video#onJumpForward
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when [jumpBackward()]{@link enyo.Video#jumpBackward} is called.
*
* @event enyo.Video#onJumpBackward
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when EventData is changed.
*
* @event enyo.Video#onPlay
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires when the [image]{@link enyo.Image} has loaded.
*
* @event enyo.Video#onStart
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Video} is a [control]{@link enyo.Control} that allows you to play video.
* It is an abstraction of HTML 5 [Video]{@glossary video}.
*
* Initialize a video [component]{@link enyo.Component} as follows:
*
* ```
* {kind: 'Video', src: 'http://www.w3schools.com/html/movie.mp4'}
* ```
* 
* To play a video, call `this.$.video.play()`.
* 
* To get a reference to the actual HTML 5 Video element, call `this.$.video.hasNode()`.
*
* @class enyo.Video
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Video.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Video',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	published: 
		/** @lends enyo.Video.prototype */ {

		/**
		* Source URL of the video file; may be relative to the application's HTML file.
		* 
		* @type {String}
		* @default ''
		* @public
		*/
		src: '',

		/**
		* An [object]{@glossary Object} that may be used to specify multiple sources for the
		* same video file.
		* 
		* @type {Object}
		* @default null
		* @public
		*/
		sourceComponents: null,

		/**
		* Source of image file to show when video is not available.
		* 
		* @type {String}
		* @default ''
		* @public
		*/
		poster: '',

		/**
		* If `true`, controls for starting and stopping the video player are shown.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		showControls: false,

		/**
		* Determines how (or whether) the {@link enyo.Video} object is preloaded.
		* Possible values:
		* - `'auto'`: Preload the video data as soon as possible.
		* - `'metadata'`: Preload only the video metadata.
		* - `'none'`: Do not preload any video data.
		* 
		* @type {String}
		* @default 'metadata'
		* @public
		*/
		preload: 'metadata',

		/**
		* If `true`, video will automatically start playing.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoplay: false,

		/**
		* If `true`, when playback is finished, the video player will restart from
		* the beginning.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		loop: false,

		/**
		* If `true`, video will be stretched to fill the entire window (webOS only).
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		fitToWindow: false,

		/**
		* The video aspect ratio, expressed as `width:height`.
		* 
		* @type {Number}
		* @default 0
		* @public
		*/
		aspectRatio: null,

		/**
		* Number of seconds to jump forward or backward.
		* 
		* @type {Number}
		* @default 30
		* @public
		*/
		jumpSec: 30,

		/**
		* Video playback rate.
		* 
		* @type {Number}
		* @default 1
		* @public
		*/
		playbackRate: 1,

		/**
		* Mapping of playback rate names to playback rate values that may be set.
		* ```
		* {
		*	fastForward: ['2', '4', '8', '16'],
		*	rewind: ['-2', '-4', '-8', '-16'],
		*	slowForward: ['1/4', '1/2', '1'],
		*	slowRewind: ['-1/2', '-1']
		* }
		* ```
		* 
		* @type {Object}
		* @default {
		*	fastForward: ['2', '4', '8', '16'],
		*	rewind: ['-2', '-4', '-8', '-16'],
		*	slowForward: ['1/4', '1/2', '1'],
		*	slowRewind: ['-1/2', '-1']
		* }
		* @public
		*/
		playbackRateHash: {
			fastForward: ['2', '4', '8', '16'],
			rewind: ['-2', '-4', '-8', '-16'],
			slowForward: ['1/4', '1/2', '1'],
			slowRewind: ['-1/2', '-1']
		}
	},

	/**
	* @private
	*/
	events: {
		onFastforward: '',
		onSlowforward: '',
		onRewind: '',
		onSlowrewind: '',
		onJumpForward: '',
		onJumpBackward: '',
		onPlay: '',
		onStart: ''
	},

	/**
	* @private
	*/
	handlers: {
		//* Catch video _loadedmetadata_ event
		onloadedmetadata: 'metadataLoaded',
		ontimeupdate: 'timeupdate',
		onratechange: 'ratechange',
		onplay: '_play',
		onChangeSource: 'load'
	},

	/**
	* @private
	*/
	observers: {
		updateSource: ['src', 'sourceComponents']
	},

	/**
	* @private
	*/
	tag: 'video',

	defaultKind: MediaSource,

	/**
	* @private
	*/
	_playbackRateArray: null,

	/**
	* @private
	*/
	_speedIndex: 0,

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.posterChanged();
			this.showControlsChanged();
			this.preloadChanged();
			this.autoplayChanged();
			this.loopChanged();
			// If no source has be specified, <source> elements may have been added directly
			// to the components block so skip updating sources to avoid erasing those
			// components.
			if(this.src || this.sourceComponents) {
				this.updateSource();
			}
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.hookupVideoEvents();
		};
	}),

	/**
	* @method
	* @private
	*/
	updateSource: function (old, value, source) {
		var src = this.get('src');
		var sources = this.get('sourceComponents');

		// if called due to a property change, clear the other property
		if(source === 'src' || (!source && src)) {
			this.sourceComponents = null;
			sources = [{src: src}];
		} else if(source === 'sourceComponents' || (!source && sources)) {
			src = this.src = '';
			if (!!this.getAttribute('src')) {
				this.setAttribute('src', '');
			}
		}

		// Always wipe out any previous sources before setting src or new sources
		this.destroyClientControls();
		if(sources) {
			this.createComponents(sources);
			if(this.hasNode()) {
				this.render();
			}
		}

		this.load();
	},

	/**
	* @private
	*/
	posterChanged: function () {
		if (this.poster) {
			var p = path.rewrite(this.poster);
			this.setAttribute('poster', p);
		}
		else {
			this.setAttribute('poster', null);
		}
	},

	/**
	* @private
	*/
	showControlsChanged: function () {
		this.setAttribute('controls', this.showControls ? 'controls' : null);
	},

	/**
	* @private
	*/
	preloadChanged: function () {
		this.setAttribute('preload', this.preload ? this.preload : null);
	},

	/**
	* @private
	*/
	autoplayChanged: function () {
		this.setAttribute('autoplay', this.autoplay ? 'autoplay' : null);
		this._prevCommand = this.autoplay ? 'play' : 'pause';
	},

	/**
	* @private
	*/
	loopChanged: function () {
		this.setAttribute('loop', this.loop ? 'loop' : null);
	},

	/**
	* @private
	*/
	fitToWindowChanged: function () {
		if (!this.hasNode()) {
			return;
		}
	},
	
	/**
	* Loads the current video [source]{@link enyo.Video#src}.
	* 
	* @public
	*/
	load: function () {
		if(this.hasNode()) { this.hasNode().load(); }
	},

	/**
	* Unloads the current video [source]{@link enyo.Video#src}, stopping all
	* playback and buffering.
	* 
	* @public
	*/
	unload: function() {
		this.src ='';
		this.sourceComponents = null;
		this.setAttribute('src', '');
		this.destroyClientControls();
		this.load();
	},

	/**
	* Initiates playback of the video data.
	* 
	* @public
	*/
	play: function () {
		if (!this.hasNode()) {
			return;
		}
		this._speedIndex = 0;
		this.setPlaybackRate(1);
		this.node.play();
		this._prevCommand = 'play';
	},

	/**
	* Pauses video playback.
	* 
	* @public
	*/
	pause: function () {
		if (!this.hasNode()) {
			return;
		}
		this._speedIndex = 0;
		this.setPlaybackRate(1);
		this.node.pause();
		this._prevCommand = 'pause';
	},

	/**
	* Changes the playback speed via [selectPlaybackRate()]{@link enyo.Video#selectPlaybackRate}.
	*
	* @public
	*/
	fastForward: function () {
		var node = this.hasNode();

		if (!node) {
			return;
		}
		switch (this._prevCommand) {
		case 'slowForward':
			if (this._speedIndex == this._playbackRateArray.length - 1) {
				// reached to the end of array => go to fastforward
				this.selectPlaybackRateArray('fastForward');
				this._speedIndex = 0;
				this._prevCommand = 'fastForward';
			} else {
				this._speedIndex = this.clampPlaybackRate(this._speedIndex+1);
				this._prevCommand = 'slowForward';
			}
			break;
		case 'pause':
			this.selectPlaybackRateArray('slowForward');
			this._speedIndex = 0;
			if (this.isPaused()) {
				node.play();
			}
			this._prevCommand = 'slowForward';
			break;
		case 'rewind':
			var pbNumber = this.calcNumberValueOfPlaybackRate(this.playbackRate);
			if (pbNumber < 0) {
				this.selectPlaybackRateArray('slowForward');
				this._prevCommand = 'slowForward';
			} else {
				this.selectPlaybackRateArray('fastForward');
				this._prevCommand = 'fastForward';
			}
			this._speedIndex = 0;
			break;
		case 'fastForward':
			this._speedIndex = this.clampPlaybackRate(this._speedIndex+1);
			this._prevCommand = 'fastForward';
			break;
		default:
			this.selectPlaybackRateArray('fastForward');
			this._speedIndex = 0;
			this._prevCommand = 'fastForward';
			break;
		}

		this.setPlaybackRate(this.selectPlaybackRate(this._speedIndex));

	},

	/**
	* Changes the playback speed via [selectPlaybackRate()]{@link enyo.Video#selectPlaybackRate}.
	* 
	* @public
	*/
	rewind: function () {
		var node = this.hasNode();

		if (!node) {
			return;
		}
		switch (this._prevCommand) {
		case 'slowRewind':
			if (this._speedIndex == this._playbackRateArray.length - 1) {
				// reached to the end of array => go to rewind
				this.selectPlaybackRateArray('rewind');
				this._speedIndex = 0;
				this._prevCommand = 'rewind';
			} else {
				this._speedIndex = this.clampPlaybackRate(this._speedIndex+1);
				this._prevCommand = 'slowRewind';
			}
			break;
		case 'pause':
			this.selectPlaybackRateArray('slowRewind');
			this._speedIndex = 0;
			if (this.isPaused() && this.node.duration > this.node.currentTime) {
				node.play();
			}
			this._prevCommand = 'slowRewind';
			break;
		case 'rewind':
			this._speedIndex = this.clampPlaybackRate(this._speedIndex+1);
			this._prevCommand = 'rewind';
			break;
		default:
			this.selectPlaybackRateArray('rewind');
			this._speedIndex = 0;
			this._prevCommand = 'rewind';
			break;
		}


		this.setPlaybackRate(this.selectPlaybackRate(this._speedIndex));
	},

	/**
	* Jumps backward [jumpSec]{@link enyo.Video#jumpSec} seconds from the current time.
	*
	* @fires enyo.Video#doJumpBackward
	* @public
	*/
	jumpBackward: function () {
		var node = this.hasNode();

		if (!node) {
			return;
		}

		this.setPlaybackRate(1);
		node.currentTime -= this.jumpSec;
		this._prevCommand = 'jumpBackward';

		this.doJumpBackward(utils.mixin(this.createEventData(), {jumpSize: this.jumpSec}));
	},

	/**
	* Jumps forward [jumpSec]{@link enyo.Video#jumpSec} seconds from the current time.
	*
	* @fires enyo.Video#doJumpForward
	* @public
	*/
	jumpForward: function () {
		var node = this.hasNode();

		if (!node) {
			return;
		}

		this.setPlaybackRate(1);
		node.currentTime += parseInt(this.jumpSec, 10);
		this._prevCommand = 'jumpForward';

		this.doJumpForward(utils.mixin(this.createEventData(), {jumpSize: this.jumpSec}));
	},

	/**
	* Jumps to beginning of media [source]{@link enyo.Video#src} and sets 
	* [playbackRate]{@link enyo.Video#playbackRate} to `1`.
	* 
	* @public
	*/
	jumpToStart: function () {
		var node = this.hasNode();

		if (!node) {
			return;
		}

		this.setPlaybackRate(1);
		node.pause();
		node.currentTime = 0;
		this._prevCommand = 'jumpToStart';
	},

	/**
	* Jumps to end of media [source]{@link enyo.Video#src} and sets 
	* [playbackRate]{@link enyo.Video#playbackRate} to `1`.
	* 
	* @public
	*/
	jumpToEnd: function () {
		var node = this.hasNode();

		if (!node) {
			return;
		}

		this.setPlaybackRate(1);
		node.pause();
		node.currentTime = this.node.duration;
		this._prevCommand = 'jumpToEnd';
	},

	/**
	* Sets the playback rate type (from the [keys]{@glossary Object.keys} of 
	* [playbackRateHash]{@link enyo.Video#playbackRateHash}).
	*
	* @param {String} cmd - Key of the playback rate type.
	* @public
	*/
	selectPlaybackRateArray: function (cmd) {
		this._playbackRateArray = this.playbackRateHash[cmd];
	},

	/**
	* Changes [playbackRate]{@link enyo.Video#playbackRate} to a valid value when initiating 
	* fast forward or rewind.
	*
	* @param {Number} idx - The index of the desired playback rate.
	* @public
	*/
	clampPlaybackRate: function (idx) {
		if (!this._playbackRateArray) {
			return;
		}

		return idx % this._playbackRateArray.length;
	},

	/**
	* Retrieves the playback rate name.
	*
	* @param {Number} idx - The index of the desired playback rate.
	* @returns {String} The playback rate name.
	* @public
	*/
	selectPlaybackRate: function (idx) {
		return this._playbackRateArray[idx];
	},

	/**
	* Sets [playbackRate]{@link enyo.Video#playbackRate}.
	* 
	* @param {String} rate - The desired playback rate.
	* @public
	*/
	setPlaybackRate: function (rate) {
		var node = this.hasNode(),
			pbNumber
		;

		if (!node) {
			return;
		}

		// Stop rewind (if happenning)
		this.stopRewindJob();

		// Make sure rate is a string
		this.playbackRate = rate = String(rate);
		pbNumber = this.calcNumberValueOfPlaybackRate(rate);

		// Set native playback rate
		node.playbackRate = pbNumber;

		if (!(platform.webos || global.PalmSystem)) {
			// For supporting cross browser behavior
			if (pbNumber < 0) {
				this.beginRewind();
			}
		}
	},

	/**
	* Determines whether playback is in the paused state.
	*
	* @returns {Boolean} `true` if paused; otherwise, `false`.
	* @public
	*/
	isPaused: function () {
		return this.hasNode() ? this.hasNode().paused : true;
	},

	/**
	* Determines the current player position in the video.
	*
	* @returns {Number} The current player position in seconds.
	* @public
	*/
	getCurrentTime: function () {
		return this.hasNode() ? this.hasNode().currentTime : 0;
	},

	/**
	* Determines the buffered [time range]{@glossary TimeRanges}.
	*
	* @returns {TimeRanges} The buffered [time range]{@glossary TimeRanges}.
	* @public
	*/
	getBufferedTimeRange: function () {
		return this.hasNode() ? this.hasNode().buffered : 0;
	},

	/**
	* Sets the current player position in the video.
	*
	* @param {Number} time - The position (in seconds) to which the player should be set.
	* @public
	*/
	setCurrentTime: function (time) {
		if ((typeof time === 'number') && this.hasNode()) {
			this.node.currentTime = time;
		}
	},

	/**
	* Determines the play duration in the video.
	*
	* @returns {Number} The play duration in seconds.
	* @public
	*/
	getDuration: function () {
		return this.hasNode() ? this.hasNode().duration : 0;
	},

	/**
	* Determines the [readyState]{@glossary readyState} of the video.
	*
	* @returns {ReadyState} The [readyState]{@glossary readyState} of the video.
	* @public
	*/
	getReadyState: function () {
		return this.hasNode() ? this.hasNode().readyState : -1;
	},

	/**
	* Determines the seeking status of the player.
	*
	* @returns {Boolean} `true` if currently seeking; otherwise, `false`.
	* @public
	*/
	getSeeking: function () {
		return this.hasNode() ? this.hasNode().seeking : -1;
	},

	/**
	* Implements custom rewind functionality (until browsers support negative playback rate).
	* 
	* @private
	*/
	beginRewind: function () {
		this.node.pause();
		this.startRewindJob();
	},

	/**
	* Calculates the time that has elapsed since
	* 
	* @private
	*/
	_rewind: function () {
		var now = utils.perfNow(),
			distance = now - this.rewindBeginTime,
			pbRate = this.calcNumberValueOfPlaybackRate(this.playbackRate),
			adjustedDistance = Math.abs(distance * pbRate) / 1000,
			newTime = this.getCurrentTime() - adjustedDistance
		;

		this.setCurrentTime(newTime);
		this.startRewindJob();
	},

	/**
	* Starts rewind job.
	* 
	* @private
	*/
	startRewindJob: function () {
		this.rewindBeginTime = utils.perfNow();
		Job(this.id + 'rewind', this.bindSafely('_rewind'), 100);
	},

	/**
	* Stops rewind job.
	* 
	* @private
	*/
	stopRewindJob: function () {
		Job.stop(this.id + 'rewind');
	},

	/**
	* Calculates numeric value of playback rate (with support for fractions).
	* 
	* @private
	*/
	calcNumberValueOfPlaybackRate: function (rate) {
		var pbArray = String(rate).split('/');
		return (pbArray.length > 1) ? parseInt(pbArray[0], 10) / parseInt(pbArray[1], 10) : parseInt(rate, 10);
	},

	/**
	* 
	* Updates the [aspectRatio]{@link enyo.Video#aspectRatio} property when the
	* video's metadata is received.
	*
	* @private
	*/
	metadataLoaded: function (sender, e) {
		var node = this.hasNode();
		this.setAspectRatio('none');
		if (!node || !node.videoWidth || !node.videoHeight) {
			return;
		}
		this.setAspectRatio(node.videoWidth/node.videoHeight+':1');
		e = utils.mixin(e, this.createEventData());
	},

	/**
	* @private
	*/
	timeupdate: function (sender, e) {
		var node = this.hasNode();

		if (!node) {
			return;
		}
		e = utils.mixin(e, this.createEventData());
	},

	/**
	* @fires enyo.Video#doSlowforward
	* @fires enyo.Video#doFastforward
	* @fires enyo.Video#doSlowrewind
	* @fires enyo.Video#doRewind
	* @fires enyo.Video#doPlay
	* @private
	*/
	ratechange: function (sender, e) {
		var node = this.hasNode(),
			info,
			pbNumber;

		if (!node) {
			return;
		}

		info = this.createEventData();
		utils.mixin(e, utils.clone(info, true));
		info.originalEvent = utils.clone(e, true);

		pbNumber = this.calcNumberValueOfPlaybackRate(info.playbackRate);

		if (pbNumber > 0 && pbNumber < 1) {
			this.doSlowforward(info);
		} else if (pbNumber > 1) {
			this.doFastforward(info);
		} else if (pbNumber < 0 && pbNumber >= -1) {
			this.doSlowrewind(info);
		} else if (pbNumber < -1) {
			this.doRewind(info);
		} else if (pbNumber == 1) {
			this.doPlay(info);
		}
	},

	/**
	* @fires enyo.Video#doStart
	* @private
	*/
	createEventData: function () {
		var node = this.hasNode();

		if (!node) {
			return {};
		}
		if (node.currentTime === 0) {
			this.doStart();
		}
		return {
			srcElement: node,
			duration: node.duration,
			currentTime: node.currentTime,
			playbackRate: this.getPlaybackRate()
		};
	},

	/**
	* Normalizes Enyo-generated `onPlay` [events]{@glossary event}.
	* 
	* @fires enyo.Video#doPlay
	* @private
	*/
	_play: function (sender, e) {
		var node = this.hasNode();

		if (!node) {
			return;
		}

		e = utils.mixin(e, this.createEventData());

		this.doPlay(e);
	},

	/**
	* All HTML5 [video]{@glossary video} [events]{@glossary event}.
	* 
	* @private
	*/
	hookupVideoEvents: function () {
		dispatcher.makeBubble(this,
			'loadstart',
			'emptied',
			'canplaythrough',
			'ended',
			'ratechange',
			'progress',
			'stalled',
			'playing',
			'durationchange',
			'volumechange',
			'suspend',
			'loadedmetadata',
			'waiting',
			'timeupdate',
			'abort',
			'loadeddata',
			'seeking',
			'play',
			'error',
			'canplay',
			'seeked',
			'pause'
		);
	}
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../enyo":12,"./Control":26,"./MediaSource":46,"./dispatcher":86,"./job":93,"./kind":96,"./path":100,"./platform":102,"./utils":106}],56:[function(require,module,exports){
(function (global){
require('../../../enyo');



var
	kind = require('../kind'),
	utils = require('../utils'),
	dispatcher = require('../dispatcher');
var
	Control = require('../Control'),
	Signals = require('../Signals'),
	Scrim = require('../Scrim'),
	Dom = require('../dom');

/**
* Fires after the [popup]{@link enyo.Popup} is shown.
*
* @event enyo.Popup#onShow
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* Fires after the [popup]{@link enyo.Popup} is hidden.
*
* @event enyo.Popup#onHide
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing event information.
* @public
*/

/**
* {@link enyo.Popup} is a [control]{@link enyo.Control} used to display certain content
* on top of other content.
*
* Popups are initially hidden on creation; they may be shown by calling the
* [show()]{@link enyo.Control#show} method and re-hidden by calling
* [hide()]{@link enyo.Control#hide}. Popups may be centered using the
* [centered]{@link enyo.Popup#centered} property; if not centered, they should
* be given a specific position.
*
* A popup may be optionally floated above all
* [application]{@link enyo.Application} content by setting its
* [floating]{@link enyo.Popup#floating} property to `true`. This has the
* advantage of guaranteeing that the popup will be displayed on top of other
* content. This usage is appropriate when the popup does not need to scroll
* along with other content.
*
* To avoid obscuring popup contents, scrims require the dialog to be floating;
* otherwise, they won't render. A modal popup will get a transparent scrim
* unless the popup isn't floating. To get a translucent scrim when modal,
* specify `[scrim]{@link enyo.Popup#scrim}: true` and
* `[scrimWhenModal]{@link enyo.Popup#scrimWhenModal}: false`.
*
* Finally, there is a WebKit bug affecting the behavior of popups that are
* displayed on top of text input controls.  For more information, including a
* workaround, see the documentation on
* [Popups]{@linkplain $dev-guide/building-apps/controls/popups.html}
* in the Enyo Developer Guide.
*
* @class enyo.Popup
* @extends enyo.Control
* @ui
* @public
*/
var Popup = module.exports = kind(
	/** @lends enyo.Popup.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Popup',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/


	/**
	* @private
	*/
	classes: 'enyo-popup enyo-no-touch-action',

	/**
	* @private
	*/
	published:
		/** @lends enyo.Popup.prototype */ {

		/**
		* Set to `true` to prevent [controls]{@link enyo.Control} outside the
		* [popup]{@link enyo.Popup} from receiving [events]{@glossary event} while the
		* popup is showing.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		modal: false,

		/**
		* By default, the [popup]{@link enyo.Popup} will hide when the user taps outside it or
		* presses `ESC`.  Set to `false` to prevent this behavior.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoDismiss: true,

		/**
		* Set to `true` to render the [popup]{@link enyo.Popup} in a
		* [floating layer]{@link enyo.FloatingLayer} outside of other
		* [controls]{@link enyo.Control}.  This may be used to guarantee that the
		* popup will be shown on top of other controls.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		floating: false,

		/**
		* Set to `true` to automatically center the [popup]{@link enyo.Popup} in
		* the middle of the viewport.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		centered: false,

		/**
		* Set to `true` to be able to show transition on the style modifications;
		* otherwise the transition is invisible `(visibility: hidden)`.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		showTransitions: false,

		/**
		* Set to `true` to stop `preventDefault()` from being called on captured
		* [events]{@glossary event}.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		allowDefault: false,

		/**
		* Boolean that controls whether a scrim will appear when the dialog is
		* modal. Note that modal scrims are transparent, so you won't see them.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		scrimWhenModal: true,

		/**
		* Boolean that controls whether or not a scrim will be displayed. Scrims are
		* only displayed when the dialog is floating.
		*
		* @type {Boolean}
		* @default  false
		* @public
		*/
		scrim: false,

		/**
		* Optional class name to apply to the scrim. Be aware that the scrim
		* is a singleton and you will be modifying the scrim instance used for
		* other popups.
		*
		* @type {String}
		* @default  ''
		* @public
		*/
		scrimClassName: '',

		/**
		* Lowest z-index that may be applied to a popup
		*
		* @type {Number}
		* @default  120
		* @public
		*/
		defaultZ: 120
	},

	/**
	* @lends  enyo.Popup
	* @private
	*/
	protectedStatics: {
		/**
		* Count of currently showing popups
		* @type {Number}
		* @static
		* @private
		*/
		count: 0,

		/**
		* Highest possible z-index for a popup
		* @type {Number}
		* @static
		* @private
		*/
		highestZ: 120
	},

	/**
	* @private
	*/
	showing: false,

	/**
	* @private
	*/
	handlers: {
		onkeydown: 'keydown',
		ondragstart: 'dragstart',
		onfocus: 'focus',
		onblur: 'blur',
		onRequestShow: 'requestShow',
		onRequestHide: 'requestHide'
	},

	/**
	* @private
	*/
	captureEvents: true,

	/**
	* @private
	*/
	eventsToCapture: {
		ondown: 'capturedDown',
		ontap: 'capturedTap'
	},

	/**
	* @private
	*/
	events: {
		onShow: '',
		onHide: ''
	},

	/**
	* @private
	*/
	tools: [
		{kind: Signals, onKeydown: 'keydown'}
	],

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			var showing = this.showing;
			this.showing = false;

			sup.apply(this, arguments);
			this.canGenerate = !this.floating;

			// if the showing flag was true we know the intent was to automatically show the
			// popup on render...but it can't be rendered in the normal flow...but the rendered
			// method won't be called because it wasn't generated...SO...we arbitrarily flag
			// it as generated even though it wasn't to ensure that its rendered method will
			// be called and we then check for this scenario in rendered
			this.generated = showing;
		};
	}),

	/**
	* @method
	* @private
	*/
	render: kind.inherit(function (sup) {
		return function() {
			if (this.floating) {
				if (!Control.floatingLayer.hasNode()) {
					Control.floatingLayer.render();
				}
				this.parentNode = Control.floatingLayer.hasNode();
			}
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	teardownRender: kind.inherit(function (sup) {
		return function () {
			// if this is a rendered floating popup, remove the node from the
			// floating layer because it won't be removed otherwise
			var node = this.hasNode();
			if(this.floating && node) {
				this.node.remove();
			}

			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			this.release();
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	reflow: kind.inherit(function (sup) {
		return function() {
			this.updatePosition();
			sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	calcViewportSize: function () {
		if (global.innerWidth) {
			return {
				width: global.innerWidth,
				height: global.innerHeight
			};
		} else {
			var e = document.documentElement;
			return {
				width: e.offsetWidth,
				height: e.offsetHeight
			};
		}
	},

	/**
	* @private
	*/
	updatePosition: function () {
		var d = this.calcViewportSize(),
			b = this.getBounds();

		if (this.targetPosition) {
			// For brevity's sake...
			var p = this.targetPosition;

			// Test and optionally adjust our target bounds (only first is commented, because logic is effectively identical for all scenarios)
			if (typeof p.left == 'number') {
				// If popup will be outside global bounds, switch anchor
				if (p.left + b.width > d.width) {
					if (p.left - b.width >= 0) {
						// Switching to right corner will fit in global
						p.right = d.width - p.left;
					} else {
						// Neither corner will work; stick at side of global
						p.right = 0;
					}
					p.left = null;
				} else {
					p.right = null;
				}
			} else if (typeof p.right == 'number') {
				if (p.right + b.width > d.width) {
					if (p.right - b.width >= 0) {
						p.left = d.width - p.right;
					} else {
						p.left = 0;
					}
					p.right = null;
				} else {
					p.left = null;
				}
			}

			if (typeof p.top == 'number') {
				if (p.top + b.height > d.height) {
					if (p.top - b.height >= 0) {
						p.bottom = d.height - p.top;
					} else {
						p.bottom = 0;
					}
					p.top = null;
				} else {
					p.bottom = null;
				}
			} else if (typeof p.bottom == 'number') {
				if (p.bottom + b.height > d.height) {
					if (p.bottom - b.height >= 0) {
						p.top = d.height - p.bottom;
					} else {
						p.top = 0;
					}
					p.bottom = null;
				} else {
					p.top = null;
				}
			}

			// 'initial' values are necessary to override positioning rules in the CSS
			this.addStyles('left: ' + (p.left !== null ? p.left + 'px' : 'initial') + '; right: ' + (p.right !== null ? p.right + 'px' : 'initial') + '; top: ' + (p.top !== null ? p.top + 'px' : 'initial') + '; bottom: ' + (p.bottom !== null ? p.bottom + 'px' : 'initial') + ';');
		} else if (this.centered) {
			var o = this.floating ? d : this.getInstanceOwner().getBounds();
			this.addStyles( 'top: ' + Math.max( ( ( o.height - b.height ) / 2 ), 0 ) + 'px; left: ' + Math.max( ( ( o.width - b.width ) / 2 ), 0 ) + 'px;' );
		}
	},

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function () {
			// generated won't be true when this method is called with showing false unless
			// we set it that way so we need to go ahead and do our actual render now that the container (parent)
			// has been rendered and the floating layer can be rendered and we should be able to carry on normally
			if (this.generated && !this.showing && !this.hasNode()) {
				this.generated = false;
				this.showing = true;
				this.showingChanged();
			} else sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @fires enyo.Popup#onShow
	* @fires enyo.Popup#onHide
	* @private
	*/
	showingChanged: kind.inherit(function (sup) {
		return function() {
			// auto render when shown.
			if (this.floating && this.showing && !this.hasNode()) {
				this.render();
			}
			// hide while sizing, and move to top corner for accurate sizing
			if (this.centered || this.targetPosition) {
				if (!this.showTransitions) {
					this.applyStyle('visibility', 'hidden');
				}
				this.addStyles('top: 0px; left: 0px; right: initial; bottom: initial;');
			}
			sup.apply(this, arguments);
			if (this.showing) {
				this.resize();
				Popup.count++;
				this.applyZIndex();
				if (this.captureEvents) {
					this.capture();
				}
			} else {
				if(Popup.count > 0) {
					Popup.count--;
				}
				if (this.captureEvents) {
					this.release();
				}
			}
			this.showHideScrim(this.showing);
			// show after sizing
			if (this.centered || this.targetPosition && !this.showTransitions) {
				this.applyStyle('visibility', null);
			}
			// events desired due to programmatic show/hide
			if (this.hasNode()) {
				this[this.showing ? 'doShow' : 'doHide']();
			}
		};
	}),

	/**
	* @private
	*/
	capture: function () {
		dispatcher.capture(this, this.eventsToCapture);
	},

	/**
	* @private
	*/
	release: function () {
		dispatcher.release(this);
	},

	/**
	* @private
	*/
	capturedDown: function (sender, e) {
		//record the down event to verify in tap
		this.downEvent = e;

		// prevent focus from shifting outside the popup when modal.
		if (this.modal && !this.allowDefault) {
			e.preventDefault();
		}
		return this.modal;
	},

	/**
	* @private
	*/
	capturedTap: function (sender, e) {
		// dismiss on tap if property is set and click started & ended outside the popup
		if (this.autoDismiss && (!e.dispatchTarget.isDescendantOf(this)) && this.downEvent &&
			(!this.downEvent.dispatchTarget.isDescendantOf(this))) {
			this.downEvent = null;
			this.hide();
		}
		return this.modal;
	},

	/**
	* If a drag event occurs outside a [popup]{@link enyo.Popup}, hide.
	*
	* @private
	*/
	dragstart: function (sender, e) {
		var inScope = (e.dispatchTarget === this || e.dispatchTarget.isDescendantOf(this));
		if (sender.autoDismiss && !inScope) {
			sender.setShowing(false);
		}
		return true;
	},

	/**
	* @private
	*/
	keydown: function (sender, e) {
		if (this.showing && this.autoDismiss && e.keyCode == 27 /* escape */) {
			this.hide();
		}
	},

	/**
	* If something inside the [popup]{@link enyo.Popup} blurred, keep track of it.
	*
	* @private
	*/
	blur: function (sender, e) {
		if (e.dispatchTarget.isDescendantOf(this)) {
			this.lastFocus = e.originator;
		}
	},

	/**
	* When something outside the [popup]{@link enyo.Popup} focuses (e.g., due to tab key), focus
	* our last focused [control]{@link enyo.Control}.
	*
	* @private
	*/
	focus: function (sender, e) {
		var dt = e.dispatchTarget;
		if (this.modal && !dt.isDescendantOf(this)) {
			if (dt.hasNode()) {
				dt.node.blur();
			}
			var n = (this.lastFocus && this.lastFocus.hasNode()) || this.hasNode();
			if (n) {
				n.focus();
			}
		}
	},

	/**
	* @private
	*/
	requestShow: function () {
		this.show();
		return true;
	},

	/**
	* @private
	*/
	requestHide: function () {
		this.hide();
		return true;
	},

	/**
	* Opens the [popup]{@link enyo.Popup} at the location of a mouse
	* {@glossary event}. The popup's position is automatically constrained so
	* that it does not display outside the viewport, and defaults to anchoring
	* the top left corner of the popup to the position of the mouse event.
	*
	* @param {Object} e - The mouse {@glossary event} that initiated this call.
	* @param {Object} [offset] - An optional [object]{@glossary Object} that may
	* contain `left` and `top` properties to specify an offset relative to the
	* location where the [popup]{@link enyo.Popup} would otherwise be positioned.
	* @public
	*/
	showAtEvent: function (e, offset) {
		// Calculate our ideal target based on the event position and offset
		var p = {
			left: e.centerX || e.clientX || e.pageX,
			top: e.centerY || e.clientY || e.pageY
		};
		if (offset) {
			p.left += offset.left || 0;
			p.top += offset.top || 0;
		}

		this.showAtPosition(p);
	},

	/**
	* Opens the [popup]{@link enyo.Popup} at a specific position. The final
	* location of the popup will be automatically constrained so that it does
	* not display outside the viewport.
	*
	* @param {Object} pos An [object]{@glossary Object} that may contain `left`,
	* `top`, `bottom`, and `right` properties to specify where the
	* [popup]{@link enyo.Popup} will be anchored. If both `left` and `right` are
	* included, the preference will be to anchor on the left; similarly, if both
	* `top` and `bottom` are specified, the preference will be to anchor at the
	* top.
	* @public
	*/
	showAtPosition: function (pos) {
		// Save our target position for later processing
		this.targetPosition = pos;

		// Show the dialog
		this.show();
	},

	/**
	* Toggles the display of the scrim
	*
	* @param  {Boolean} show - Show the scrim
	* @private
	*/
	showHideScrim: function (show) {
		if (this.floating && (this.scrim || (this.modal && this.scrimWhenModal))) {
			var scrim = this.getScrim();
			if (show) {
				// move scrim to just under the popup to obscure rest of screen
				var i = this.getScrimZIndex();
				this._scrimZ = i;
				scrim.showAtZIndex(i);
			} else {
				scrim.hideAtZIndex(this._scrimZ);
			}
			utils.call(scrim, 'addRemoveClass', [this.scrimClassName, scrim.showing]);
		}
	},

	/**
	* Calculates the z-index for the scrim so it's directly below the popup
	*
	* @private
	*/
	getScrimZIndex: function () {
		return Popup.highestZ >= this._zIndex ? this._zIndex - 1 : Popup.highestZ;
	},

	/**
	* Show a transparent scrim for modal popups if {@link enyo.Popup#scrimWhenModal} is `true`
	* if {@link enyo.Popup#scrim} is `true`, then show a regular scrim.
	*
	* @return {enyo.Scrim}
	* @private
	*/
	getScrim: function () {
		//
		if (this.modal && this.scrimWhenModal && !this.scrim) {
			return Scrim.scrimTransparent.make();
		}
		return Scrim.scrim.make();
	},

	/**
	* Adjust the zIndex so that popups will properly stack on each other.
	*
	* @private
	*/
	applyZIndex: function () {
		this._zIndex = (Popup.count * 2) + this.findZIndex() + 1;
		if (this._zIndex <= Popup.highestZ) {
			this._zIndex = Popup.highestZ + 1;
		}
		if (this._zIndex > Popup.highestZ) {
			Popup.highestZ = this._zIndex;
		}
		// leave room for scrim
		this.applyStyle('z-index', this._zIndex);
	},

	/**
	* Find the z-index for this popup, clamped by {@link enyo.Popup#defaultZ}
	*
	* @return {Number} z-index value
	* @private
	*/
	findZIndex: function () {
		// a default z value
		var z = this.defaultZ;
		if (this._zIndex) {
			z = this._zIndex;
		} else if (this.hasNode()) {
			// Re-use existing zIndex if it has one
			z = Number(Dom.getComputedStyleValue(this.node, 'z-index')) || z;
		}
		if (z < this.defaultZ) {
			z = this.defaultZ;
		}
		this._zIndex = z;
		return this._zIndex;
	}
});

/**
* By default, we capture `ondown` and `ontap` to implement the [popup's]{@link enyo.Popup}
* modal behavior, but in certain circumstances it may be necessary to capture other
* [events]{@glossary event} as well, so we provide this hook to extend. (We are currently
* using this in Moonstone to capture `onSpotlightFocus` [events]{@glossary event}).
*
* @private
*/
Popup.concat = function (ctor, props, instance) {
	var proto = ctor.prototype || ctor,
		evts = proto.eventsToCapture;
	proto.eventsToCapture = evts ? utils.mixin({}, [evts, props.eventsToCapture]) : props.eventsToCapture;
	delete props.eventsToCapture;
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../../enyo":12,"../Control":26,"../Scrim":62,"../Signals":68,"../dispatcher":86,"../dom":87,"../kind":96,"../utils":106}],78:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	utils = require('./utils'),
	dispatcher = require('./dispatcher'),
	platform = require('./platform');

var
	ScrollMath = require('./ScrollMath'),
	ScrollStrategy = require('./ScrollStrategy'),
	ScrollThumb = require('./ScrollThumb'),
	Dom = require('./dom');

/**
* Fires when dragging has started, allowing drags to propagate to parent
* [scrollers]{@link enyo.Scroller}.
*
* @event enyo.TouchScrollStrategy#onShouldDrag
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently
*	propagated the {@glossary event}.
* @property {enyo.Scroller~ScrollEvent} event - An [object]{@glossary Object} containing
*	event information.
* @private
*/

/**
* {@link enyo.TouchScrollStrategy} is a helper [kind]{@glossary kind} for implementing a
* touch-based [scroller]{@link enyo.Scroller}. It integrates the scrolling simulation provided
* by {@link enyo.ScrollMath} into an `enyo.Scroller`.
*
* `enyo.TouchScrollStrategy` is not typically created in application code. Instead, it is
* specified as the value of the [strategyKind]{@link enyo.Scroller#strategyKind} property
* of an `enyo.Scroller` or {@link enyo.List}, or is used by the framework implicitly.
*
* @class enyo.TouchScrollStrategy
* @extends enyo.ScrollStrategy
* @protected
*/
module.exports = kind(
	/** @lends enyo.TouchScrollStrategy.prototype */ {

	name: 'enyo.TouchScrollStrategy',

	/**
	* @private
	*/
	kind: ScrollStrategy,

	/**
		If `true` (the default), the scroller will overscroll and bounce back at the edges.
	*/
	overscroll: true,

	/**
		If `true` (the default), the scroller will not propagate `dragstart`
		events that cause it to start scrolling.
	*/
	preventDragPropagation: true,

	/**
	* @private
	*/
	published:
		/** @lends enyo.TouchScrollStrategy.prototype */ {

		/**
		* Specifies how to vertically scroll.  Acceptable values are `'scroll'`, `'auto'`,
		* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the
		* scroll strategy.
		*
		* @type {String}
		* @default 'default'
		* @public
		*/
		vertical: 'default',

		/**
		* Specifies how to horizontally scroll.  Acceptable values are `'scroll'`, `'auto'`,
		* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the
		* scroll strategy.
		*
		* @type {String}
		* @default 'default'
		* @public
		*/
		horizontal: 'default',

		/**
		* Set to `true` to display a scroll thumb.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		thumb: true,

		/**
		* Set to `true` to display a transparent overlay while scrolling. This can help improve
		* performance of complex, large scroll regions on some platforms (e.g., Android).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		scrim: false,

		/**
		* Indicates whether to allow drag [events]{@glossary event} to be sent while gesture
		* events are happening simultaneously.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		dragDuringGesture: true,

		/**
		* Facades animation time step from [ScrollMath]{@link enyo.ScrollMath}.
		*
		* @type {Number}
		* @default 20
		* @public
		*/
		interval: 20,

		/**
		* Facades animation interval type from [ScrollMath]{@link enyo.ScrollMath}.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		fixedTime: true,

		/**
		* Facades one unit of time for simulation from [ScrollMath]{@link enyo.ScrollMath}.
		*
		* @type {Number}
		* @default 10
		* @public
		*/
		frame: 10,

		/**
		* Indicates whether default [events]{@glossary event} (e.g., native scrolling
		* events) should be suppressed.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		preventDefault: true
	},

	/**
	* @private
	*/
	events: {
		onShouldDrag: ''
	},

	/**
	* @private
	*/
	handlers: {
		onflick: 'flick',
		onShouldDrag: 'shouldDrag',
		ondrag: 'drag'
	},

	/**
	* @private
	*/
	tools: [
		{kind: ScrollMath, onScrollStart: 'scrollMathStart', onScroll: 'scrollMathScroll', onScrollStop: 'scrollMathStop', onStabilize: 'scrollMathStabilize'},
		{name: 'vthumb', kind: ScrollThumb, axis: 'v', showing: false},
		{name: 'hthumb', kind: ScrollThumb, axis: 'h', showing: false}
	],

	/**
	* @private
	*/
	scrimTools: [{name: 'scrim', classes: 'enyo-fit', style: 'z-index: 1;', showing: false}],

	/**
	* @private
	*/
	components: [
		{name: 'client', classes: 'enyo-touch-scroller'}
	],

	/**
	* Flag indicating whether the list is currently reordering.
	*
	* @readonly
	* @public
	*/
	listReordering: false,

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.transform = Dom.canTransform();
			if(!this.transform) {
				if(this.overscroll) {
					//so we can adjust top/left if browser can't handle translations
					this.$.client.applyStyle('position', 'relative');
				}
			}
			this.accel = Dom.canAccelerate();
			var containerClasses = 'enyo-touch-strategy-container';
			// note: needed for ios to avoid incorrect clipping of thumb
			// and need to avoid on Android as it causes problems hiding the thumb
			if (platform.ios && this.accel) {
				containerClasses += ' enyo-composite';
			}
			this.scrimChanged();
			this.intervalChanged();
			this.fixedTimeChanged();
			this.frameChanged();
			this.container.addClass(containerClasses);
			this.translation = this.accel ? 'translate3d' : 'translate';
		};
	}),

	/**
	* @method
	* @private
	*/
	initComponents: kind.inherit(function (sup) {
		return function() {
			this.createChrome(this.tools);
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function() {
			this.container.removeClass('enyo-touch-strategy-container');
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			dispatcher.makeBubble(this.$.client, 'scroll');
			this.calcBoundaries();
			this.syncScrollMath();
			if (this.thumb) {
				this.alertThumbs();
			}
		};
	}),

	/**
	* @private
	*/
	scrimChanged: function () {
		if (this.scrim && !this.$.scrim) {
			this.makeScrim();
		}
		if (!this.scrim && this.$.scrim) {
			this.$.scrim.destroy();
		}
	},

	/**
	* @private
	*/
	makeScrim: function () {
		// reset control parent so scrim doesn't go into client.
		var cp = this.controlParent;
		this.controlParent = null;
		this.createChrome(this.scrimTools);
		this.controlParent = cp;
		var cn = this.container.hasNode();
		// render scrim in container, strategy has no dom.
		if (cn) {
			this.$.scrim.parentNode = cn;
			this.$.scrim.render();
		}
	},

	/**
	* Determines whether or not the scroller is actively moving.
	*
	* @return {Boolean} `true` if actively moving; otherwise, `false`.
	* @public
	*/
	isScrolling: function () {
		var m = this.$.scrollMath;
		return m ? m.isScrolling() : this.scrolling;
	},

	/**
	* Determines whether or not the scroller is in overscroll.
	*
	* @return {Boolean} `true` if in overscroll; otherwise, `false`.
	* @public
	*/
	isOverscrolling: function () {
		var m = this.$.scrollMath || this;
		return (this.overscroll) ? Boolean(m.isInOverScroll()) : false;
	},

	/**
	* @private
	*/
	domScroll: function () {
		if (!this.isScrolling()) {
			this.calcBoundaries();
			this.syncScrollMath();
			if (this.thumb) {
				this.alertThumbs();
			}
		}
	},

	/**
	* @private
	*/
	horizontalChanged: function () {
		this.$.scrollMath.horizontal = (this.horizontal != 'hidden');
	},

	/**
	* @private
	*/
	verticalChanged: function () {
		this.$.scrollMath.vertical = (this.vertical != 'hidden');
	},

	/**
	* @private
	*/
	maxHeightChanged: function () {
		this.$.client.applyStyle('max-height', this.maxHeight);
		// note: previously used enyo-fit here but IE would reset scroll position when the scroll thumb
		// was hidden; in general IE resets scrollTop when there are 2 abs position siblings, one has
		// scrollTop and the other is hidden.
		this.$.client.addRemoveClass('enyo-scrollee-fit', !this.maxHeight);
	},

	/**
	* @private
	*/
	thumbChanged: function () {
		this.hideThumbs();
	},

	/**
	* @private
	*/
	intervalChanged: function () {
		if (this.$.scrollMath) {
			this.$.scrollMath.interval = this.interval;
		}
	},

	/**
	* @private
	*/
	fixedTimeChanged: function () {
		if (this.$.scrollMath) {
			this.$.scrollMath.fixedTime = this.fixedTime;
		}
	},

	/**
	* @private
	*/
	frameChanged: function () {
		if (this.$.scrollMath) {
			this.$.scrollMath.frame = this.frame;
		}
	},

	/**
	* Stops any active scroll movement.
	*
	* @todo Doc update made while merging, need official documentation update!
	*
	* @param {Boolean} emit - Whether or not to fire the `onScrollStop` event.
	* @public
	*/
	stop: function (emit) {
		if (this.isScrolling()) {
			this.$.scrollMath.stop(emit);
		}
	},

	/**
	* Adjusts the scroll position to be valid, if necessary (e.g., after the scroll contents
	* have changed).
	*
	* @public
	*/
	stabilize: function () {
		if(this.$.scrollMath) {
			this.$.scrollMath.stabilize();
		}
	},

	/**
	* Scrolls to a specific position within the scroll area.
	*
	* @param {Number} x - The `x` position in pixels.
	* @param {Number} y - The `y` position in pixels.
	* @public
	*/
	scrollTo: function (x, y) {
		this.stop(true);
		this.$.scrollMath.scrollTo(x, y || y === 0 ? y : null);
	},

	/**
	* Scrolls the given [control]{@link enyo.Control} into view.
	*
	* @param {enyo.Control} ctl - The [control]{@link enyo.Control} to make visible in the
	*	[scroller's]{@link enyo.Scroller} viewport.
	* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the
	*	scroller.
	* @method
	* @public
	*/
	scrollIntoView: kind.inherit(function (sup) {
		return function() {
			this.stop(true);
			sup.apply(this, arguments);
		};
	}),

	/**
	* Sets the horizontal scroll position.
	*
	* @param {Number} left - The horizontal scroll position in pixels.
	* @method
	* @public
	*/
	setScrollLeft: kind.inherit(function (sup) {
		return function() {
			this.stop(true);
			sup.apply(this, arguments);
		};
	}),

	/**
	* Sets the vertical scroll position.
	*
	* @param {Number} top - The vertical scroll position in pixels.
	* @method
	* @public
	*/
	setScrollTop: kind.inherit(function (sup) {
		return function(top) {
			this.stop(true);
			sup.apply(this, arguments);
		};
	}),

	/**
	* Retrieves the horizontal scroll position.
	*
	* @returns {Number} The horizontal scroll position in pixels.
	* @method
	* @public
	*/
	getScrollLeft: kind.inherit(function (sup) {
		return function() {
			return this.isScrolling() ? this.scrollLeft : sup.apply(this, arguments);
		};
	}),

	/**
	* Retrieves the vertical scroll position.
	*
	* @returns {Number} The vertical scroll position in pixels.
	* @method
	* @private
	*/
	getScrollTop: kind.inherit(function (sup) {
		return function() {
			return this.isScrolling() ? this.scrollTop : sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	calcScrollNode: function () {
		return this.$.client.hasNode();
	},

	/**
	* @private
	*/
	calcAutoScrolling: function () {
		var v = (this.vertical == 'auto');
		var h = (this.horizontal == 'auto') || (this.horizontal == 'default');
		if ((v || h) && this.scrollNode) {
			var b = this.getScrollBounds();
			if (v) {
				this.$.scrollMath.vertical = b.height > b.clientHeight;
			}
			if (h) {
				this.$.scrollMath.horizontal = b.width > b.clientWidth;
			}
		}
	},

	/**
	* @private
	*/
	shouldDrag: function (sender, e) {
		this.calcAutoScrolling();
		var requestV = e.vertical;
		var canH = this.$.scrollMath.horizontal && !requestV;
		var canV = this.$.scrollMath.vertical && requestV;
		var down = e.dy < 0, right = e.dx < 0;
		var oobV = (!down && this.startEdges.top || down && this.startEdges.bottom);
		var oobH = (!right && this.startEdges.left || right && this.startEdges.right);
		// we would scroll if not at a boundary
		if (!e.boundaryDragger && (canH || canV)) {
			e.boundaryDragger = this;
		}
		// include boundary exclusion
		if ((!oobV && canV) || (!oobH && canH)) {
			e.dragger = this;
			return true;
		}
	},

	/**
	* @private
	*/
	flick: function (sender, e) {
		var onAxis = Math.abs(e.xVelocity) > Math.abs(e.yVelocity) ? this.$.scrollMath.horizontal : this.$.scrollMath.vertical;
		if (onAxis && this.dragging) {
			this.$.scrollMath.flick(e);
			return this.preventDragPropagation;
		}
	},

	/**
	* @private
	*/
	down: kind.inherit(function (sup) {
		return function (sender, e) {
			if (!this.isOverscrolling()) {
				sup.apply(this, arguments);
			}
		};
	}),

	/**
	* @private
	*/
	move: function (sender, e) {
	},

	// Special synthetic DOM events served up by the Gesture system

	/**
	* @fires enyo.TouchScrollStrategy#onShouldDrag
	* @private
	*/
	dragstart: function (sender, e) {
		// Ignore drags sent from multi-touch events
		if(!this.dragDuringGesture && e.srcEvent.touches && e.srcEvent.touches.length > 1) {
			return true;
		}
		// note: allow drags to propagate to parent scrollers via data returned in the shouldDrag event.
		this.doShouldDrag(e);
		this.dragging = (e.dragger == this || (!e.dragger && e.boundaryDragger == this));
		if (this.dragging) {
			if(this.preventDefault){
				e.preventDefault();
			}
			// note: needed because show/hide changes
			// the position so sync'ing is required when
			// dragging begins (needed because show/hide does not trigger onscroll)
			this.syncScrollMath();
			this.$.scrollMath.startDrag(e);
			if (this.preventDragPropagation) {
				return true;
			}
		}
	},

	/**
	* @private
	*/
	drag: function (sender, e) {
		// if the list is doing a reorder, don't scroll
		if(this.listReordering) {
			return false;
		}
		if (this.dragging) {
			if(this.preventDefault){
				e.preventDefault();
			}
			this.$.scrollMath.drag(e);
			if (this.scrim) {
				this.$.scrim.show();
			}
		}
	},
	dragfinish: function (sender, e) {
		if (this.dragging) {
			e.preventTap();
			this.$.scrollMath.dragFinish();
			this.dragging = false;
			if (this.scrim) {
				this.$.scrim.hide();
			}
		}
	},

	/**
	* @private
	*/
	mousewheel: function (sender, e) {
		if (!this.dragging && this.useMouseWheel) {
			this.calcBoundaries();
			this.syncScrollMath();
			this.stabilize();
			if (this.$.scrollMath.mousewheel(e)) {
				e.preventDefault();
				return true;
			}
		}
	},

	/**
	* @private
	*/
	scrollMathStart: function () {
		if (this.scrollNode && !this.isScrolling()) {
			this.scrolling = true;
			if (!this.isOverscrolling()) {
				this.calcBoundaries();
			}
		}
	},

	/**
	* @private
	*/
	scrollMathScroll: function (sender) {
		if(!this.overscroll) {
			//don't overscroll past edges
			this.effectScroll(-Math.min(sender.leftBoundary, Math.max(sender.rightBoundary, sender.x)),
					-Math.min(sender.topBoundary, Math.max(sender.bottomBoundary, sender.y)));
		} else {
			this.effectScroll(-sender.x, -sender.y);
		}
		if (this.thumb) {
			this.showThumbs();
			this.delayHideThumbs(100);
		}
	},

	/**
	* @private
	*/
	scrollMathStop: function () {
		this.scrolling = false;
		this.effectScrollStop();
		if (this.thumb) {
			this.delayHideThumbs(100);
		}
	},

	/**
	* @private
	*/
	scrollMathStabilize: function (sender) {
		this.effectScroll(-sender.x, -sender.y);
		if (this.thumb) {
			this.showThumbs();
			this.delayHideThumbs(100);
		}
		return true;
	},

	/**
	* @private
	*/
	calcBoundaries: function () {
		var s = this.$.scrollMath || this, b = this._getScrollBounds();
		s.bottomBoundary = b.clientHeight - b.height;
		s.rightBoundary = b.clientWidth - b.width;
	},

	/**
	* @private
	*/
	syncScrollMath: function () {
		var m = this.$.scrollMath;
		if(m) {
			m.setScrollX(-this.getScrollLeft());
			m.setScrollY(-this.getScrollTop());
		}
	},

	/**
	* @private
	*/
	effectScroll: function (x, y) {
		if (this.scrollNode) {
			this.scrollLeft = this.scrollNode.scrollLeft = x;
			this.scrollTop = this.scrollNode.scrollTop = y;
			this.effectOverscroll(x !== null? Math.round(x): x, y !== null? Math.round(y): y);
		}
	},

	/**
	* @private
	*/
	effectScrollStop: function () {
		this.effectOverscroll(null, null);
	},

	/**
	* @private
	*/
	effectOverscroll: function (x, y) {
		var n = this.scrollNode;
		var xt = '0', yt = '0', zt = this.accel ? ',0' : '';
		if (y !== null && Math.abs(y - n.scrollTop) > 1) {
			yt = (n.scrollTop - y);
		}
		if (x !== null && Math.abs(x - n.scrollLeft) > 1) {
			xt = (n.scrollLeft - x);
		}
		if(!this.transform) {
			//adjust top/left if browser can't handle translations
			this.$.client.setBounds({left:xt + 'px', top:yt + 'px'});
		} else {
			Dom.transformValue(this.$.client, this.translation, xt + 'px, ' + yt + 'px' + zt);
		}
	},

	/**
	* Retrieves the overscroll boundaries of the [scroller]{@link enyo.Scroller}.
	*
	* @returns {enyo.Scroller~OverscrollBoundaryObject} An [object]{@glossary Object}
	*	describing the overscroll boundaries.
	* @public
	*/
	getOverScrollBounds: function () {
		var m = this.$.scrollMath || this;
		return {
			overleft: Math.min(m.leftBoundary - m.x, 0) || Math.max(m.rightBoundary - m.x, 0),
			overtop: Math.min(m.topBoundary - m.y, 0) || Math.max(m.bottomBoundary - m.y, 0)
		};
	},

	/**
	* @method
	* @private
	*/
	_getScrollBounds: kind.inherit(function (sup) {
		return function() {
			var r = sup.apply(this, arguments);
			utils.mixin(r, this.getOverScrollBounds());
			return r;
		};
	}),

	/**
	* Retrieves the scroll boundaries of the [scroller]{@link enyo.Scroller}.
	*
	* @returns {enyo.Scroller~BoundaryObject} An [object]{@glossary Object} describing the
	*	scroll boundaries.
	* @method
	* @public
	*/
	getScrollBounds: kind.inherit(function (sup) {
		return function() {
			this.stop(true);
			return sup.apply(this, arguments);
		};
	}),

	/**
	* This method exists primarily to support an internal use case for
	* [enyo.DataList]{@link enyo.DataList}. It is intended to be called by the
	* [scroller]{@link enyo.Scroller} that owns this strategy.
	*
	* Triggers a remeasurement of the scroller's metrics (specifically, the
	* size of its viewport, the size of its contents and the difference between
	* the two, which determines the extent to which the scroller may scroll).
	*
	* @public
	*/
	remeasure: function () {
		this.calcBoundaries();
		if (this.thumb) {
			this.syncThumbs();
		}
		this.stabilize();
	},

	/**
	* Displays the scroll indicators and sets the auto-hide timeout.
	*
	* @public
	*/
	alertThumbs: function () {
		this.showThumbs();
		this.delayHideThumbs(500);
	},

	/**
	* Syncs the vertical and horizontal scroll indicators.
	*
	* @public
	*/
	syncThumbs: function () {
		this.$.vthumb.sync(this);
		this.$.hthumb.sync(this);
	},
	updateThumbs: function () {
		this.$.vthumb.update(this);
		this.$.hthumb.update(this);
	},

	/**
	* Syncs and shows both the vertical and horizontal scroll indicators. We only sync after we
	* have checked if the vertical and/or horizontal scroll indicators are to be shown, so that
	* {@link enyo.ScrollThumb#update} accurately makes calculations when the indicators are
	* visible.
	*
	* @public
	*/
	showThumbs: function () {
		if (this.horizontal != 'hidden') {
			this.$.hthumb.show();
		}
		if (this.vertical != 'hidden') {
			this.$.vthumb.show();
		}
		this.syncThumbs();
	},

	/**
	* Hides the vertical and horizontal scroll indicators.
	*
	* @public
	*/
	hideThumbs: function () {
		this.$.vthumb.hide();
		this.$.hthumb.hide();
	},

	/**
	* Hides the vertical and horizontal scroll indicators asynchronously.
	*
	* @public
	*/
	delayHideThumbs: function (delay) {
		this.$.vthumb.delayHide(delay);
		this.$.hthumb.delayHide(delay);
	}
});
},{"../../enyo":12,"./ScrollMath":63,"./ScrollStrategy":64,"./ScrollThumb":65,"./dispatcher":86,"./dom":87,"./kind":96,"./platform":102,"./utils":106}],75:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Control = require('./Control'),
	TableCell = require('./TableCell');

/**
* {@link enyo.TableRow} implements an HTML [&lt;tr&gt;]{@glossary tr} element.
*
* @class enyo.TableRow
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.TableRow.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.TableRow',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	tag: 'tr',

	/**
	* @private
	*/
	defaultKind: TableCell
});
},{"../../enyo":12,"./Control":26,"./TableCell":74,"./kind":96}],113:[function(require,module,exports){
var
	kind = require('../../enyo/lib/kind');

var
	FittableLayout = require('./FittableLayout'),
	FittableColumnsLayout = FittableLayout.Columns;

/**
* {@link enyo.FittableColumns} provides a container in which items are laid out in a
* set of vertical columns, with most items having natural size, but one
* expanding to fill the remaining space. The one that expands is labeled with
* the attribute `fit: true`.
*
* For more information, see the documentation on
* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the
* Enyo Developer Guide.
*
* @ui
* @class  enyo.FittableColumns
* @extends enyo.Control
* @public
*/
module.exports = kind(/** @lends  enyo.FittableColumns.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.FittableColumns',

	/**
	* A {@glossary kind} used to manage the size and placement of child
	* [components]{@link enyo.Component}.
	*
	* @type {String}
	* @default ''
	* @private
	*/
	layoutKind: FittableColumnsLayout,

	/**
	* By default, items in columns stretch to fit vertically; set to `true` to
	* avoid this behavior.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	noStretch: false
});
},{"../../enyo/lib/kind":96,"./FittableLayout":114}],115:[function(require,module,exports){
var
	kind = require('../../enyo/lib/kind')	;

var
	FittableLayout = require('./FittableLayout'),
	FittableRowsLayout = FittableLayout.Rows;

/**
* {@link enyo.FittableRows} provides a container in which items are laid out in a
* set	of horizontal rows, with most of the items having natural size, but one
* expanding to fill the remaining space. The one that expands is labeled with
* the attribute `fit: true`.
*
* For more information, see the documentation on
* [Fittables]{@linkplain $dev-guide/building-apps/layout/fittables.html} in the
* Enyo Developer Guide.
*
* @ui
* @class  enyo.FittableRows
* @extends enyo.Control
* @public
*/
module.exports = kind(/** @lends  enyo.FittableRows.prototype */{

	/**
	* @private
	*/
	name: 'enyo.FittableRows',

	/**
	* A {@glossary kind} used to manage the size and placement of child
	* [components]{@link enyo.Component}.
	*
	* @type {String}
	* @default ''
	* @private
	*/
	layoutKind: FittableRowsLayout,

	/**
	* By default, items in columns stretch to fit horizontally; set to `true` to
	* avoid this behavior.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	noStretch: false
});
},{"../../enyo/lib/kind":96,"./FittableLayout":114}],281:[function(require,module,exports){
var
    dispatcher = require('../../enyo/lib/dispatcher'),
    gesture = require('../../enyo/lib/gesture'),
    logger = require('../../enyo/lib/logger'),
    master = require('../../enyo/lib/master'),
    platform = require('../../enyo/lib/platform'),
    roots = require('../../enyo/lib/roots'),
    utils = require('../../enyo/lib/utils'),
    Control = require('../../enyo/lib/Control'),
    Signals = require('../../enyo/lib/Signals');

var
    Accelerator = require('./accelerator'),
    Container = require('./container'),
    Muter = require('./muter'),
    NearestNeighbor = require('./neighbor'),
    Scrolling = require('./scrolling'),
    TestMode = require('./testmode'),
    Util = require('./util');

/**
* Spotlight is an extensible utility that enables users to navigate
* Enyo applications using a keyboard or television remote control.
*
* @namespace enyo.Spotlight
*/
var Spotlight = module.exports = new function () {

    /**
    * Reference to this to be inherited by private closures below.
    * @type {Object}
    * @private
    */
    var _oThis = this,

        /**
        * Topmost component instance where Spotlight events are caught.
        * @type {Object}
        * @default null
        * @private
        */
        _oRoot = null,

        /**
        * Is set by `spot()` if it is called before `initialize()`, will be
        * spotted in `initialize()`.
        * @type {Object}
        * @default null
        * @private
        */
        _oDefaultControl = null,

        /**
        * Whether Spotlight is in pointer mode (as opposed to 5-way mode).
        * @type {Boolean}
        * @default true
        * @private
        */
        _bPointerMode = true,

        /**
        * Whether Spotlight has `_oCurrent`.
        * @type {Boolean}
        * @default false
        * @private
        */
        _bInitialized = false,

        /**
        * State variable allowing us to suppress Spotlight select on
        * keyup in the specific case where a press of the [Enter] key
        * has just triggered a switch from pointer mode to 5-way mode
        * (since we only want to switch modes in this case, not perform
        * a selection)
        * @type {Boolean}
        * @default false
        * @private
        */
        _bSuppressSelectOnNextKeyUp = false,

        /**
        * The currently spotted element.
        * @type {Object}
        * @default null
        * @private
        */
        _oCurrent = null,

        /**
        * The last event received by Spotlight.
        * @type {Object}
        * @default null
        * @private
        */
        _oLastEvent = null,

        /**
        * The last 5-way event received by Spotlight.
        * @type {Object}
        * @default null
        * @private
        */
        _oLast5WayEvent = null,

        /**
        * The last non-container `(spotlight: true)` control that was `_oCurrent`.
        * @type {Object}
        * @default null
        * @private
        */
        _oLastControl = null,

        /**
        * For things like input boxes, we need a way to disable pointer mode while
        * cursor is inside.
        * @type {Boolean}
        * @default true
        * @private
        */
        _bEnablePointerMode = true,

        /**
        * For keeping state consistency between `onMouseDown()` and `onMouseUp()`,
        * if focus has been moved in between.
        * @type {Object}
        * @default null
        * @private
        */
        _oDepressedControl = null,

        /**
        * When the user presses Enter to perform a Spotlight select, we keep track
        * of the target on keydown. If the target disappears before keyup, we end
        * the hold gesture immediately and suppress the selection when the keyup
        * occurs.
        * @type {Object}
        * @default null
        * @private
        */
       _o5WaySelectTarget = null,

        /**
        * In verbose mode, Spotlight prints 1) Current 2) Pointer mode change to `enyo.log`.
        * @type {Boolean}
        * @default false
        * @private
        */
        _bVerbose = false,

        /**
        * While frozen, current cannot change and all events are directed to it.
        * @type {Boolean}
        * @default false
        * @private
        */
        _bFrozen = false,

        /**
        * Contains the control specified in `defaultSpotlightDisappear` property of
        * `_oCurrent`.
        * @type {Object}
        * @default null
        * @private
        */
        _oDefaultDisappear = null,

        /**
        * Whether focus is currently visible onscreen `(hasCurrent && !pointingAway)`.
        * @type {Boolean}
        * @default false
        * @private
        */
        _bFocusOnScreen = false,

        /**
        * Number of consecutive mousemoves; `>1` is required to switch to pointer mode.
        * @type {Number}
        * @default 0
        * @private
        */
        _nMouseMoveCount = 0,

        /**
        * @type {Number}
        * @default null
        * @private
        */
        _nPrevClientX = null,

        /**
        * @type {Number}
        * @default null
        * @private
        */
        _nPrevClientY = null,

        /**
        * @type {Object}
        * @default null
        * @private
        */
        _oLastMouseMoveTarget = null,

        /**
        * Timestamp at the last point the pointer was hidden.
        * @type {Number}
        * @default 0
        * @private
        */
        _nPointerHiddenTime = 0,

        /**
        * Length of time in milliseconds required after hiding pointer before 5-way keys
        * are processed.
        * @type {Number}
        * @default 300
        * @private
        */
        _nPointerHiddenToKeyTimeout = 300,

        /**
        * If a key down was ignored, be sure to ignore the following key up. Specifically, this
        * works around the different target keyup for Enter for inputs (input on down, body on up).
        *
        * @type {Number}
        * @default 0
        * @private
        */
        _nIgnoredKeyDown = 0;

        /**
        * @constant
        * @type {Number}
        * @default 1536
        */
    var KEY_POINTER_SHOW = 1536,

        /**
        * @constant
        * @type {Number}
        * @default 1537
        */
        KEY_POINTER_HIDE = 1537;


    var
        /**
        * Event hook to the owner to catch Spotlight events.
        *
        * @private
        */
        _interceptEvents = function() {
            _oThis.rootDispatchFunction = master.dispatchEvent;
            master.dispatchEvent = function(sEventName, oEvent, oSender) {
                if (_oThis.rootDispatchFunction.apply(master, [sEventName, oEvent, oSender])) {
                    return true;
                }
                if (!oEvent.delegate) {
                    return _oThis.onSpotlightEvent(oEvent);
                }
            };
        },

        /**
        * Creates control-specific Spotlight state storage.
        *
        * @param {Object} oControl - The control to be initialized.
        * @private
        */
        _initializeControl = function(oControl) {
            if (typeof oControl._spotlight == 'undefined') {
                oControl._spotlight = {};
            }
        },

        /**
        * Gets control specified in `defaultSpotlightDisappear` property
        * of `_oCurrent`. Gotta get it before it disappears :)
        *
        * @param {Object} oControl
        * @private
        */
        _setDefaultDisappearControl = function() {
            _oDefaultDisappear = _oThis.Util.getDefaultDirectionControl(
                'disappear',
                _oCurrent
            );
        },

        /**
        * Observer
        *
        * @param {Object} oControl
        * @private
        */
        _onDisappear = function() {

            // Only handle disappearance once
            if (_onDisappear.isOff) {
                return;
            }

            // Ignore if control is still spotable
            if (_oThis.isSpottable(_oCurrent)) {
                return;
            }
            _onDisappear.isOff = true;

            if (_oCurrent === _o5WaySelectTarget) {
                gesture.drag.endHold();
                _o5WaySelectTarget = null;
            }

            var oControl = _oDefaultDisappear;

            // Nothing is set in defaultSpotlightDisappear
            if (!oControl || !_oThis.isSpottable(oControl)) {

                // Find first spottable in the app
                oControl = _oThis.getFirstChild(_oRoot);
                if (!oControl) {
                    _unhighlight(_oLastControl);
                    _oLastControl = null;
                    
                    _observeDisappearance(false, _oCurrent);
                    // NULL CASE :(, just like when no spottable children found on init
                    _oCurrent = null;
                    return;
                }

                // Prevent unmanageable case when _oCurrent is undefined
                // if (!oControl) { throw 'SPOTLIGHT: No spottable controls found'; }
            }

            // Spot first child of the app
            _oThis.spot(oControl);
        },

        /**
        * Adds observers on control's parent chain.
        *
        * @param {Boolean} bObserve
        * @param {Object} oControl
        * @param {Boolean} bInAncestor
        * @private
        */
        _observeDisappearance = function(bObserve, oControl, bInAncestor) {

            // Terminal case
            if (!oControl) {
                return;
            }
            var sMethod = bObserve ? 'addObserver' : 'removeObserver';

            // When processing _oCurrent itself
            if (!bInAncestor) {

                // When adding observer to _oCurrent itself
                if (bObserve) {

                    // Set one-time-call flag of _onDisappear function
                    _onDisappear.isOff = false;

                    // Capture defaultSpotlightDisappear control
                    _setDefaultDisappearControl();
                }

                // Enough to check in _oCurrent only, no ancestors
                oControl[sMethod]('disabled', _onDisappear);

                // Enough to check in _oCurrent only, no ancestors
                oControl[sMethod]('destroyed', _onDisappear);

                // Enough to check in _oCurrent only, no ancestors
                oControl[sMethod]('spotlight', _onDisappear);

                // Enough to check in _oCurrent only, no ancestors
                oControl[sMethod]('generated', _onDisappear);
            }

            // Have to add-remove hadler to all ancestors for showing
            oControl[sMethod]('showing', _onDisappear);

            _observeDisappearance(bObserve, oControl.parent, true);
        },

        /**
        * Sets currently spotted control.
        *
        * @param {Object} oControl - The control to be spotted.
        * @private
        */
        _setCurrent = function(oControl) {
            _initializeControl(oControl);

            if (!_oThis.isSpottable(oControl)) {
                throw 'Attempting to spot not-spottable control: ' + oControl.toString();
            }

            var oExCurrent = _oCurrent;

            // Remove spotlight class and Blur
            _oThis.unspot(oControl);

            // Add spotlight class
            _highlight(oControl);

            _oCurrent = oControl;

            // Set observers asynchronously to allow painti to happen faster
            setTimeout(function() {
                _observeDisappearance(false, oExCurrent);
                _observeDisappearance(true, _oCurrent);
            }, 1);

            _oThis.Container.fireContainerEvents(oExCurrent || _oLastControl, _oCurrent);

            _log('CURRENT =', _oCurrent.toString());
            Signals.send('onSpotlightCurrentChanged', {
                current: oControl
            });

            if (oControl.spotlight === true) {
                _oLastControl = oControl;
            }

            _dispatchEvent('onSpotlightFocused');

            _oThis.TestMode.highlight();

            return true;
        },

        /**
        * Artificially triggers events (e.g., `click`) on current control.
        *
        * @private
        */
        _dispatchEvent = function(sEvent, oData, oControl) {
            oControl = oControl || _oThis.getCurrent();
            return _oThis.Util.dispatchEvent(sEvent, oData, oControl);
        },

        /**
        * Moves to nearest neighbor based on 5-way Spotlight event.
        *
        * @param {Object} oEvent - The current 5-way event.
        * @private
        */
        _5WayMove = function(oEvent) {
            var sDirection = oEvent.type.replace('onSpotlight', '').toUpperCase(),
                leave = oEvent.requestLeaveContainer,
                oControl = !leave && _oThis.NearestNeighbor.getNearestNeighbor(sDirection);


            // If oEvent.allowDomDefault() was not called
            // this will preventDefault on dom keydown event
            _preventDomDefault(oEvent);
            _oLast5WayEvent = oEvent;

            if (oControl) {
                _oThis.spot(oControl, sDirection);
            } else {
                if (_oThis.Accelerator.isAccelerating()) {
                    _oThis.Accelerator.cancel();
                } else {
                    var oParent = _oThis.getParent();

                    // Reached the end of spottable world
                    if (!oParent || oParent.spotlightModal) {
                        _oThis.spot(_oLastControl);
                    } else {
                        _oThis.spot(oParent, sDirection);
                    }
                }
            }
        },

        /**
        * Determines whether `oEvent.keyCode` represents a 5-way key.
        *
        * @param {Object} oEvent - The current 5-way event.
        * @return {Boolean} `true` if `keyCode` is a 5-way key (i.e., a directional arrow
        * or Enter); otherwise, `false`.
        * @private
        */
        _is5WayKey = function(oEvent) {

            // 13==Enter, 16777221==KeypadEnter
            return (utils.indexOf(oEvent.keyCode, [37, 38, 39, 40, 13, 16777221]) > -1);
        },

        /**
        * Determines whether the key that was pressed is supposed to be ignored by the
        * event's originator.  Checks whether the originator of the event had any keyCodes
        * specified as ones to ignore, returning `true` if it was supposed to ignore the
        * `oEvent.keyCode`, or `false` if not.
        *
        * @param {Object} oEvent - The current 5-way event.
        * @return {Boolean} `true` if the keyCode should be ignored; otherwise, `false`.
        * @private
        */
        _isIgnoredKey = function(oEvent) {
            var oOriginator = dispatcher.$[oEvent.target.id];
            if (oOriginator && oOriginator.spotlightIgnoredKeys) {
                var aKeys = oOriginator.spotlightIgnoredKeys;
                if (!utils.isArray(aKeys)) {
                    aKeys = [aKeys];
                }
                if (utils.indexOf(oEvent.keyCode, aKeys) > -1) {
                    return true;
                }
            }
            return false;
        },

        /**
        * Prevents default on DOM event associated with Spotlight event.
        * This is only for 5-way keydown events.
        *
        * @param {Object} oEvent - The current 5-way event.
        * @private
        */
        _preventDomDefault = function(oSpotlightEvent) {

            // Prevent default to keep the browser from scrolling the page, etc.,
            if (_is5WayKey(oSpotlightEvent)) {

                // unless Event.allowDomDefault is explicitly called on the event
                oSpotlightEvent.domEvent.preventDefault();
            }
        },

        /**
        * If originator is container, delegates processing of event
        * to `enyo.Spotlight.Container.onSpotlight*`. If delegate method is
        * found, its return value is returned; otherwise, `true` is returned.
        *
        * @param {Object} oEvent - The current 5-way event.
        * @return {Boolean}
        * @private
        */
        _delegateContainerEvent = function(oEvent) {
            if (oEvent.type && oEvent.type.indexOf('onSpotlight') === 0) {
                if (_oThis.isContainer(oEvent.originator)) {
                    if (typeof _oThis.Container[oEvent.type] == 'function') {
                        return _oThis.Container[oEvent.type](oEvent.originator, oEvent);
                    }
                }
            }
            return false;
        },

        /**
        * Gets spottable target by id for pointer events.
        *
        * @param {String} sId - String ID of target.
        * @return {Object} - The spottable target.
        * @private
        */
        _getTarget = function(sId) {
            var oTarget = dispatcher.$[sId];
            if (typeof oTarget != 'undefined') {
                if (_oThis.isSpottable(oTarget)) {
                    return oTarget;
                } else {
                    return _oThis.getParent(oTarget);
                }
            }
        },

        /**
        * Highlights the specified control.
        *
        * @param {Object} oControl - The control to be highlighted.
        * @param {Boolean} bIgnoreMute - Whether muting should be ignored.
        * @private
        */
        _highlight = function(oControl, bIgnoreMute) {

            // Not highlighting when muted
            if (_oThis.isMuted() && !bIgnoreMute) {
                return;
            }

            // Not highlighting containers
            if (_oThis.isContainer(oControl)) {
                return;
            }

            // Not highlighting first non-container control - see this.initialize()
            if (!_oThis.isInitialized()) {
                return;
            }

            // enyo.Spotlight.bench.stop();
            oControl.addClass('spotlight');
            _bFocusOnScreen = true;
        },

        /**
        * Unhighlights a control.
        *
        * @param {Object} oControl - The control to be unhighlighted.
        * @private
        */
        _unhighlight = function(oControl) {
            oControl.removeClass('spotlight');
            _bFocusOnScreen = false;
        },

        /**
        * Determines whether pointer is pointing away.
        *
        * @return {Boolean} `true` if pointer is pointing away; otherwise, `false`.
        * @private
        */
        _isPointingAway = function() {
            return _oThis.getPointerMode() && !_oLastMouseMoveTarget;
        },

        /**
        * Determines whether timestamp is expired.
        *
        * @return {Boolean} `true` if timestamp is expired; otherwise, `false`.
        * @private
        */
        _isTimestampExpired = function() {
            return utils.perfNow() >= (_nPointerHiddenTime + _nPointerHiddenToKeyTimeout);
        },

        /**
        * Sets the timestamp.
        *
        * @private
        */
        _setTimestamp = function() {
            _nPointerHiddenTime = utils.perfNow();
        },

        /**
        * Logs messages if verbose mode is enabled.
        *
        * @private
        */
        _log = function() {
            if (_bVerbose) {
                logger.log('SPOTLIGHT: ' + Array.prototype.slice.call(arguments, 0).join(' '));
            }
        },

        /**
        * Emits warning messages.
        *
        * @name Spotlight#_warn
        * @type {Function}
        * @private
        */
        _warn = function() {
            logger.warn('SPOTLIGHT: ' + Array.prototype.slice.call(arguments, 0).join(' '));
        },

        /**
        * Spots the last control.
        *
        * @private
        */
        _spotLastControl = function() {
            if (_oThis.isSpottable(_oLastControl)) {
                _oThis.spot(_oLastControl);
            } else {
                _oThis.spot(_oThis.getFirstChild(_oRoot));
            }
        },

        /**
        * Attempts to spot the control nearest the current pointer position.
        * If no nearest control is found, the previous control is spotted.
        *
        * @param {Object} oEvent - The current event.
        * @private
        */
        _spotNearestToPointer = function(oEvent) {
            var oNearest = _oThis.
            NearestNeighbor.
            getNearestPointerNeighbor(_oRoot,
                _getSpotDirection(oEvent),
                _nPrevClientX,
                _nPrevClientY);
            if (oNearest) {
                _oThis.spot(oNearest);
            } else {
                _spotLastControl();
            }
        },

        /**
        * Determines the intended direction of a keypress, given a keydown event.
        *
        * @param {Object} oEvent - The event whose direction is to be determined.
        * @private
        */
        _getSpotDirection = function(oEvent) {
            switch (oEvent.keyCode) {
                case 37:
                    return "LEFT";
                case 38:
                    return "UP";
                case 39:
                    return "RIGHT";
                case 40:
                    return "DOWN";
            }
        };

    //* Generic event handlers
    /***************************************************/

    // Events dispatched to the spotlighted controls
    this.onEvent = function(oEvent) {

        // Events only processed when Spotlight initialized with a root
        if (this.isInitialized()) {
            switch (oEvent.type) {
                case 'focus':
                    if (oEvent.target === window) {
                        // Update pointer mode from cursor visibility platform API
                        if (window.PalmSystem && window.PalmSystem.cursor) {
                            this.setPointerMode( window.PalmSystem.cursor.visibility );
                        }
                        // Whenever app goes to foreground, refocus on last focused control
                        this.spot(this.getLastControl());
                    }
                    break;
                case 'blur':
                    if (oEvent.target === window) {
                        // Whenever app goes to background, unspot focus
                        this.unspot();
                    }
                    break;
                case 'move':

                    // Only register mousemove if the x/y actually changed,
                    // avoid mousemove while scrolling, etc.
                    // We require two mousemove events to switch to pointer
                    // mode, since the device can send an errant mousemove
                    // when pressing a 5-way key for the first time
                    if (this.clientXYChanged(oEvent) && (_nMouseMoveCount++ > 1)) {
                        return this.onMouseMove(oEvent);
                    }
                    break;
                case 'mousedown':
                    return this.onMouseDown(oEvent);
                case 'mouseup':
                    return this.onMouseUp(oEvent);
                case 'click':
                case 'tap':
                case 'ontap':
                    return this.onClick(oEvent);
                case 'mousewheel':
                    // Don't dispatch spotlight mousewheel events if pointing away
                    if (_isPointingAway()) {
                        return false;
                    }
                    return this.Scrolling.processMouseWheel(oEvent, this.onScroll, this);
                case 'keydown':
                    return this.onKeyDown(oEvent);
                case 'keyup':
                    return this.onKeyUp(oEvent);
            }
        }
        return false; // Because we like to be explicit
    };

    /**
    * Receives accelerated keyup and keydown from accelerator.
    *
    * @method
    * @name Spotlight#onAcceleratedKey
    * @param {Object} oEvent - The event to interpret.
    * @public
    */
    this.onAcceleratedKey = function(oEvent) {
        oEvent.domEvent = oEvent;
        oEvent.allowDomDefault = function() {
            oEvent.preventDefault = function() {
                //logger.log('Dummy function');
            };
        };
        gesture.drag.prepareHold(oEvent);
        switch (oEvent.type) {
            case 'keydown':
                return _dispatchEvent('onSpotlightKeyDown', oEvent);
            case 'keyup':
                return _dispatchEvent('onSpotlightKeyUp', oEvent);
        }

        return true; // Should never get here
    };

    // Spotlight events bubbled back up to the App
    this.onSpotlightEvent = function(oEvent) {
        _oLastEvent = oEvent;

        if (!_delegateContainerEvent(oEvent)) {
            switch (oEvent.type) {

                /**
                * @event Spotlight#onSpotlightKeyUp
                * @public
                */
                case 'onSpotlightKeyUp':
                    return this.onSpotlightKeyUp(oEvent);

                /**
                * @event Spotlight#onSpotlightKeyDown
                * @public
                */
                case 'onSpotlightKeyDown':
                    return this.onSpotlightKeyDown(oEvent);

                /**
                * @event Spotlight#onSpotlightFocus
                * @public
                */
                case 'onSpotlightFocus':
                    return this.onSpotlightFocus(oEvent);

                /**
                * @event Spotlight#onSpotlightFocused
                * @public
                */
                case 'onSpotlightFocused':
                    return this.onSpotlightFocused(oEvent);

                /**
                * @event Spotlight#onSpotlightBlur
                * @public
                */
                case 'onSpotlightBlur':
                    return this.onSpotlightBlur(oEvent);

                /**
                * @event Spotlight#onSpotlightLeft
                * @public
                */
                case 'onSpotlightLeft':
                    return this.onSpotlightLeft(oEvent);

                /**
                * @event Spotlight#onSpotlightRight
                * @public
                */
                case 'onSpotlightRight':
                    return this.onSpotlightRight(oEvent);

                /**
                * @event Spotlight#onSpotlightUp
                * @public
                */
                case 'onSpotlightUp':
                    return this.onSpotlightUp(oEvent);

                /**
                * @event Spotlight#onSpotlightDown
                * @public
                */
                case 'onSpotlightDown':
                    return this.onSpotlightDown(oEvent);

                /**
                * @event Spotlight#onSpotlightSelect
                * @public
                */
                case 'onSpotlightSelect':
                    return this.onSpotlightSelect(oEvent);
            }
        }
    };

    /**
    * Called by `onEvent()` (via Spotlight scrolling) to process scroll events.
    *
    * @method
    * @name Spotlight#onScroll
    * @param {Object} oEvent - The current event.
    * @param {Boolean} bUp - Whether scroll is in upward direction.
    * @public
    */
    this.onScroll = function(oEvent, bUp) {
        var sEventName = 'onSpotlightScroll' + (bUp ? 'Up' : 'Down');
        return _dispatchEvent(sEventName, {
            domEvent: oEvent
        });
    };

    // Called by `onEvent()` to process mousemove events.
    this.onMouseMove = function(oEvent) {
        if (!_bEnablePointerMode) {
            return;
        }

        // Preserving explicit setting of mode for future features
        this.setPointerMode(true);
        if (this.getPointerMode()) {
            var oTarget = _getTarget(oEvent.target.id);
            if (oTarget && !this.isContainer(oTarget)) {

                if (
                    oTarget === _oLastMouseMoveTarget && (
                        oEvent.index === undefined ||
                        oEvent.index === _oLastMouseMoveTarget._nCurrentSpotlightItem
                    )
                ) {
                    return;
                } // ignore consecutive mouse moves on same target
                this.spot(oTarget, null, true);
                _oLastMouseMoveTarget = oTarget;

            } else {
                _oLastMouseMoveTarget = null;
                this.unspot();
            }
        }
    };

    // Called by `onEvent()` to process mousedown events.
    this.onMouseDown = function(oEvent) {

        // Run mousemove logic first, in case content beneath cursor changed since
        // last mousemove, e.g. animating controls
        this.onMouseMove(oEvent);

        // Logic to exit frozen mode when depressing control other than current
        // And transfer spotlight directly to it
        if (this.isFrozen()) {
            var oTarget = _getTarget(oEvent.target.id);
            if (oTarget != _oCurrent && !oEvent.defaultPrevented) {
                this.unfreeze();
                this.unspot();
                if (oTarget) {
                    this.spot(oTarget, null, true);
                }
                return true;
            }
        }

        if (this.getPointerMode()) {
            return false;
        } // Allow mousedown to bubble

        // Simulate an Enter key from Magic Remote click in 5Way mode
        oEvent.preventDefault();

        var oEventClone = utils.clone(oEvent);
        oEventClone.keyCode = 13;
        oEventClone.domEvent = oEvent;
        oEventClone.allowDomDefault = utils.nop;

        _oDepressedControl = this.getCurrent();
        _dispatchEvent('onSpotlightKeyDown', oEventClone, _oDepressedControl);

        // Because we should never see mouse events in 5way mode
        return true;
    };

    // Called by `onEvent()` to process mouseup events.
    this.onMouseUp = function(oEvent) {
        if (this.getPointerMode()) {
            return false;
        } // Allow mouseup to bubble

        // Simulate an Enter key from Magic Remote click in 5Way mode
        oEvent.preventDefault();

        var oEventClone = utils.clone(oEvent);
        oEventClone.keyCode = 13;
        oEventClone.domEvent = oEvent;

        _dispatchEvent('onSpotlightKeyUp', oEventClone, _oDepressedControl);
        return true; // Because we should never see mouse events in 5way mode
    };

    // Called by `onEvent()` to process tap and click events.
    this.onClick = function(oEvent) {
        // Prevent browser-simulated "click" events when pressing enter
        // on a focused form control from being processed;

        // Prevent browser-simulated "click" events when pressing enter
        // on a focused form control
        if (this.Util.isSimulatedClick(oEvent)) {
            return true;
        }

        // Allow click to bubble
        if (this.getPointerMode()) {
            return false;
        }

        // In 5Way mode we are simulating enter key down/up based
        // on mousedown/up, so suppress click
        oEvent.preventDefault();

        // Because we should never see mouse events in 5way mode unles we simulated them
        return !oEvent.fromSpotlight;
    };

    // Called by `onEvent()` to process keydown.
    this.onKeyDown = function(oEvent) {

        _bSuppressSelectOnNextKeyUp = false;

        if (_isIgnoredKey(oEvent)) {
            _nIgnoredKeyDown = oEvent.which;
            return false;
        } else {
            _nIgnoredKeyDown = 0;
        }

        // Update pointer mode based on special keycode from
        // Input Manager for magic remote show/hide
        switch (oEvent.keyCode) {

            // Pointer shown event; set pointer mode true
            case KEY_POINTER_SHOW:
                this.setPointerMode(true);
                return false;

                // Pointer hidden event; set pointer mode false
            case KEY_POINTER_HIDE:
                setTimeout(function() {
                    if (this.getPointerMode()) {
                        this.setPointerMode(false);

                        // Spot last 5-way control, only if there's not already focus on screen
                        if (!_oLastMouseMoveTarget) {
                            utils.asyncMethod(this, function() {
                                _spotLastControl();
                            });
                        }
                        _setTimestamp();
                    }
                }.bind(this), 30);
                return false;
        }

        // Arrow keys immediately switch to 5-way mode, and
        // re-spot focus on screen if it wasn't already
        if (_is5WayKey(oEvent)) {
            var bWasPointerMode = this.getPointerMode();
            this.setPointerMode(false);

            // Spot first available control on bootstrap
            if (!this.isSpottable(this.getCurrent()) ||
                // Or does this immediately follow KEY_POINTER_HIDE
                (!_isTimestampExpired() && !_oLastMouseMoveTarget) || 
                // Or spot last 5-way control, only if there's not already focus on screen
                (bWasPointerMode && !_oLastMouseMoveTarget && !this.isFrozen())) {

                _spotNearestToPointer(oEvent);
                _bSuppressSelectOnNextKeyUp = oEvent.keyCode == 13;
                return false;
            }
        }

        // Don't dispatch spotlight key events if we're in pointer
        // mode and not currently spotting something
        if (_isPointingAway()) {
            return false;
        }

        this.Accelerator.processKey(oEvent, this.onAcceleratedKey, this);

        // Always allow key events to bubble regardless of what onSpotlight** handlers return
        return false;
    };

    this.onKeyUp = function(oEvent) {
        if (_nIgnoredKeyDown === oEvent.which || _isIgnoredKey(oEvent)) {
            return false;
        }

        if (_bSuppressSelectOnNextKeyUp) {
            _bSuppressSelectOnNextKeyUp = false;
            return true;
        }

        this.Accelerator.processKey(oEvent, this.onAcceleratedKey, this);

        // Always allow key events to bubble regardless of what onSpotlight** handlers return
        return false;
    };

    //* Spotlight event handlers
    /************************************************************/

    this.onSpotlightRight = function(oEvent) {
        _5WayMove(oEvent);
    };
    this.onSpotlightLeft = function(oEvent) {
        _5WayMove(oEvent);
    };
    this.onSpotlightDown = function(oEvent) {
        _5WayMove(oEvent);
    };
    this.onSpotlightUp = function(oEvent) {
        _5WayMove(oEvent);
    };

    this.onSpotlightKeyUp = function(oEvent) {
        var ret = true;

        switch (oEvent.keyCode) {
            case 13:
                if (oEvent.originator === _o5WaySelectTarget) {
                    ret = _dispatchEvent('onSpotlightSelect', oEvent);
                    gesture.drag.endHold();
                }
                _o5WaySelectTarget = null;
        }

        // Should never get here
        return ret;
    };
    this.onSpotlightKeyDown = function(oEvent) {

        switch (oEvent.keyCode) {
            case 13:
                if (!this.Accelerator.isAccelerating()) {
                    _o5WaySelectTarget = oEvent.originator;
                    gesture.drag.beginHold(oEvent);
                }
                return true;
            case 37:
                return _dispatchEvent('onSpotlightLeft', oEvent);
            case 38:
                return _dispatchEvent('onSpotlightUp', oEvent);
            case 39:
                return _dispatchEvent('onSpotlightRight', oEvent);
            case 40:
                return _dispatchEvent('onSpotlightDown', oEvent);
        }

        // Should never get here
        return true;
    };

    this.onSpotlightSelect = function(oEvent) {

        // If oEvent.allowDomDefault() was not called
        // this will preventDefault on dom keydown event
        _preventDomDefault(oEvent);
        var aChildren,
            oNeighbor = this.Util.getDefaultDirectionControl('SELECT', this.getCurrent());

        // clear last 5way event
        _oLast5WayEvent = null;

        if (oNeighbor) {
            return this.spot(oNeighbor);
        }

        aChildren = this.getChildren(oEvent.originator);
        if (aChildren.length === 0) {
            return _dispatchEvent('tap', {
                    customEvent: false,
                    preventDefault: utils.nop,
                    fromSpotlight: true
                },
                oEvent.originator);
        } else {
            return this.spot(aChildren[0]);
        }
    };

    /**
    * Called when Spotlight is focusing on a control.
    *
    * @method
    * @name Spotlight#onSpotlightFocus
    * @param {Object} oEvent - The current event.
    * @public
    */
    this.onSpotlightFocus = function(oEvent) {
        _setCurrent(oEvent.originator);
    };

    /**
    * Called after Spotlight has focused on a control.
    *
    * @method
    * @name Spotlight#onSpotlightFocused
    * @param {Object} oEvent - The current event.
    * @public
    */
    this.onSpotlightFocused = function(oEvent) {};

    /**
    * Called when control's focus is blurred.
    *
    * @method
    * @name Spotlight#onSpotlightBlur
    * @param {Object} oEvent - The current event.
    * @public
    */
    this.onSpotlightBlur = function(oEvent) {};

    /**
    * Initializes Spotlight's flags and root.
    *
    * @method
    * @name Spotlight#initialize
    * @param {Object} oRoot - The root container.
    * @public
    */
    this.initialize = function(oRoot) {

        // Prevent double init'ion, for example, it
        // may be init'd in app.rendered before enyo.rendered.
        if (this.isInitialized()) {
            return false;
        }

        // Set root
        _oRoot = oRoot;

        // Capture spotlight events at root level of the app
        _interceptEvents();

        // From this point on, isInitialized() returns true.
        // Need it to be true for spot() to spot
        _bInitialized = true;

        if (_oDefaultControl) {
            if (this.spot(_oDefaultControl)) {
                return true;
            }
        }

        if (this.spot(this.getFirstChild(_oRoot))) {
            return true;
        }
        //_warn('Spotlight initialization failed.
        // No spottable children found in ' + _oRoot.toString());
    };

    /**
    * Determines whether Spotlight has been initialized (i.e., it has `_oCurrent` and
    * `last5waycontrol`).
    *
    * @method
    * @name Spotlight#isInitialized
    * @return {Boolean} `true` if Spotlight has been initialized; otherwise, `false`.
    * @public
    */
    this.isInitialized = function() {
        return _bInitialized;
    };

    /**
    * Sets pointer mode.
    *
    * @method
    * @name Spotlight#setPointerMode
    * @param {Boolean} bPointerMode - Whether pointer mode should be enabled.
    * @public
    */
    this.setPointerMode = function(bPointerMode) {
        if ((_bPointerMode != bPointerMode) && (!platform.touch)) {
            _bPointerMode = bPointerMode;
            _log('Pointer mode', _bPointerMode);
            _nMouseMoveCount = 0;
            Signals.send('onSpotlightModeChanged', {
                pointerMode: bPointerMode
            });
        }
    };

    this.getPointerMode = function() {
        return _bPointerMode;
    };
    this.getCurrent = function() {
        return _oCurrent;
    };
    this.setCurrent = function(oControl) {
        return _setCurrent(oControl);
    };
    this.hasCurrent = function() {
        return _oCurrent !== null;
    };
    this.getLastEvent = function() {
        return _oLastEvent;
    };
    this.getLastControl = function() {
        return _oLastControl;
    };
    this.getLast5WayEvent = function() {
        return _oLast5WayEvent;
    };

    // Deprecated; provided for backward-compatibility.
    this.setLast5WayControl = function(oControl) {
        _oLastControl = oControl;
    };

    this.isSpottable = function(oControl, bSkipContainers) {
        oControl = oControl || this.getCurrent();
        if (!oControl) {
            return false;
        }
        var bSpottable = false;

        if (this.isContainer(oControl)) {
            if (!bSkipContainers) {

                // Are there spotlight=true descendants?
                bSpottable = this.hasChildren(oControl);
            }
        } else {
            bSpottable = (

                // Control has been destroyed, but not yet garbage collected
                !oControl.destroyed &&

                // Control has spotlight property set
                typeof oControl.spotlight != 'undefined' &&

                // Control has spotlight=true or 'container'
                oControl.spotlight &&

                // Control is visible
                oControl.getAbsoluteShowing(true) &&

                // Control is not disabled
                !oControl.disabled &&

                // Control is rendered
                oControl.generated &&

                // Control does not have spotlight disabled
                !oControl.spotlightDisabled
            );
        }
        return bSpottable;
    };

    // Is oControl.spotlight == "container"
    this.isContainer = function(oControl) {
        if (!oControl) {
            return false;
        }
        return oControl.spotlight == 'container';
    };

    // Is there at least one descendant of oControl
    // (or oControl itself) that has spotlight = "true"
    this.hasChildren = function(oControl) {
        if (!oControl || oControl.spotlightDisabled) {
            return false;
        }
        if (!this.isContainer(oControl) && this.isSpottable(oControl)) {
            return true;
        }
        var n, aChildren = oControl.children;
        for (n = 0; n < aChildren.length; n++) {
            if (this.hasChildren(aChildren[n])) {
                return true;
            }
        }
        return false;
    };

    /**
    * Returns spottable children along with position of self.
    *
    * @param {Object} oControl - The control whose siblings are to be retrieved.
    * @private
    */
    this.getSiblings = function(oControl) {
        oControl = oControl || this.getCurrent();
        if (!oControl) {
            return;
        }
        var n,
            o = {},
            oParent = this.getParent(oControl) || _oRoot;

        o.siblings = this.getChildren(oParent);

        for (n = 0; n < o.siblings.length; n++) {
            if (oControl === o.siblings[n]) {
                o.selfPosition = n;
            }
        }

        return o;
    };

    /**
    * Dispatches focus event to the control or its first spottable child.
    *
    * @param {Object} oControl - The control whose children are to be retrieved.
    * @param {Boolean} bSpotlightTrueOnly - Whether to retrieve only spottable children.
    * @private
    */
    this.getChildren = function(oControl, bSpotlightTrueOnly) {
        oControl = oControl || this.getCurrent();
        if (!oControl) {
            return;
        }
        var n,
            aChildren = [],
            oNext;

        if (!oControl.spotlightDisabled) {
            for (n = 0; n < oControl.children.length; n++) {
                oNext = oControl.children[n];
                if (this.isSpottable(oNext, bSpotlightTrueOnly)) {
                    aChildren.push(oNext);
                } else {
                    aChildren = aChildren.concat(this.getChildren(oNext, bSpotlightTrueOnly));
                }
            }
        }
        return aChildren;
    };

    /**
    * Returns closest spottable parent, or `null` if there is none.
    *
    * @param {Object} oControl - The control whose parent is to be retrieved.
    * @return {enyo.Control} - The control's closest spottable parent.
    * @private
    */
    this.getParent = function(oControl) {
        oControl = oControl || this.getCurrent();
        if (!oControl) {
            return;
        }
        var oSpottableParent = null;
        while (oControl.parent) {
            oControl = oControl.parent;
            if (this.isSpottable(oControl)) {
                oSpottableParent = oControl;
                break;
            }
        }
        return oSpottableParent;
    };

    /**
    * Dispatches focus event to the control or its first spottable child.
    *
    * @param {Object} oControl - The control to be focused.
    * @return {Boolean} - `true` if control was focused successfully; otherwise, `false`.
    * @private
    */
    this.spot = function(oControl, sDirection, bWasPoint) {

        // If spotlight is not yet initialized
        // Preserve control to be spotted on initialize
        if (!this.isInitialized()) {
            _oDefaultControl = oControl;
            return true;
        }

        // Cannot spot falsy values
        if (!oControl) {
            return false;
        }

        // Can only spot enyo.Controls
        if (!(oControl instanceof Control)) {
            _warn('argument is not enyo.Control');
            return false;
        }

        // Current cannot change while in frozen mode
        if (this.isFrozen()) {
            _warn('can\'t spot in frozen mode');
            return false;
        }

        // If control is not spottable, find its spottable child
        var oOriginal = oControl;
        if (!this.isSpottable(oControl)) {
            oControl = this.getFirstChild(oControl);
        }

        // If already spotted, nothing to do
        if (oControl) {
            if (_oCurrent === oControl) {
                return true;
            }

            // When the user calls spot programmatically in pointer mode, we don't actually
            if (this.getPointerMode() && !bWasPoint) {
                this.unspot();

                // spot; instead we just unspot and set up the _oLastControl
                _oLastControl = oControl;

                // used when resuming 5-way focus on an arrow key press
                _oLastMouseMoveTarget = null;
                _log("Spot called in pointer mode; 5-way will resume from: " + oControl.id);
            } else {

                // Dispatch focus to new control
                _dispatchEvent('onSpotlightFocus', {
                    dir: sDirection
                }, oControl);
            }
            return true;
        }
        _warn('can\'t spot: ' + oOriginal.toString() +
            ' is not spottable and has no spottable descendants');

        return false;
    };

    /**
    * Dispatches Spotlight blur event to current control.
    *
    * @param {Object} oControl - The control to be blurred.
    * @return {Boolean} - `true` if control was successfully blurred; otherwise, `false`.
    * @private
    */
    this.unspot = function(oNext) {
        // Current cannot change while in frozen mode
        if (this.isFrozen()) {
            return false;
        }

        if (this.hasCurrent() && _bFocusOnScreen) {
            _unhighlight(_oCurrent);
            _oLastMouseMoveTarget = null;
            _dispatchEvent('onSpotlightBlur', {next: oNext}, _oCurrent);
            _observeDisappearance(false, _oCurrent);
            _oCurrent = null;
            return true;
        }
        return false;
    };

    /**
    * Gets first spottable child of a control.
    *
    * @param {Object} oControl - The control whose child is to be retrieved.
    * @return {enyo.Control} - The first spottable child.
    * @private
    */
    this.getFirstChild = function(oControl) {
        oControl = oControl || this.getCurrent();
        if (!oControl) {
            return null;
        }
        return this.getChildren(oControl)[0];
    };

    /**
    * Determines whether X or Y value has changed since last mousemove event.
    *
    * @name Spotlight#clientXYChanged
    * @param {Object} oEvent - The current event.
    * @return {Boolean} - `true` if either X or Y has changed; otherwise, `false`.
    * @private
    */
    this.clientXYChanged = function(oEvent) {
        var bChanged = (
            _nPrevClientX !== oEvent.clientX ||
            _nPrevClientY !== oEvent.clientY
        );

        if (this.getPointerMode()) {
            _nPrevClientX = oEvent.clientX;
            _nPrevClientY = oEvent.clientY;
        }

        return bChanged;
    };

    /**
    * Disables pointer mode.
    *
    * @private
    */
    this.disablePointerMode = function() {
        _bEnablePointerMode = false;
    };

    /**
    * Enables pointer mode.
    *
    * @private
    */
    this.enablePointerMode = function() {
        _bEnablePointerMode = true;
    };

    /**
    * Switches to muted mode (no `'spotlight'` CSS class set in DOM).
    *
    * @private
    */
    this.mute = function(oSender) {
        this.Muter.addMuteReason(oSender);
    };
    this.unmute = function(oSender) {
        this.Muter.removeMuteReason(oSender);
    };
    this.isMuted = function() {
        return this.Muter.isMuted();
    };

    /**
    * Sets verbose mode.
    *
    * @name Spotlight#verbose
    * @param {Boolean} bVerbose - Whether verbose mode should be enabled.
    * @return {String} Feedback message for logging.
    * @private
    */
    this.verbose = function(bVerbose) {
        _bVerbose = (typeof bVerbose == 'undefined') ? !_bVerbose : bVerbose;
        return 'SPOTLIGHT: Verbose mode set to ' + _bVerbose;
    };

    /**
    * Switches to frozen mode (current cannot change while frozen).
    *
    * @private
    */
    this.freeze = function() {
		if (this.hasCurrent()) {
			_bFrozen = true;
		} else {
			_warn('Can not enter frozen mode until something is spotted');
		}
    };

    /**
    * Switches to unfrozen mode.
    *
    * @private
    */
    this.unfreeze = function() { 
		_bFrozen = false;
	};

    /**
    * Determines whether frozen mode is currently enabled.
    *
    * @return {Boolean} `true` if frozen mode is currently enabled; otherwise, `false`.
    * @private
    */
    this.isFrozen = function() {
        return _bFrozen;
    };

    /**
    * Highlights the specified control.
    *
    * @param {enyo.Control} oControl - The control to highlight.
    * @param {Boolean} bIgnoreMute - Whether to ignore muting.
    * @private
    */
    this.highlight = function(oControl, bIgnoreMute) {
        _highlight(oControl, bIgnoreMute);
    };

    /**
    * Unhighlights the specified control.
    *
    * @param {enyo.Control} oControl - The control to unhighlight.
    * @private
    */
    this.unhighlight = function(oControl) {
        _unhighlight(oControl);
    };

    this.Accelerator = new Accelerator(this);
    this.Container = new Container(this);
    this.Muter = new Muter(this);
    this.NearestNeighbor = new NearestNeighbor(this);
    this.Scrolling = new Scrolling(this);
    this.TestMode = new TestMode(this);
    this.Util = new Util(this);
};

// Event hook to all system events to catch keypress and mouse events.
dispatcher.features.push(function(oEvent) {
    return Spotlight.onEvent(oEvent);
});

// Initialization
roots.rendered(function(oRoot) {
    // Spotlight.verbose();
    Spotlight.initialize(oRoot);
});


// Spotlight.bench = new function() {
// 	var _oBench = null;
//
// 	this.start = function() {
// 		if (!_oBench) {
// 			_oBench = enyo.dev.bench({name: 'bench1', average: true});
// 		}
// 		_oBench.start();
// 	}
//
// 	this.stop = function() {
// 		_oBench.stop();
// 	}
// }

},{"../../enyo/lib/Control":26,"../../enyo/lib/Signals":68,"../../enyo/lib/dispatcher":86,"../../enyo/lib/gesture":91,"../../enyo/lib/logger":97,"../../enyo/lib/master":98,"../../enyo/lib/platform":102,"../../enyo/lib/roots":105,"../../enyo/lib/utils":106,"./accelerator":276,"./container":277,"./muter":278,"./neighbor":279,"./scrolling":280,"./testmode":282,"./util":283}],202:[function(require,module,exports){
var
	hooks = require('../../enyo/lib/hooks'),
	platform = require('../../enyo/lib/platform');

var
	ilib = require('../../enyo-ilib');

/**
* `moon-fonts` is the locale-specific font generator, allowing any locale to have its own custom
* font. Each locale-font from the configuration block (defined in this file) is generated at
* run-time. If the locale you're currently in is in the locale-font list an additional
* `@font-face` rule will be generated that will override the standard "Moonstone LG Display"
* font.
*
* Below is example genarated-output of the Urdu ("ur") locale-font.
*
* ```css
* &#64;font-face {
* 	font-family: 'Moonstone LG Display ur';
* 	font-weight: normal;
* 	src: local('LG Display_Urdu');
* 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
* }
* &#64;font-face {
* 	font-family: 'Moonstone LG Display ur Bold';
* 	font-weight: normal;
* 	src: local('LG Display_Urdu');
* 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
* }
* &#64;font-face {
* 	font-family: 'Moonstone LG Display ur Light';
* 	font-weight: normal;
* 	src: local('LG Display_Urdu');
* 	unicode-range: U+0600-U+06FF, U+FE70-U+FEFE, U+FB50-U+FDFF;
* }
* ```
*
* @name International Fonts
* @public
*/
if (ilib) {

	var funEnyoUpdateLocale = hooks.updateLocale,
		funLocaleSpecificFonts = null;

	funLocaleSpecificFonts = function() {
		var loc = new ilib.Locale(),
			language = loc.getLanguage(),
			region = loc.getRegion(),
			styleId = 'enyo-localization-font-override',
			styleElem = document.getElementById(styleId),
			fontDefinitionCss = '',
			// Locale Configuration Block
			fonts = {
				'NonLatin': {
					regular: 'LG Display-Light',
					bold:    'LG Display-Regular'
				},
				'ja': {
					regular: 'LG Display_JP',
					unicodeRanges:
						'U+0000-U+00FF, ' +
						'U+2E80-U+2EFF,' +
						'U+2F00-U+2FDF,' +
						'U+3000-U+303F,' +
						'U+3040-U+309F,' +
						'U+30A0-U+30FF,' +
						'U+3200-U+33FF,' +
						'U+3400-U+4DBF,' +
						'U+4E00-U+9FFF,' +
						'U+E000-U+FAFF,' +
						'U+FF00-U+FFEF'
				},
				'ur': {
					regular: 'LG Display_Urdu',
					unicodeRanges:
						'U+0600-U+06FF, ' +
						'U+FE70-U+FEFE, ' +
						'U+FB50-U+FDFF'
				},
				'zh-HK': {
					regular: 'LG Display GP4_HK-Light',
					bold:    'LG Display GP4_HK-Regular',
					unicodeRanges:
						'U+0000-U+00FF,' +
						'U+2E80-U+2EFF,' +
						'U+3000-U+303F,' +
						'U+3200-U+33FF,' +
						'U+3400-U+4DBF,' +
						'U+4E00-U+9FFF,' +
						'U+E000-U+FAFF,' +
						'U+FF00-U+FFEF'
				}
			};

		// Duplications and alternate locale names
		fonts['zh-TW'] = fonts['zh-HK'];

		// Generate a single font-face rule
		this.buildFont = function(inOptions) {
			if (!inOptions && !inOptions.name) {
				return '';
			}
			var strOut = '@font-face { \n' +
				'  font-family: "' + inOptions.name + '";\n' +
				'  font-weight: ' + ( inOptions.weight || 'normal' ) + ';\n';

			if (inOptions.localName) {
				strOut+= '  src: local("' + inOptions.localName + '");\n';
			}
			if (inOptions.unicodeRanges) {
				strOut+= '  unicode-range: ' + inOptions.unicodeRanges + ';\n';
			}
			strOut+= '} \n';
			return strOut;
		};

		// Generate a collection of font-face rules, in multiple font-variants
		this.buildFontSet = function(strLang, bitDefault) {
			var strOut = '',
				name = (bitDefault) ? '' : ' ' + strLang;

			if (fonts[strLang].regular) {
				// Build Regular
				strOut+= this.buildFont({
					name: 'Moonstone LG Display' + name,
					localName: fonts[strLang].regular,
					unicodeRanges: fonts[strLang].unicodeRanges
				});

				// Build Bold
				strOut+= this.buildFont({
					name: 'Moonstone LG Display' + name + ' Bold',
					localName: fonts[strLang].bold || fonts[strLang].regular,
					unicodeRanges: fonts[strLang].unicodeRanges
				});

				// Build Light
				strOut+= this.buildFont({
					name: 'Moonstone LG Display' + name + ' Light',
					localName: fonts[strLang].light || fonts[strLang].regular,
					unicodeRanges: fonts[strLang].unicodeRanges
				});
			}
			return strOut;
		};

		if (!styleElem) {
			styleElem = document.createElement('style');
			styleElem.setAttribute('id', styleId);
			if (platform.ie === 8) {
				// ENYO-3944: Using getElementsByTagName('head') for IE8 Sampler support
				document.getElementsByTagName('head')[0].appendChild(styleElem);
			} else {
				document.head.appendChild(styleElem);
			}
		}

		// Build all the fonts so they could be explicitly called
		for (var lang in fonts) {
			fontDefinitionCss+= this.buildFontSet(lang);
		}

		// Set up the override so "Moonstone LG Display" becomes the local-specific font.
		if (language === 'ja') {
			fontDefinitionCss+= this.buildFontSet('ja', true);
		}
		else if (language === 'ur') {
			fontDefinitionCss+= this.buildFontSet('ur', true);
		}
		else if (language === 'zh' && region === 'HK') {
			fontDefinitionCss+= this.buildFontSet('zh-HK', true);
		}
		else if (language === 'zh' && region === 'TW') {
			fontDefinitionCss+= this.buildFontSet('zh-TW', true);
		}

		// ENYO-3944: IE8 Sampler support - IE8 does not allow innerHTML modification of <style> elements
		if (platform.ie !== 8) {
			styleElem.innerHTML = fontDefinitionCss;
		}
	};

	hooks.updateLocale = function() {
		funEnyoUpdateLocale.apply(this, arguments);
		funLocaleSpecificFonts();
	};

	funLocaleSpecificFonts();
}
},{"../../enyo-ilib":8,"../../enyo/lib/hooks":92,"../../enyo/lib/platform":102}],203:[function(require,module,exports){
var
	hooks = require('../../enyo/lib/hooks');

var
	ilib = require('../../enyo-ilib');

var $L;

/**
* Localized strings from [iLib]{@link ilib} translations.
*
* @param {String} string - String to be localized.
* @returns {String} Localized string.
* @name moon.$L
* @public
*/
if (ilib) {
	$L = function (string) {
		if (!$L.rb) {
			return string;
		}
		var str = $L.rb.getString(string);
		return str.toString();
	};
	$L.rb = new ilib.ResBundle({
		loadParams: {
			root: 'resources'
		}
	});
} else {
	$L = hooks.$L;
}

module.exports = $L;
},{"../../enyo-ilib":8,"../../enyo/lib/hooks":92}],20:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind');
var
	ToolDecorator = require('../ToolDecorator');

/**
* {@link enyo.Button} implements an HTML [button]{@glossary button}, with support
* for grouping using {@link enyo.Group}.
*
* For more information, see the documentation on
* [Buttons]{@linkplain $dev-guide/building-apps/controls/buttons.html} in the
* Enyo Developer Guide.
*
* @class enyo.Button
* @extends enyo.ToolDecorator
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Button.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Button',
	
	/**
	* @private
	*/
	kind: ToolDecorator,

	/**
	* @private
	*/
	tag: 'button',

	/**
	* @private
	*/
	attributes: {
		/**
		 * Set to `'button'`; otherwise, the default value would be `'submit'`, which
		 * can cause unexpected problems when [controls]{@link enyo.Control} are used
		 * inside of a [form]{@glossary form}.
		 * 
		 * @type {String}
		 * @private
		 */
		type: 'button'
	},
	
	/**
	* @private
	*/
	published: 
		/** @lends enyo.Button.prototype */ {
		
		/**
		 * When `true`, the [button]{@glossary button} is shown as disabled and does not 
		 * generate tap [events]{@glossary event}.
		 * 
		 * @type {Boolean}
		 * @default false
		 * @public
		 */
		disabled: false
	},
	
	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.disabledChanged();
		};
	}),

	/**
	* @private
	*/
	disabledChanged: function () {
		this.setAttribute('disabled', this.disabled);
	},

	/**
	* @private
	*/
	tap: function () {
		if (this.disabled) {
			// work around for platforms like Chrome on Android or Opera that send
			// mouseup to disabled form controls
			return true;
		} else {
			this.setActive(true);
		}
	}
});
},{"../../../enyo":12,"../ToolDecorator":77,"../kind":96}],79:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind'),
	dispatcher = require('./dispatcher');

var
	TouchScrollStrategy = require('./TouchScrollStrategy'),
	Dom = require('./dom');

/**
* {@link enyo.TranslateScrollStrategy} is a helper [kind]{@glossary kind} that extends
* {@link enyo.TouchScrollStrategy}, optimizing it for scrolling environments in which effecting 
* scroll changes with transforms using CSS translations is fastest.
* 
* `enyo.TranslateScrollStrategy` is not typically created in application code. Instead, it is 
* specified as the value of the [strategyKind]{@link enyo.Scroller#strategyKind} property of 
* an {@link enyo.Scroller} or {@link enyo.List}, or is used by the framework implicitly.
*
* @class enyo.TranslateScrollStrategy
* @extends enyo.TouchScrollStrategy
* @protected
*/
module.exports = kind(
	/** @lends enyo.TranslateScrollStrategy.prototype */ {

	name: 'enyo.TranslateScrollStrategy',

	/**
	* @private
	*/
	kind: TouchScrollStrategy,

	/** 
	* Set to `true` to optimize the strategy to only use translation to scroll; this increases 
	* fluidity of scrolling animation. It should not be used when the 
	* [scroller]{@link enyo.Scroller} contains [controls]{@link enyo.Control} that require 
	* keyboard input. This is because when `translateOptimized` is `true`, it is possible to 
	* position inputs such that they will not become visible when focused.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	translateOptimized: false,
	
	/**
	* @private
	*/
	components: [
		{name: 'clientContainer', classes: 'enyo-touch-scroller', components: [
			{name: 'client'}
		]}
	],

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			dispatcher.makeBubble(this.$.clientContainer, 'scroll');
			if (this.translateOptimized) {
				this.setStartPosition();
			}
		};
	}),

	/**
	* @method
	* @private
	*/
	setStartPosition: function() {
		this.startX = this.getScrollLeft();
		this.startY = this.getScrollTop();
	},

	/**
	* @private
	*/
	getScrollSize: function () {
		var n = this.$.client.hasNode();
		return {width: n ? n.scrollWidth : 0, height: n ? n.scrollHeight : 0};
	},

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			// apply initial transform so we're always composited
			Dom.transformValue(this.$.client, this.translation, '0,0,0');
		};
	}),
	
	/**
	* @private
	*/
	calcScrollNode: function () {
		return this.$.clientContainer.hasNode();
	},

	/**
	* @private
	*/
	maxHeightChanged: function () {
		// content should cover scroller at a minimum if there's no max-height.
		this.$.client.applyStyle('min-height', this.maxHeight ? null : '100%');
		this.$.client.applyStyle('max-height', this.maxHeight);
		this.$.clientContainer.addRemoveClass('enyo-scrollee-fit', !this.maxHeight);
	},

	/**
	* @method
	* @private
	*/
	shouldDrag: kind.inherit(function (sup) {
		return function(inEvent) {
			// stop and update drag info before checking drag status
			this.stop();
			this.calcStartInfo();
			return sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	syncScrollMath: kind.inherit(function (sup) {
		return function() {
			if (!this._translated) {
				sup.apply(this, arguments);
			}
		};
	}),
	
	/**
	* Sets the horizontal scroll position.
	*
	* @param {Number} left - The horizontal scroll position in pixels.
	* @method
	* @public
	*/
	setScrollLeft: kind.inherit(function (sup) {
		return function(inLeft) {
			var m, p;
			if (this.translateOptimized) {
				p = this.scrollLeft;
				m = this.$.scrollMath;
				this.stop(true);
				m.setScrollX(-inLeft);
				m.stabilize();
				if (p != -m.x) {
					// We won't get a native scroll event,
					// so need to make one ourselves
					m.doScroll();
					this.delayHideThumbs(100);
				} 
			} else {
				sup.apply(this, arguments);
			}
		};
	}),
	
	/**
	* Sets the vertical scroll position.
	*
	* @param {Number} top - The vertical scroll position in pixels.
	* @method
	* @public
	*/
	setScrollTop: kind.inherit(function (sup) {
		return function(inTop) {
			var m, p;
			if (this.translateOptimized) {
				p = this.scrollTop;
				m = this.$.scrollMath;
				this.stop(true);
				m.setScrollY(-inTop);
				m.stabilize();
				if (p != -m.y) {
					// We won't get a native scroll event,
					// so need to make one ourselves
					m.doScroll();
					this.delayHideThumbs(100);
				}
			} else {
				sup.apply(this, arguments);
			}
		};
	}),
	
	/**
	* Retrieves the horizontal scroll position.
	*
	* @returns {Number} The horizontal scroll position in pixels.
	* @method
	* @public
	*/
	getScrollLeft: kind.inherit(function (sup) {
		return function() {
			return this._translated ? this.scrollLeft: sup.apply(this, arguments);
		};
	}),
	
	/**
	* Retrieves the vertical scroll position.
	*
	* @returns {Number} The vertical scroll position in pixels.
	* @method
	* @private
	*/
	getScrollTop: kind.inherit(function (sup) {
		return function() {
			return this._translated ? this.scrollTop : sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	calcBoundaries: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			if (this.translateOptimized && !this.isScrolling()) this.stabilize();
		};
	}),

	/**
	* @method
	* @private
	*/
	handleResize: function() {
		if (this.translateOptimized) {
			this.stabilize();
		}
	},
	
	/**
	* @method
	* @private
	*/
	scrollMathStart: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			if (!this._translated) {
				this.setStartPosition();
			}
		};
	}),

	/**
	* @private
	*/
	scrollMathScroll: function (sender) {
		if(!this.overscroll) { //don't overscroll past edges
			this.scrollLeft = -Math.min(sender.leftBoundary, Math.max(sender.rightBoundary, sender.x));
			this.scrollTop = -Math.min(sender.topBoundary, Math.max(sender.bottomBoundary, sender.y));
		} else {
			this.scrollLeft = -sender.x;
			this.scrollTop = -sender.y;
		}
		this.effectScroll(this.scrollLeft, this.scrollTop);
		if (this.thumb) {
			this.showThumbs();
		}
	},

	/**
	* @private
	*/
	scrollMathStabilize: kind.inherit(function (sup) {
		return function (sender) {
			if (this._translated) {
				this.scrollLeft = -sender.x;
				this.scrollTop = -sender.y;
				this.effectScroll(-sender.x, -sender.y);
				return true;
			} else {
				return sup.apply(this, arguments);
			}
		};
	}),

	/**
	* While moving, scroller uses translate.
	* 
	* @private
	*/
	effectScroll: kind.inherit(function (sup) {
		return function (x, y) {
			var o;
			if (this.translateOptimized || this.isScrolling()) {
				x = this.startX - x;
				y = this.startY - y;
				o = x + 'px, ' + y + 'px' + (this.accel ? ',0' : '');
				Dom.transformValue(this.$.client, this.translation, o);
				this._translated = true;
			} else {
				sup.apply(this, arguments);
			}
		};
	}),

	/**
	* When stopped, we use `scrollLeft/scrollTop` (makes cursor positioning automagic).
	* 
	* @private
	*/
	effectScrollStop: function () {
		if (!this.translateOptimized) {
			var t = '0,0' + (this.accel ? ',0' : '');
			// FIXME: normally translate3d changes not effect scrollHeight; however
			// there appear to be some dom changes (e.g. showing a node inside the scroller,
			// which do cause the scrollHeight to be changed from the translate3d.
			// In this case setting the translate3d back to 0 does not restore scrollHeight.
			// This causes a problem because setting scrollTop can produced an unexpected result if
			// scrollHeight is less than expected.
			// We detect this fault by validating scroll bounds and (1) un-apply the translate3d,
			// (2) update scrollTop/Left, and (3) re-apply a 0,0,0 translate3d to ensure compositing.
			// Luckily this corrects the problem (which appears to be a webkit bug). Note that
			// it's important to maintain a composited state (translate3d 0,0,0) or Android 4 is
			// slow to start scrolling.
			var m = this.$.scrollMath, sb = this._getScrollBounds();
			var needsBoundsFix = Boolean((sb.maxTop + m.bottomBoundary) || (sb.maxLeft + m.rightBoundary));
			Dom.transformValue(this.$.client, this.translation, needsBoundsFix ? null : t);
			// note: this asynchronously triggers dom scroll event
			this.setScrollLeft(this.scrollLeft);
			this.setScrollTop(this.scrollTop);
			if (needsBoundsFix) {
				Dom.transformValue(this.$.client, this.translation, t);
			}
			this._translated = false;
		}
	},

	/**
	* FIXME: we can fix scrolling artifacts BUGS on Android 4.04 with this heinous incantation.
	* 
	* @private
	*/
	twiddle: function () {
		if (this.translateOptimized && this.scrollNode) { // this.scrollNode is not always defined and makes Motorola XOOM crash
			this.scrollNode.scrollTop = 1;
			this.scrollNode.scrollTop = 0;
		}
	}
});
},{"../../enyo":12,"./TouchScrollStrategy":78,"./dispatcher":86,"./dom":87,"./kind":96}],73:[function(require,module,exports){
require('../../enyo');

var
	kind = require('./kind');
var
	Control = require('./Control'),
	TableRow = require('./TableRow');

/*
* TODO: Won't work in IE8 because we can't set innerHTML on table elements. We'll need to fall 
* back to divs with table display styles applied.
* 
* Should also facade certain useful table functionality (specific set TBD).
*/

/**
* {@link enyo.Table} implements an HTML [&lt;table&gt;]{@glossary table} element.
* This is a work in progress.
*
* @class enyo.Table
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends enyo.Table.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.Table',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	tag: 'table',

	/**
	* @private
	*/
	attributes: {
		cellpadding: '0',
		cellspacing: '0'
	},

	/**
	* @private
	*/
	defaultKind: TableRow
});
},{"../../enyo":12,"./Control":26,"./TableRow":75,"./kind":96}],275:[function(require,module,exports){
var
	Spotlight = require('./lib/spotlight');

Spotlight.version = '2.6.0-pre.5.dev';

module.exports = Spotlight;
},{"./lib/spotlight":281}],119:[function(require,module,exports){
'use strict';

var
	platform = require('../enyo/lib/platform'),
	dispatcher = require('../enyo/lib/dispatcher'),
	drag = require('../enyo/lib/drag');

exports = module.exports = require('./lib/options');
exports.version = '2.6.0-pre';

// Override the default holdpulse config to account for greater delays between keydown and keyup
// events in Moonstone with certain input devices.
drag.configureHoldPulse({
	frequency: 200,
	events: [{name: 'hold', time: 400}],
	resume: false,
	moveTolerance: 16,
	endHold: 'onMove'
});

/**
* Registers key mappings for webOS-specific device keys related to media control.
*
* @private
*/
if (platform.webos >= 4) {
	// Table of default keyCode mappings for webOS device
	dispatcher.registerKeyMap({
		415 : 'play',
		413 : 'stop',
		19  : 'pause',
		412 : 'rewind',
		417 : 'fastforward',
		461 : 'back'
	});
}

// ensure that these are registered
require('./lib/resolution');
require('./lib/fonts');
},{"../enyo/lib/dispatcher":86,"../enyo/lib/drag":88,"../enyo/lib/platform":102,"./lib/fonts":202,"./lib/options":204,"./lib/resolution":205}],66:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind'),
	utils = require('../utils'),
	platform = require('../platform');

var
	Control = require('../Control'),
	ScrollStrategy = require('../ScrollStrategy'),
	TouchScrollStrategy = require('../TouchScrollStrategy'),
	TranslateScrollStrategy = require('../TranslateScrollStrategy');

/**
* An [object]{@glossary Object} representing the scroll boundaries.
*
* @typedef {Object} enyo.Scroller~BoundaryObject
* @property {Number} left - The left scroll position.
* @property {Number} top - The top scroll position.
* @property {Number} maxLeft - Maximum value for the left scroll position (minimum is always 0).
* @property {Number} maxTop - Maximum value for the top scroll position (minimum is always 0).
* @property {Number} clientHeight - The vertical size of the [scroller]{@link enyo.Scroller} on
*	screen.
* @property {Number} clientWidth - The horizontal size of the [scroller]{@link enyo.Scroller} on
*	screen.
* @property {Number} width - The horizontal size of the full area of the scrolled region.
* @property {Number} height - The vertical size of the full area of the scrolled region.
* @property {Number} xDir - Either `1`, `-1`, or `0`, indicating positive movement along the
*	x-axis, negative movement, or no movement, respectively.
* @property {Number} yDir - Either `1`, `-1`, or `0`, indicating positive movement along the
*	y-axis, negative movement, or no movement, respectively.
*/


/**
* An [object]{@glossary Object} representing the overscroll boundaries.
*
* @typedef {Object} enyo.Scroller~OverscrollBoundaryObject
* @property {Number} overleft - The left overscroll position.
* @property {Number} overtop - The top overscroll position.
*/

/**
* The extended {@glossary event} [object]{@glossary Object} that is provided 
* when a scroll event is fired.
*
* @typedef {Object} enyo.Scroller~ScrollEvent
* @property {enyo.Scroller~BoundaryObject} bounds Current values of scroller bounds.
*/

/**
* Fires when a scrolling action starts.
*
* @event enyo.Scroller#onScrollStart
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {enyo.Scroller~ScrollEvent} event - An [object]{@glossary Object} containing 
*	event information.
* @public
*/

/**
* Fires while a scrolling action is in progress.
*
* @event enyo.Scroller#onScroll
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing 
*	event information.
* @public
*/

/**
* Fires when a scrolling action stops.
*
* @event enyo.Scroller#onScrollStop
* @type {Object}
* @property {Object} sender - The [component]{@link enyo.Component} that most recently 
*	propagated the {@glossary event}.
* @property {Object} event - An [object]{@glossary Object} containing 
*	event information.
* @public
*/

/**
* {@link enyo.Scroller} is a scroller suitable for use in both desktop and mobile
* applications.
* 
* In some mobile environments, a default scrolling solution is not implemented for
* DOM elements. In such cases, `enyo.Scroller` implements a touch-based scrolling
* solution, which may be opted into either globally (by setting
* [touchScrolling]{@link enyo.Scroller#touchScrolling} to `true`) or on a
* per-instance basis (by specifying a [strategyKind]{@link enyo.Scroller#strategyKind}
* of `"TouchScrollStrategy"`).
* 
* For more information, see the documentation on
* [Scrollers]{@linkplain $dev-guide/building-apps/layout/scrollers.html} in the
* Enyo Developer Guide.
*
* @class enyo.Scroller
* @public
*/
var Scroller = module.exports = kind(
	/** @lends enyo.Scroller.prototype */ {
	
	name: 'enyo.Scroller',
	
	kind: Control,
	
	/**
	* @private
	*/
	published: 
		/** @lends enyo.Scroller.prototype */ {

		/**
		* Specifies how to horizontally scroll.  Acceptable values are `'scroll'`, `'auto'`,
		* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the
		* scroll strategy.
		* 
		* @type {String}
		* @default 'default'
		* @public
		*/
		horizontal: 'default',

		/**
		* Specifies how to vertically scroll.  Acceptable values are `'scroll'`, `'auto'`,
		* `'hidden'`, and `'default'`. The precise effect of the setting is determined by the
		* scroll strategy.
		* 
		* @type {String}
		* @default 'default'
		* @public
		*/
		vertical: 'default',

		/**
		* The vertical scroll position.
		* 
		* @type {Number}
		* @default 0
		* @public
		*/
		scrollTop: 0,

		/**
		* The horizontal scroll position.
		* 
		* @type {Number}
		* @default 0
		* @public
		*/
		scrollLeft: 0,

		/**
		* Maximum height of the scroll content.
		* 
		* @type {Number}
		* @default null
		* @memberof enyo.Scroller.prototype
		* @public
		*/
		maxHeight: null,

		/**
		* Set to `true` to make this [scroller]{@link enyo.Scroller} select a 
		* platform-appropriate touch-based scrolling strategy. Note that if you specify a value 
		* for [strategyKind]{@link enyo.Scroller#strategyKind}, that will take precedence over
		* this setting.
		* 
		* @type {Boolean}
		* @default false
		* @public
		*/
		touch: false,
		/**
		* Specifies a type of scrolling. The [scroller]{@link enyo.Scroller} will attempt to 
		* automatically select a strategy compatible with the runtime environment. Alternatively,
		* you may choose to use a specific strategy:
		* 
		* - [ScrollStrategy]{@link enyo.ScrollStrategy} is the default and implements no 
		*	scrolling, relying instead on the environment to scroll properly.
		* - [TouchScrollStrategy]{@link enyo.TouchScrollStrategy} implements a touch scrolling 
		*	mechanism.
		* - [TranslateScrollStrategy]{@link enyo.TranslateScrollStrategy} implements a touch 
		*	scrolling mechanism using translations; it is currently recommended only for Android
		*	3 and 4, and Windows Phone 8.
		* - [TransitionScrollStrategy]{@link enyo.TransitionScrollStrategy} implements a touch 
		*	scrolling mechanism using CSS transitions; it is currently recommended only for iOS 
		*	5 and later.
		*
		* @type {String}
		* @default 'ScrollStrategy'
		* @public
		*/
		strategyKind: ScrollStrategy,

		/**
		* Set to `true` to display a scroll thumb in touch [scrollers]{@link enyo.Scroller}.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		thumb: true,

		/**
		* If `true`, mouse wheel may be used to move the [scroller]{@link enyo.Scroller}.
		* 
		* @type {Boolean}
		* @default true
		* @public
		*/
		useMouseWheel: true
	},

	/**
	* @private
	*/
	events: {
		onScrollStart: '',
		onScroll: '',
		onScrollStop: ''
	},

	/**
	* If `true`, enables touch scrolling globally.
	*
	* @name touchScrolling
	* @type {Boolean}
	* @default undefined
	* @memberof enyo.Scroller.prototype
	* @public
	*/

	/**
	* If `true` and this is a touch [scroller]{@link enyo.Scroller}, the scroller
	* will overscroll and bounce back at the edges.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	touchOverscroll: true,

	/**
	* If `true`, the [scroller]{@link enyo.Scroller} will not propagate `dragstart` 
	* [events]{@glossary event} that cause it to start scrolling.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	preventDragPropagation: true,

	/**
	* If `true`, the [scroller]{@link enyo.Scroller} will not propagate scroll 
	* [events]{@glossary event}.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	preventScrollPropagation: true,

	/**
	* Needed to allow global mods to `enyo.Scroller.touchScrolling`.
	* 
	* @private
	*/


	/**
	* @private
	*/
	handlers: {
		onscroll: 'domScroll',
		onScrollStart: 'scrollStart',
		onScroll: 'scroll',
		onScrollStop: 'scrollStop'
	},

	/**
	* @private
	*/
	classes: 'enyo-scroller',

	/**
	* @private
	*/
	statics: {
		osInfo: [
			{os: 'android', version: 3},
			{os: 'androidChrome', version: 18},
			{os: 'androidFirefox', version: 16},
			{os: 'firefoxOS', version: 16},
			{os: 'ios', version: 5},
			{os: 'webos', version: 1e9},
			{os: 'blackberry', version:1e9},
			{os: 'tizen', version: 2}
		],
		//* Returns true if platform should have touch events.
		hasTouchScrolling: function() {
			for (var i=0, t; (t=this.osInfo[i]); i++) {
				if (platform[t.os]) {
					return true;
				}
			}
			// special detection for IE10+ on touch devices
			if ((platform.ie >= 10 || platform.windowsPhone >= 8) && platform.touch) {
				return true;
			}
		},
		/**
			Returns true if the platform has native div scrollers (desktop
			browsers always have them).
		*/
		hasNativeScrolling: function() {
			for (var i=0, t; (t=this.osInfo[i]); i++) {
				if (platform[t.os] < t.version) {
					return false;
				}
			}
			return true;
		},
		getTouchStrategy: function() {
			return (platform.androidChrome >= 27) || (platform.android >= 3) || (platform.windowsPhone === 8) || (platform.webos >= 4)
				? TranslateScrollStrategy
				: TouchScrollStrategy;
		}
	},

	/**
	* @private
	*/
	controlParentName: 'strategy',

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.horizontalChanged();
			this.verticalChanged();
			this.useMouseWheelChanged();
		};
	}),

	/**
	* @method
	* @private
	*/
	importProps: kind.inherit(function (sup) {
		return function(inProps) {
			sup.apply(this, arguments);
			// allow global overriding of strategy kind
			if (inProps && inProps.strategyKind === undefined && (Scroller.touchScrolling || this.touch)) {
				this.strategyKind = Scroller.getTouchStrategy();
			}
		};
	}),

	/**
	* @method
	* @private
	*/
	initComponents: kind.inherit(function (sup) {
		return function() {
			this.strategyKindChanged();
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			this.syncStrategy();
		};
	}),

	/**
	* @method
	* @private
	*/
	syncStrategy: function() {
		this.$.strategy.setScrollLeft(this.scrollLeft);
		this.$.strategy.setScrollTop(this.scrollTop);
	},

	/**
	* @private
	*/
	strategyKindChanged: function () {
		if (this.$.strategy) {
			this.$.strategy.destroy();
			this.controlParent = null;
		}
		// note: createComponents automatically updates controlParent.
		this.createStrategy();
		if (this.hasNode()) {
			this.render();
		}
	},

	/**
	* @private
	*/
	createStrategy: function () {
		this.createComponents([{name: 'strategy', maxHeight: this.maxHeight,
			kind: this.strategyKind, thumb: this.thumb,
			preventDragPropagation: this.preventDragPropagation,
			overscroll:this.touchOverscroll, isChrome: true}]);
	},

	/**
	* @private
	*/
	getStrategy: function () {
		return this.$.strategy;
	},

	/**
	* @private
	*/
	maxHeightChanged: function () {
		this.$.strategy.setMaxHeight(this.maxHeight);
	},

	/**
	* @method
	* @private
	*/
	showingChanged: kind.inherit(function (sup) {
		return function() {
			sup.apply(this, arguments);
			if (this.showing) {
				this.syncStrategy();
			}
		};
	}),

	/**
	* @private
	*/
	showingChangedHandler: kind.inherit(function(sup) {
		return function(sender, event) {
			if (this.showing && event.showing) {
				this.syncStrategy();
			}
		};
	}),

	/**
	* @private
	*/
	thumbChanged: function () {
		this.$.strategy.setThumb(this.thumb);
	},

	/**
	* @private
	*/
	horizontalChanged: function () {
		this.$.strategy.setHorizontal(this.horizontal);
	},

	/**
	* @private
	*/
	verticalChanged: function () {
		this.$.strategy.setVertical(this.vertical);
	},

	// FIXME: these properties are virtual; property changed methods are fired only if
	// property value changes, not if getter changes.
	
	/**
	* Sets the horizontal scroll position.
	*
	* @param {Number} left - The horizontal scroll position in pixels.
	* @public
	*/
	setScrollLeft: function (left) {
		this.$.strategy.setScrollLeft(left);
	},

	/**
	* Sets the vertical scroll position.
	*
	* @param {Number} top - The vertical scroll position in pixels.
	* @public
	*/
	setScrollTop: function (top) {
		this.$.strategy.setScrollTop(top);
	},

	/**
	* Retrieves the horizontal scroll position.
	*
	* @returns {Number} The horizontal scroll position in pixels.
	* @public
	*/
	getScrollLeft: function () {
		// sync our internal property
		this.scrollLeft = this.$.strategy.getScrollLeft();
		return this.scrollLeft;
	},

	/**
	* Retrieves the vertical scroll position.
	*
	* @returns {Number} The vertical scroll position in pixels.
	* @public
	*/
	getScrollTop: function () {
		// sync our internal property
		this.scrollTop = this.$.strategy.getScrollTop();
		return this.scrollTop;
	},

	/**
	* Retrieves the scroll boundaries of the [scroller]{@link enyo.Scroller}.
	* 
	* @returns {enyo.Scroller~BoundaryObject} An [object]{@glossary Object} describing the 
	*	scroll boundaries.
	* @public
	*/
	getScrollBounds: function () {
		var bounds  = this.$.strategy.getScrollBounds();
		if (
			(bounds.xDir !== -1 && bounds.xDir !== 0 && bounds.xDir !== 1) ||
			(bounds.yDir !== -1 && bounds.yDir !== 0 && bounds.yDir !== 1)
		) {
			this.decorateBounds(bounds);
		}
		// keep our properties synchronized always and without extra calls
		this.scrollTop  = bounds.top;
		this.scrollLeft = bounds.left;
		return bounds;
	},

	/** 
	* Trigger a remeasurement of the scroller's metrics (specifically, the
	* size of its viewport, the size of its contents and the difference between
	* the two, which determines the extent to which the scroller may scroll).
	* 
	* You should generally not need to call this from application code, as the
	* scroller usually remeasures automatically whenever needed. This method
	* exists primarily to support an internal use case for
	* [enyo.DataList]{@link enyo.DataList}.
	*
	* @public
	*/
	remeasure: function() {
		var s = this.$.strategy;
		if (s.remeasure) s.remeasure();
	},

	/**
	* Scrolls the given [control]{@link enyo.Control} into view.
	*
	* @param {enyo.Control} ctl - The control to make visible in the
	*	[scroller's]{@link enyo.Scroller} viewport.
	* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top
	* of the scroller.
	* @public
	*/
	scrollIntoView: function (ctl, alignWithTop) {
		this.$.strategy.scrollIntoView(ctl, alignWithTop);
	},

	/** 
	* Scrolls to the specified position.
	*
	* @param {Number} x - The `x` position in pixels.
	* @param {Number} y - The `y` position in pixels.
	* @public
	*/
	scrollTo: function (x, y) {
		this.$.strategy.scrollTo(x, y);
	},

	/**
	* Ensures that the given [control]{@link enyo.Control} is visible in the 
	* [scroller's]{@link enyo.Scroller} viewport. Unlike 
	* [scrollIntoView()]{@link enyo.Scroller#scrollIntoView}, which uses DOM's 
	* [scrollIntoView()]{@glossary scrollIntoView}, this only affects the current 
	* scroller.
	*
	* @param {enyo.Control} ctl - The [control]{@link enyo.Control} to make visible in the
	*	[scroller's]{@link enyo.Scroller} viewport.
	* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the
	*	scroller.
	* @public
	*/
	scrollToControl: function (ctl, alignWithTop) {
		this.scrollToNode(ctl.hasNode(), alignWithTop);
	},

	/** 
	* Ensures that the given node is visible in the [scroller's]{@link enyo.Scroller} viewport.
	*
	* @param {Node} node - The node to make visible in the [scroller's]{@link enyo.Scroller}
	*	viewport.
	* @param {Boolean} alignWithTop - If `true`, the node is aligned with the top of the
	*	scroller.
	* @public
	*/
	scrollToNode: function (node, alignWithTop) {
		this.$.strategy.scrollToNode(node, alignWithTop);
	},

	/** 
	* Stops the scroller if it is currently animating.
	* 
	* @public
	*/
	stop: function() {
		if (typeof this.$.strategy.stop == 'function') {
			this.$.strategy.stop(true);
		}
	},

	/** 
	* Adds current values of `getScrollBounds()` to {@glossary event}.
	* 
	* @private
	*/
	decorateScrollEvent: function (e) {
		var bounds = e.scrollBounds = e.scrollBounds || this.$.strategy._getScrollBounds();
		// in the off chance that the event already had scrollBounds then we need
		// to make sure they are decorated
		if (
			(bounds.xDir !== -1 && bounds.xDir !== 0 && bounds.xDir !== 1) ||
			(bounds.yDir !== -1 && bounds.yDir !== 0 && bounds.yDir !== 1)
		) {
			this.decorateBounds(bounds);
		}
		// keep our properties synchronized always and without extra calls
		this.scrollTop  = bounds.top;
		this.scrollLeft = bounds.left;
	},

	/**
	* @private
	*/
	decorateBounds: function (bounds) {
		var x       = this.scrollLeft - bounds.left,
			y       = this.scrollTop  - bounds.top;
		bounds.xDir = (x < 0? 1: x > 0? -1: 0);
		bounds.yDir = (y < 0? 1: y > 0? -1: 0);
		// we update our current bounds properties so we don't have to unnecessarily
		// call getScrollTop/getScrollLeft because we already have the current data
		this.scrollLeft = bounds.left;
		this.scrollTop  = bounds.top;
	},

	/** 
	* Normalizes scroll {@glossary event} to `onScroll`.
	*
	* @fires enyo.Scroller#onScroll
	* @private
	*/
	domScroll: function (sender, e) {
		// if a scroll event originated here, pass it to our strategy to handle
		if (this.$.strategy.domScroll && e.originator == this) {
			this.$.strategy.domScroll(sender, e);
		}
		this.decorateScrollEvent(e);
		this.doScroll(e);
		return true;
	},

	/**
	* @returns {Boolean} `true` if the current scroll {@glossary event} should
	* be stopped; `false` if it should be allowed to propagate.
	* @private
	*/
	shouldStopScrollEvent: function (e) {
		return (this.preventScrollPropagation &&
			e.originator.owner != this.$.strategy);
	},

	/**
	* Calls [shouldStopScrollEvent()]{@link enyo.Scroller#shouldStopScrollEvent} to
	* determine whether current scroll {@glossary event} should be stopped.
	*
	* @private
	*/
	scrollStart: function (sender, e) {
		if (!this.shouldStopScrollEvent(e)) {
			this.decorateScrollEvent(e);
			return false;
		}
		return true;
	},

	/** 
	* Either propagates or stops the current scroll {@glossary event}.
	*
	* @private
	*/
	scroll: function (sender, e) {
		// note: scroll event can be native dom or generated.
		var stop;
		if (e.dispatchTarget) {
			// allow a dom event if it orignated with this scroller or its strategy
			stop = this.preventScrollPropagation && !(e.originator == this ||
				e.originator.owner == this.$.strategy);
		} else {
			stop = this.shouldStopScrollEvent(e);
		}
		if (!stop) {
			this.decorateScrollEvent(e);
			return false;
		}
		return true;
	},

	/**
	* Calls [shouldStopScrollEvent()]{@link enyo.Scroller#shouldStopScrollEvent} to
	* determine whether current scroll {@glossary event} should be stopped.
	*
	* @private
	*/
	scrollStop: function (sender, e) {
		if (!this.shouldStopScrollEvent(e)) {
			this.decorateScrollEvent(e);
			return false;
		}
		return true;
	},

	/**
	* Scrolls to the top of the scrolling region.
	*
	* @public
	*/
	scrollToTop: function () {
		this.setScrollTop(0);
	},

	/**
	* Scrolls to the bottom of the scrolling region.
	*
	* @public
	*/
	scrollToBottom: function () {
		this.setScrollTop(this.getScrollBounds().maxTop);
	},

	/**
	* Scrolls to the right edge of the scrolling region.
	*
	* @public
	*/
	scrollToRight: function () {
		this.setScrollLeft(this.getScrollBounds().maxLeft);
	},

	/**
	* Scrolls to the left edge of the scrolling region.
	*
	* @public
	*/
	scrollToLeft: function () {
		this.setScrollLeft(0);
	},

	/**
	* Ensures scroll position is in bounds.
	*
	* @public
	*/
	stabilize: function () {
		var s = this.getStrategy();
		if (s.stabilize) {
			s.stabilize();
		}
	},

	/**
	* Sends the [useMouseWheel]{@link enyo.Scroller#useMouseWheel} property to the scroll 
	* strategy.
	*
	* @private
	*/
	useMouseWheelChanged: function () {
		this.$.strategy.setUseMouseWheel(this.useMouseWheel);
	},

	/**
	* @private
	*/
	resize: kind.inherit(function (sup) {
		return function () {
			if (this.getAbsoluteShowing(true)) {
				sup.apply(this, arguments);
			}
		};
	})
});

// provide a touch scrolling solution by default when the environment is mobile
if (Scroller.hasTouchScrolling()) {
	Scroller.prototype.strategyKind = Scroller.getTouchStrategy();
}
},{"../../../enyo":12,"../Control":26,"../ScrollStrategy":64,"../TouchScrollStrategy":78,"../TranslateScrollStrategy":79,"../kind":96,"../platform":102,"../utils":106}],121:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');
/**
* {@link moon.BodyText} is a simple control for displaying body text in an app.
* It is designed to align with other text-based controls.
*
* @class moon.BodyText
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.BodyText.prototype */ {

	/**
	* @private
	*/
	name: 'moon.BodyText',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-body-text moon-body-text-spacing moon-body-text-control',

	/**
	*
	* When `true`, HTML tags are allowed in the control's content.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	allowHtml: true,

	/**
	* @private
	* @lends moon.BodyText.prototype
	*/
	published: {

		/**
		* If `true`, text content is centered; otherwise, it is left-aligned.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		centered: false
	},

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.centeredChanged();
	},

	/**
	* @private
	*/
	contentChanged: function () {
		Control.prototype.contentChanged.apply(this, arguments);
		this.detectTextDirectionality();
		if (this.hasNode()) { this.bubble('onRequestSetupBounds'); }
	},

	/**
	* @private
	*/
	centeredChanged: function () {
		this.applyStyle('text-align', this.centered ? 'center' : null);
	}
});

},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119}],122:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	log = require('../../../enyo/lib/logger'),
	ri = require('../../../enyo/lib/resolution');

var
	DockRightArranger = require('../../../layout/lib/DockRightArranger');

/**
* @typedef {Object} moon.BreadcrumbArranger~PanelInfoObject
* @property {Boolean} breadcrumb - Whether panel is in breadcrumb (collapsed) form.
* @property {Boolean} offscreen - Whether panel is offscreen.
* @public
*/

/**
* {@link moon.BreadcrumbArranger} is an {@link enyo.Arranger} that displays the active
* control, along with some number of breadcrumbs on the right side. This is the default
* arranger for both the "Always Viewing" and "Activity" patterns; if you are using
* {@link moon.Panel} with either of these patterns, you don't need to specify an arranger
* explicitly.
*
* The breadcrumbs reflect the sequence of panels that the user has already seen.
*
* Transitions between arrangements are handled by sliding the new control in from the
* right. If the old controls can fit within the width of the container, they will slide
* to the left; if not, they will collapse to the left.
*
* The control's child components may be of any kind; by default, they are instances of
* {@link moon.Panel}.
*
* ```
* {name: 'panels', kind: 'moon.Panels', pattern: 'alwaysviewing', classes: 'enyo-fit', components: [
* 	{title: 'First', components: [
* 	{kind: 'moon.Item', style: 'margin-top:20px;', content: 'Item One'},
* 		{kind: 'moon.Item', content: 'Item Two'},
* 		{kind: 'moon.Item', content: 'Item Three'},
* 		{kind: 'moon.Item', content: 'Item Four'},
* 		{kind: 'moon.Item', content: 'Item Five'}
* 	]},
* 	{title: 'Second', joinToPrev: true, components: [
* 		{kind: 'moon.Item', style: 'margin-top:20px;', content: 'Item One'},
* 		{kind: 'moon.Item', content: 'Item Two'},
* 		{kind: 'moon.Item', content: 'Item Three'},
* 		{kind: 'moon.Item', content: 'Item Four'},
* 		{kind: 'moon.Item', content: 'Item Five'}
* 	]}
* ]}
* ```
*
* @class moon.BreadcrumbArranger
* @extends enyo.DockRightArranger
* @public
*/
module.exports = kind(
	/** @lends moon.BreadcrumbArranger.prototype */ {

	/**
	* @private
	*/
	name: 'moon.BreadcrumbArranger',

	/**
	* @private
	*/
	kind: DockRightArranger,

	/**
	* Returns an object containing information about the state of a given panel (identified by
	* `panelIndex`) within a given arrangement (identified by `activeIndex`).
	*
	* Specifically, {@link moon.BreadcrumbArranger} reports whether a panel is offscreen, and
	* whether it is in breadcrumb (collapsed) form.
	*
	* @param {Number} panelIndex - Index of the panel for which to get info.
	* @param {Number} activeIndex - Index of the arranger the panel is in.
	* @returns {moon.BreadcrumbArranger~PanelInfoObject}
	* @public
	*/
	getPanelInfo: function (panelIndex, activeIndex) {
		return {
			breadcrumb: this.isBreadcrumb(panelIndex, activeIndex),
			offscreen: this.isOffscreen(panelIndex, activeIndex)
		};
	},

	/**
	* @private
	*/
	breadcrumbWidth: 234,

	/**
	* @private
	*/
	debug: false,

	/**
	* @private
	*/
	size: function() {
		var containerWidth = this.getContainerWidth(),
			panels = this.container.getPanels(),
			i;

		// Set up default widths for each panel
		for (i = 0; i < panels.length; i++) {
			// If panels have already been stretched, unstretch them before doing calculations
			if (panels[i].actualWidth) {
				panels[i].applyStyle('width', dom.unit(panels[i].width, 'rem'));
			}

			panels[i].set('animate', this.container.animate);
			panels[i].actualWidth = null;
			panels[i].width = panels[i].getBounds().width;
		}

		// Calculate which panels will be joined
		this.joinedPanels = this.calculateJoinedPanels(containerWidth);

		// Stretch all panels to fit vertically
		this.applyVerticalFit();

		// Reset panel arrangement positions
		this.container.transitionPositions = this.calculateTransitionPositions(containerWidth, this.joinedPanels);
		this.adjustTransitionPositionsForJoinedPanels(this.joinedPanels);

		// Update individual panel widths to account for _joinedPanels_
		this.updateWidths(containerWidth, this.joinedPanels);
		this.applyUpdatedWidths();

		// Calculate _this.breadcrumbPositions_
		this.calcBreadcrumbPositions(this.joinedPanels);

		if (this.debug) {
			log('transitionPositions:', this.container.transitionPositions);
			log('breadcrumbPositions:', this.breadcrumbPositions);
		}
	},

	/**
	* @private
	*/
	calculateJoinedPanels: function (containerWidth) {
		containerWidth = containerWidth || this.getContainerWidth();

		var panels = this.container.getPanels(),
			joinedPanels = {};

		for (var panelIndex = 0; panelIndex < panels.length; panelIndex++) {
			for (var index = 0; index < panels.length; index++) {
				if (panelIndex > index) {
					joinedPanels[panelIndex + '.' + index] = this.isPanelJoined(panelIndex, index, containerWidth);
				}
			}
		}

		return this.formatJoinedPanels(joinedPanels);
	},

	/**
	* @private
	*/
	isPanelJoined: function (panelIndex, index, containerWidth) {
		containerWidth = containerWidth || this.getContainerWidth();

		var panels = this.container.getPanels(),
			xPos = this.getBreadcrumbEdge(index),
			i = panelIndex;

		while(i > index) {
			if (!panels[i].joinToPrev) {
				return false;
			}

			xPos += panels[i].width;
			i--;
		}

		if(xPos + panels[index].width > containerWidth) {
			return false;
		}

		return true;
	},

	/**
	* @private
	*/
	formatJoinedPanels: function (joinedPanels) {
		var panels = this.container.getPanels(),
			ret = [], i, j;

		for (i = 0; i < panels.length; i++) {
			for (j = 0; j < panels.length; j++) {
				if (!joinedPanels[i+'.'+j]) {
					continue;
				}

				ret[i] = ret[i] || [];
				ret[i].push(j);
			}
		}

		return ret;
	},

	/**
	* @private
	*/
	calculateTransitionPositions: function (containerWidth, joinedPanels) {
		var panels = this.container.getPanels(),
			tp = {};

		for (var panelIndex = 0; panelIndex < panels.length; panelIndex++) {
			for (var index = 0; index < panels.length; index++) {
				tp[panelIndex + '.' + index] = this.calculateXPos(panelIndex, index, containerWidth, joinedPanels);
			}
		}

		return tp;
	},

	/**
	* @private
	*/
	calculateXPos: function (panelIndex, index, containerWidth, joinedPanels) {
		var breadcrumbEdge = this.getBreadcrumbEdge(index),
			breadcrumbWidth = ri.scale(this.breadcrumbWidth),
			panels = this.container.getPanels(),
			xPos,
			i,
			patternOffset = 0;

		if (this.container.pattern == 'activity') {
			// add some positional sugar just for the activity breadcrumbs
			if (index === 0) {
				patternOffset = breadcrumbEdge;
			}
			else {
				patternOffset = breadcrumbEdge - breadcrumbWidth;
			}
			patternOffset/= 2;
		}

		// each active item should be at _breadcrumbEdge_
		if (index === panelIndex) {
			return breadcrumbEdge + this.getBreadcrumbGap()/2 - patternOffset;

		// breadcrumbed panels should be positioned to the left
		} else if (index > panelIndex) {
			return breadcrumbEdge - (index - panelIndex) * breadcrumbWidth - this.getBreadcrumbGap()/2 - patternOffset;

		// upcoming panels should be layed out to the right if _joinToPrev_ is true
		} else {
			// If this panel is not joined at this index, put it off the screen to the right
			if (!joinedPanels[panelIndex] || joinedPanels[panelIndex].indexOf(index) === -1) {
				return containerWidth;
			}

			xPos = breadcrumbEdge;

			i = panelIndex;
			while (i > index) {
				if (panels[i - 1]) {
					xPos += panels[i - 1].width - patternOffset;
				}
				i--;
			}

			return xPos;
		}
	},

	/**
	* @private
	*/
	recalculatePanelTransitionPositions: function (panelIndex, containerWidth, joinedPanels) {
		var panels = this.container.getPanels();
		for (var i = 0; i < panels.length; i++) {
			this.container.transitionPositions[panelIndex + '.' + i] = dom.unit(this.calculateXPos(panelIndex, i, containerWidth, joinedPanels), 'rem');
		}
	},

	/**
	* @private
	*/
	adjustTransitionPositionsForJoinedPanels: function (joinedPanels) {
		var tp = this.container.transitionPositions,
			panels = this.container.getPanels();

		for (var i = panels.length; i >= 0; i--) {
			if (!joinedPanels[i]) {
				continue;
			}

			for (var j = joinedPanels[i].length - 1; j >= 0; j--) {
				for (var k = 0; k < panels.length; k++) {
					tp[k+'.'+i] = tp[k+'.'+joinedPanels[i][j]];
				}
			}
		}
	},

	/**
	* @private
	*/
	updateWidths: function (containerWidth, joinedPanels) {
		var panels = this.container.getPanels(),
			diff,
			i, j;

		// Calculate stretched widths for panels at the end of given index
		for (i = 0; i < joinedPanels.length; i++) {
			if (!joinedPanels[i]) {
				continue;
			}

			var totalWidth = panels[i].width +
				this.getBreadcrumbEdge(joinedPanels[i][0]) +
				this.getBreadcrumbGap();

			// Add the width of each additional panel that is visible at this index
			for (j = 0; j < joinedPanels[i].length; j++) {
				// If this panel is joined with another one that has already been stretched, reposition
				// it so everything is kosher. TODO - this is a strange edge case, needs to be discussed.
				if (panels[joinedPanels[i][j]].actualWidth) {
					totalWidth += panels[joinedPanels[i][j]].actualWidth;
					// TODO - this.recalculatePanelTransitionPositions(i, containerWidth, joinedPanels);
				} else {
					totalWidth += panels[joinedPanels[i][j]].width;
				}
			}

			diff = containerWidth - totalWidth;
			panels[i].actualWidth = panels[i].width + diff;

			if (this.debug) {
				log(i, panels[i].width, '-->', panels[i].actualWidth);
			}
		}

		// Stretch all panels that should fill the whole width
		for (i = 0; i < panels.length; i++) {
			if (!panels[i].actualWidth) {
				var match = false;
				for (j = 0; j < joinedPanels.length; j++) {
					if (joinedPanels[j] && joinedPanels[j].indexOf(i) >= 0) {
						match = true;
					}
				}
				panels[i].actualWidth = (match) ?
					panels[i].width :
					containerWidth - this.getBreadcrumbEdge(i) - this.getBreadcrumbGap();
			}
		}
	},

	/**
	* @private
	*/
	applyUpdatedWidths: function () {
		var panels = this.container.getPanels();
		for (var i = 0; i < panels.length; i++) {
			panels[i].applyStyle('width', dom.unit(panels[i].actualWidth, 'rem'));
		}
	},

	/**
	* @private
	*/
	calcBreadcrumbPositions: function (joinedPanels) {
		var panels = this.container.getPanels(),
			isBreadcrumb,
			index,
			i;

		this.breadcrumbPositions = {};

		for (i = 0; i < panels.length; i++) {
			for (index = 0; index < panels.length; index++) {
				isBreadcrumb = false;

				if (index > i) {
					isBreadcrumb = !(joinedPanels[index] && joinedPanels[index].indexOf(i) > -1);
				}

				this.breadcrumbPositions[i+'.'+index] = isBreadcrumb;
			}
		}
	},

	/**
	* @private
	*/
	start: function () {
		this.inherited(arguments);

		var tp = this.container.transitionPositions;
		var panels = this.container.getPanels();
		var panel;
		var hiding = [];
		for(var i=0;(panel = panels[i]);i++) {
			if (tp[i+'.'+this.container.toIndex] === 0) {
				var width = panel.getBounds().width;
				var nextTp = tp[i+1+'.'+this.container.toIndex];
				if (width > nextTp) {
					hiding.push(i);
				}
			}
		}

		this.container.hiddenPanels = hiding;
	},

	/**
	* @private
	*/
	arrange: function (inC, inName) {
		var c$ = this.container.getPanels();
		var s = this.container.clamp(inName);
		var i, c, xPos;

		for (i=0; (c=c$[i]); i++) {
			xPos = this.container.transitionPositions[i + '.' + s];
			// If the panel is even a little off the screen,
			if (xPos < 0) {
				// lets check if its fully off.
				var containerPadding = this.getContainerPadding();
				if (xPos <= ((ri.scale(this.breadcrumbWidth) - containerPadding.left) * -1)) {
					// Its visible portion is, so lets nudge it off entirely so it can't be
					// highlighted using just its non-visible edge
					xPos -= containerPadding.right;
				}
			}
			this.arrangeControl(c, {left: xPos});
		}
	},

	/**
	* @private
	*/
	isOffscreen: function (panelIndex, activeIndex) {
		if (!this.container.transitionPositions) {
			return;
		}
		var transitionPosition = this.container.transitionPositions[panelIndex + '.' + activeIndex];
		var screenEdge = this.container.panelCoverRatio == 1 ? this.getBreadcrumbEdge(panelIndex) : 0;
		if (transitionPosition < 0) {
			return transitionPosition + ri.scale(this.breadcrumbWidth) <= screenEdge;
		} else {
			return transitionPosition >= this.containerBounds.width;
		}
	},

	/**
	* @private
	*/
	isBreadcrumb: function (panelIndex, activeIndex) {
		return this.breadcrumbPositions && this.breadcrumbPositions[panelIndex + '.' + activeIndex];
	},

	/**
	* @private
	*/
	calcBreadcrumbEdges: function () {
		this.breadcrumbEdges = [];
		for (var i = 0, panel; (panel = this.container.getPanels()[i]); i++) {
			this.breadcrumbEdges[i] = (i === 0) ? 0 : ri.scale(this.breadcrumbWidth);
		}
	},

	/**
	* @private
	*/
	getContainerWidth: function () {
		return this.containerBounds.width;
	},

	/**
	* @private
	*/
	getBreadcrumbGap: function () {
		return this.container.breadcrumbGap || 0;
	},

	/**
	* @private
	*/
	getBreadcrumbEdge: function (index) {
		var leftMargin = this.getContainerWidth() * (1 - this.container.panelCoverRatio);
		if (this.container.panelCoverRatio == 1) {
			var containerPadding = this.getContainerPadding();
			leftMargin += containerPadding.left + containerPadding.right;
		}
		if (this.container.showFirstBreadcrumb && index !== 0) {
			leftMargin += ri.scale(this.breadcrumbWidth);
		}
		return leftMargin;
	},

	/**
	* Sets bounds for each panel to fit vertically.
	* @private
	*/
	applyVerticalFit: function () {
		var panels = this.container.getPanels(),
			padding = this.getContainerPadding();

		for (var i = 0, panel; (panel = panels[i]); i++) {
			panel.setBounds({top: dom.unit(padding.top, 'rem'), bottom: dom.unit(padding.bottom, 'rem')});
		}
	},

	/**
	* @private
	*/
	getContainerPadding: function () {
		return this.container.hasNode() ? dom.calcPaddingExtents(this.container.node) : {};
	},

	/**
	* Returns `true` if any panels will move in the transition from `fromIndex` to `toIndex`.
	* @private
	*/
	shouldArrange: function (fromIndex, toIndex) {
		if (!(fromIndex >= 0 && toIndex >= 0)) {
			return;
		}

		var transitionPositions = this.container.transitionPositions,
			panelCount = this.container.getPanels().length,
			panelIndex,
			from,
			to;

		for (panelIndex = 0; panelIndex < panelCount; panelIndex++) {
			from = transitionPositions[panelIndex + '.' + fromIndex];
			to = transitionPositions[panelIndex + '.' + toIndex];

			if (from !== to) {
				return true;
			}
		}

		return false;
	}
});
},{"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/logger":97,"../../../enyo/lib/resolution":104,"../../../layout/lib/DockRightArranger":112,"../../../moonstone":119}],125:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	utils = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

/**
* {@link moon.CaptionDecorator} wraps a control with a caption. The position of the
* caption is defined via the [side]{@link moon.CaptionDecorator#side} property.
*
* ```
* 	{kind: 'moon.CaptionDecorator', side: 'top', content: 'Top Label', components: [
* 		{kind: 'moon.Button', content: 'My Button', ontap: 'buttonTapped'},
* 	]}
* ```
*
* @class moon.CaptionDecorator
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.CaptionDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'moon.CaptionDecorator',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocus: 'spotFocus',
		onSpotlightBlur:  'spotBlur'
	},

	/**
	* @private
	* @lends moon.CaptionDecorator.prototype
	*/
	published: {

		/**
		* The position of the caption with respect to the wrapped control; valid
		* values are `'top'`, `'bottom'`, `'left'`, and `'right'`.
		*
		* @type {String}
		* @default 'top'
		* @public
		*/
		side: 'top',

		/**
		* If `true`, the caption is only shown when the wrapped control has Spotlight
		* focus; otherwise, it is always visible.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		showOnFocus: false
	},

	/**
	* @private
	*/
	captionPositioned: false,

	/**
	* @private
	*/
	clientBounds: null,

	/**
	* @private
	*/
	captionBounds: null,

	/**
	* @private
	*/
	decoratorBounds: null,

	/**
	* @private
	*/
	classes: 'moon-button-caption-decorator',

	/**
	* @private
	*/
	components: [
		{kind: Control, name: 'leftCaption',     classes: 'moon-divider-text moon-caption left',   canGenerate: false},
		{kind: Control, name: 'topCaption',      classes: 'moon-divider-text moon-caption top',    canGenerate: false},
		{kind: Control, name: 'client',          classes: 'moon-divider-text moon-caption-client'},
		{kind: Control, name: 'rightCaption',    classes: 'moon-divider-text moon-caption right',  canGenerate: false},
		{kind: Control, name: 'bottomCaption',   classes: 'moon-divider-text moon-caption bottom', canGenerate: false}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.sideChanged();
		this.showOnFocusChanged();
	},

	/**
	* If [showOnFocus]{@link moon.CaptionDecorator#showOnFocus} is `true`, caption
	* position is reset on reflow.
	*
	* @private
	*/
	reflow: function () {
		Control.prototype.reflow.apply(this, arguments);

		if (this.getShowOnFocus()) {
			this.resetCaptionPosition();
		}
	},

	/**
	* Retrieves [side]{@link moon.CaptionDecorator#side} value.
	*
	* @private
	*/
	getSide: function () {
		return this.side || 'top';
	},

	// Change handlers

	/**
	* @private
	*/
	sideChanged: function () {
		var side = this.getSide();

		this.$.topCaption.canGenerate =     (side === 'top');
		this.$.rightCaption.canGenerate =   (side === 'right');
		this.$.bottomCaption.canGenerate =  (side === 'bottom');
		this.$.leftCaption.canGenerate =    (side === 'left');

		// Update the content, including position if needed
		this.contentChanged();

		// If this control has already been rendered, re-render to update caption side
		if (this.hasNode()) {
			// Re-render to display caption on proper side
			this.render();
		}
	},

	/**
	* @private
	*/
	showOnFocusChanged: function () {
		this.addRemoveClass('showOnFocus', this.getShowOnFocus());

		// If `showOnFocus` is `true`, reset caption position
		if (this.hasNode() && this.getShowOnFocus()) {
			this.resetCaptionPosition();
		}
	},

	/**
	* @private
	*/
	contentChanged: function () {
		this.$[this.getSide()+'Caption'].setContent(this.getContent());

		// If `showOnFocus` is `true`, reset caption position
		if (this.hasNode() && this.getShowOnFocus()) {
			this.resetCaptionPosition();
		}
	},

	// Event handlers

	/**
	* Adds `spotlight` class when button is focused, and calculates caption position
	* if required.
	*
	* @private
	*/
	spotFocus: function () {
		this.addClass('spotlight');

		if (this.hasNode() && this.getShowOnFocus()) {
			this.positionCaption();
		}
	},

	/**
	* Removes `spotlight` class when button is blurred.
	*
	* @private
	*/
	spotBlur: function () {
		this.removeClass('spotlight');
	},

	// Caption positioning

	/**
	* Returns current caption control.
	*
	* @private
	*/
	getCaptionControl: function () {
		return this.$[this.getSide()+'Caption'];
	},

	/**
	* Resets cached position values and repositions caption if currently spotted.
	*
	* @private
	*/
	resetCaptionPosition: function () {
		this.resetCachedBounds();
		this.captionPositioned = false;

		if (this.hasNode() && this.hasClass('spotlight')) {
			this.positionCaption();
		}
	},

	/**
	* Positions caption based on the value of [side]{@link moon.CaptionDecorator#side}.
	*
	* @private
	*/
	positionCaption: function () {
		if (this.captionPositioned) {
			return;
		}

		var bounds = this.getDecoratorBounds(),
			clientBounds = this.getClientBounds(),
			captionBounds = this.getCaptionBounds();

		switch (this.getSide()) {
		case 'left':
			this.centerCaptionVertically(bounds, captionBounds);
			this.positionCaptionAtLeftEdge(bounds, clientBounds, captionBounds);
			break;
		case 'right':
			this.centerCaptionVertically(bounds, captionBounds);
			this.positionCaptionAtRightEdge(bounds, clientBounds, captionBounds);
			break;
		case 'top':
			this.centerCaptionHorizontally(bounds, captionBounds);
			this.positionCaptionAtTopEdge(bounds, clientBounds, captionBounds);
			break;
		case 'bottom':
			this.centerCaptionHorizontally(bounds, captionBounds);
			this.positionCaptionAtBottomEdge(bounds, clientBounds, captionBounds);
			break;
		}

		this.captionPositioned = true;
	},

	/**
	* Centers caption control vertically, relative to `this.decoratorBounds.height`.
	*
	* @private
	*/
	centerCaptionVertically: function (inBounds, inCaptionBounds) {
		this.getCaptionControl().applyStyle('top', dom.unit((inBounds.height - inCaptionBounds.height) / 2, 'rem'));
	},

	/**
	* Centers caption control horizontally, relative to `this.decoratorBounds.width`.
	*
	* @private
	*/
	centerCaptionHorizontally: function (inBounds, inCaptionBounds) {
		this.getCaptionControl().applyStyle('left', dom.unit((inBounds.width - inCaptionBounds.width) / 2, 'rem'));
	},

	/**
	* Positions caption at left edge of `this.$.client`.
	*
	* @private
	*/
	positionCaptionAtLeftEdge: function (inBounds, inClientBounds, inCaptionBounds) {
		var position = (-1 * inCaptionBounds.width) + ((inBounds.width - inClientBounds.width)/2) - inCaptionBounds.marginRight;
		this.getCaptionControl().applyStyle('left', dom.unit(position, 'rem'));
	},

	/**
	* Positions caption at right edge of `this.$.client`.
	*
	* @private
	*/
	positionCaptionAtRightEdge: function (inBounds, inClientBounds, inCaptionBounds) {
		var position = inBounds.width - ((inBounds.width - inClientBounds.width)/2);
		this.getCaptionControl().applyStyle('left', dom.unit(position, 'rem'));
	},

	/**
	* Positions caption at top edge of `this.$.client`.
	*
	* @private
	*/
	positionCaptionAtTopEdge: function (inBounds, inClientBounds, inCaptionBounds) {
		var position = (-1 * this.getCaptionBounds().height) + ((inBounds.height - inClientBounds.height)/2) - inCaptionBounds.marginBottom;
		this.getCaptionControl().applyStyle('top', dom.unit(position, 'rem'));
	},

	/**
	* Positions caption at bottom edge of `this.$.client`.
	*
	* @private
	*/
	positionCaptionAtBottomEdge: function (inBounds, inClientBounds, inCaptionBounds) {
		var position = inBounds.height - ((inBounds.height - inClientBounds.height)/2);
		this.getCaptionControl().applyStyle('top', dom.unit(position, 'rem'));
	},

	/**
	* Caches result from `this.getBounds()` call, saving in `this.decoratorBounds`.
	*
	* @private
	*/
	getDecoratorBounds: function () {
		this.decoratorBounds = this.decoratorBounds || this.getBounds();
		return this.decoratorBounds;
	},

	/**
	* Caches caption bounds, saving in `this.captionBounds`.
	*
	* @private
	*/
	getCaptionBounds: function () {
		this.captionBounds = this.captionBounds || utils.mixin(this.getCaptionControl().getBounds(), this.getCaptionMarginBounds());
		return this.captionBounds;
	},

	/**
	* Caches client bounds, saving in `this.clientBounds`.
	*
	* @private
	*/
	getClientBounds: function () {
		this.clientBounds = this.clientBounds || this.$.client.getBounds();
		return this.clientBounds;
	},

	/**
	* Clears cached bounds.
	*
	* @private
	*/
	resetCachedBounds: function () {
		this.clientBounds = null;
		this.captionBounds = null;
		this.decoratorBounds = null;
	},

	/**
	* Returns margins of caption control.
	*
	* @private
	*/
	getCaptionMarginBounds: function () {
		var margins = dom.calcMarginExtents(this.getCaptionControl().hasNode());
		return {
			marginTop:      margins.top,
			marginRight:    margins.right,
			marginBottom:   margins.bottom,
			marginLeft:     margins.left
		};
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119}],129:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Signals = require('../../../enyo/lib/Signals');

var
	ilib = require('../../../enyo-ilib');

/**
* Used to set a static time for {@link moon.Clock} to display.
*
* @typedef {Object} moon.Clock~DateTimeObject
* @property {Number} year - The year to display.
* @property {Number} month - The month to display.
* @property {Number} day - The day to display.
* @property {Number} hour - The hour to display.
* @property {Number} minute - The minute to display.
* @property {Number} second - The second to display.
* @public
*/

/**
* {@link moon.Clock} is a control that displays clock information.
*
* Example:
*
* ```
*		{kind: 'moon.Clock'}
* ```
*
* @class moon.Clock
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Clock.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Clock',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-clock',

	/**
	* @private
	* @lends moon.Clock.prototype
	*/
	published: {

		/**
		* Refresh time in milliseconds.
		*
		* @type {Number}
		* @default 1000
		* @public
		*/
		refresh: 1000,

		/**
		* A user-provided date; if `undefined`, system date is used. May be either a
		* JavaScript {@glossary Date} object or a {@link moon.Clock~DateTimeObject}
		* describing a static date/time to be displayed.
		*
		* @type {Date|moon.Clock~DateTimeObject}
		* @default undefined
		* @public
		*/
		date: undefined,

		/**
		* Current locale used for formatting. May be set after the control is
		* created, in which case the control will be updated to reflect the
		* new value.  Only valid if [iLib]{@glossary ilib} is loaded.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		locale: ''
	},

	/**
	* @private
	*/
	observers: {
		modeChanged: ['mode']
	},

	/**
	* @private
	*/
	components: [
		{name: 'clock', kind: Control, classes: 'moon-bold-text'},
		{kind: Signals, onlocalechange: 'handleLocaleChangeEvent'}
	],

	/**
	* @private
	*/
	_timeDiff: 0,

	/**
	* [iLib]{@glossary ilib} locale info instance; it contains information about the
	* particular locale.
	*
	* @private
	*/
	ilibLocaleInfo: null,

	/**
	* Defines clock mode.
	* If `date` is assigned with JavaScript Date object or `null`, it will be `'normal'`.
	* If `date` is assigned with JavaScript object that indicates the exact time components
	* to be formatted into the clock, it will be `'static'`.
	*
	* @private
	*/
	mode: 'normal',

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.initDefaults();
		this.refreshJob();
	},

	/**
	* @private
	*/
	initILib: function () {
		this.ilibLocaleInfo = new ilib.LocaleInfo(this.locale || undefined);
		var clockPref = this.ilibLocaleInfo.getClock();
		var clock = clockPref !== 'locale' ? clockPref : undefined;

		var fmtParams = {
			locale: this.locale,
			type: 'time',
			time: 'hma',
			useNative: false,
			clock: clock,
			timezone: (this.mode === 'normal') ? 'local' : 'Etc/UTC'
		};

		this._tf = new ilib.DateFmt(fmtParams);
	},

	/**
	* @private
	*/
	initDefaults: function () {
		// Attempt to use the ilib lib
		if (ilib) {
			this.initILib();
		}
	},

	/**
	* @private
	*/
	refreshChanged: function () {
		this.startJob('refresh', this.bindSafely('refreshJob'), this.getRefresh());
	},

	/**
	* @private
	*/
	dateChanged: function () {
		if (this.date && !(this.date instanceof Date)) {
			this.set('mode', 'static');
		} else if(this.date && this.date instanceof Date) {
			this.set('mode', 'normal');
			this._timeDiff = (this.date.getTime() - Date.now()) || 0;
		} else {
			this.set('mode', 'normal');
			this._timeDiff = 0;
		}
		this.refreshJob();
	},

	/**
	* @private
	*/
	refreshJob: function () {
		this.updateDate();
		if (this.mode === 'normal') {
			this.startJob('refresh', this.bindSafely('refreshJob'), this.getRefresh());
		}
	},

	/**
	* @private
	*/
	localeChanged: function () {
		this._refresh();
		this.updateDate();
	},

	/**
	* @private
	*/
	modeChanged: function () {
		this._refresh();
	},

	/**
	* @private
	*/
	_refresh: function () {
		if (this._tf) {
			delete this._tf;
		}
		this.initDefaults();
	},

	/**
	* If user sets time without using a JavaScript Date object, this method
	* parses the object into an array for an `iLib.Date` object.
	*
	* @private
	*/
	parseStaticDate: function (date) {
		return {
			year: (date.year !== undefined) ? date.year : 0,
			month: (date.month !== undefined) ? date.month : 1,
			day: (date.day !== undefined) ? date.day : 0,
			hour: (date.hour !== undefined) ? date.hour : 0,
			minute: (date.min !== undefined) ? date.min : 0,
			second: (date.sec !== undefined) ? date.sec : 0,
			timezone: 'Etc/UTC'
		};
	},

	/**
	* @private
	*/
	updateDate: function () {
		var d, h;
		if (this.mode === 'normal') {
			d = new Date(Date.now() + this._timeDiff);
			h = d.getHours();
		} else {
			d = this.date;
			h = (this.date.hour) ? this.date.hour : 0;
		}
		this.updateTime(d, h);
	},

	/**
	* @private
	*/
	updateTime: function (inDate, inHour) {
		var time = '';
		if (this._tf) {
			time = this._tf.format((this.mode === 'normal')	? ilib.Date.newInstance({unixtime: inDate.getTime(), timezone:'Etc/UTC'})
																: ilib.Date.newInstance(this.parseStaticDate(inDate)));
		} else {
			time += (inHour > 12 ? inHour-12: inHour) || 12;
			time += ':' + ('00' + inDate.getMinutes()).slice(-2);
			time += inHour > 11 ? 'pm' : 'am';
		}
		this.$.clock.setContent(time);
	},

	/**
	* @private
	*/
	handleLocaleChangeEvent: function () {
		this._refresh();
		this.updateDate();
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Control":26,"../../../enyo/lib/Signals":68,"../../../enyo/lib/kind":96,"../../../moonstone":119}],147:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control');

var
	$L = require('../i18n');


/**
* {@link moon.ExpandableTextButton} is a control used inside of {@link moon.ExpandableText}.
*
* @class moon.ExpandableTextButton
* @extends enyo.Control
* @ui
* @private
*/
var ExpandableTextButton = kind(
	/** @lends moon.ExpandableTextButton.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandableTextButton',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	* @lends moon.ExpandableTextButton.prototype
	*/
	published: {

		/**
		* Button text when [collapsed]{@link moon.ExpandableTextButton#collapsed} is `true`.
		*
		* @type {String}
		* @default 'more'
		* @public
		*/
		moreContent: $L('more'),		// i18n 'MORE' label in moon.ExpandableTextButton widget

		/**
		* Button text when [collapsed]{@link moon.ExpandableTextButton#collapsed} is `false`.
		*
		* @type {String}
		* @default 'less'
		* @public
		*/
		lessContent: $L('less'),		// i18n 'LESS' label in moon.ExpandableTextButton widget

		/**
		* Boolean value that causes content/class changes.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		collapsed: true
	},

	/**
	* @private
	*/
	handlers: {

		/**
		* {@link enyo.Spotlight#onSpotlightFocus}, the handler bubbles a
		* [requestScrollIntoView]{@link moon.Scroller#requestScrollIntoView} event.
		*/
		onSpotlightFocused	: 'spotFocused'

	},

	/**
	* @private
	*/
	classes: 'moon-body-text moon-expandable-text-button',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.updateContent();
	},

	/**
	* Bubbles a [requestScrollIntoView]{@link moon.Scroller#requestScrollIntoView}
	* event.
	*
	* @fires moon.Scroller#requestScrollIntoView
	* @private
	*/
	spotFocused: function (inSender, inEvent) {
		if (inEvent.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	},

	/**
	* @private
	*/
	moreContentChanged: function () {
		this.updateContent();
	},

	/**
	* @private
	*/
	lessContentChanged: function () {
		this.updateContent();
	},

	/**
	* @private
	*/
	collapsedChanged: function () {
		this.updateContent();
	},

	/**
	* If control is collapsed, sets [content]{@link moon.ExpandableTextButton#content} to 
	* [moreContent]{@link moon.ExpandableTextButton#moreContent} and adds `collapsed` CSS class;
	* otherwise, sets content to [lessContent]{@link moon.ExpandableTextButton#lessContent} and
	* removes `collapsed` CSS class.
	*
	* @private
	*/
	updateContent: function () {
		if (this.collapsed) {
			this.setContent(this.moreContent);
			this.addClass('collapsed');
		} else {
			this.setContent(this.lessContent);
			this.removeClass('collapsed');
		}
	}
});

/**
* Fires when this control expands or collapses.
*
* @event moon.ExpandableText#onExpandCollapse
* @type {Object}
* @property {Boolean} collapsed - Whether the control is currently collapsed.
* @public
*/

/**
* {@link moon.ExpandableText} is a control that allows long bodies of text to be
* expanded and collapsed.
*
* ```
* {kind: 'moon.ExpandableText', collapsed: true, maxLines: 3,
* content: 'I left my heart in San Francisco.'}
* ```
*
* The [onExpandCollapse]{@link moon.ExpandableText#onExpandCollapse} event is fired
* when the control is either expanded or collapsed.
*
* @class moon.ExpandableText
* @extends enyo.Control
* @ui
* @public
*/

var ExpandableText = module.exports = kind(
	/** @lends moon.ExpandableText.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandableText',

	/**
	* @private
	*/
	kind: Control,

	//* @protected
	/**
	* @private
	*/
	classes: 'moon-expandable-text',

	/**
	* @private
	* @lends moon.ExpandableText.prototype
	*/
	published: {

		/**
		* When `true`, content is collapsed.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		collapsed: true,

		/**
		* Maximum number of lines of content to show in collapsed state.
		*
		* @type {Number}
		* @default 3
		* @public
		*/
		maxLines: 3,

		/**
		* Button text when content is collapsed (i.e., 'more' label). Default is
		* locale-aware.
		* @type {String}
		* @default 'more'
		* @public
		*/
		moreContent: $L('more'),

		/**
		* Button text when content is expanded (i.e., 'less' label). Default is
		* locale-aware.
		*
		* @type {String}
		* @default 'less'
		* @public
		*/
		lessContent: $L('less')
	},

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.ExpandableText#onExpandCollapse}
		*/
		onExpandCollapse: ''
	},

	/**
	* @private
	*/
	components:[
		{name: 'client', kind: Control, classes: 'moon-body-text moon-expandable-text-content'},
		{name: 'button', kind: ExpandableTextButton, ontap: 'expandContract'}
	],

	/**
	* @private
	*/
	lineHeight: 32,

	/**
	* @private
	*/
	maxHeight: 96,

	/**
	* @private
	*/
	contentHeight: -1,

	/**
	* @private
	*/
	canCollapse: true,

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.moreContentChanged();
		this.lessContentChanged();
		this.collapsedChanged();
	},

	/**
	* Updates [lineHeight]{@link moon.ExpandableText#lineHeight} after render.
	*
	* @private
	*/
	rendered: function () {
		Control.prototype.rendered.apply(this, arguments);
		this.calcLineHeight();
	},

	/**
	* @private
	*/
	handleResize: function () {
		this.reflow();
	},

	/**
	* Updates [contentHeight]{@link moon.ExpandableText#contentHeight} on reflow.
	*
	* @private
	*/
	reflow: function () {
		this.calcContentHeight();
	},

	/**
	* Toggles value of [collapsed]{@link moon.ExpandableText#collapsed} when
	* `this.$.button` is tapped.
	*
	* @private
	*/
	expandContract: function () {
		this.set('collapsed', !this.collapsed);
	},

	/**
	* Facades `this.$.client.content`.
	*
	* @private
	*/
	contentChanged: function () {
		this.$.client.setContent(this.content);

		if (this.hasNode()) {
			this.reflow();
		}
	},

	/**
	* Facades `this.$.button.moreContent`.
	*
	* @private
	*/
	moreContentChanged: function () {
		this.$.button.setMoreContent(this.moreContent);
	},

	/**
	* Facades `this.$.button.lessContent`.
	*
	* @private
	*/
	lessContentChanged: function () {
		this.$.button.setLessContent(this.lessContent);
	},

	/**
	* Recalculates [maxHeight]{@link moon.ExpandableText#maxHeight} when
	* [lineHeight]{@link moon.ExpandableText#lineHeight} changes.
	*
	* @private
	*/
	lineHeightChanged: function () {
		this.calcMaxHeight();
	},

	/**
	* Recalculates [maxHeight]{@link moon.ExpandableText#maxHeight} when
	* [maxLines]{@link moon.ExpandableText#maxLines} changes.
	*
	* @private
	*/
	maxLinesChanged: function () {
		this.calcMaxHeight();
	},

	/**
	* When [collapsed]{@link moon.ExpandableText#collapsed} changes, adds/removes the
	* line clamp, and pushes state to `this.$.button`. If the node has rendered, bubbles
	* [onExpandCollapse]{@link moon.ExpandableText#onExpandCollapse} event.
	*
	* @fires moon.ExpandableText#onExpandCollapse
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	collapsedChanged: function () {
		this.addRemoveLineClamp(this.collapsed);
		this.$.button.setCollapsed(this.collapsed);
		if (this.hasNode()) {
			this.doExpandCollapse({collapsed: this.collapsed});
		}
		this.bubble('onRequestScrollIntoView', {scrollInPointerMode: true});
	},

	/**
	* Updates [canCollapse]{@link moon.ExpandableText#canCollapse} when
	* [maxHeight]{@link moon.ExpandableText#maxHeight} changes.
	*
	* @private
	*/
	maxHeightChanged: function () {
		this.calcCanCollapse();
		this.addRemoveLineClamp(this.collapsed);
	},

	/**
	* Updates [canCollpase]{@link moon.ExpandableText#canCollapse} when
	* [contentHeight]{@link moon.ExpandableText#contentHeight} changes.
	*
	* @private
	*/
	contentHeightChanged: function () {
		this.calcCanCollapse();
	},

	/**
	* Updates `this.$.button.showing` when
	* [canCollapse]{@link moon.ExpandableText#canCollapse} changes.
	*
	* @private
	*/
	canCollapseChanged: function () {
		this.$.button.setShowing(this.canCollapse);
	},

	/**
	* Updates [maxHeight]{@link moon.ExpandableText#maxHeight}.
	*
	* @private
	*/
	calcMaxHeight: function () {
		this.set('maxHeight', this.maxLines * this.lineHeight);
	},

	/**
	* Calculates line height of content and sets
	* [lineHeight]{@link moon.ExpandableText#lineHeight}.
	*
	* @private
	*/
	calcLineHeight: function () {
		var lineHeight = parseInt(dom.getComputedStyleValue(this.$.client.hasNode(), 'line-height'), 10);
		this.set('lineHeight', (lineHeight > 0) ? lineHeight : null);
	},

	/**
	* Updates [contentHeight]{@link moon.ExpandableText#contentHeight} by unclamping
	* `this.$.client` and measuring it, before returning it to its previous state.
	*
	* @private
	*/
	calcContentHeight: function () {
		var contentHeight;
		this.addRemoveLineClamp(false);
		contentHeight = (this.$.client.hasNode()) ? this.$.client.hasNode().getBoundingClientRect().height : 0;
		this.addRemoveLineClamp(this.collapsed);
		this.set('contentHeight', contentHeight);
	},

	/**
	* Determines whether this control has enough content to collapse.
	*
	* @private
	*/
	calcCanCollapse: function () {
		this.set('canCollapse', this.contentHeight > this.maxHeight);
	},

	/**
	* @param {Boolean} inAdd Whether to add or remove `webkit-line-clamp` style.
	* @private
	*/
	addRemoveLineClamp: function (inAdd) {
		this.$.client.applyStyle('-webkit-line-clamp', (inAdd) ? this.maxLines : null);
	}
});

ExpandableText.ExpandableTextButton = ExpandableTextButton;
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../i18n":203}],151:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control'),
	HTMLStringDelegate = require('../../../enyo/lib/HTMLStringDelegate');

/**
* Event sent to {@link moon.HighlightText} to turn on highlighting.
*
* @event moon.HighlightText#onHighlight
* @type {Object}
* @property {String|RegExp} highlight - String or regular expression specifying the text or
*	pattern to highlight.
* @public
*/

/**
* Event sent to {@link moon.HighlightText} to turn off highlighting. No additional data
* is sent with this event.
*
* @event moon.HighlightText#onUnHighlight
* @type {Object}
* @public
*/

var HighlightTextDelegate = Object.create(HTMLStringDelegate);

HighlightTextDelegate.generateInnerHtml = function (control) {
	var i = 0, child;
	// flow can alter the way that html content is rendered inside
	// the container regardless of whether there are children.
	control.flow();
	if (control.children.length) {
		// If marqueeText is created inside of highlightText then it needs to pass search keyword to children
		for (; (child = control.children[i]); ++i) {
			child.search = control.search;
			child.highlightClasses = control.highlightClasses; // this is not included in search, so passing it
		}
		return this.generateChildHtml(control);
	}
	else {
		if (control.search && control.content) {
			return control.content.replace(control.search, control.bindSafely(function (s) {
				return '<span style=\'pointer-events:none;\' class=\'' + this.highlightClasses + '\'>' + dom.escape(s) + '</span>';
			}));
		} else {
			return dom.escape(control.get('content'));
		}
	}
};

/**
* {@link moon.HighlightText} is a control that displays highlighted text.  When
* the [highlight]{@link moon.HighlightText#highlight} property is set or an
* [onHighlight]{@link moon.HighlightText#onHighlight} event is received,
* it will highlight a specified string if that string is found within the
* control's content.
*
* For example, let's say we have the following control:
*
* ```
* {kind: 'moon.HighlightText', name: 'myHT', content: 'Hello World!'}
* ```
* In response to the event
*
* ```
* this.waterfall('onHighlight', {highlight: 'Hello'});
* ```
* or the direct API call
*
* ```
* this.$.myHT.set('highlight', 'Hello');
* ```
*
* the word 'Hello' will be highlighted.
*
* The highlighting will be turned off when an
* [onUnHighlight]{@link moon.HighlightText#onUnHighlight} event is received.
*
* ```
* this.waterfall('onUnHighlight');
* ```
* or when [highlight]{@link moon.HighlightText#highlight} is set to a **falsy** value.
*
* ```
* this.$.myHT.set('highlight', '');
* ```
*
* @class moon.HighlightText
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.HighlightText.prototype */ {

	/**
	* @private
	*/
	name: 'moon.HighlightText',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	* @lends moon.HighlightText.prototype
	*/
	published: {

		/**
		* String or regular expression specifying the text or pattern to highlight.
		* Setting this to an empty string, a **falsy** value, or an empty regex
		* will disable highlighting.
		*
		* @type {String|RegExp}
		* @default ''
		* @public
		*/
		highlight: '',

		/**
		* If `true`, only case-sensitive matches of the string to highlight will be
		* highlighted.  This property will be ignored if the
		* [highlight]{@link moon.HighlightText#highlight} property is set to a regular
		* expression (you may use the `'i'` modifier to create a case-insensitive regex).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		caseSensitive: false,

		/**
		* The default CSS class to apply to highlighted content.
		*
		* @type {String}
		* @default 'moon-highlight-text-highlighted'
		* @public
		*/
		highlightClasses: 'moon-highlight-text-highlighted'
	},

	/**
	* @private
	*/
	renderDelegate: HighlightTextDelegate,

	/**
	* @private
	*/
	handlers: {
		onHighlight: 'onHighlightHandler',
		onUnHighlight: 'unHighlightHandler'
	},

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.highlightChanged();
	},

	/**
	* @private
	*/
	highlightChanged: function () {
		if (this.highlight) {
			if (this.highlight instanceof RegExp) {
				// Make sure the regex isn't empty
				this.search = (''.match(this.highlight)) ? null : this.highlight;
			} else {
				// Escape string for use in regex (standard regex escape from google)
				var escaped = this.highlight.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
				this.search = new RegExp(escaped, this.caseSensitive ? 'g' : 'ig');
			}
		} else {
			this.search = false;
		}
		if (this.hasNode()) {
			this.contentChanged();
		}
	},

	/**
	* @private
	*/
	caseSensitiveChanged: function () {
		this.highlightChanged();
	},

	/**
	* @private
	*/
	onHighlightHandler: function (inSender, inEvent) {
		this.setHighlight(inEvent.highlight);
		return true;
	},

	/**
	* @private
	*/
	unHighlightHandler: function (inSender, inEvent) {
		this.setHighlight('');
		return true;
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/HTMLStringDelegate":39,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../moonstone":119}],152:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	ready = require('../../../enyo/lib/ready'),
	util = require('../../../enyo/lib/utils'),
	Signals = require('../../../enyo/lib/Signals');

/**
* The `moon.History` singleton provides an abstract way of handling historical state in an app,
* working in tandem with the native window.history mechanism. The current implementation has
* built-in support for handling "back" actions.
*
* @name moon.History
* @public
*/
var History = module.exports = kind.singleton({

	/**
	* @private
	*/
	name: 'moon.History',

	/**
	* The stack of "back" action targets and handlers.
	*
	* @private
	*/
	_backHistoryStack: [],

	/**
	* If pushstate() is called during popstate is in progress,
	* we pushed it into this queue.
	*
	* @private
	*/
	_pushBackQueue: [],

	/**
	* Represents whether or not we handle "back" actions with respect to history. If the value
	* of "disableBackHistoryAPI" in appinfo.json is set to `true`, this property will be set to
	* `false`.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	enableBackHistoryAPI: true,

	/**
	* @private
	*/
	components: [
		{kind: Signals,  onkeyup: 'remoteBackKeyHandler'}
	],

	/**
	* @private
	*/
	lunaServiceComponents: [
		{
			name:       'getAppID',
			kind:       'enyo.LunaService',
			service:    'palm://com.webos.applicationManager/',
			method:     'getForegroundAppInfo',
			subscribe:  true,
			onComplete: '_getAppIDHandler'
		},
		{
			name:       'getAppInfo',
			kind:       'enyo.LunaService',
			service:    'luna://com.webos.applicationManager/',
			method:     'getAppInfo',
			subscribe:  true,
			onComplete: '_getAppInfoHandler'
		}
	],

	/**
	* @private
	*/
	init: function() {
		window.onpopstate = util.bind(this, function(inEvent) {this.popStateHandler();});
		// if (enyo.LunaService) {
		// 	this.createChrome(this.lunaServiceComponents);
		// 	this._getAppID();
		// }

		if (this.enableBackHistoryAPI) {
			this._initHistoryState();
		}
	},

	/**
	* To prevent back to previous page in browser, we mark initial state.
	*
	* @private
	*/
	_initHistoryState: function () {
		history.pushState({currentObjId: 'historyMaster'}, '', '');
	},

	/**
	* When our platform is "PalmSystem", we need the appID to access the proper appinfo.json.
	*
	* @private
	*/
	_getAppID: function () {
		// if(scope.PalmSystem) {
		// 	var param = {'extraInfo': true};
		// 	this.$.getAppID.send(param);
		// }
	},

	/**
	* After LunaService returns the appId, we can retrieve the necessary app information.
	*
	* @private
	*/
	_getAppIDHandler: function (inSender, inResponse) {
		if(inResponse.foregroundAppInfo != null && inResponse.foregroundAppInfo !== undefined) {
			var foregroundAppInfo = inResponse.foregroundAppInfo;
			var appID = '';
			for(var i=0; i<foregroundAppInfo.length; i++) {
				if(foregroundAppInfo[i].appId !== undefined && foregroundAppInfo[i].windowType === '_WEBOS_WINDOW_TYPE_CARD') {
					appID = foregroundAppInfo[i].appId;
					break;
				}
			}
			if(appID !== ''){
				this._getAppInfo(appID);
			}
		}
	},

	/**
	* Retrieve properties from appinfo.json.
	*
	* @private
	*/
	_getAppInfo: function (appID) {
		// if(scope.PalmSystem) {
		// 	var param = {};
		// 	param.id = appID;
		// 	this.$.getAppInfo.send(param);
		// }
	},

	/**
	* Determine the appropriate value of `enableBackHistoryAPI` from the app information.
	*
	* @private
	*/
	_getAppInfoHandler: function (inSender, inResponse) {
		if(inResponse.appInfo !== undefined) {
			this.enableBackHistoryAPI = !inResponse.appInfo.disableBackHistoryAPI;
		}
	},

	/**
	* Retrieve the [control]{@link enyo.Control} for the current "back" action.
	*
	* @returns {Object} - The current control whose "back" actions we are handling.
	* @public
	*/
	getCurrentObj: function() {
		return this._currentObj;
	},

	/**
	* Sets the target object and handler for the current "back" action.
	*
	* @param {Object} ctx - The current control that the "back" action should be applied to.
	* @param {Function} fn - Handler for the "back" action.
	* @private
	*/
	_pushBackHistory: function(ctx, fn) {
		if (this.enableBackHistoryAPI) {
			history.pushState({currentObjId: ctx.id}, '', '');
		}
		this._backHistoryStack.push({currentObj: ctx, handler: fn});
		this._currentObj = ctx;
		this._handler = fn;
	},

	/**
	* Store the "back" action request to our history. If we are currently handling a `popstate`
	* event, we wait until the current event handling is complete.
	*
	* @param {Object} ctx - The current control that the "back" action should be applied to.
	* @param {function} fn - Handler for the "back" action.
	* @public
	*/
	pushBackHistory: function(ctx, fn) {
		if (this._isPopStateInProgress) {
			this._pushBackQueue.push({currentObj: ctx, handler: fn});
		} else {
			this._pushBackHistory(ctx, fn);
		}
	},

	/**
	* When we press the "back" key, `window.history` should be back 1 step. In synchronizing
	* `window.history` and `_backHistoryStack`, we do not want to trigger the "back" key
	* handler.
	*
	* @public
	*/
	ignorePopState: function() {
		if (this.enableBackHistoryAPI) {
			this._ignorePopState = true;
			this._isPopStateInProgress = true;
			history.go(-1);
		}
	},

	/**
	* If our current control has a custom "back" key handler, we execute this handler at the
	* appropriate time.
	*
	* @private
	*/
	_callBackKeyHandler: function() {
		this._handlingBackAction = true;
		if (this._currentObj && this._handler) {
			var fn = this._handler;
			if (typeof fn == 'function') {
				fn = fn.bind(this._currentObj);
			}
			fn();
		}
	},

	/**
	* @private
	*/
	_popBackHistory: function() {
		var bStack = this._backHistoryStack;
		bStack.pop();
		if (bStack.length) {
			this._currentObj = bStack[bStack.length - 1].currentObj;
			this._handler = bStack[bStack.length - 1].handler;
		} else {
			this._currentObj = this._handler = null;
		}

		this._handlingBackAction = false;
	},

	/**
	* Any calls to `pushstate()` are pushed into a queue when the `popstate` event is currently
	* being handled. After the event has been handled, we can dequeue `_pushBackQueue`.
	*
	* @private
	*/
	_dequeuePushBack: function() {
		var queue = this._pushBackQueue,
			length = queue.length,
			item;
		for (var i = 0; i < length; i++) {
			item = queue.pop();
			this._pushBackHistory(item.currentObj, item.handler);
		}
	},

	/**
	* There are 3 kinds of `popstate` event triggers: `history.back()`, `history.forward()`, and
	* `history.go()`. For our purposes, we only want {@link moon.History} to only handle
	* `history.back()` and ignore the other triggers.
	*
	* @public
	*/
	popStateHandler: function() {
		this._isPopStateInProgress = false;
		// TODO: We cannot prevent popstate event triggerd from history.go() or history.forward()
		// If user call those event directly, moonstone controls may have unexpected behavior.
		var state = !this._currentObj ? 'empty'
					: (this._ignorePopState || window.ignoreFirstPopupEvent) ? 'silence'
					: !this._currentObj.getShowing() ? 'invisible'
					: 'active';

		switch (state) {
		case 'empty':
			if (!history.state || history.state.currentObjId == 'historyMaster') {
				this._initHistoryState();
			}
			break;
		case 'silence':
		//Popstate event should be ignored on following 2 conditions.
		//1. When App is loaded, onpopstate event fired with null state.
		//2. history.go(-1) triggers onpopstate event but it should be ignored.
			window.ignoreFirstPopupEvent = false;
			this._ignorePopState = false;
			this._popBackHistory();
			break;
		case 'invisible':
		//Current back key target is on history and have handler too.
		//However it is invisible.
		//At this point, we should skip calling back key hanlder and restore history.
			history.pushState({currentObjId: this._backHistoryStack[this._backHistoryStack.length - 1].currentObj.id}, '', '');
			break;
		case 'active':
			this._callBackKeyHandler();
			this._popBackHistory();
			break;
		}

		this._dequeuePushBack();
		return;
	},

	/**
	* Determines whether or not we are currently handling a "back" action.
	*
	* @returns {Boolean} Is `true` if we are currently handling a "back" action, and `false`
	*	otherwise.
	* @public
	*/
	isHandlingBackAction: function () {
		return this._handlingBackAction;
	},

	/**
	* @private
	*/
	remoteBackKeyHandler: function (inSender, inEvent) {
		if (inEvent.keySymbol == 'back' && this._currentObj && this._currentObj.getShowing()) {
			this._callBackKeyHandler();
			this.ignorePopState();
		}
		return true;
	}
});


/**
* {@link moon.History} is a {@glossary mixin} that enables support for custom history. In its
* current implementation, "back" actions are implemented, which allows for controls to override
* and customize the behavior that occurs when the back key is pressed or the `window.history` is
* utilized.
*
* @mixin moon.HistorySupport
* @public
*/

/** @lends moon.HistorySupport.prototype */
History.HistorySupport = {

	/**
	* @private
	*/
	name: 'HistorySupport',

	/**
	* @private
	*/
	published: {

		/**
		* When `true`, pressing the back key will result in control-specific behavior that
		* corresponds to a "back" action.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		allowBackKey: true
	},

	/**
	* Pushes a default state to the back history, consisting of a reference to our handler for
	* any "back" actions.
	*
	* If the default `pushBackHistory` behavior is to be overridden, ensure that the control's
	* implementation of `pushBackHistory` signifies it has handled the necessary behavior by
	* returning `true`.
	*
	* @example
	* pushBackHistory: function() {
	*	// perform custom operations here
	*	return true;
	* }
	*
	* @method
	* @public
	*/
	pushBackHistory: kind.inherit(function (sup) {
		// When you use a mixin, it will override existing properties and methods. If a control,
		// which uses `moon.HistorySupport`, has implemented the `pushBackHistory` method, the
		// method will be replaced with the following method. To ensure that the control's
		// implementation of `pushBackHistory` is executed, we allow it to run and subsequently
		// examine its return value.
		return function() {
			// check whether this control's `pushBackHistroy` method has effectively handled
			// the call, or whether it wants the inherited method to execute
			if (!sup.apply(this, arguments)) {
				History.pushBackHistory(this, this.backKeyHandler);
			}
			return true;
		};
	}),

	/**
	* Handler for whenever a "back" action is triggered. The default behavior is to hide the
	* control if it is showing.
	*
	* Most controls will want to override this behavior. If the default behavior should not be
	* executed, ensure that the `backKeyHandler` method in the control signifies it has handled
	* the necessary behavior by returning `true`.
	*
	* @method
	* @public
	*/
	backKeyHandler: kind.inherit(function (sup) {
		return function() {
			if (!sup.apply(this, arguments)) {
				if (this.showing) this.hide();
			}
			return true;
		};
	})
};

ready(function() {
	History.init();
});
},{"../../../enyo/lib/Signals":68,"../../../enyo/lib/kind":96,"../../../enyo/lib/ready":103,"../../../enyo/lib/utils":106,"../../../moonstone":119}],153:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	ri = require('../../../enyo/lib/resolution'),
	path = require('../../../enyo/lib/pathResolver'),
	Control = require('../../../enyo/lib/Control');

// Static private hash of all of the valid moonstone icons
var icons = {
	drawer            : '&#983040;',  // \0F0000
	arrowlargedown    : '&#983041;',  // \0F0001
	arrowlargeup      : '&#983042;',  // \0F0002
	arrowlargeleft    : '&#983043;',  // \0F0003
	arrowlargeright   : '&#983044;',  // \0F0004
	arrowsmallup      : '&#983045;',  // \0F0005
	arrowsmalldown    : '&#983046;',  // \0F0006
	arrowsmallleft    : '&#983047;',  // \0F0007
	arrowsmallright   : '&#983048;',  // \0F0008
	closex            : '&#983049;',  // \0F0009
	check             : '&#983050;',  // \0F000A
	search            : '&#983051;',  // \0F000B
	list              : '&#983052;',  // \0F000C
	bulletlist        : '&#983053;',  // \0F000D
	denselist         : '&#983054;',  // \0F000E
	rollforward       : '&#983055;',  // \0F000F
	rollbackward      : '&#983056;',  // \0F0010
	exitfullscreen    : '&#983057;',  // \0F0011
	fullscreen        : '&#983058;',  // \0F0012
	circle            : '&#983059;',  // \0F0013
	stop              : '&#983060;',  // \0F0014
	play              : '&#983061;',  // \0F0015
	pause             : '&#983062;',  // \0F0016
	forward           : '&#983063;',  // \0F0017
	backward          : '&#983064;',  // \0F0018
	skipforward       : '&#983065;',  // \0F0019
	skipbackward      : '&#983066;',  // \0F001A
	pauseforward      : '&#983067;',  // \0F001B
	pausebackward     : '&#983068;',  // \0F001C
	pausejumpforward  : '&#983069;',  // \0F001D
	pausejumpbackward : '&#983070;',  // \0F001E
	jumpforward       : '&#983071;',  // \0F001F
	jumpbackward      : '&#983072;',  // \0F0020
	arrowextend       : '&#983073;',  // \0F0021
	arrowshrink       : '&#983074;',  // \0F0022
	flag              : '&#983075;',  // \0F0023
	funnel            : '&#983076;',  // \0F0024
	trash             : '&#983077;',  // \0F0025
	plus              : '&#983078;',  // \0F0026
	minus             : '&#983079;',  // \0F0027
	star              : '&#983080;',  // \0F0028
	hollowstar        : '&#983081;',  // \0F0029
	halfstar          : '&#983082;',  // \0F002A
	gear              : '&#983083;',  // \0F002B
	plug              : '&#983084;',  // \0F002C
	lock              : '&#983085;'   // \0F002D
};

/**
* {@link moon.Icon} is a control that displays an icon image. You may specify the
* image by setting the [src]{@link moon.Icon#src} property to a URL indicating the
* image file's location.
*
* ```
* {kind: 'moon.Icon', src: 'images/search.png'}
* ```
*
* Moonstone also supports a second method for displaying icons; in addition to
* using traditional image assets specified in `src`, you may use icons that are
* stored as single characters in a special symbol font. To do this, set the
* value of the [icon]{@link moon.Icon#icon} property to a string representing an
* icon name, e.g.:
*
* ```
* {kind: 'moon.Icon', icon: 'closex'}
* ```
*
* For image-based icons, two sizes are supported: large (45x45 pixels) and small
* (32x32 pixels). Icons are small by default. To specify a large icon, set the
* [small]{@link moon.Icon#small} property to `false`:
*
* ```
* {kind: 'moon.Icon', src: 'images/search.png', small: false}
*
* {kind: 'moon.Icon', icon: 'closex', small: false}
* ```
*
* In addition, both icon sizes support two states: a default (resting) state,
* and a pressed (active) state. Both states need to be included in the icon's
* associated image asset, with the resting state on top and the active state on
* the bottom.
*
* Image assets for large icons should be 75px wide and 150px high. This allows
* room for the two states, along with 15 pixels of transparent padding on all
* four sides of each 45x45 icon.
*
* Assets for small icons should be 50px wide and 100px high. This allows room
* for the two states, along with 9 pixels of transparent padding on all four
* sides of each 32x32 icon.
*
* Since asset-based icon images are applied as CSS backgrounds, the height and
* width of an icon must be set if an image of a non-standard size is used.
*
* For situations in which an icon should act like a button, use
* {@link moon.IconButton}.
*
* @class moon.Icon
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Icon.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Icon',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	allowHtml: true,

	/**
	* @private
	* @lends moon.Icon.prototype
	*/
	published: {

		/**
		* This property serves two purposes. One, it accepts one of the below Moonstone icon
		* names. Two, it also supports standard ascii characters or HTML entities, to directly
		* represent a glyph. By default, the font used when you specify a
		* character/entity/glyph, the font "LG Display_Dingbat" will be used. It is applied via
		* a `class`: "font-lg-icons". To apply your own dingbat font, override this class's
		* `font-family` property in your CSS.
		*
		* The following icon names are valid:
		*
		* `drawer`
		* `arrowlargedown`
		* `arrowlargeup`
		* `arrowlargeleft`
		* `arrowlargeright`
		* `arrowsmallup`
		* `arrowsmalldown`
		* `arrowsmallleft`
		* `arrowsmallright`
		* `closex`
		* `check`
		* `search`
		* `exitfullscreen`
		* `fullscreen`
		* `circle`
		* `stop`
		* `play`
		* `pause`
		* `forward`
		* `backward`
		* `skipforward`
		* `skipbackward`
		* `pauseforward`
		* `pausebackward`
		* `pausejumpforward`
		* `pausejumpbackward`
		* `jumpforward`
		* `jumpbackward`
		* `arrowextend`
		* `arrowshrink`
		*
		* @type {String}
		* @default ''
		* @public
		*/
		icon: '',

		/**
		* URL specifying path to icon image.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		src: '',

		/**
		* If `true`, icon is shown as disabled.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* A boolean parameter affecting the size of the icon.
		* If `true`, the icon will be 32px by 32px. If `false`, the icon will be 45px
		* by 45px. When `small` is `true`, a larger, invisible tap area will be applied
		* around the icon.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		small: true
	},

	/**
	* @private
	*/
	handlers: {
		/**
		* This is a horrible hack to prevent event bubble caching from messing up
		* moon.Tooltip positioning (BHV-13377). In short, we don't need to do anything
		* with onenter ourselves, but we need it to pass through us on the way to
		* moon.TooltipDecorator, which uses inSender to figure out who the tooltip
		* activator should be.
		*
		* TODO: Something better.
		*
		* @private
		*/
		onenter: 'doNothing'
	},

	/**
	* @returns {String} The value of the [src]{@link moon.Icon#src} property.
	* @public
	*/
	getSrc: function () {
		return this.src;
	},

	/**
	* @private
	*/
	classes: 'moon-icon',

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);

		this.smallChanged();
		if (this.src) {
			this.srcChanged();
		}
		this.disabledChanged();
	},

	/**
	* @private
	*/
	getIconClass: function (inIconName) {
		return 'moon-icon-' + (inIconName || this.icon);
	},

	/**
	* @private
	*/
	disabledChanged: function () {
		this.addRemoveClass('disabled', this.disabled);
	},

	/**
	* @private
	*/
	srcChanged: function () {
		var src = this.src || null;
		src = ri.selectSrc(src);
		if (src) {
			if (src != 'none' && src != 'inherit' && src != 'initial') {
				src = 'url(' + path.rewrite(src) + ')';
			}
		}
		this.applyStyle('background-image', src);
	},

	/**
	* @private
	*/
	iconChanged: function (old) {
		var icon = this.get('icon') || '',
			iconEntity = icons[icon] || icon;

		// If the icon isn't in our known set, apply our custom font class
		this.addRemoveClass('font-lg-icons', !icons[icon]);

		if (this.get('small')) {
			this.$.tapArea.set('content', iconEntity);
		} else {
			this.set('content', iconEntity);
		}

		if (icons[old]) {
			this.removeClass(this.getIconClass(old));
		}
		if (icons[icon]) {
			this.addClass(this.getIconClass());
		}
	},

	/**
	* @private
	*/
	smallChanged: function () {
		if (this.small) {
			var ta = this.createComponent({name: 'tapArea', classes: 'small-icon-tap-area', allowHtml: this.allowHtml, isChrome: true});

			if (this.generated) {
				ta.render();
			}
		} else {
			if (this.$.tapArea) {
				this.$.tapArea.destroy();
			}
		}
		this.addRemoveClass('small', this.small);
		// Now that our content area is ready, assign the icon
		this.iconChanged();
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/pathResolver":101,"../../../enyo/lib/resolution":104,"../../../moonstone":119}],158:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Input = require('../../../enyo/lib/Input');

var
	Spotlight = require('../../../spotlight');

/**
* {@link moon.Input} is a Moonstone-styled input control, derived from
* {@link enyo.Input}. Typically, a `moon.Input` is placed inside a
* {@link moon.InputDecorator}, which provides styling, e.g.:
*
* ```
* {kind: 'moon.InputDecorator', components: [
*	{kind: 'moon.Input', placeholder: 'Enter some text...', onchange: 'inputChange'}
* ]}
* ```
*
* For more information, see the documentation on
* [Text Fields]{@linkplain $dev-guide/building-apps/controls/text-fields.html}
* in the Enyo Developer Guide.
*
* @class moon.Input
* @extends enyo.Input
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Input.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Input',

	/**
	* @private
	*/
	kind: Input,

	/**
	* @private
	*/
	classes: 'moon-body-text moon-input',

	/**
	* 13==Enter, 16777221==KeypadEnter
	*
	* @private
	*/
	spotlightIgnoredKeys: [13, 16777221],

	/**
	* @private
	* @lends moon.Input.prototype
	*/
	published: {

		/**
		* When `true`, input blurs on Enter keypress (if focused).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		dismissOnEnter: false
	},

	/**
	* @private
	*/
	handlers: {
		onkeyup : 'onKeyUp',
		onblur     : 'onBlur',
		onfocus    : 'onFocus'
	},

	/**
	* Used only for [dismissOnEnter]{@link moon.Input#dismissOnEnter} feature;
	* we cannot rely on `hasFocus()` in this case due to race condition.
	*
	* @private
	*/
	_bFocused: false,

	/**
	* @private
	*/
	onFocus: function () {
		if (this.dismissOnEnter) {
			var oThis = this;
			util.asyncMethod(this, function () {oThis._bFocused = true;});
		}
	},

	/**
	* @private
	*/
	onBlur: function () {
		if (this.dismissOnEnter) {
			this._bFocused = false;
		}
	},

	/**
	* @private
	*/
	onKeyUp: function (oSender, oEvent) {
		if (this.dismissOnEnter) {
			if (oEvent.keyCode == 13 && this._bFocused) {
				this.blur();
				if (Spotlight.getPointerMode()) {
					Spotlight.unspot();
				}
			}
		}
	},

	/**
	* @private
	*/
	blur: function () {
		if (this.hasNode()) {
			this.node.blur();
		}
	},

	/**
	* @private
	*/
	left: function () {
		if (!this.hasNode() || this.node.selectionStart === 0) {
			return false;
		}
		return true;
	},

	/**
	* @private
	*/
	right: function () {
		if (!this.hasNode() || this.node.selectionStart == this.node.value.length) {
			return false;
		}
		return true;
	},

	/**
	* @private
	*/
	up: function () {
		return false;
	},

	/**
	* @private
	*/
	down: function () {
		return false;
	}
});
},{"../../../enyo/lib/Input":42,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275}],167:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

/**
* {@link moon.ObjectActionDecorator} is a decorator that wraps a spotlightable object.
* When the object is focused, additional controls are displayed, allowing the user to
* act on the object.
*
* The decorator supports two orientations: `'vertical'`, with object actions placed
* below the wrapped components, and `'horizontal'`, with object actions placed next to
* the components.
*
* The following is a vertical example:
* ```javascript
* {
* 	kind: 'moon.ObjectActionDecorator',
* 	orientation: 'vertical',
* 	components: [
* 		{kind: 'moon.Item', components: [
* 			{name: 'image', kind: 'enyo.Image', src: 'assets/default-music.png'}
* 		]}
* 	],
* 	actionComponents: [
* 		{kind: 'moon.Button', name: 'Play', small: true, content: 'PLAY'},
* 		{kind: 'moon.Button', name: 'Favorite', small: true, content: 'FAVORITE'},
* 		{kind: 'moon.Button', name: 'Share', small: true, content: 'SHARE'}
* 	]
* }
* ```
*
* @class moon.ObjectActionDecorator
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ObjectActionDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ObjectActionDecorator',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-objaction',

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocused: 'spotFocused',
		onSpotlightBlur: 'spotBlur',
		onenter: 'enter',
		onleave: 'leave'
	},

	/**
	* @private
	* @lends moon.ObjectActionDecorator.prototype
	*/
	published: {

		/**
		* Orientation of object actions in relation to focused components; `'vertical'` places
		* the object actions below the components, while `'horizontal'` places them next to the
		* components.
		*
		* @type {String}
		* @default 'vertical'
		* @public
		*/
		orientation: 'vertical',

		/**
		* When [orientation]{@link moon.ObjectActionDecorator} is `'vertical'`, setting
		* `noStretch: false` causes the object actions to be stretched to fit the width of the
		* components above.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		noStretch: false
	},

	/**
	* @private
	*/
	components: [
		{name:'client', kind: Control, classes: 'moon-objaction-client'},
		{name:'actions', kind: Control, classes: 'moon-objaction-actions'}
	],

	/**
	* @private
	*/
	orientationChanged: function () {
		var vertical = this.getOrientation() == 'vertical';
		this.addRemoveClass('vertical', vertical);
		this.addRemoveClass('horizontal', !vertical);
		this.$.actions.addRemoveClass('moon-vspacing', vertical);
		this.$.actions.addRemoveClass('moon-hspacing', !vertical);
	},

	/**
	* @private
	*/
	noStretchChanged: function() {
		this.$.actions.addRemoveClass('stretch', !this.noStretch);
	},

	/**
	* @private
	*/
	initComponents: function() {
		Control.prototype.initComponents.apply(this, arguments);
		if (this.actionComponents) {
			var owner = this.hasOwnProperty('actionComponents') ? this.getInstanceOwner() : this;
			this.$.actions.createComponents(this.actionComponents, {owner: owner});
		}
		this.orientationChanged();
		this.noStretchChanged();
	},

	/**
	* @private
	*/
	spotFocused: function(inSender, inEvent) {
		this.focused = true;
		this.updateActionsVisibility();
	},

	/**
	* @private
	*/
	spotBlur: function(inSender, inEvent) {
		this.focused = false;
		this.entered = false;
		this.updateActionsVisibility();
	},

	/**
	* @private
	*/
	enter: function(inSender, inEvent) {
		this.entered = true;
		this.updateActionsVisibility();
	},

	/**
	* @private
	*/
	leave: function(inSender, inEvent) {
		this.entered = false;
		this.updateActionsVisibility();
	},

	/**
	* @private
	*/
	updateActionsVisibility: function() {
		this.$.actions.applyStyle('opacity', (this.focused || this.entered) ? 1 : 0);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119}],172:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Animator = require('../../../enyo/lib/Animator');

/**
* Fires when progress bar finishes animating to a position. No event-specific data
* is sent with this event.
*
* @event moon.ProgressBar#onAnimateProgressFinish
* @type {Object}
* @public
*/

/**
* {@link moon.ProgressBar} is a [control]{@link enyo.Control} that shows the current
* progress of a process in a horizontal bar.
*
* ```
* {kind: 'moon.ProgressBar', progress: 10}
* ```
*
* To animate a progress change, call the
* [animateProgressTo()]{@link moon.ProgressBar#animateProgressTo} method:
*
* ```
* this.$.progressBar.animateProgressTo(50);
* ```
*
* You may customize the color of the bar by applying a style via the
* [barClasses]{@link moon.ProgressBar#barClasses} property, e.g.:
*
* ```
* {kind: 'moon.ProgressBar', barClasses: 'class-name'}
* ```
*
* For more information, see the documentation on [Progress
* Indicators]{@linkplain $dev-guide/building-apps/controls/progress-indicators.html}
* in the Enyo Developer Guide.
*
* @class moon.ProgressBar
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ProgressBar.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ProgressBar',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-progress-bar',

	/**
	* @private
	* @lends moon.ProgressBar.prototype
	*/
	published: {

		/**
		* Current position of progress bar.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		progress: 0,

		/**
		* Minimum progress value (i.e., no progress made).
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		min: 0,

		/**
		* Maximum progress value (i.e., process complete).
		*
		* @type {Number}
		* @default 100
		* @public
		*/
		max: 100,

		/**
		* CSS classes to apply to progress bar.
		*
		* @type {String}
		* @default 'moon-progress-bar-bar'
		* @public
		*/
		barClasses: 'moon-progress-bar-bar',

		/**
		* CSS classes to apply to background progress bar.
		*
		* @type {String}
		* @default 'moon-progress-bg-bar'
		* @public
		*/
		bgBarClasses: 'moon-progress-bg-bar',

		/**
		* Completion percentage for background process.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		bgProgress: 0
	},

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.ProgressBar#onAnimateProgressFinish}
		*/
		onAnimateProgressFinish: ''
	},

	/**
	* @private
	*/
	components: [
		{name: 'progressAnimator', kind: Animator, onStep: 'progressAnimatorStep', onEnd: 'progressAnimatorComplete'},
		{name: 'bgbar', kind: Control},
		{name: 'bar', kind: Control}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.progressChanged();
		this.barClassesChanged();
		this.bgBarClassesChanged();
		this.bgProgressChanged();
	},

	/**
	* @private
	*/
	barClassesChanged: function (inOld) {
		this.$.bar.removeClass(inOld);
		this.$.bar.addClass(this.barClasses);
	},

	/**
	* @private
	*/
	bgBarClassesChanged: function (inOld) {
		this.$.bgbar.removeClass(inOld);
		this.$.bgbar.addClass(this.bgBarClasses);
	},

	/**
	* @private
	*/
	bgProgressChanged: function () {
		this.bgProgress = this.clampValue(this.min, this.max, this.bgProgress);
		var p = this.calcPercent(this.bgProgress);
		this.updateBgBarPosition(p);
	},

	/**
	* @private
	*/
	progressChanged: function () {
		this.progress = this.clampValue(this.min, this.max, this.progress);
		var p = this.calcPercent(this.progress);
		this.updateBarPosition(p);
	},

	/**
	* @private
	*/
	clampValue: function (inMin, inMax, inValue) {
		return Math.max(inMin, Math.min(inValue, inMax));
	},

	/**
	* @private
	*/
	calcRatio: function (inValue) {
		return (inValue - this.min) / (this.max - this.min);
	},

	/**
	* @private
	*/
	calcPercent: function (inValue) {
		return this.calcRatio(inValue) * 100;
	},

	/**
	* @private
	*/
	updateBarPosition: function (inPercent) {
		this.$.bar.applyStyle('width', inPercent + '%');
	},

	/**
	* @private
	*/
	updateBgBarPosition: function (inPercent) {
		this.$.bgbar.applyStyle('width', inPercent + '%');
	},

	/**
	* Animates progress to the passed-in value.
	*
	* @param {Number} inValue  The destination number
	* @public
	*/
	animateProgressTo: function (inValue) {
		this.$.progressAnimator.play({
			startValue: this.progress,
			endValue: inValue,
			node: this.hasNode()
		});
	},

	/**
	* @private
	*/
	progressAnimatorStep: function (inSender) {
		this.setProgress(inSender.value);
		return true;
	},

	/**
	* @fires moon.ProgressBar#onAnimateProgressFinish
	* @private
	*/
	progressAnimatorComplete: function (inSender) {
		this.doAnimateProgressFinish();
		return true;
	}
});
},{"../../../enyo/lib/Animator":15,"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119}],176:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	RichText = require('../../../enyo/lib/RichText');

/**
* {@link moon.RichText} is a Moonstone-styled text input field with support for
* rich text formatting such as bold, italics, and underlining, derived from
* {@link enyo.RichText}. Typically, a `moon.RichText` is placed inside a
* {@link moon.InputDecorator}, which provides styling, e.g.:
*
* ```
* {kind: 'moon.InputDecorator', components: [
*	{kind: 'moon.RichText', style: 'width: 240px;', onchange: 'inputChange'}
* ]}
* ```
*
* For more information, see the documentation on
* [Text Fields]{@linkplain $dev-guide/building-apps/controls/text-fields.html}
* in the Enyo Developer Guide.
*
* @class moon.RichText
* @extends enyo.RichText
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.RichText.prototype */ {

	/**
	* @private
	*/
	name: 'moon.RichText',

	/**
	* @private
	*/
	kind: RichText,

	/**
	* @private
	*/
	classes: 'moon-body-text moon-richtext',

	/**
	* @private
	*/
	create: function () {
		RichText.prototype.create.apply(this, arguments);
		this.disabledChanged();
	},

	/**
	* Sets the focus on the RichText.
	*
	* @public
	*/
	focus: function () {
		RichText.prototype.focus.apply(this, arguments);
		var node = this.hasNode();
		// We move the cursor to the end, because in 5-way
		// mode there is no way (other than backspacing) for
		// the user to move the caret within the text field
		this.moveCursorToEnd();
		node.scrollTop = node.scrollHeight;
	},

	/**
	* Removes focus from the RichText.
	*
	* @public
	*/
	blur: function () {
		if (this.hasNode()) {
			this.node.blur();
		}
	},

	/**
	* Piggyback onto enyo.RichText blurHandler.
	*
	* @private
	* @method
	*/
	blurHandler: function () {
		RichText.prototype.blurHandler.apply(this, arguments);
		this.hasNode().scrollTop = 0;
	},

	/**
	* @private
	*/
	disabledChanged: function () {
		RichText.prototype.disabledChanged.apply(this, arguments);
		if (this.disabled) {
			this.attributes.contenteditable = false;
		}
	},

	/**
	* @private
	*/
	left: function () {
		var sel = this.getSelection();
		if (sel.rangeCount) {
			var selRange = sel.getRangeAt(0);
			var testRange = selRange.cloneRange();

			testRange.selectNodeContents(this.node);
			testRange.setEnd(selRange.startContainer, selRange.startOffset);

			if (testRange.toString() === '') {
				return false;
			}
		}
		return true;
	},

	/**
	* @private
	*/
	right: function () {
		var sel = this.getSelection();
		if (sel.rangeCount) {
			var selRange = sel.getRangeAt(0);
			var testRange = selRange.cloneRange();

			testRange.selectNodeContents(this.node);
			testRange.setStart(selRange.endContainer, selRange.endOffset);

			if (testRange.toString() === '') {
				return false;
			}
		}
		return true;
	},

	/**
	* @private
	*/
	up: function (inEvent) {
		return this.left();
	},

	/**
	* @private
	*/
	down: function (inEvent) {
		return this.right();
	}
});
},{"../../../enyo/lib/RichText":60,"../../../enyo/lib/kind":96,"../../../moonstone":119}],177:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Scrim = require('../../../enyo/lib/Scrim');

/**
* `moon.Scrim` is a Moonstone-styled {@link enyo.Scrim}
*
* @class moon.Scrim
* @extends enyo.Scrim
* @ui
* @public
*/
var MoonScrim = module.exports = kind(
	/** @lends  moon.Scrim.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Scrim',

	/**
	* @private
	*/
	kind: Scrim,

	/**
	* @private
	*/
	classes: 'moon-scrim'
});

MoonScrim.scrim = new Scrim.ScrimSingleton('moon.scrim', {floating: true, classes: 'moon-scrim moon-scrim-translucent'});
MoonScrim.scrimTransparent = new Scrim.ScrimSingleton('moon.scrimTransparent', {floating: true, classes: 'moon-scrim moon-scrim-transparent'});
},{"../../../enyo/lib/Scrim":62,"../../../enyo/lib/kind":96,"../../../moonstone":119}],179:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	ScrollThumb = require('../../../enyo/lib/ScrollThumb');

/**
* {@link moon.ScrollThumb}, which extends {@link enyo.ScrollThumb}, is
* used to display a small visual scroll indicator.
*
* `moon.ScrollThumb` is not typically created in application code.
*
* @class moon.ScrollThumb
* @extends enyo.ScrollThumb
* @ui
* @public
*/
module.exports = kind(
	/** @lends  moon.ScrollThumb.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ScrollThumb',

	/**
	* @private
	*/
	kind: ScrollThumb,

	/**
	* @private
	* @lends moon.ScrollThumb.prototype
	*/
	published: {
		/**
		* Ratio of size and position of thumb with respect to scroll bounds.
		*
		* @type {Number}
		* @default 1
		* @public
		*/
		sizeRatio: 1
	},

	/**
	* @private
	*/
	classes: 'moon-thumb matrix3dsurface',

	/**
	* @private
	*/
	minSize: 20,

	/**
	* @private
	*/
	create: function () {
		ScrollThumb.prototype.create.apply(this, arguments);
		var v = this.axis == 'v';
		this.offset = v ? 'top' : 'left';
		this.transform = dom.canTransform();
		this.accel = dom.canAccelerate();
		this.translation = this.accel ? 'matrix3d' : 'matrix';
		this.positionMethod = v ? 'getScrollTop' : 'getScrollLeft';
		this.sizeDimension = v ? 'clientHeight' : 'clientWidth';
		this.addClass('enyo-' + this.axis + 'thumb');
	},

	/**
	* @private
	*/
	update: function (inStrategy) {
		if (this.showing && this.scrollBounds) {
			var d = this.dimension;
			var bd = this.scrollBounds[this.sizeDimension], sbd = this.scrollBounds[d];
			var overs = 0, overp = 0, over = 0;
			var ratio = this.getSizeRatio();
			if (bd > sbd) {
				this.hide();
				return;
			}
			if (inStrategy.isOverscrolling()) {
				over = inStrategy.getOverScrollBounds()['over' + this.offset];
				overs = Math.abs(over);
				overp = Math.max(over, 0);
			}
			var sbo = inStrategy[this.positionMethod]() - over;
			// calc size & position
			var bdc = bd - this.cornerSize;
			var s = Math.floor((bd * bd / sbd) - overs);
			s = Math.max(this.minSize, s);
			var p = Math.floor((bdc * sbo / sbd) + overp);
			p = Math.max(0, Math.min(bdc - this.minSize, p));

			p *= ratio;
			s *= ratio;

			// apply thumb styling if needed
			this.needed = s < bd;
			if (this.needed && this.hasNode()) {
				dom.transformValue(this, this.translation, this.generateMatrix(p, s));
			} else {
				this.hide();
			}
		}
	},

	/**
	* @private
	*/
	generateMatrix: function (inPosition, inSize) {
		var x, y, w, h, node = this.hasNode();

		if (!node) {
			x = 0;
			y = 0;
			w = 1;
			h = 1;
		}
		else if (this.axis === 'v') {
			x = 0;
			y = inPosition;
			w = 1;
			h = inSize/node.offsetHeight;
		}
		else {
			x = inPosition;
			y = 0;
			w = inSize/node.offsetWidth;
			h = 1;
		}

		return (this.accel) ? this.assemble3dMatrix(x, y, w, h) : this.assemle2dMatrix(x, y, w, h);
	},

	/**
	* @private
	*/
	assemle2dMatrix: function (inX, inY, inWidth, inHeight) {
		return inWidth + ', 0, 0, ' + inHeight + ', ' + inX + ', ' + inY;
	},

	/**
	* @private
	*/
	assemble3dMatrix: function (inX, inY, inWidth, inHeight) {
		return inWidth + ', 0, 0, 0, 0, ' + inHeight + ', 0, 0, 0, 0, 1, 0, ' + inX + ', ' + inY + ', 1, 1';
	},

	/**
	* Override `show()` to give fade effect.
	* 
	* @private
	*/
	show: function () {
		this.cancelDelayHide();
		this.removeClass('hidden');
	},

	/**
	* Hides the control.
	*
	* @private
	*/
	hide: function () {
		this.addClass('hidden');
	}
});
},{"../../../enyo/lib/ScrollThumb":65,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../moonstone":119}],187:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	log = require('../../../enyo/lib/logger'),
	utils = require('../../../enyo/lib/utils'),
	Component = require('../../../enyo/lib/Component');

/**
* @typedef {Object} enyo.StyleAnimator~AnimationDefinitionObject
* @property {String} name - An optional name for the animation. If not specified,
* a name will be generated.
* @property {Number} duration - An optional duration. If not specified, the
*	[default duration]{@link enyo.StyleAnimator#defaultDuration} will be used.
* @property {Object} timingFunction - An optional timing function. If not specified, the
*	[default timing function]{@link enyo.StyleAnimator#deafultTimingFunction} will be used.
* @property {String} direction - `'forward'` or `'backward'`. Currently unused.
* @property {Object[]} keyframes - Animation keyframes.
* @public
*/

/**
* Fires when an animation step occurs.
*
* @event enyo.StyleAnimator#onStep
* @type {Object}
* @property {Object} animation - A reference to the animation that generated the event.
* @public
*/

/**
* Fires when the animation completes.
*
* @event enyo.StyleAnimator#onComplete
* @type {Object}
* @property {Object} animation - A reference to the animation that completed.
* @public
*/

/**
* {@link enyo.StyleAnimator} is a basic animation component.  Call
* [play()]{@link enyo.StyleAnimator#play} to start the animation.  The animation will run for
* the period of time (in milliseconds) specified by its `duration`, subject to its
* `timingFunction` and `direction` (See: {@link enyo.StyleAnimator~AnimationDefinitionObject}).
*
* @class enyo.StyleAnimator
* @extends enyo.Component
* @public
*/
module.exports = kind(
	/** @lends  enyo.StyleAnimator.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.StyleAnimator',

	/**
	* @private
	*/
	kind: Component,

	/**
	* @private
	*/
	events: {
		onStep: '',
		onComplete: ''
	},

	/**
	* @private
	* @lends enyo.StyleAnimator.prototype
	*/
	published: {
		//* Default value used if the animation has no `duration` specified.
		defaultDuration: 1000,
		//* Default value used if the animation has no `timingFunction` specified.
		defaultTimingFunction: 'linear',
		//* Default value used if the animation has no `direction` specified.
		defaultDirection: 'forward'
	},

	/**
	* @private
	*/
	transitionProperty: dom.transition,

	/**
	* @private
	*/
	instructions: null,

	/**
	* @private
	*/
	stepInterval: null,

	/**
	* @private
	*/
	stepIntervalMS: 50,

	/**
	* @private
	*/
	startTime: null,

	/**
	* @private
	*/
	animations: null,

	/**
	* @private
	*/
	create: function () {
		Component.prototype.create.apply(this, arguments);
		this.animations = [];
	},

	/**
	* Returns animation object reflecting the passed-in properties, while also adding it to the
	* `animations` array.
	*
	* @param {enyo.StyleAnimator~AnimationDefinitionObject} props - An animation definition hash.
	* @public
	*/
	newAnimation: function (props) {
		// TODO: Add documentation for the generated animation object
		if (this.animations && props.name && this.getAnimation(props.name)) {
			this.deleteAnimation(props.name);
		}

		props.keyframes = this.formatKeyframes(props.keyframes);
		props.instructions = this.generateInstructions(props.keyframes);

		var animation = {
			name:           props.name || this.generateAnimationName(),
			duration:       props.duration || this.defaultDuration,
			timingFunction: props.timingFunction ? this.updateTimingFunction (props.timingFunction) : this.updateTimingFunction (this.defaultTimingFunction),
			direction:      props.direction || this.defaultDirection,
			timeElapsed:    0,
			keyframes:      props.keyframes,
			instructions:   props.instructions,
			state:          'paused'
		};

		this.animations.push(animation);

		return animation;
	},

	/**
	* Resets transition properties to their pre-transition state for the specified animation.
	*
	* @param {String} name - Name of the animation.
	* @public
	*/
	reset: function (name) {
		this.getAnimation(name);
		this._reset(name);
	},

	/**
	* Plays the animation according to its properties.
	*
	* @param {String} name - Name of the animation.
	* @public
	*/
	play: function (name) {
		var animation = this.getAnimation(name);

		if (!animation) {
			return;
		}

		this.findStartAndEndValues(animation);
		this.applyValues(animation.startValues);
		this.cacheStartValues(animation.startValues);

		utils.asyncMethod(this.bindSafely(function () { this._play(name); }));
	},

	/**
	* Jumps directly to the end state of a given animation (without animating).
	*
	* @param {String} name - Name of the animation.
	* @public
	*/
	jumpToEnd: function (name) {
		var animation = this.getAnimation(name);

		if (!animation) {
			return;
		}

		this.findStartAndEndValues(animation);
		this.applyValues(animation.endValues);
	},

	/**
	* Pauses the animation, if it is currently playing.
	*
	* @param {String} name - Name of the animation.
	* @public
	*/
	pause: function (name) {
		var animation = this.getAnimation(name);
		if (animation.state === 'playing') {
			this._pause(name);
		}
	},

	/**
	* Looks up an animation by name in the animation list.
	*
	* @param {String} name - Name of the animation.
	* @public
	*/
	getAnimation: function (name) {
		var animation = null;
		for (var i = 0; i < this.animations.length; i++) {
			if (this.animations[i].name === name) {
				animation = this.animations[i];
				break;
			}
		}
		return animation;
	},

	/**
	* Removes an existing animation from `this.animations`, stopping it first, if necessary.
	*
	* @param {String} name - Name of the animation.
	* @public
	*/
	deleteAnimation: function (name) {
		var animation = this.getAnimation(name);

		if (!animation) {
			return false;
		}

		// Pause animation if necessary
		this._pause(name);

		// Splice out this animation
		this.animations.splice(this.animations.indexOf(animation), 1);
	},

	/**
	* Begins stepping through the animation.
	*
	* @public
	*/
	start: function () {
		this.beginStepping();
	},

	/**
	* Stops stepping through the animation.
	*
	* @public
	*/
	stop: function () {
		this.stopStepping();
	},

	/**
	* Generates a unique name based on the length of `this.animations`.
	*
	* @private
	*/
	generateAnimationName: function () {
		var count = this.animations.length,
			name = this.getName()+'_animation_'+count;
		while (this.getAnimation(name)) {
			name = this.getName()+'_animation_'+count;
		}
		return name;
	},

	/**
	* @private
	*/
	formatKeyframes: function (inKeyframes) {
		var frames = [];
		for (var index in inKeyframes) {
			frames.push({index: index, controls: inKeyframes[index]});
		}
		return frames;
	},

	/**
	* @private
	*/
	updateTimingFunction: function (inTimingFunction) {
		return inTimingFunction.match(/\bcubic-bezier/i) ? inTimingFunction : this.convertTimingFunctionToBezier(inTimingFunction);
	},

	/**
	* @private
	*/
	convertTimingFunctionToBezier: function (timing) {
		switch (timing) {
		case 'linear':
			return 'cubic-bezier(0, 0, 1, 1)';
		case 'ease':
			return 'cubic-bezier(0.25, 0.1, 0.25, 1.0)';
		case 'ease-in':
			return 'cubic-bezier(.42, 0, 1, 1)';
		case 'ease-out':
			return 'cubic-bezier(0, 0, .58, 1)';
		case 'ease-in-out':
			return 'cubic-bezier(.42, 0, .58, 1)';
		}
		log.warn('Unknown timing function: ', timing);
		return timing;
	},

	/**
	* @private
	*/
	generateInstructions: function (inKeyframes) {
		var frames = inKeyframes,
			instructions = [],
			instruction,
			endValues;

		for (var i = 0; i < frames.length-1; i++) {
			for (var j = 0, control; (control = frames[i].controls[j]); j++) {
				for (var prop in control.properties) {

					instruction = {
						control: control.control,
						property: prop,
						startValue: control.properties[prop],
						startTime: frames[i].index
					};

					endValues = this.findInstructionEndValues(instruction, i+1, frames);

					// If no end values, skip this rule   TODO - is this right?
					if (!endValues) {
						continue;
					}

					// Mix in end values
					instructions.push(utils.mixin(instruction, endValues));
				}
			}
		}

		return instructions;
	},

	/**
	* @private
	*/
	findStartAndEndValues: function (inAnimation) {
		var frames = inAnimation.keyframes,
			startValues = {},
			endValues = {},
			c,
			cID;

		for (var i = 0; i < frames.length; i++) {
			for (var j = 0, control; (control = frames[i].controls[j]); j++) {
				c = control.control;
				cID = c.id;

				if (!startValues[cID]) {
					startValues[cID] = {
						control: c,
						properties: {}
					};
				}
				if (!endValues[cID]) {
					endValues[cID] = {
						control: c,
						properties: {}
					};
				}

				for (var prop in control.properties) {
					// If value is set to _current_, grab the computed value
					if (control.properties[prop] === 'current') {
						control.properties[prop] = dom.getComputedStyle(c.hasNode())[prop];
					}
					// at zero, every prop is a startvalue
					if (i === 0 || typeof startValues[cID]['properties'][prop] === 'undefined') {
						startValues[cID]['properties'][prop] = control.properties[prop];
					}

					endValues[cID]['properties'][prop] = control.properties[prop];
				}
			}
		}

		inAnimation.startValues = startValues;
		inAnimation.endValues = endValues;
	},

	/**
	* @private
	*/
	findInstructionEndValues: function (inInstruction, inFrameIndex, inFrames) {
		for (var i = inFrameIndex; i < inFrames.length; i++) {
			for (var j = 0, control; (control = inFrames[i].controls[j]); j++) {
				if (control.control !== inInstruction.control) {
					continue;
				}
				for (var prop in control.properties) {
					if (prop === inInstruction.property) {
						return {endValue: control.properties[prop], endTime: inFrames[i].index};
					}
				}
			}
		}
	},

	/**
	* @private
	*/
	_play: function (name) {
		this.startAnimation(name);
		this.beginStepping();
	},

	/**
	* @private
	*/
	startAnimation: function (name) {
		var animation = this.getAnimation(name);

		this.applyTransitions(name, 0);
		animation.state = 'playing';
		animation.timeElapsed = 0;
		animation.startTime = utils.perfNow();
	},

	/**
	* @private
	*/
	applyValues: function (inValues) {
		var item, prop, control;

		for(item in inValues) {
			control = inValues[item].control;

			for (prop in inValues[item].properties) {
				control.applyStyle(prop, inValues[item].properties[prop]);
			}
		}
	},

	/**
	* @private
	*/
	cacheStartValues: function (inStartValues) {
		var item, control;
		this.startValues = inStartValues;

		for(item in inStartValues) {
			control = inStartValues[item].control;
			inStartValues[item].properties[this.transitionProperty] = control[this.transitionProperty];
		}
	},

	/**
	* @private
	*/
	applyTransitions: function (name, inStartTime) {
		var animation = this.getAnimation(name),
			instructions = animation.instructions;
		for (var i = 0; i < instructions.length; i++) {
			if (instructions[i].startTime <= inStartTime && !instructions[i].started) {
				this.applyTransition(name, instructions[i]);
				instructions[i].started = true;
			}
		}
	},

	/**
	* @private
	*/
	applyTransition: function (name, inInstruction) {
		var animation = this.getAnimation(name),
			currentStyle = inInstruction.control[this.transitionProperty],
			transitionTime = (inInstruction.endTime - inInstruction.startTime)*animation.duration/(100*1000),
			newStyle = currentStyle ? currentStyle + ', ' : '',
			transitionProperty = this.transitionProperty;

		newStyle += inInstruction.property + ' ' + transitionTime + 's ' + animation.timingFunction + ' 0s';

		inInstruction.control.applyStyle(transitionProperty, newStyle);

		// we arbitrarily cache this value for cheaper lookup later
		inInstruction.control[transitionProperty] = newStyle;

		inInstruction.control.applyStyle(inInstruction.property, inInstruction.endValue);

		//  this.log(inInstruction.control.id+'.applyStyle('+transitionProperty+', '+newStyle+')');
		//  this.log(inInstruction.control.id+'.applyStyle('+inInstruction.property+', '+inInstruction.endValue+')');
	},

	/**
	* Begins stepping.
	*
	* @private
	*/
	beginStepping: function () {
		if (!this.stepInterval) {
			this.stepInterval = setInterval(this.bindSafely('_step'), this.stepIntervalMS);
		}
	},

	/**
	* Stops stepping.
	*
	* @private
	*/
	stopStepping: function () {
		if (this.stepInterval) {
			clearInterval(this.stepInterval);
			this.stepInterval = null;
		}
	},

	/**
	* Steps through each playing animation.
	*
	* @private
	*/
	_step: function () {
		var playingAnimations = false,
			now = utils.perfNow(),
			animation,
			elapsed,
			i;

		for (i = 0; (animation = this.animations[i]); i++) {
			if (animation.state === 'paused') {
				continue;
			}

			elapsed = now - animation.startTime;

			// If complete, bail
			if (elapsed > animation.duration) {
				if (animation.percentElapsed != 100) {
					this.applyTransitions(animation.name, 100);
				}
				animation.percentElapsed = 100;
				this.doStep({animation: animation});
				this.completeAnimation(animation.name);
				return;
			}

			animation.timeElapsed = elapsed;
			animation.percentElapsed = Math.round(elapsed*100/animation.duration);
			this.applyTransitions(animation.name, animation.percentElapsed);
			playingAnimations = true;

			// Bubble step event
			this.doStep({animation: animation});
		}

		if (!playingAnimations) {
			this.stop();
		}
	},

	/**
	* @private
	*/
	completeAnimation: function (name) {
		var animation = this.getAnimation(name);

		this._pause(name);
		this._reset(name);
		this.doComplete({animation: animation});
	},

	/**
	* Resets transition properties to their pre-transition values.
	*
	* @private
	*/
	_reset: function (name) {
		var animation = this.getAnimation(name);
		for(var item in animation.startValues) {
			animation.startValues[item].control.applyStyle(this.transitionProperty, animation.startValues[item].properties[this.transitionProperty]);
		}
	},

	/**
	* @private
	*/
	_pause: function (name) {
		var animation = this.getAnimation(name);
		animation.state = 'paused';
	}
});
},{"../../../enyo/lib/Component":23,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/logger":97,"../../../enyo/lib/utils":106,"../../../moonstone":119}],188:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Table = require('../../../enyo/lib/Table'),
	TableRow = require('../../../enyo/lib/TableRow'),
	TableCell = require('../../../enyo/lib/TableCell');

/**
* {@link moon.TableCell} extends {@link enyo.TableCell}, adding Moonstone visual
* styling.
*
* @class moon.TableCell
* @extends enyo.TableCell
* @ui
* @public
*/
var TableCell = kind(
	/** @lends moon.TableCell.prototype */ {

	/**
	* @private
	*/
	name: 'moon.TableCell',

	/**
	* @private
	*/
	kind: TableCell,

	/**
	* @private
	*/
	classes: 'moon-table-cell'
});

/**
* {@link moon.TableRow} extends {@link enyo.TableRow}, adding Moonstone visual
* styling.
*
* @class moon.TableRow
* @extends enyo.TableRow
* @ui
* @public
*/
var TableRow = kind(
	/** @lends moon.TableRow.prototype */ {

	/**
	* @private
	*/
	name: 'moon.TableRow',

	/**
	* @private
	*/
	kind: TableRow,

	/**
	* @private
	*/
	classes: 'moon-table-row',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	defaultKind: TableCell
});

/**
* {@link moon.Table} extends {@link enyo.Table}, adding Moonstone visual styling.
*
* @class moon.Table
* @extends enyo.Table
* @ui
* @public
*/
var Table = module.exports = kind(
	/** @lends moon.Table.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Table',

	/**
	* @private
	*/
	kind: Table,

	/**
	* @private
	*/
	classes: 'moon-table',

	/**
	* @private
	*/
	defaultKind: TableRow
});

Table.Row = TableRow;
Table.Cell = TableCell;
},{"../../../enyo/lib/Table":73,"../../../enyo/lib/TableCell":74,"../../../enyo/lib/TableRow":75,"../../../enyo/lib/kind":96,"../../../moonstone":119}],189:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	TextArea = require('../../../enyo/lib/TextArea');

/**
* {@link moon.TextArea} is a Moonstone-styled text input field, derived from
* {@link enyo.TextArea}. Typically, a `moon.TextArea` is placed inside
* a {@link moon.InputDecorator}, which provides styling, e.g.:
*
* ```
* {kind: 'moon.InputDecorator', components: [
*	{kind: 'moon.TextArea', onchange: 'inputChange'}
* ]}
* ```
*
* For more information, see the documentation on
* [Text Fields]{@linkplain $dev-guide/building-apps/controls/text-fields.html}
* in the Enyo Developer Guide.
*
* @class moon.TextArea
* @extends enyo.TextArea
* @ui
* @public
*/
module.exports = kind(
	/** @lends  moon.TextArea.prototype */ {

	/**
	* @private
	*/
	name: 'moon.TextArea',

	/**
	* @private
	*/
	kind: TextArea,

	/**
	* @private
	*/
	classes: 'moon-body-text moon-textarea',

	/**
	* @private
	*/
	spotlightIgnoredKeys: [13, 16777221],	// 13==Enter, 16777221==KeypadEnter

	/**
	* @private
	*/
	handlers: {
		onblur: 'blurred'
	},

	/**
	* Sets the focus on the TextArea.
	*
	* @public
	*/
	focus: function () {
		TextArea.prototype.focus.apply(this, arguments);
		var node = this.hasNode();
		// We move the cursor to the end, because in 5-way
		// mode there is no way (other than backspacing) for
		// the user to move the caret within the text field
		node.selectionStart = this.value.length;
		node.scrollTop = node.scrollHeight;
	},

	/**
	* Removes focus from the TextArea.
	*
	* @public
	*/
	blur: function () {
		if (this.hasNode()) {
			this.node.blur();
		}
	},

	/**
	* @private
	*/
	blurred: function () {
		this.hasNode().scrollTop = 0;
	},

	/**
	* @private
	*/
	left: function (inEvent) {
		if (!this.hasNode() || this.node.selectionStart === 0) {
			return false;
		}
		return true;
	},

	/**
	* @private
	*/
	right: function (inEvent) {
		if (!this.hasNode() || this.node.selectionStart == this.node.value.length) {
			return false;
		}
		return true;
	},

	/**
	* @private
	*/
	up: function (inEvent) {
		return this.left(inEvent);
	},

	/**
	* @private
	*/
	down: function (inEvent) {
		return this.right(inEvent);
	}
});
},{"../../../enyo/lib/TextArea":76,"../../../enyo/lib/kind":96,"../../../moonstone":119}],194:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Popup = require('../../../enyo/lib/Popup'),
	Component = require('../../../enyo/lib/Component'),
	Signals = require('../../../enyo/lib/Signals');

// To prevent lingering tooltips, we're monitoring spotlight changes and tooltip display
// to ensure that only 1 tooltip is active.
// see BHV-14524, ENYO-247
var observer = new Component({

	/**
	* Last active tooltip
	* @private
	*/
	active: null,

	/**
	* @private
	*/
	components: [
		{kind: Signals, onSpotlightCurrentChanged: 'spotChanged'}
	],

	/**
	* @private
	*/
	activeChanged: function (was) {
		if(was) {
			was.waterfall('onRequestHideTooltip');
		}
	},

	/**
	* @private
	*/
	spotChanged: function (sender, event) {
		this.set('active', null);
	}
});

/**
* {@link moon.Tooltip} is a popup that works in conjunction with
* {@link moon.TooltipDecorator}. The tooltip is automatically displayed when the
* user hovers over the decorator for a given period of time. The tooltip is
* positioned around the decorator where there is available window space.
*
* ```
* {kind: 'moon.TooltipDecorator', components: [
*	{kind: 'moon.Button', content: 'Tooltip'},
*	{kind: 'moon.Tooltip', content: 'I am a tooltip for a button.'}
* ]}
* ```
*
* You may force the tooltip to appear by calling its [show()]{@link enyo.Control#show} method.
*
* @class moon.Tooltip
* @extends enyo.Popup
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Tooltip.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Tooltip',

	/**
	* @private
	*/
	kind: Popup,

	/**
	* @private
	*/
	classes: 'moon-tooltip below left-arrow',

	/**
	* @private
	* @lends moon.Tooltip.prototype
	*/
	published: {
		/**
		* This value overrides the default value of
		* [autoDismiss]{@link enyo.Popup#autoDismiss} inherited from {@link enyo.Popup}.
		* If `true`, the tooltip will hide when the user taps outside of it or presses
		* ESC. Note that this property only affects behavior when the tooltip is used
		* independently, not when it is used with
		* [TooltipDecorator]{@link moon.TooltipDecorator}.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoDismiss: false,

		/**
		* Hovering over the decorator for this length of time (in milliseconds) causes the
		* tooltip to appear.
		*
		* @type {Number}
		* @default 500
		* @public
		*/
		showDelay: 500,

		/**
		* Position of the tooltip with respect to the activating control. Valid values are
		* `'above'`, `'below'`, and `'auto'`.
		*
		* @type {String}
		* @default 'auto'
		* @public
		*/
		position: 'auto',

		/**
		* Default `margin-left` value.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		defaultLeft: 0,

		/**
		* When `true`, the content will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true,

		/**
		* @deprecated Replaced by [uppercase]{@link moon.Tooltip#uppercase}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		contentUpperCase: null
	},

	/**
	* @private
	*/
	captureEvents: false,

	/**
	* @private
	*/
	handlers: {
		onRequestShowTooltip: 'requestShow',
		onRequestHideTooltip: 'requestHide'
	},

	/**
	* @private
	*/
	tools: [
		{name: 'client', kind: Control, classes: 'moon-tooltip-label moon-header-font'}
	],

	/**
	* @private
	*/
	initComponents: function () {
		this.createChrome(this.tools);
		Popup.prototype.initComponents.apply(this, arguments);
	},

	/**
	* @private
	*/
	create: function () {
		Popup.prototype.create.apply(this, arguments);

		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the contentUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.contentUpperCase !== null) this.uppercase = this.contentUpperCase;

		this.contentChanged();
	},

	/**
	* @private
	*/
	contentChanged: function () {
		this.detectTextDirectionality();
		var content = this.getContent();
		this.$.client.setContent( this.get('uppercase') ? util.toUpperCase(content) : content);
	},

	/**
	* @private
	*/
	uppercaseChanged: function () {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// contentUpperCase is fully deprecated and removed.
		if (this.contentUpperCase != this.uppercase) this.contentUpperCase = this.uppercase;
		this.contentChanged();
	},

	/**
	* @private
	*/
	contentUpperCaseChanged: function () {
		if (this.uppercase != this.contentUpperCase) this.uppercase = this.contentUpperCase;
		this.uppercaseChanged();
	},

	/**
	* @private
	*/
	positionChanged:function () {
		Popup.prototype.positionChanged.apply(this, arguments);
		this.adjustPosition(true);
	},

	/**
	* @private
	*/
	requestShow: function (inSender, inEvent) {
		observer.set('active', this);
		this.activator = inEvent.originator;
		this.startJob('showJob', 'show', this.showDelay);
		return true;
	},

	/**
	* @private
	*/
	cancelShow: function () {
		this.stopJob('showJob');
	},

	/**
	* @private
	*/
	requestHide: function () {
		this.cancelShow();
		return Popup.prototype.requestHide.apply(this, arguments);
	},

	/**
	* @private
	*/
	showingChanged: function () {
		this.cancelShow();
		Popup.prototype.showingChanged.apply(this, arguments);
	},

	/**
	* @private
	*/
	applyPosition: function (inRect) {
		var s = '';
		for (var n in inRect) {
			s += (n + ':' + inRect[n] + (isNaN(inRect[n]) ? '; ' : 'px; '));
		}
		this.addStyles(s);
	},

	/**
	* @private
	*/
	adjustPosition: function (belowActivator) {
		if (this.showing && this.hasNode()) {
			var b = this.node.getBoundingClientRect(),
				moonDefaultPadding = 20,
				pBounds = this.parent.getAbsoluteBounds(),
				acBounds =null;

			acBounds = this.activator.getAbsoluteBounds();

			//* Calculate the difference between decorator and activating
			//* control's top, left, right differences, position tooltip against
			//* the activating control instead of the decorator accordingly.
			var paTopDiff = pBounds.top - acBounds.top,
				paLeftDiff =  acBounds.left - pBounds.left,
				paRightDiff = pBounds.left + pBounds.width - acBounds.left - acBounds.width,
				acRight = window.innerWidth - moonDefaultPadding - acBounds.left - acBounds.width;

			//* When there is not enough room in the bottom, move it above the
			//* decorator; when the tooltip bottom is within window height but
			//* set programmatically above, move it above
			if ((window.innerHeight - moonDefaultPadding) - (pBounds.top + pBounds.height) < b.height + 5 || (this.position == 'above')) {
				this.removeClass('below');
				this.addClass('above');
				if (this.get('floating')) {
					this.applyPosition({'top': dom.unit((acBounds.top - b.height - 5),'rem'), 'left': dom.unit(acBounds.left + acBounds.width / 2, 'rem'), 'right': 'auto'});
				} else {
					this.applyPosition({'top': dom.unit(-(b.height + 5 + paTopDiff), 'rem'), 'left': dom.unit(acBounds.width / 2 + paLeftDiff, 'rem'), 'right': 'auto'});
				}
			}

			//* When there is not enough space above the parent container, move
			//* it below the decorator; when there is enough space above the
			//* parent container but is set programmatically, leave it below
			if (pBounds.top < (b.height + 5) || (this.position == 'below') || this.hasClass('below')) {
				this.removeClass('above');
				this.addClass('below');
				if (this.get('floating')) {
					this.applyPosition({'top': acBounds.top + acBounds.height + 5 + 'px', 'left': acBounds.left + acBounds.width / 2 + 'px', 'right': 'auto'});
				} else {
					this.applyPosition({'top': pBounds.height + 5 + paTopDiff + 'px', 'left': acBounds.width / 2 + paLeftDiff + 'px', 'right': 'auto'});
				}
			}

			//* When there is not enough room on the left, using right-arrow for the tooltip
			if (window.innerWidth - moonDefaultPadding - pBounds.left - pBounds.width / 2 < b.width){
				//* use the right-arrow
				this.removeClass('left-arrow');
				this.addClass('right-arrow');
				this.applyPosition({'margin-left': dom.unit(- b.width, 'rem'), 'left': 'auto'});
				if (this.floating) {
					this.applyStyle('right', dom.unit(acBounds.width / 2 + acRight + moonDefaultPadding, 'rem'));
				} else {
					this.applyStyle('right', dom.unit(acBounds.width / 2 + paRightDiff, 'rem'));
				}
			} else {
				this.removeClass('right-arrow');
				this.addClass('left-arrow');
			}
		}
	},

	/**
	* @private
	*/
	handleResize: function () {
		this.applyPosition({'margin-left': this.defaultLeft, 'bottom': 'auto'});
		this.adjustPosition(true);
		Popup.prototype.handleResize.apply(this, arguments);
	}
});
},{"../../../enyo/lib/Component":23,"../../../enyo/lib/Control":26,"../../../enyo/lib/Popup":56,"../../../enyo/lib/Signals":68,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119}],198:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

/**
* {@link moon.VideoInfoBackground} is a [control]{@link enyo.Control} that provides a
* stylized background for [components]{@link enyo.Component} placed in the
* [infoComponents]{@link moon.VideoPlayer#infoComponents} block of a {@link moon.VideoPlayer}.
* It is designed as a decorator, wrapping the components inside with the stylized background.
* 
* Use the [orient]{@link moon.VideoInfoBackground#orient} property to set the orientation 
* (`'left'` or `'right'`).
* 
* For more details, see {@link moon.VideoPlayer}.
*
* @class moon.VideoInfoBackground
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.VideoInfoBackground.prototype */ {

	/**
	* @private
	*/
	name: 'moon.VideoInfoBackground',

	/**
	* @private
	*/
	kind: Control,
	
	/**
	* @private
	*/
	classes: 'moon-background-wrapper',
	
	/**
	* @private
	* @lends moon.VideoInfoBackground.prototype
	*/
	published: {
		
		/** 
		* Orientation of the control; valid values are `'left'` and `'right'`.
		*
		* @type {String}
		* @default 'left'
		* @public
		*/
		orient: 'left',

		/**
		* When `true`, background color is set to black; otherwise, background is transparent.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		background: true
	},
	
	/**
	* @private
	*/
	components: [
		{name: 'client', kind: Control, classes: 'moon-background-wrapper-client-content'}
	],

	/**
	* @private
	*/
	initComponents: function() {
		Control.prototype.initComponents.apply(this, arguments);
		this.orientChanged();
		this.backgroundChanged();
	},

	/**
	* @private
	*/
	orientChanged: function() {
		this.$.client.addRemoveClass('right', this.orient != 'left');
		this.$.client.addRemoveClass('left', this.orient == 'left');
	},

	/**
	* @private
	*/
	backgroundChanged: function() {
		this.$.client.addRemoveClass('bg', this.background);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119}],30:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind'),
	utils = require('../utils');
var
	DataRepeater = require('../DataRepeater'),
	EventEmitter = require('../EventEmitter'),
	VerticalDelegate = require('../VerticalDelegate'),
	HorizontalDelegate = require('../HorizontalDelegate'),
	Scroller = require('../Scroller');

/**
* The {@glossary event} [object]{@glossary Object} that is provided when the
* [paging]{@link enyo.DataList#paging} event is fired.
*
* @typedef {Object} enyo.DataList~PagingEvent
* @property {Number} start - The lowest active index in the dataset.
* @property {Number} end - The highest active index.
* @property {String} action - The action that triggered the paging, either `'scroll'`
* or `'reset'`.
*/

/**
* Fires each time data is paged, on a per-page basis.
*
* @event enyo.DataList#paging
* @type {Object}
* @property {Object} sender - A reference to the {@link enyo.DataList}.
* @property {String} nom - The name of the {@glossary event}.
* @property {enyo.DataList~PagingEvent} event - A [hash]{@glossary Object} with properties
*	specific to this event.
* @public
*/

/**
* When this property is specified, we force the static usage of this value instead of
* dynamically calculating the number of controls per page based upon the viewport size.
*
* @name enyo.DataList#controlsPerPage
* @type {Number}
* @default undefined
* @public
*/

/**
* {@link enyo.DataList} is an {@link enyo.DataRepeater} that employs a paginated
* scrolling scheme to enhance performance with larger datasets. The data is provided
* to the DataList by an {@link enyo.Collection} set as the value of its
* `collection` property and accessed by calling [data()]{@link enyo.DataRepeater#data}.
*
* Note that care should be taken when deciding how to lay out the list's children. When
* there are a large number of child [elements]{@link enyo.Control}, the layout process
* can be taxing and non-performant for the browser. Avoid dynamically-updated
* [layouts]{@glossary layout} that require lots of calculations each time the data in a
* view is updated. Try to use CSS whenever possible.
*
* While paging through data, `enyo.DataList` emits the
* [paging]{@link enyo.DataList#paging} event, which allows you to make updates as
* necessary, on a per-page basis. You may register for this event by calling
* [addListener()]{@link enyo.EventEmitter#addListener} and specifying the event,
* along with a callback method.
*
* @class enyo.DataList
* @extends enyo.DataRepeater
* @ui
* @public
*/
var DataList = module.exports = kind(
	/** @lends enyo.DataList.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.DataList',

	/**
	* @private
	*/
	kind: DataRepeater,

	/**
	* {@link enyo.DataList} places its rows inside of a [scroller]{@link enyo.Scroller}.
	* Any configurable options of {@link enyo.Scroller} may be placed in the
	* `scrollerOptions` [hash]{@glossary Object}; their values will be set on the
	* DataList's scroller accordingly. If no options are specified, the default
	* `enyo.Scroller` settings will be used.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	scrollerOptions: null,

	/**
	* The paging orientation. Valid values are `'vertical'` and `'horizontal'`. This property
	* will be mapped to a particular strategy governing how the list will flow.
	*
	* @type {String}
	* @default 'vertical'
	* @public
	*/
	orientation: 'vertical',

	/**
	* While page sizing is typically handled automatically, some platforms may benefit from
	* having a larger or smaller value set for this property. If a number is specified, it
	* will be multiplied by the available viewport size (depending on
	* [orientation]{@link enyo.DataList#orientation}) to determine the minimum page size.
	* The page size is directly related to the number of [controls]{@link enyo.Control} that
	* are generated at any given time (and that subsequently need updating) whenever paging
	* occurs. This value may be any rational number greater than `1.2`.
	*
	* @type {Number}
	* @default 1.2
	* @public
	*/
	pageSizeMultiplier: null,

	/**
	* It is helpful for performance if the [DataList]{@link enyo.DataList} doesn't need to
	* guess the size of the children. In cases where all children are a fixed height (or
	* width, depending on the [orientation]{@link enyo.DataList#orientation} of the list),
	* you may explicitly define the size of the fixed dimension and thus allow the list to
	* bypass much of its guesswork. This value is a number that will be interpreted in
	* pixels and applied to the primary size depending on the list's `orientation` (i.e.,
	* it will be applied to `height` when the `orientation` is `'vertical'`, and to `width`
	* when the `orientation` is `'horizontal'`). Note that the list does not apply this
	* value to the children via CSS.
	*
	* @type {Number}
	* @default null
	* @public
	*/
	fixedChildSize: null,

	/**
	* To disable the default smoothing-transitions (for supported platforms), set this flag to
	* `false`.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	allowTransitions: true,

	/**
	* Because some systems perform poorly on initialization, there is a delay when we
	* attempt to actually draw the contents of a [DataList]{@link enyo.DataList}. Usually,
	* you will not need to adjust this value, which is expressed in milliseconds. If
	* `renderDelay` is `null`, there will be no delay and rendering will take place
	* synchronously; if `renderDelay` is set to `0`, rendering will be done
	* asynchronously.
	*
	* @type {Number}
	* @default 250
	* @public
	*/
	renderDelay: 250,

	/**
	* Percentage (as a number between 0 and 1) of a control that must be visible to be counted
	* by {@link enyo.DataList#getVisibleControls}.
	*
	* @type {Number}
	* @default 0.6
	* @public
	*/
	visibleThreshold: 0.6,

	/**
	* This is an inclusive list of all methods that can be queued,
	* and the prefered order they should execute, if a method is
	* not listed, it will NOT be called ever.
	*
	* @private
	*/
	_absoluteShowingPriority:['reset', 'refresh', 'finish rendering', 'scrollToIndex', 'didResize' , 'select'],

	/**
	* Completely resets the current [list]{@link enyo.DataList} such that it scrolls to the top
	* of the scrollable region and regenerates all of its children. This is typically necessary
	* only on initialization or if the entire dataset has been swapped out.
	*
	* @public
	*/
	reset: function () {
		if (this.get('absoluteShowing')) {
			// we can only reset if we've already rendered
			if (this.generated && this.$.scroller.generated) {
				this.delegate.reset(this);
			}
		} else {
			this._addToShowingQueue('reset', this.reset);
		}
	},

	/**
	* Unlike [reset()]{@link enyo.DataList#reset}, which tears down and regenerates the entire
	* [list]{@link enyo.DataList}, this method attempts to refresh the pages as they are against
	* the current dataset. This is much cheaper to call than `reset()`, but is primarily used
	* internally.
	*
	* @public
	*/
	refresh: function (c, e) {
		if (this.get('absoluteShowing')) {
			if (this.hasRendered) {
				this.delegate.refresh(this);
			}
		} else {
			this._addToShowingQueue('refresh', this.refresh);
		}
	},

	/**
	* Pass in an integer within the bounds of the [list's]{@link enyo.DataList}
	* [collection]{@link enyo.DataRepeater#data} to scroll to the position of that
	* index in the list.
	*
	* @param {Number} idx - The index in the [list's]{@link enyo.DataList}
	*	[collection]{@link enyo.DataRepeater#data} to scroll to.
	* @public
	*/
	scrollToIndex: function (idx) {
		var len = this.collection? this.collection.length: 0;
		if (idx >= 0 && idx < len) {
			if (this.get('absoluteShowing')) {
				this.delegate.scrollToIndex(this, idx);
			} else {
				this._addToShowingQueue('scrollToIndex', function () {
					this.delegate.scrollToIndex(this, idx);
				});
			}
		}
	},

	/**
	* Returns the `start` and `end` indices of the visible controls. Partially visible controls
	* are included if the amount visible exceeds the {@link enyo.DataList#visibleThreshold}.
	*
	* This operation is *layout intesive* and should not be called during scrolling.
	*
	* @return {Object}
	* @public
	*/
	getVisibleControlRange: function () {
		return this.delegate.getVisibleControlRange(this);
	},

	/**
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.metrics       = {};
			this.metrics.pages = {};
			if (this.pageSizeMultiplier !== null && !isNaN(this.pageSizeMultiplier)) {
				this.pageSizeMultiplier = Math.max(1.2, this.pageSizeMultiplier);
			}
		};
	}),

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			// if we can, we use transitions
			this.allowTransitionsChanged();
			// map the selected strategy to the correct delegate for operations
			// on the list, default to _vertical_ if none is provided or if it
			// could not be found
			this.delegate = this.ctor.delegates[this.orientation] || this.base.delegates.vertical;
			// if the delegate has an initialization routine execute it now before the
			// container and children are rendered
			if (this.delegate.initList) {
				this.delegate.initList(this);
			}
			sup.apply(this, arguments);
			// initialize the _pages_ array and add the pages to it
			this.pages = [this.$.page1, this.$.page2];
		};
	}),

	/**
	* @method
	* @private
	*/
	render: kind.inherit(function (sup) {
		return function () {
			this.$.scroller.canGenerate = false;
			this.$.scroller.teardownRender();
			sup.apply(this, arguments);
		};
	}),

	/**
	* Attempts to perform initialization. There are only a few basic startup paths, but it's
	* important to be aware of what they are:
	*
	* - The view is rendered, it has a collection, and the collection has data.
	* - The view is rendered, it has a collection with no data, and data is added
		later.
	* - The view is rendered, but has no collection.
	*
	* Once the [list]{@link enyo.DataList} itself is rendered, we check to see if we have a
	* [collection]{@link enyo.Collection}; if so, do we have any data to start rendering the
	* rest of the list? Ultimately, the implementation decisions are decided by the
	* [delegate]{@glossary delegate} strategy.
	*
	* @private
	*/
	rendered: function () {
		// Initialize / sync the internal absoluteShowing property when we're rendered
		this.absoluteShowing = this.getAbsoluteShowing(true);
		// actually rendering a datalist can be taxing for some systems so
		// we arbitrarily delay showing for a fixed amount of time unless delay is
		// null in which case it will be executed immediately
		var finishRendering = function () {
			if (this.get('absoluteShowing')) {
				// now that the base list is rendered, we can safely generate our scroller
				this.$.scroller.canGenerate = true;
				this.$.scroller.render();
				// and now we hand over the action to our strategy to let it initialize the
				// way it needs to
				this.delegate.rendered(this);
				this.hasRendered = true;
				// now add our class to adjust visibility (if no overridden)
				this.addClass('rendered');
				if (this.didRender) {
					this.didRender();
				}
			} else {
				this._addToShowingQueue('finish rendering', finishRendering);
			}
		};
		if (this.renderDelay === null) {
			finishRendering.call(this);
		} else {
			this.startJob('finish rendering', finishRendering, this.renderDelay);
			// this delay will allow slower systems to keep going and get everything else
			// on screen before worrying about setting up the list
		}
	},

	/**
	* @private
	*/
	_absoluteShowingChanged: function () {
		if (this.get('absoluteShowing') && this._showingQueueMethods) {
			var methods = this._showingQueueMethods;
			var fn;
			this._showingQueueMethods = null;

			for (var i = 0; i < this._absoluteShowingPriority.length; i++) {
				fn = methods[this._absoluteShowingPriority[i]];
				if(fn) fn.call(this);
			}
		}
	},

	/**
	* Creates a deferred Que of methods to run.
	* Methods must be prioritized in [_absoluteShowingPriority]{@link enyo.DataList#_absoluteShowingPriority}
	* @private
	*/
	_addToShowingQueue: function (name, fn) {
		var methods = this._showingQueueMethods || (this._showingQueueMethods = {});
		methods[name] = fn;
	},

	/**
	* This [function]{@glossary Function} is intentionally left blank. In
	* [DataRepeater]{@link enyo.DataRepeater}, it removes the [control]{@link enyo.Control}
	* at the specified index, but that is handled by the [delegate]{@glossary delegate} here.
	*
	* @private
	*/
	remove: function (idx) {},

	/**
	* Async wrapped to work with dynamic paging, when delegate que renders sup _select will then
	* be executed.
	*
	* @private
	*/
	_select: kind.inherit(function (sup) {
		return function (idx, model, select) {

			if (this.$.scroller.canGenerate) {
				if (this.get('absoluteShowing')) {
					sup.apply(this, arguments);
				} else {
					this._addToShowingQueue('select', function () {
						sup.apply(this, [idx, model, select]);
					});
				}
			} else {
				sup.apply(this, arguments);
			}
		};
	}),

	/**
	* Overloaded to call a method of the [delegate]{@glossary delegate} strategy.
	*
	* @private
	*/
	modelsAdded: function (c, e, props) {
		if (c === this.collection && this.$.scroller.canGenerate) {
			if (this.get('absoluteShowing')) {
				this.delegate.modelsAdded(this, props);
			} else {
				this._addToShowingQueue('refresh', this.refresh);
			}
		}
	},
	/**
	* Overloaded to call a method of the [delegate]{@glossary delegate} strategy.
	*
	* @private
	*/
	modelsRemoved: function (c, e, props) {
		if (c === this.collection && this.$.scroller.canGenerate) {
			this.deselectRemovedModels(props.models);
			if (this.get('absoluteShowing')) {
				this.delegate.modelsRemoved(this, props);
			} else {
				this._addToShowingQueue('refresh', this.refresh);
			}
		}
	},

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			if (this.delegate && this.delegate.destroyList) {
				this.delegate.destroyList(this);
			}
			this._showingQueue = null;
			this._showingQueueMethods = null;
			sup.apply(this, arguments);
		};
	}),
	/**
	* Overloaded from base [kind]{@glossary kind} to ensure that the container options
	* correctly apply the [scroller]{@link enyo.Scroller} options before instantiating it.
	*
	* @private
	*/
	initContainer: kind.inherit(function (sup) {
		return function () {
			var o = utils.clone(this.get('containerOptions')),
				s = this.get('scrollerOptions');
			if (s) { utils.mixin(o, s, {exists: true}); }
			this.set('containerOptions', o);
			sup.apply(this, arguments);
		};
	}),
	/**
	* We let the [delegate]{@glossary delegate} strategy manage the {@glossary event},
	* but we arbitrarily return `true` because we don't want the event to propagate
	* beyond this [kind]{@glossary kind}.
	*
	* @private
	*/
	didScroll: function (sender, e) {
		if (this.hasRendered && this.collection && this.collection.length > 0) {
			if (this.heightNeedsUpdate || this.widthNeedsUpdate) {
				// assign this here so that if for any reason it needs to
				// it can reset it
				this.heightNeedsUpdate = this.widthNeedsUpdate = false;
				this.refresh();
			}
			this.delegate.didScroll(this, e);
		}
		return true;
	},
	/**
	* Special override to handle resizing in an attempt to minimize the amount of work
	* we're doing. We don't want to [waterfall]{@link enyo.Component#waterfall} the
	* {@glossary event} to all children, so we hijack the normal handler.
	*
	* @private
	*/
	didResize: function (sender, e) {
		if (this.get('absoluteShowing')) {
			if (this.hasRendered && this.collection) {
				if (this.heightNeedsUpdate || this.widthNeedsUpdate) {
					// assign this here so that if for any reason it needs to
					// it can reset it
					this.heightNeedsUpdate = this.widthNeedsUpdate = false;
					this.refresh();
				}
				this.delegate.didResize(this, e);
			}
		} else {
			this._addToShowingQueue('didResize', this.didResize);
		}
	},

	/**
	* @private
	*/
	showingChangedHandler: kind.inherit(function (sup) {
		return function (sender, e) {
			this.set('absoluteShowing', this.getAbsoluteShowing(true));

			return sup.apply(this, arguments);
		};
	}),
	/**
	* Overload to adjust the root method to be able to find the nested child based on the
	* requested index if its page is currently active. Returns `undefined` if the index is out
	* of bounds or if the [control]{@link enyo.Control} is not currently available.
	*
	* Also see [getChildForIndex()]{@link enyo.Repeater#getChildForIndex}, which calls this
	* method.
	*
	* @private
	*/
	childForIndex: function (i) {
		if (this.generated) {
			return this.delegate.childForIndex(this, i);
		}
	},

	/**
	* @private
	*/
	allowTransitionsChanged: function () {
		this.addRemoveClass('transitions', this.allowTransitions);
	},
	/**
	* {@link enyo.DataList} uses an overloaded container from its base
	* [kind]{@glossary kind}. We set the container to a [scroller]{@link enyo.Scroller}
	* and provide a way to modify the scroller options (via the
	*[scrollerOptions]{@link enyo.DataList#scrollerOptions} [hash]{@link enyo.Object}).
	* All children will reside in one of the two pages owned by the scroller.
	*
	* @private
	*/
	containerOptions: {name: 'scroller', kind: Scroller, components: [
		{name: 'active', classes: 'active', components: [
			{name: 'page1', classes: 'page page1'},
			{name: 'page2', classes: 'page page2'},
			{name: 'buffer', classes: 'buffer'}
		]}
	], canGenerate: false, classes: 'enyo-fit enyo-data-list-scroller'},

	/**
	* We access this [kind's]{@glossary kind} [constructor]{@glossary constructor} and
	* need it to be undeferred at that time.
	*
	* @private
	*/


	/**
	* All of the CSS is relative to this class.
	*
	* @private
	*/
	classes: 'enyo-data-list',

	/**
	* Our initial `controlParent` is us for the flyweight child.
	*
	* @private
	*/
	controlParentName: '',

	/**
	* Of course we set our container to `'scroller'` as needed by the base
	* [kind]{@glossary kind}.
	*
	* @private
	*/
	containerName: 'scroller',
	/**
	* We have to trap the Enyo-generated [onScroll]{@link enyo.Scroller#onScroll}
	* {@glossary event} and let the [delegate]{@glossary delegate} handle it. We also
	* need to catch the `onresize` events so we know when to update our cached sizing.
	* We overload the default handler so that we don't
	* [waterfall]{@link enyo.Component#waterfall} the resizing; we arbitrarily handle it
	* to minimize the amount of work we do.
	*
	* @private
	*/
	handlers: {onScroll: 'didScroll', onresize: 'didResize'},

	/**
	* @private
	*/
	observers: [
		{method: '_absoluteShowingChanged', path: 'absoluteShowing'}
	],

	/**
	* Adds the [EventEmitter]{@link enyo.EventEmitter} [mixin]{@glossary mixin}
	* for the [paging]{@link enyo.DataList#paging} {@glossary event}.
	*
	* @private
	*/
	mixins: [EventEmitter],

	/**
	* All [delegates]{@glossary delegate} are named elsewhere but are stored in these
	* statics.
	*
	* @private
	*/
	statics: {delegates: {vertical: VerticalDelegate, horizontal: HorizontalDelegate}},

	/**
	* An [array]{@glossary Array} of the actual page references for easier access.
	*
	* @private
	*/
	pages: null
});

/**
* All subclasses of {@link enyo.DataList} will have their own static
* [delegates]{@glossary delegate} [hash]{@glossary Object}. This is
* per-[kind]{@glossary kind}, not per-instance.
*
* @private
*/
DataList.subclass = function (ctor) {
	ctor.delegates = utils.clone(ctor.prototype.base.delegates || this.delegates);
};
},{"../../../enyo":12,"../DataRepeater":31,"../EventEmitter":34,"../HorizontalDelegate":40,"../Scroller":66,"../VerticalDelegate":81,"../kind":96,"../utils":106}],166:[function(require,module,exports){
require('../../../moonstone');

var kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	platform = require('../../../enyo/lib/platform'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Component = require('../../../enyo/lib/Component'),
	Signals = require('../../../enyo/lib/Signals');

var
	options = require('../options'),
	HighlightText = require('../HighlightText');

var exports = module.exports = {};

/**
* There are a couple scenarios (window blurs and changing from pointer mode to 5-way) in which
* we'd like to stop an actively on-hover marqueeing control. This private instance manages
* those events centrally to minimize unnecessary Signal's subscribers.
*
* @private
*/
var observer = new Component({

	/**
	* @private
	*/
	hoverControl: null,

	/**
	* @private
	*/
	components: [
		{kind: Signals, onSpotlightModeChanged: 'handleModeChanged', onblur: 'handleBlur'}
	],

	/**
	* @private
	*/
	_setMarqueeOnHoverControl: function(oControl) {
		this.hoverControl = oControl;
	},

	/**
	* @private
	*/
	_getMarqueeOnHoverControl: function() {
		return this.hoverControl;
	},

	/**
	* @private
	*/
	handleModeChanged: function (sender, event) {
		if (!event.pointerMode && this.hoverControl) {
			this.hoverControl._marquee_leave();
		}
	},

	/**
	* @private
	*/
	handleBlur: function (sender, event) {
		if (this.hoverControl) {
			this.hoverControl._marquee_leave();
		}
	}
});

/**
* Fires to queue up a list of child animations.
*
* @event moon.MarqueeSupport#onRequestMarquee
* @type {Object}
* @property {Object} originator - A reference to the originator of this event.
* @property {Boolean} marqueePause - The desired duration in milliseconds that the
* marquee will pause at the end of the animation, before resetting to the beginning.
* @property {Number} marqueeSpeed - The desired speed for the marquee animation,
* in pixels per second.
* @private
*/

/**
* Fires to start marquee animation in a child marquee.
*
* @event moon.MarqueeSupport#onRequestMarqueeStart
* @type {Object}
* @property {Object} originator - A reference to the originator of this event.
* @private
*/

/**
* Fires to halt marquee animation in a child marquee.
*
* @event moon.MarqueeSupport#onRequestMarqueeStop
* @type {Object}
* @property {Object} originator - A reference to the originator of this event.
* @private
*/

/**
* Fires to enable animation in a child marquee. No additional data is sent with this event.
*
* @event moon.MarqueeSupport#onRequestMarqueeEnable
* @type {Object}
* @private
*/

/**
* Fires to disable animation in a child marquee. No additional data is sent with this event.
*
* @event moon.MarqueeSupport#onRequestMarqueeDisable
* @type {Object}
* @private
*/

/**
* Fires when marquee ends. No additional data is sent with this event.
*
* @event moon.MarqueeItem#onMarqueeEnded
* @type {Object}
* @private
*/

/**
* The {@link moon.MarqueeSupport} [mixin]{@glossary mixin} should be used with controls
* that contain multiple marquees whose animation behavior should be synchronized. Calling
* [this.startMarquee()]{@link moon.MarqueeSupport#startMarquee} or
* [this.stopMarquee()]{@link moon.MarqueeSupport#stopMarquee} will start or stop all
* contained marquees.
*
* The following properties, defined on the base kind to which the mixin is applied,
* control the marquee behavior:
*
* [marqueeOnSpotlight]{@link moon.MarqueeSupport#marqueeOnSpotlight}: When `true`, marquee
* starts when control is spotlight focused and ends when it is spotlight blurred.
*
* [marqueeOnHover]{@link moon.MarqueeSupport#marqueeOnHover}: When `true`, marquee runs
* while control is hovered over with the mouse. This property is ignored if
* `marqueeOnSpotlight` is `true`.
*
* [marqueeOnRender]{@link moon.MarqueeSupport#marqueeOnRender}: When `true`, marquee starts
* running as soon as control is rendered, and runs continuously.
*
* [marqueeSpeed]{@link moon.MarqueeSupport#marqueeSpeed}: The speed of the marquee animation,
* in pixels per second.
*
* [marqueeDelay]{@link moon.MarqueeSupport#marqueeDelay}: The delay between spotlight
* focus/hover and the start of the animation. (This is only used when either
* `marqueeOnSpotlight` or `marqueeOnHover` is `true`).
*
* [marqueeOnRenderDelay]{@link moon.MarqueeSupport#marqueeOnRenderDelay}: Used when you want
* the marquee to run on render, after a specified delay.
*
* [marqueePause]{@link moon.MarqueeSupport#marqueePause}: The duration in milliseconds that
* the marquee will pause at the end of the animation, before resetting to the beginning.
*
* @mixin moon.MarqueeSupport
* @public
*/

/** @lends moon.MarqueeSupport.prototype */
var MarqueeSupport = exports.Support = {

	/**
	* @private
	*/
	name: 'MarqueeSupport',

	/**
	* @private
	*/
	_marquee_Handlers: {
		onRequestStartMarquee: '_marquee_requestStartMarquee',
		onSpotlightFocused: '_marquee_spotlightFocused',
		onSpotlightBlur: '_marquee_spotlightBlur',
		onenter: '_marquee_enter',
		onleave: '_marquee_leave',
		onMarqueeEnded: '_marquee_marqueeEnded',
		onresize: '_marquee_resize',

		// Stop propagation of requests coming from parent MarqueeSupport's, since
		// only this MarqueeSupport should be controlling its subordinate children
		onRequestMarquee: '_marquee_stopPropagation',
		onRequestMarqueeStart: '_marquee_stopPropagation',
		onRequestMarqueeStop: '_marquee_stopPropagation'
	},

	/**
	* @private
	*/
	_marquee_active: false,

	/**
	* When `true`, marquee starts when the control is {@link Spotlight} focused and ends
	* when it is spotlight blurred.
	*
	* @type {Boolean}
	* @default undefined
	* @public
	*/
	marqueeOnSpotlight: undefined,

	/**
	* When `true`, marquee runs while the control is hovered over with the mouse. This
	* property is ignored if [marqueeOnSpotlight]{@link moon.MarqueeSupport#marqueeOnSpotlight}
	* is `true`.
	*
	* @type {Boolean}
	* @default undefined
	* @public
	*/
	marqueeOnHover: undefined,

	/**
	* When `true`, marquee starts running as soon as the control is rendered, and runs
	* continuously.
	*
	* @type {Boolean}
	* @default undefined
	* @public
	*/
	marqueeOnRender: undefined,

	/**
	* The speed of the marquee animation, in pixels per second.
	*
	* @type {Number}
	* @default undefined
	* @public
	*/
	marqueeSpeed: undefined,

	/**
	* The delay between spotlight focus/hover and the start of the animation. (This is only
	* used when either [marqueeOnSpotlight]{@link moon.MarqueeSupport#marqueeOnSpotlight} or
	* [marqueeOnHover]{@link moon.MarqueeSupport#marqueeOnHover} is `true`.)
	*
	* @type {Number}
	* @default undefined
	* @public
	*/
	marqueeDelay: undefined,

	/**
	* Used when you want the marquee to run on render, after a specified delay.
	*
	* @type {Number}
	* @default undefined
	* @public
	*/
	marqueeOnRenderDelay: undefined,

	/**
	* The duration in milliseconds that the marquee will pause at the end of the
	* animation, before resetting to the beginning.
	*
	* @type {Number}
	* @default undefined
	* @public
	*/
	marqueePause: undefined,

	/**
	* Initializes marquee timings.
	*
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.marqueeOnSpotlight = (this.marqueeOnSpotlight === undefined) ? true : this.marqueeOnSpotlight;
			this.marqueeOnHover =  (this.marqueeOnHover ===   undefined) ? false :  this.marqueeOnHover;
			this.marqueeSpeed =    (this.marqueeSpeed ===     undefined) ? 60 :    this.marqueeSpeed;
			this.marqueeDelay =    (this.marqueeDelay ===     undefined) ? 1000 :  this.marqueeDelay;
			this.marqueePause =    (this.marqueePause ===     undefined) ? 1000 :  this.marqueePause;
			this.marqueeHold  =    (this.marqueeHold  ===     undefined) ? 2000 :  this.marqueeHold;
			this.marqueeOnRender = (this.marqueeOnRender  === undefined) ? false : this.marqueeOnRender;
			this.marqueeOnRenderDelay = (this.marqueeOnRenderDelay === undefined) ? this.marqueeDelay : this.marqueeOnRenderDelay;
		};
	}),

	/**
	* If {@link moon.MarqueeSupport#marqueeOnRender} is `true`, kicks off marquee animation.
	*
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			if (this.marqueeOnRender && !this.disabled) {
				this.startMarqueeCustomDelay(this.marqueeOnRenderDelay);
			}
		};
	}),

	/**
	* @method
	* @private
	*/
	destroy: kind.inherit(function (sup) {
		return function () {
			if (this === observer._getMarqueeOnHoverControl()) {
				observer._setMarqueeOnHoverControl(null);
			}
			sup.apply(this, arguments);
		};
	}),

	/**
	* @method
	* @private
	*/
	dispatchEvent: kind.inherit(function (sup) {
		return function (sEventName, oEvent, oSender) {
			// Needed for proper onenter/onleave handling
			if (this.strictlyInternalEvents[sEventName] && this.isInternalEvent(oEvent)) {
				return true;
			}
			// FIXME: not sure why events can arrive without event objects, but we guard here for safety
			if (oEvent && !oEvent.delegate) {
				var handler = this._marquee_Handlers[sEventName];
				if (handler){
					this.cachePoint = true;
					if(this[handler](oSender, oEvent)) {
						return true;
					}
				}
			}
			return sup.apply(this, arguments);
		};
	}),

	/**
	* Handles external requests to kick off {@link moon.MarqueeSupport#marqueeStart}.
	*
	* @private
	*/
	_marquee_requestStartMarquee: function () {
		if (this.marqueeOnRender) {
			this.stopMarquee();
			this.startMarquee();
			return true;
		}
	},

	/**
	* On focus, starts child marquees.
	*
	* @private
	*/
	_marquee_spotlightFocused: function (sender, ev) {
		this._marquee_isFocused = true;
		if (this.marqueeOnSpotlight) {
			this.startMarquee();
		}
	},

	/**
	* On blur, halts child marquees.
	*
	* @private
	*/
	_marquee_spotlightBlur: function (sender, ev) {
		this._marquee_isFocused = false;
		if (this.marqueeOnSpotlight) {
			this.stopMarquee();
		}
	},

	/**
	* @private
	*/
	_marquee_enter: function (sender, ev) {
		this._marquee_isHovered = true;
		if ((this.marqueeOnHover && !this.marqueeOnSpotlight) ||
		(this.disabled && this.marqueeOnSpotlight)) {
			if (this.marqueeOnHover) {
				observer._setMarqueeOnHoverControl(this);
			}
			this.startMarquee();
		}
	},

	/**
	* @private
	*/
	_marquee_leave: function (sender, ev) {
		this._marquee_isHovered = false;
		if ((this.marqueeOnHover && !this.marqueeOnSpotlight) || (this.disabled && this.marqueeOnSpotlight)) {
			if (this.marqueeOnHover) {
				observer._setMarqueeOnHoverControl(null);
			}
			this.stopMarquee();
		}
	},

	/**
	* @private
	*/
	_marquee_stopPropagation: function (sender, ev) {
		if (ev.originator != this) {
			return true;
		}
	},

	/**
	* When a child marquee animation completes, removes the child from
	* [marqueeWaitList]{@link moon.MarqueeSupport#marqueeWaitList}.
	*
	* @private
	*/
	_marquee_marqueeEnded: function (sender, ev) {
		if (this._marquee_active) {
			util.remove(ev.originator, this.marqueeWaitList);
			if (this.marqueeWaitList.length === 0) {
				this._marquee_startHold();
				this._marquee_active = false;
			}
		}
		return true;
	},

	/**
	* @private
	*/
	_marquee_resize: function (sender, ev) {
		if (this.marqueeOnSpotlight && this._marquee_active) {
			this._marquee_active = false;
			this._marquee_startHold();
		}
	},

	/**
	* Starts timer to waterfall an
	* [onRequestMarqueeStart]{@link moon.MarqueeSupport#onRequestMarqueeStart} event
	* that kicks off marquee animation on all child marquees.
	*
	* @public
	*/
	startMarquee: function () {
		this.startMarqueeCustomDelay(this.marqueeDelay);
	},

	/**
	* Waterfalls an [onRequestMarqueeStop]{@link moon.MarqueeSupport#onRequestMarqueeStop}
	* event to halt all running child marquees.
	*
	* @public
	*/
	stopMarquee: function () {
		this.stopJob('marqueeSupportJob');
		this.stopJob('resetMarquee');
		this._marquee_active = false;
		this._marquee_stopChildMarquees();
	},

	/**
	* @public
	*/
	enableMarquee: function () {
		this._marquee_enableChildMarquees();
	},

	/**
	* @public
	*/
	disableMarquee: function () {
		this.stopMarquee();
		this._marquee_disableChildMarquees();
	},

	/**
	* Adds the passed-in [control]{@link enyo.Control} to the list of marquee items.
	*
	* @param {Object} control  The [control]{@link enyo.Control} to add.
	* @public
	*/
	addMarqueeItem: function (control) {
		this.marqueeWaitList.push(control);
	},

	/**
	* Restarts marquee if needed (depending on the
	* [marqueeOnSpotlight]{@link moon.MarqueeSupport#marqueeOnSpotlight} and
	* [marqueeOnRender]{@link moon.MarqueeSupport#marqueeOnRender} settings).
	*
	* @public
	*/
	resetMarquee: function () {
		if ((this.marqueeOnSpotlight && this._marquee_isFocused) ||
			(this.marqueeOnHover && this._marquee_isHovered) ||
			this.marqueeOnRender) {
			// Batch multiple requests to reset from children being hidden/shown
			this.startJob('resetMarquee', '_resetMarquee', 10);
		}
	},

	/**
	* Starts Marquee after a specified delay. Used to provide different delays for `onRender`
	* and `onSpotlight/Hover`.
	*
	* @param {Number} delay  Length of delay in milliseconds
	* @public
	*/
	startMarqueeCustomDelay: function (delay) {
		this._marquee_buildWaitList();

		if (this.marqueeWaitList.length === 0) {
			return;
		}

		this._marquee_active = true;
		this.startJob('marqueeSupportJob', '_marquee_startChildMarquees', delay);
	},

	/**
	* Stops and restarts the marquee animations.
	*
	* @private
	*/
	_resetMarquee: function () {
		this.stopMarquee();
		if (this.marqueeOnRender) { this.startMarqueeCustomDelay(this.marqueeOnRenderDelay); }
		else { this.startMarquee(); }
	},

	/**
	* Waterfalls request for child animations to build up
	* [marqueeWaitList]{@link moon.MarqueeSupport#marqueeWaitList}.
	*
	* @fires moon.MarqueeSupport#onRequestMarquee
	* @private
	*/
	_marquee_buildWaitList: function () {
		this.marqueeWaitList = [];
		this.waterfall('onRequestMarquee', {originator: this, marqueePause: this.marqueePause, marqueeSpeed: this.marqueeSpeed});
	},

	/**
	* Waterfalls event to kick off child marquee animations.
	*
	* @fires moon.MarqueeSupport#onRequestMarqueeStart
	* @private
	*/
	_marquee_startChildMarquees: function () {
		this.waterfall('onRequestMarqueeStart', {originator: this});
	},

	/**
	* Waterfalls event to halt child marquee animations.
	*
	* @fires moon.MarqueeSupport#onRequestMarqueeStop
	* @private
	*/
	_marquee_stopChildMarquees: function () {
		this.waterfall('onRequestMarqueeStop', {originator: this});
	},

	/**
	* Waterfalls event to enable child marquee animations.
	*
	* @fires moon.MarqueeSupport#onRequestMarqueeEnable
	* @private
	*/
	_marquee_enableChildMarquees: function () {
		this.waterfall('onRequestMarqueeEnable');
	},

	/**
	* Waterfalls event to disable child marquee animations.
	*
	* @fires moon.MarqueeSupport#onRequestMarqueeDisable
	* @private
	*/
	_marquee_disableChildMarquees: function () {
		this.waterfall('onRequestMarqueeDisable');
	},

	/**
	* Begins delayed restart of child marquee animations.
	*
	* @private
	*/
	_marquee_startHold: function () {
		this.startJob('marqueeSupportJob', 'startMarquee', this.marqueeHold);
	}
};

/**
* The {@link moon.MarqueeItem} mixin is used to add marquee animation functionality
* to a control.
*
* @mixin moon.MarqueeItem
* @public
*/
var MarqueeItem = exports.Item = /** @lends moon.MarqueeItem.prototype */ {

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.MarqueeItem#onMarqueeEnded}
		*/
		onMarqueeEnded:''
	},

	/**
	* @private
	*/
	_marqueeItem_Handlers: {
		onRequestMarquee: '_marquee_requestMarquee',
		onRequestMarqueeStart: '_marquee_startAnimation',
		onRequestMarqueeStop: '_marquee_stopAnimation',
		onRequestMarqueeEnable: '_marquee_enable',
		onRequestMarqueeDisable: '_marquee_disable',
		ontransitionend: '_marquee_animationEnded'
	},

	/**
	* @private
	*/
	observers: {
		_marquee_contentChanged: ['content'],
		_marquee_centeredChanged: ['centered'],
		_marquee_wrapInsteadOfMarqueeChanged: ['wrapInsteadOfMarquee']
	},

	/**
	* @private
	*/
	bindings: [
		{from: '.allowHtml', to:'.$.marqueeText.allowHtml'}
	],

	/**
	* @private
	*/
	classes: 'moon-marquee',

	/**
	* @method
	* @private
	*/
	dispatchEvent: kind.inherit(function (sup) {
		return function (sEventName, oEvent, oSender) {
			if (sup.apply(this, arguments)) {
				return true;
			}
			if (oEvent && !oEvent.delegate) {
				var handler = this._marqueeItem_Handlers[sEventName];
				if (handler && this[handler](oSender, oEvent)) {
					return true;
				}
			}
		};
	}),

	/**
	* @private
	*/
	_marquee_enabled: true,

	/**
	* @private
	*/
	_marquee_distance: null,

	/**
	* @private
	*/
	_marquee_fits: null,

	/**
	* @private
	*/
	_marquee_puppetMaster: null,

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.detectTextDirectionality();
			this._marquee_wrapInsteadOfMarqueeChanged();
		};
	}),

	/**
	* @method
	* @private
	*/
	rendered: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			// There is a known issue where a parent control that modifies the layout will
			// invalidate the measurements used to detect the proper alignment, which can
			// result in the appropriate text-align rule not being applied. For example, this
			// can occur with a moon.Header that is located inside a moon.Scroller which has
			// vertical scrollbars visible.
			this._marquee_detectAlignment();
		};
	}),

	/**
	* @method
	* @private
	*/
	reflow: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this._marquee_invalidateMetrics();
		};
	}),

	/**
	* @method
	* @private
	*/
	showingChangedHandler: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this._marquee_reset();
		};
	}),

	/**
	* We must measure the content (after render) to determine if it's marqueeable, then to set
	* its alignment to left if the content was explicitly set to LTR earlier. This happens when
	* the locale is set to a RTL language, but your string contains no RTL characters in it.
	* Therefore it's LTR, and if it's marqueeable, should be left aligned, so it marquees in the
	* natural marqueeing direction.
	*
	* @param {Boolean} [forceAnimate]  Override the animation check (only accepts `true`). Use
	*	this if you know already, because you've already measured that you will need to marquee.
	* @param {Boolean} [forceRtl]  Override the internal RTL property, in case you know better.
	* @private
	*/
	_marquee_detectAlignment: function (forceAnimate, forceRtl) {
		var alignment = null,
			rtl = forceRtl || this.rtl;

		// We only attempt to set the alignment of this control if the locale's directionality
		// differs from the directionality of our current marqueeable control (as determined by
		// the control's content or is explicitly specified).
		if (Control.prototype.rtl != rtl || this.centered) {
			// If we will be marqueeing, we know the alignment needs to be set based on directionality.
			if (forceAnimate || this._marquee_shouldAnimate()) {
				if (rtl) {
					alignment = 'right';
				} else {
					alignment = 'left';
				}
			}
			// Alignment wasn't set yet, so we know we don't need to animate. Now we can center the text if we're supposed to.
			if (!alignment && this.centered) {
				alignment = 'center';
			}
		}

		this.set('_marquee_alignment', alignment);
	},

	/**
	* Reset the marquee distance if the alignment changes, since now we'll have to calculate the
	* size again.
	*
	* @private
	*/
	_marquee_alignmentChanged: function () {
		this.applyStyle('text-align', this._marquee_alignment);
		this._marquee_invalidateMetrics();
	},

	/**
	* @private
	*/
	_marquee_invalidateMetrics: function () {
		this._marquee_distance = null;
		this._marquee_fits = null;
	},

	/**
	* When the content of this control changes, updates the content of
	* `this.$.marqueeText` (if it exists).
	*
	* @private
	*/
	_marquee_contentChanged: function () {
		this.detectTextDirectionality();
		if (this.$.marqueeText) {
			this.$.marqueeText.setContent(this.content);
		}
		if (this.generated) {
			this._marquee_invalidateMetrics();
			this._marquee_detectAlignment();
		}
		this._marquee_reset();
	},

	/**
	* If this control needs to marquee, lets the event originator know.
	*
	* @private
	*/
	_marquee_requestMarquee: function (sender, ev) {
		if (!ev || !this.showing || this._marquee_fits) {
			return;
		}

		this._marquee_puppetMaster = ev.originator;
		ev.originator.addMarqueeItem(this);

		this.marqueePause = ev.marqueePause || 1000;
		this.marqueeSpeed = ev.marqueeSpeed || 60;
	},

	/**
	* Starts marquee animation.
	*
	* @private
	*/
	_marquee_startAnimation: function (sender, ev) {
		// if this control hasn't been generated, there's no need to follow through on
		// marquee requests as we'll be unable to correctly measure the distance delta yet
		if (!this.generated) return;

		var distance = this._marquee_calcDistance();

		// If there is no need to animate, return early
		if (!this._marquee_shouldAnimate(distance)) {
			this._marquee_fits = true;
			this.doMarqueeEnded();
			return;
		}

		// Lazy creation of _this.$.marqueeText_
		if (!this.$.marqueeText) {
			this._marquee_createMarquee();
		}

		this._marquee_addAnimationStyles(distance);

		if (this.$.marqueeText) { return true; }
	},

	/**
	* @private
	*/
	_marquee_enable: function () {
		this.set('_marquee_enabled', true);
	},

	/**
	* @private
	*/
	_marquee_disable: function () {
		this.set('_marquee_enabled', false);
		this._marquee_stopAnimation();
	},

	/**
	* Stops marquee animation.
	*
	* @fires moon.MarqueeItem#onMarqueeEnded
	* @private
	*/
	_marquee_stopAnimation: function (sender, ev) {
		this.stopJob('stopMarquee');
		this._marquee_removeAnimationStyles();
		this.doMarqueeEnded();
	},

	/**
	* When animation ends, starts `this.stopMarquee` job.
	*
	* @private
	*/
	_marquee_animationEnded: function (sender, ev) {
		if (ev.originator !== this.$.marqueeText) {
			return;
		}

		this.startJob('stopMarquee', '_marquee_stopAnimation', this.marqueePause);
		return true;
	},

	/**
	* Returns `true` if this control has enough content to animate.
	*
	* @private
	*/
	_marquee_shouldAnimate: function (distance) {
		distance = (distance && distance >= 0) ? distance : this._marquee_calcDistance();
		return (distance > 0);
	},

	/**
	* Determines how far the marquee needs to scroll.
	*
	* @private
	*/
	_marquee_calcDistance: function () {
		var node, rect;

		if (this._marquee_distance == null) {
			node = this.$.marqueeText ? this.$.marqueeText.hasNode() : this.hasNode();
			rect = node.getBoundingClientRect();
			this._marquee_distance = Math.floor(Math.abs(node.scrollWidth - rect.width));
		}

		return this._marquee_distance;
	},

	/**
	* Returns duration based on `distance` and `this.marqueeSpeed`.
	*
	* @private
	*/
	_marquee_calcDuration: function (distance) {
		return distance / this.marqueeSpeed;
	},

	/**
	* Creates a marquee-able `div` inside of `this`.
	*
	* @private
	*/
	_marquee_createMarquee: function () {
		// Do not create marqueeText when there is components block,
		// because we don't know what should be the controlParent
		if (this.components && this.components.length > 0) return;
		var marqueeText = {name: 'marqueeText', kind: Control, classes: 'moon-marquee-text', allowHtml: this.allowHtml, content: this.content},
			highlightText = null;

		if (this instanceof HighlightText) {
			dom.setInnerHtml(this.hasNode(), '');
			highlightText = {renderDelegate: this.renderDelegate, highlightClasses: this.highlightClasses, search: this.search};
			marqueeText = util.mixin(marqueeText, highlightText);
		}
		this.createComponent({name: 'marqueeTextWrapper', kind: Control, classes: 'moon-marquee-text-wrapper', components: [marqueeText]});
		this.render();
		return true;
	},

	/**
	* @private
	*/
	_marquee_addAnimationStyles: function (distance) {
		if (!this.$.marqueeText) return;
		var duration = this._marquee_calcDuration(distance);

		this.$.marqueeText.addClass('animate-marquee');

		if (options.accelerate) {
			dom.transform(this, {translateZ: 0});
			this.$.marqueeText.applyStyle('transition', 'transform ' + duration + 's linear');
			this.$.marqueeText.applyStyle('-webkit-transition', '-webkit-transform ' + duration + 's linear');
		} else {
			this.$.marqueeText.applyStyle('transition', 'left ' + duration + 's linear');
			this.$.marqueeText.applyStyle('-webkit-transition', 'left ' + duration + 's linear');	
		}

		// Need this timeout for FF!
		setTimeout(this.bindSafely(function () {
			if (options.accelerate) {
				dom.transform(this.$.marqueeText, {translateX: this._marquee_adjustDistanceForRTL(distance) + 'px'});
			} else {
				this.$.marqueeText.applyStyle('left', this._marquee_adjustDistanceForRTL(distance) + 'px');
			}
		}), platform.firefox ? 100 : 16);
	},

	/**
	* @private
	*/
	_marquee_removeAnimationStyles: function () {
		if (!this.$.marqueeText) {
			return;
		}

		this.$.marqueeText.applyStyle('transition-duration', '0s');
		this.$.marqueeText.applyStyle('-webkit-transition-duration', '0s');

		// Need this timeout for FF!
		/**
		* @private
		*/
		setTimeout(this.bindSafely(function () {
			this.$.marqueeText.removeClass('animate-marquee');
			if (options.accelerate) {
				dom.transform(this.$.marqueeText, {translateX: null});
				dom.transform(this, {translateZ: null});
			} else {
				this.$.marqueeText.applyStyle('left', null);
			}
		}), platform.firefox ? 100 : 0);
	},

	/**
	* Flips distance value for RTL support.
	*
	* @private
	*/
	_marquee_adjustDistanceForRTL: function (distance) {
		return this.rtl ? distance : distance * -1;
	},

	/**
	* @private
	*/
	_marquee_reset: function () {
		this._marquee_invalidateMetrics();
		if (this._marquee_puppetMaster) {
			this._marquee_puppetMaster.resetMarquee();
		}
	},

	/**
	* @private
	*/
	_marquee_centeredChanged: function () {
		this._marquee_detectAlignment();
	},

	/**
	* @private
	*/
	_marquee_wrapInsteadOfMarqueeChanged: function(old) {
		if (this.wrapInsteadOfMarquee) {
			this.addClass('allow-wrap');
			if (this.$.marqueeText) {
				this.$.marqueeTextWrapper.destroy();
				this.render();
			}
		}
		if (old && !this.wrapInsteadOfMarquee) {
			this.removeClass('allow-wrap');
			// FIXME: Performing creation here to workaround potential WebKit measuring issue
			// with scrollWidth (under-measures by 10px when marquee components are destroyed
			// when we switch wrapInsteadofMarquee from `false` to `true`, and back to `false`).
			this._marquee_createMarquee();
		}
	}
};

/**
* {@link moon.MarqueeText} is a basic text control that supports marquee animation.
* When `moon.MarqueeText` objects are used inside a
* [moon.MarqueeDecorator]{@link moon.MarqueeDecorator}, the decorator synchronizes
* their start times; the user may start a marquee programmatically by calling
* [startMarquee()]{@link moon.MarqueeSupport#startMarquee}.
*
* ```
* enyo.kind({
* 	name: 'moon.Header',
* 	mixins: ['moon.MarqueeSupport'],
* 	marqueeSpeed: 100,
* 	components: [
* 		{kind: 'moon.MarqueeText', content: 'longText+longText'},
* 		{kind: 'moon.MarqueeText', content: 'longText'}
* 	],
* 	rendered: function () {
* 		this.startMarquee();
* 	}
* });
* ```
*
* To add the marquee feature to a kind, simply use the
* [MarqueeSupport]{@link moon.MarqueeSupport} mixin:
*
* ```
* enyo.kind({
* 	name: 'moon.MarqueeButton',
* 	kind: 'enyo.Button',
* 	mixins: ['moon.MarqueeSupport'],
* 	components: [
* 		{kind:'moon.MarqueeText'}
* 	],
* 	contentChanged: function () {
* 		this.$.marqueeText.setContent(this.content);
* 	}
* });
* ```
*
* @class moon.MarqueeText
* @extends enyo.Control
* @mixes moon.MarqueeItem
* @ui
* @public
*/
exports.Text = kind(
	/** @lends moon.MarqueeText.prototype */ {

	/**
	* @private
	*/
	name: 'moon.MarqueeText',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	mixins: [MarqueeItem],

	/**
	* @private
	* @lends moon.MarqueeText.prototype
	*/
	published: {

		/**
		* The speed of the marquee animation, in pixels per second.
		*
		* @type {Number}
		* @default 60
		* @public
		*/
		marqueeSpeed: 60,

		/**
		* The duration in milliseconds that the marquee will pause at the end of the
		* animation, before resetting to the beginning.
		*
		* @type {Number}
		* @default 1000
		* @public
		*/
		marqueePause: 1000,

		/**
		* When `true`, marqueeing will not occur.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* When `true`, text is centered; otherwise, it is left-aligned.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		centered: false,

		/**
		* When `true`, element wraps instead of marqueeing.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		wrapInsteadOfMarquee: false
	}
});

/**
* {@link moon.MarqueeDecorator} is a wrapper for {@link moon.MarqueeText} objects.
*
* @class moon.MarqueeDecorator
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
exports.Decorator = kind(
	/** @lends moon.MarqueeDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'moon.MarqueeDecorator',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	*/
	style: 'overflow: hidden;'
});
},{"../../../enyo/lib/Component":23,"../../../enyo/lib/Control":26,"../../../enyo/lib/Signals":68,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/platform":102,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../HighlightText":151,"../options":204}],139:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control'),
	Drawer = require('../../../enyo/lib/Drawer');

var
	Spotlight = require('../../../spotlight');

var
	MoonHistory = require('../History'),
	HistorySupport = MoonHistory.HistorySupport;


/**
* {@link moon.FullScreenDrawer} is a content-free drawer that fills the client's
* full screen area.  It is only intended for use inside of {@link moon.Drawer}.
* Users should not instantiate `moon.FullScreenDrawer` directly.
*
* @class moon.FullScreenDrawer
* @extends enyo.Drawer
* @ui
* @protected
*/
var FullScreenDrawer = kind({

	/**
	* @private
	*/
	name: 'moon.FullScreenDrawer',

	/**
	* @private
	*/
	kind: Drawer,

	/**
	* @private
	*/
	handlers: {
		onResizeDrawer: 'resizeDrawer'
	},

	/**
	* @private
	*/
	open: false,

	/**
	* @private
	* @lends moon.FullScreenDrawer.prototype
	*/
	published: {

		/**
		* An object containing the client dimensions for the fullscreen drawer,
		* e.g.:
		* ```
		* drawer.setDrawerProps({height: 100px});
		* ```
		* This property is only intended to be used internally by {@link moon.Drawer}.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		drawerProps: null
	},

	/**
	* @private
	*/
	initComponents: function () {
		Drawer.prototype.initComponents.apply(this, arguments);
		this.$.client.setShowing(true);
	},

	/**
	* @private
	*/
	openChanged: function () {
		this.$.client.show();
		if (this.hasNode()) {
			if (this.$.animator.isAnimating()) {
				this.$.animator.reverse();
			} else {
				var v = this.orient == 'v';
				var d = v ? 'height' : 'width';
				var p = v ? 'top' : 'left';
				var s = this.drawerProps.height;
				// unfixing the height/width is needed to properly
				// measure the scrollHeight/Width DOM property, but
				// can cause a momentary flash of content on some browsers
				this.applyStyle(d, null);

				if (this.animated) {
					this.$.animator.play({
						startValue: this.open ? 0 : s,
						endValue: this.open ? s : 0,
						dimension: d,
						position: p
					});
				} else {
					// directly run last frame if not animating
					this.animatorEnd();
				}
			}
		}
	},

	/**
	* @private
	*/
	animatorEnd: function () {
		if (!this.open) {
			this.$.client.hide();
		}
		if (this.container) {
			this.container.resize();
		}
	},

	/**
	* @private
	*/
	resizeDrawer: function (inSender, inProps) {
		this.drawerProps = inProps;
		if ((this.open) && (!this.$.animator.isAnimating())) {
			this.applyStyle('height', dom.unit(inProps.height, 'rem'));
		}
		return true;
	},

	/**
	* @private
	*/
	drawerPropsChanged: function (){
		this.$.client.applyStyle('height', dom.unit(this.drawerProps.height, 'rem'));
		this.$.client.resize();
		this.$.client.setShowing(this.open);
	}
});

/**
* Fires when either the main drawer or the control drawer is activated. No event-specific
* data is sent with this event.
*
* @event moon.Drawer#onActivate
* @type {Object}
* @public
*/

/**
* Fires when either the main drawer or the control drawer is deactivated. No event-specific
* data is sent with this event.
*
* @event moon.Drawer#onDeactivate
* @type {Object}
* @public
*/

/**
* {@link moon.Drawer}, a control designed for use with {@link moon.Drawers},
* consists of two drawers and a handle.
* The main drawer is populated with any child components that are specified in
* the constructor; the optional second drawer (control drawer) is populated
* with components passed into the
* [controlDrawerComponents]{@link moon.Drawer#controlDrawerComponents} property.
*
* If the second drawer has no components, the main drawer will take up the full
* height of the containing view; otherwise, its height will be equal to the
* height of the containing view minus the height of the `controlDrawerComponents`.
*
* A call to [toggleDrawer()]{@link moon.Drawer#toggleDrawer} will open or close
* the control drawer if `controlDrawerComponents` is non-empty; otherwise, it will
* open or close the main drawer.
*
* The control's child components may be of any kind.
*
* ```
*		{
*			name: 'musicDrawer',
*			kind: 'moon.Drawer',
*			handle: {name: 'handleButton', content: 'Handle'},
*			components: [
*				{content: 'Drawer Content'}
*			],
*			controlDrawerComponents: [
*				{content: 'Controls'}
*			]
*		}
* ```
*
* @class moon.Drawer
* @extends enyo.Control
* @ui
* @public
*/
var MoonDrawer = module.exports = kind(
	/** @lends moon.Drawer.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Drawer',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	mixins : [HistorySupport],

	/**
	* @private
	*/
	classes: 'moon-drawer moon-neutral',

	/**
	* @private
	* @lends moon.Drawer.prototype
	*/
	published: {

		/**
		* Components that are to be placed in the control drawer.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		controlDrawerComponents: null,

		/**
		* Control that acts a "handle" for the drawer.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		handle: null,

		/**
		* Visibility state of the main drawer.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		open: false,

		/**
		* Visibility state of the control drawer.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		controlsOpen: false
	},

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.Drawer#onActivate}
		*/
		onActivate: '',

		/**
		* {@link moon.Drawer#onDeactivate}
		*/
		onDeactivate: ''
	},

	/**
	* @private
	*/
	handlers: {

		/**
		* Handler for initial rendering event.
		*/
		onDrawersRendered: 'drawersRendered',

		/**
		* Handler for initial resizing event to size drawers to fullscreen.
		*/
		onDrawersResized: 'drawersResized'
	},

	/**
	* @private
	*/
	components: [
		{name: 'client', kind: FullScreenDrawer, spotlightDisabled: true, resizeContainer:false},
		{name: 'controlDrawer', kind: Drawer, spotlightDisabled: true, resizeContainer:false}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.$.controlDrawer.createComponents(this.controlDrawerComponents, {owner: this.owner});
		//* Todo: remove padding on client
		this.$.client.$.client.addClass('moon-drawer-client');
		this.$.controlDrawer.$.client.addClass('moon-drawer-partial-client');
	},

	/**
	* @private
	*/
	drawersRendered: function (inSender, inEvent) {
		this.$.client.setDrawerProps({height: this.calcDrawerHeight(inEvent.drawersHeight)});
		this.openChanged();
		if (!this.controlsOpen) {
			this.$.controlDrawer.setAnimated(false);
			this.$.controlDrawer.setOpen(this.controlsOpen);
			this.$.controlDrawer.setAnimated(true);
		} else {
			this.controlsOpenChanged();
		}
	},

	/**
	* @private
	*/
	calcDrawerHeight: function (drawersHeight) {
		var clientHeight = drawersHeight;
		if (this.controlDrawerComponents == null) {
			return clientHeight;
		} else {
			this.controlDrawerHeight = (this.controlDrawerHeight) ? this.controlDrawerHeight : this.$.controlDrawer.hasNode().getBoundingClientRect().height;
			return (clientHeight - this.controlDrawerHeight);
		}
	},

	/**
	* If [controlDrawerComponents]{@link moon.Drawer#controlDrawerComponents} is
	* non-empty, toggles the visibility state of the control drawer; otherwise,
	* toggles the visibility state of the main drawer.
	*
	* @public
	*/
	toggleDrawer: function () {
		if (this.controlDrawerComponents == null) {
			this.setOpen(!this.open);
		} else {
			this.setControlsOpen(!this.controlsOpen);
		}
		return true;
	},

	/**
	* @fires moon.Drawer#onActivate
	* @fires moon.Drawer#onDeactivate
	* @private
	*/
	openChanged: function () {
		this.$.client.setOpen(this.open);
		if (this.open) {
			this.doActivate();
			this.$.client.spotlightDisabled = false;
			Spotlight.spot(this.$.client);
			if (this.allowBackKey) {
				this.pushBackHistory();
			}
		} else {
			this.$.client.spotlightDisabled = true;
			this.doDeactivate();
		}
	},

	/**
	* @fires moon.Drawer#onActivate
	* @fires moon.Drawer#onDeactivate
	* @private
	*/
	controlsOpenChanged: function () {
		this.$.controlDrawer.setOpen(this.controlsOpen);
		if (this.controlsOpen) {
			this.doActivate();
			this.$.controlDrawer.spotlightDisabled = false;
			Spotlight.spot(this.$.controlDrawer);
			if (this.allowBackKey) {
				this.pushBackHistory();
			}
		} else {
			if (this.$.client.getOpen()) {
				this.$.client.setOpen(false);
			}
			this.$.controlDrawer.spotlightDisabled = true;
			this.doDeactivate();
		}
	},

	/**
	* @private
	*/
	drawersResized: function (inSender, inEvent) {
		this.$.client.setDrawerProps({height: this.calcDrawerHeight(inEvent.drawersHeight)});
		this.setOpen(false);
		this.setControlsOpen(false);
	},

	/**
	* @private
	*/
	backKeyHandler: function () {
		if (this.open) {
			this.setOpen(false);
		} else if (this.controlsOpen) {
			this.setControlsOpen(false);
		}
		return true;
	}
});

MoonDrawer.FullScreenDrawer = FullScreenDrawer;
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Drawer":32,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../History":152}],127:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	ri = require('../../../enyo/lib/resolution'),
	Checkbox = require('../../../enyo/lib/Checkbox');

var
	Icon = require('../Icon');

/**
* {@link moon.Checkbox} is a box that, when tapped, shows or hides a checkmark
* and fires an [onChange]{@link enyo.Checkbox#onChange} event. It derives from
* {@link enyo.Checkbox} and is designed to be used with {@link moon.CheckboxItem}.
*
* @class moon.Checkbox
* @extends enyo.Checkbox
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Checkbox.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Checkbox',

	/**
	* @private
	*/
	kind: Checkbox,

	/**
	* @private
	*/
	classes: 'moon-checkbox',

	/**
	* @private
	* @lends moon.Checkbox.prototype
	*/
	published: {
		/**
		* If `true`, the `checked` property cannot be changed through user input.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		locked: false,

		/**
		* Name of a font-based icon to use when displaying the checkbox. Consult
		* {@link moon.Icon} for valid values.
		*
		* @type {String}
		* @default 'check'
		* @public
		*/
		icon: 'check',

		/**
		* Optional path to an image asset. May be used to customize checkbox appearance.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		src: ''
	},

	/**
	* @private
	*/
	tag: 'div',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	handlers: {

		/**
		* prevent double onchange bubble in IE
		* @private
		*/
		onclick: ''
	},

	/**
	* @private
	*/
	components: [
		{name: 'checkboxIcon', kind: Icon, icon: 'check'}
	],

	/**
	* @private
	*/
	rendered: function () {
		Checkbox.prototype.rendered.apply(this, arguments);
		this.srcChanged();
		this.iconChanged();
	},

	/**
	* @fires enyo.Checkbox#onChange
	* @private
	*/
	tap: function (inSender, e) {
		if (!this.disabled && !this.locked) {
			this.setChecked(!this.getChecked());
			this.bubble('onchange');
		} else {
			return true;
		}
	},

	/**
	* @private
	*/
	dragstart: function () {
		// Override enyo.Input dragstart handler, to allow drags to propagate for Checkbox
	},

	/**
	* @private
	*/
	iconChanged: function() {
		this.$.checkboxIcon.setIcon(this.icon);
	},

	/**
	* @private
	*/
	srcChanged: function() {
		this.$.checkboxIcon.setSrc(ri.selectSrc(this.src));
	}
});
},{"../../../enyo/lib/Checkbox":21,"../../../enyo/lib/kind":96,"../../../enyo/lib/resolution":104,"../../../moonstone":119,"../Icon":153}],154:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	Icon = require('../Icon');

/**
* {@link moon.IconButton} is a {@link moon.Icon} that acts like a button. Specify
* the icon image by setting the [src]{@link moon.Icon#src} property to a URL
* indicating the image file's location.
*
* ```
* {kind: 'moon.IconButton', src: 'images/search.png'}
* ```
*
* If you want to combine an icon with text inside of a button, use a
* `moon.Icon` inside a {@link moon.Button}.
*
* Moonstone supports two methods for displaying icons; in addition to specifying
* traditional image assets in `src`, you may use icons that are stored as single
* characters in a special symbol font. To do this, set the value of the
* [icon]{@link moon.Icon#icon} property to a string representing an icon name,
* e.g.:
*
* ```
* {kind: 'moon.IconButton', icon: 'closex'}
* ```
*
* See {@link moon.Icon} for more information on the available font-based icons,
* as well as specifications for icon image assets.
*
* @class moon.IconButton
* @extends moon.Icon
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.IconButton.prototype */ {

	/**
	* @private
	*/
	name: 'moon.IconButton',

	/**
	* @private
	*/
	kind: Icon,

	/**
	* @private
	* @lends moon.IconButton.prototype
	*/
	published: {

		/**
		* Used when the IconButton is part of an {@link enyo.Group}. A value of `true`
		* indicates that this is the active button of the group; `false`, that it is not
		* the active button.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false,

		/**
		* A boolean parameter affecting the size of the button.
		* If `true`, the button will have a diameter of 60px.
		* However, the button's tap target will still have a diameter of 78px, with
		* invisible DOM wrapping the small button to provide the larger tap zone.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		small: true,

		/**
		* If `true`, the button will have no rounded background color/border.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		noBackground: false
	},

	/**
	* @private
	*/
	classes: 'moon-icon-button',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	handlers: {

		/**
		* Simulates mousedown.
		*/
		onSpotlightKeyDown: 'depress',

		/**
		* Simulates mouseup.
		*/
		onSpotlightKeyUp: 'undepress',

		/**
		* Used to request it is in view in scrollers.
		*/
		onSpotlightFocused: 'spotlightFocused',

		onSpotlightBlur: 'undepress'
	},

	/**
	* @private
	*/
	create: function () {
		Icon.prototype.create.apply(this, arguments);
		this.noBackgroundChanged();
	},

	/**
	* @private
	*/
	rendered: function () {
		Icon.prototype.rendered.apply(this, arguments);
		this.activeChanged();
	},

	/**
	* @private
	*/
	noBackgroundChanged: function () {
		this.addRemoveClass('no-background', this.noBackground);
	},

	/**
	* @private
	*/
	tap: function () {
		if (this.disabled) {
			return true;
		}
		this.setActive(true);
	},

	/**
	* @fires enyo.GroupItem#onActivate
	* @private
	*/
	activeChanged: function () {
		this.bubble('onActivate');
	},

	/**
	* Adds `pressed` CSS class.
	* @private
	*/
	depress: function (inSender, inEvent) {
		if (inEvent.keyCode === 13) {
			this.addClass('pressed');
		}
	},

	/**
	* Removes `pressed` CSS class.
	* @private
	*/
	undepress: function () {
		this.removeClass('pressed');
	},

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	spotlightFocused: function (inSender, inEvent) {
		if (inEvent.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Icon":153}],156:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	Icon = require('../Icon');

/**
* {@link moon.ImageBadge}, which derives from {@link moon.Icon}, is a simple
* control designed for use inside of {@link moon.Image}.
*
* @class moon.ImageBadge
* @extends moon.Icon
* @ui
* @public
*/

module.exports = kind(
	/** @lends moon.ImageBadge.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ImageBadge',

	/**
	* @private
	*/
	kind: Icon,

	/**
	* @private
	*/
	classes: 'moon-image-badge'
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Icon":153}],182:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Icon = require('../Icon');

/**
* {@link moon.SelectionOverlaySupport} is a [mixin]{@glossary mixin} that may be applied
* to any {@link moon.DataList} or {@link moon.DataGridList} item to provide an overlay
* that is activated when the list is in selection mode.
*
* The selection overlay has three visual states: focused but not selected, focused and
* selected, and selected but not focused.
*
* The item may define a
* [selectionScrimIcon]{@link moon.SelectionOverlaySupport#selectionScrimIcon} URL to
* override the default icon.
*
* ```javascript
* {name: 'list', selection: true, kind: 'moon.DataList', components: [
*	{mixins: ['moon.SelectionOverlaySupport'], selectionScrimIcon: 'assets/my-icon.png',
*		kind: 'moon.ImageItem', bindings: [
*			{from: '.model.title', to: '.label'},
*			{from: '.model.description', to: '.text'},
*			{from: '.model.coverSource', to: '.source'}
*		]
*	}
* ]}
* ```
*
* By default, the overlay icon is centered horizontally and vertically over the item, but you
* can override the default by specifying percentage values for
* [selectionOverlayHorizontalOffset]{@link moon.SelectionOverlaySupport#selectionOverlayHorizontalOffset}
* and [selectionOverlayVerticalOffset]{@link moon.SelectionOverlaySupport#selectionOverlayVerticalOffset}.
* The horizontal offset is measured from the left in left-to-right locales, and from the right
* in right-to-left locales.
*
* ```javascript
* {name: 'gridList', selection: true, kind: 'moon.DataGridList', components: [
*	{mixins: ['moon.SelectionOverlaySupport'], kind: 'moon.GridListImageItem',
*		selectionOverlayVerticalOffset: 35, bindings: [
*			{from: '.model.text', to: '.caption'},
*			{from: '.model.subText', to: '.subCaption'},
*			{from: '.model.url', to: '.source'}
*		]
*	}
* ]}
* ```
*
* @mixin moon.SelectionOverlaySupport
* @protected
*/
module.exports = {

	/**
	* @private
	*/
	name: 'moon.SelectionOverlaySupport',

	/**
	* @private
	*/
	classes: 'moon-selection-overlay-support',

	/**
	* URL for icon to be used in place of default icon.
	*
	* @name moon.SelectionOverlaySupport#selectionScrimIcon
	* @type {String}
	* @default undefined
	* @public
	*/

	/**
	* Vertical offset for the overlay icon, expressed as percent from the top. Will default
	* to `50` if undefined.
	*
	* @name moon.SelectionOverlaySupport#selectionOverlayVerticalOffset
	* @type {Number}
	* @default undefined
	* @public
	*/

	/**
	* Horizontal offset for the overlay icon, expressed as percent from the left or right edge.
	* The offset is measured from the left edge in left-to-right locales, and from the right in
	* right-to-left locales.
	*
	* @name moon.SelectionOverlaySupport#selectionOverlayHorizontalOffset
	* @type {Number}
	* @default undefined
	* @public
	*/

	/**
	* @method
	* @private
	*/
	create: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.createChrome(this._selectionScrim);
			this.selectionOverlayHorizontalOffset = this.selectionOverlayHorizontalOffset === undefined ? 50 : this.selectionOverlayHorizontalOffset;
			this.selectionOverlayVerticalOffset = this.selectionOverlayVerticalOffset === undefined ? 50 : this.selectionOverlayVerticalOffset;
			this.selectionOverlayHorizontalOffsetChanged();
			this.selectionOverlayVerticalOffsetChanged();
			// Allow the icon to be modified by user
			if (this.selectionScrimIcon) {
				this.$.selectionScrimIcon.set('icon','');
			}
		};
	}),

	/**
	* @private
	*/
	bindings: [
		{from: '.selectionScrimIcon', to: '.$.selectionScrimIcon.src'}
	],

	/**
	* @private
	*/
	_selectionScrim: [
		{classes: 'enyo-fit moon-selection-overlay-support-scrim', kind: Control, components: [
			{name:'selectionScrimIcon', kind: Icon, small: false, icon: 'check', spotlight: false}
		]}
	],

	/**
	* @private
	*/
	selectionOverlayVerticalOffsetChanged: function () {
		this.$.selectionScrimIcon.applyStyle('top', this.selectionOverlayVerticalOffset + '%');
	},

	/**
	* @private
	*/
	selectionOverlayHorizontalOffsetChanged: function () {
		this.$.selectionScrimIcon.applyStyle('left', this.selectionOverlayHorizontalOffset + '%');
	}
};
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Icon":153}],196:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	job = require('../../../enyo/lib/job'),
	path = require('../../../enyo/lib/pathResolver'),
	Control = require('../../../enyo/lib/Control');

var
	ilib = require('../../../enyo-ilib');

var
	$L = require('../i18n'),
	Icon = require('../Icon');

/**
* {@link moon.VideoFeedback} is a control used by {@link moon.VideoPlayer} to display
* feedback in response to input from video playback controls. It may also be used to
* display custom messages. The {@link moon.VideoTransportSlider} control typically
* communicates directly with this one.
*
* @class moon.VideoFeedback
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.VideoFeedback */ {

	/**
	* @private
	*/
	name: 'moon.VideoFeedback',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-video-player-feedback',

	/**
	* @private
	* @lends enyo.VideoFeedback.prototype
	*/
	published: {

		/**
		* Length of time (in milliseconds) after which the on-screen feedback will automatically
		* disappear.
		*
		* @type {Number}
		* @default 2000
		* @public
		*/
		autoTimeoutMS: 2000,

		/**
		* When `true`, the content will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true
	},

	/**
	* @private
	*/
	_showingFeedback: false,

	/**
	* @private
	*/
	_imagePath:				'$lib/moonstone/images/video-player/',

	/**
	* @private
	*/
	_jumpBackImg:			'jumpbackward',

	/**
	* @private
	*/
	_rewindImg:				'backward',

	/**
	* @private
	*/
	_playImg:				'play',

	/**
	* @private
	*/
	_pauseImg:				'pause',

	/**
	* @private
	*/
	_fastForwardImg:		'forward',

	/**
	* @private
	*/
	_jumpForwardImg:		'jumpforward',

	/**
	* @private
	*/
	_pauseBackImg:			'pausebackward',

	/**
	* @private
	*/
	_pauseForwardImg:		'pauseforward',

	/**
	* @private
	*/
	_pauseJumpBackImg:		'pausejumpbackward',

	/**
	* @private
	*/
	_pauseJumpForwardImg:	'pausejumpforward',

	/**
	* @private
	*/
	_autoTimer: null,

	/**
	* @private
	*/
	components: [
		{name: 'leftIcon', kind: Icon, classes: 'moon-video-feedback-icon-left', allowHtml: true, showing: false},
		{name: 'feedText', kind: Control, classes: 'moon-video-feedback-text', allowHtml: true, showing: false},
		{name: 'rightIcon', kind: Icon, classes: 'moon-video-feedback-icon-right', allowHtml: true, showing: false}
	],

	/**
	* @private
	*/
	create: function() {
		Control.prototype.create.apply(this, arguments);
		if (ilib) {
			this.df = new ilib.DurFmt({length: 'medium', useNative: false});
		}
	},

	/**
	* Updates [IconButton]{@link moon.IconButton} image and [Slider]{@link moon.Slider}
	* message with current state and playback rate when any of the playback controls are
	* triggered.
	*
	* Playback states are mapped to `playbackRate` values according to the following hash:
	*
	* ```javascript
	* {
	*	'fastForward': ['2', '4', '8', '16'],
	*	'rewind': ['-2', '-4', '-8', '-16'],
	*	'slowForward': ['1/4', '1/2'],
	*	'slowRewind': ['-1/2', '-1']
	* }
	* ```
	*
	* @private
	*/
	checkIconType: function(icon) {
		var imagesrcRegex = /\.(jpg|jpeg|png|gif)$/i;
		return imagesrcRegex.test(icon) ? 'image' : 'iconfont';
	},

	/**
	* @private
	*/
	retriveImgOrIconPath:function(icon){
		if (this.checkIconType(icon) == 'image') {
			return path.rewrite(this._imagePath + icon);
		} else {
			return path.rewrite(icon);
		}
	},

	/**
	* Sets the current state for a {@link moon.VideoFeedback} control.
	*
	* @param {String} msg - The string to display.
	* @param {moon.VideoTransportSlider~FeedbackParameterObject} params - A
	*	[hash]{@glossary Object} of parameters accompanying the message.
	* @param {Boolean} persist - If `true`, the [feedback]{@link moon.VideoFeedback}
	* control will not be automatically hidden.
	* @param {String} leftSrc - The source url for the image displayed on the left side
	*	of the feedback control.
	* @param {String} rightSrc - The source url for the image displayed on the right
	*	side of the feedback control.
	* @param {Boolean} preview - Specify `true` to put the
	* [video player]{@link moon.VideoPlayer} in preview mode; otherwise, `false`.
	* @public
	*/
	feedback: function(msg, params, persist, leftSrc, rightSrc, preview) {
		var customMessage = false;
		msg = msg || '';
		params = params || {};

		if (msg !== '') { this.$.feedText.show(); }

		switch (msg) {
		case 'Play':
			msg = $L('PLAY'); // i18n "PLAY" feedback text in moon.VideoPlayer widget, should be translated to ALL CAPS in all languages
			rightSrc = this.retriveImgOrIconPath(this._playImg);
			break;

		case 'Pause':
			msg = $L('PAUSE'); // i18n "PAUSE" feedback text in moon.VideoPlayer widget, should be translated to ALL CAPS in all languages
			rightSrc = this.retriveImgOrIconPath(this._pauseImg);
			break;

		case 'Rewind':
			msg = Math.abs(params.playbackRate) + 'x';
			leftSrc = this.retriveImgOrIconPath(this._rewindImg);
			break;

		case 'Slowrewind':
			msg = params.playbackRate + 'x';
			leftSrc = this.retriveImgOrIconPath(this._pauseBackImg);
			break;

		case 'Fastforward':
			msg = Math.abs(params.playbackRate) + 'x';
			rightSrc = this.retriveImgOrIconPath(this._fastForwardImg);
			break;

		case 'Slowforward':
			msg = params.playbackRate + 'x';
			rightSrc = this.retriveImgOrIconPath(this._pauseForwardImg);
			break;

		case 'JumpBackward':
			msg = this.df ? this.df.format({second: params.jumpSize}) : params.jumpSize + ' Sec';
			leftSrc = this.retriveImgOrIconPath(this._pauseJumpBackImg);
			break;

		case 'JumpForward':
			msg = this.df ? this.df.format({second: params.jumpSize}) : params.jumpSize + ' Sec';
			rightSrc = this.retriveImgOrIconPath(this._pauseJumpForwardImg);
			break;

		case 'JumpToStart':
			msg = '';
			leftSrc = this.retriveImgOrIconPath(this._pauseJumpBackImg);
			break;

		case 'JumpToEnd':
			msg = '';
			rightSrc = this.retriveImgOrIconPath(this._pauseJumpForwardImg);
			break;

		case 'Stop':
			msg = $L('STOP'); // i18n "STOP" feedback text in moon.VideoPlayer widget, should be translated to ALL CAPS in all languages
			rightSrc = '';
			break;

		// If the user sends in a custom message, block other messages until it's hidden
		default:
			customMessage = true;
			this._showingFeedback = true;
			break;
		}

		// Don't show feedback if we are showing custom feedback already, unless this is a new custom message
		if (!customMessage && this._showingFeedback) {
			return;
		}

		// Set content as _inMessage_
		this.$.feedText.setContent( this.get('uppercase') ? util.toUpperCase(msg) : msg);

		// Show output controls when video player is not preview mode
		if (!preview) {
			this.showFeedback();
		}

		// Show icons as appropriate
		this.updateIcons(leftSrc, rightSrc);

		//* Don't set up hide timer if _inPersistShowing_ is true
		if (persist) {
			this.resetAutoTimer();
		} else {
			this.setAutoTimer();
		}
		this.inPersistShowing = persist;
	},

	/**
	* Determines whether the current feedback message is persistent (i.e., it has no
	* timeout).
	*
	* @returns {Boolean} `true` if the current feedback message has no timeout;
	* otherwise, `false`, meaning that the feedback message has a timeout and is not
	* persistent.
	* @public
	*/
	isPersistShowing: function() {
		return this.inPersistShowing;
	},

	/**
	* Shows this control.
	*
	* @public
	*/
	showFeedback: function() {
		this.setShowing(true);
	},

	/**
	* Hides this control and sets internal `_showingFeedback` flag to `false`.
	*
	* @public
	*/
	hideFeedback: function() {
		this.setShowing(false);
		this._showingFeedback = false;
	},

	/**
	* Starts job that will hide this control.
	*
	* @private
	*/
	setAutoTimer: function() {
		this.hideJob = job(this.id + 'hide', this.bindSafely('hideFeedback'), this.getAutoTimeoutMS());
	},

	/**
	* Clears job that will hide this control.
	*
	* @private
	*/
	resetAutoTimer: function() {
		job.stop(this.id + 'hide');
	},

	/**
	* Shows or hides icons, and sets sources.
	*
	* @private
	*/
	updateIcons: function(leftSrc, rightSrc) {
		if (leftSrc) {
			this.$.leftIcon.show();
			this.displayIconSrcOrFont(this.$.leftIcon, leftSrc);
		} else {
			this.$.leftIcon.hide();
		}

		if (rightSrc) {
			this.$.rightIcon.show();
			this.displayIconSrcOrFont(this.$.rightIcon, rightSrc);
		} else {
			this.$.rightIcon.hide();
		}
	},

	/**
	* @private
	*/
	displayIconSrcOrFont: function(iconKind, icon) {
		if (this.checkIconType(icon) == 'image') {
			iconKind.set('icon', '');
			iconKind.set('src', icon);
		} else {
			iconKind.set('src', '');
			iconKind.set('icon', icon);
		}
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Control":26,"../../../enyo/lib/job":93,"../../../enyo/lib/kind":96,"../../../enyo/lib/pathResolver":101,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Icon":153,"../i18n":203}],185:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	log = require('../../../enyo/lib/logger'),
	ri = require('../../../enyo/lib/resolution'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Popup = require('../../../enyo/lib/Popup'),
	Animator = require('../../../enyo/lib/Animator');

var
	Spotlight = require('../../../spotlight');

var
	ilib = require('../../../enyo-ilib');

var
	ProgressBar = require('../ProgressBar');

/**
* Fires when bar position is set.
*
* @event moon.Slider#onChange
* @type {Object}
* @property {Number} value - The value of the current position.
* @public
*/

/**
* Fires while control knob is being dragged.
*
* @event moon.Slider#onChanging
* @type {Object}
* @property {Number} value - The value of the current position.
* @public
*/

/**
* Fires when animation to a position finishes. No additional information is passed with this
* event.
*
* @event moon.Slider#onAnimateFinish
* @type {Object}
* @public
*/

/**
* {@link moon.Slider} is a [control]{@link enyo.Control} that presents a range of selection
* options in the form of a horizontal slider with a control knob. The knob may be tapped and
* dragged to the desired location.
*
* ```javascript
* {kind: "moon.Slider", value: 30}
* ```
*
* @class moon.Slider
* @extends moon.ProgressBar
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Slider.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Slider',

	/**
	* @private
	*/
	kind: ProgressBar,

	/**
	* @private
	*/
	classes: 'moon-slider',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	* @lends moon.Slider.prototype
	*/
	published: {

		/**
		* Position of slider, expressed as an integer between `0` and `100`, inclusive.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		value: 0,

		/**
		* Sliders may "snap" to multiples of this value in either direction.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		increment: 0,

		/**
		* When `true`, current progress is styled differently from rest of bar.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		lockBar: true,

		/**
		* When `true`, tapping on bar will change current position.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		tappable: true,

		/**
		* CSS classes to apply to the knob.
		*
		* @type {String}
		* @default 'moon-slider-knob'
		* @public
		*/
		knobClasses: 'moon-slider-knob',

		/**
		* CSS classes to apply to the popup label.
		*
		* @type {String}
		* @default 'moon-slider-popup-label'
		* @public
		*/
		popupLabelClasses: 'moon-large-button-text moon-slider-popup-label',

		/**
		* CSS classes to apply to the tap area.
		*
		* @type {String}
		* @default 'moon-slider-taparea'
		* @public
		*/
		tapAreaClasses: 'moon-slider-taparea',

		/**
		* Color value of the popup.
		*
		* @type {String}
		* @default '#4d4d4d'
		* @public
		*/
		popupColor: '#4d4d4d',

		/**
		* If set to `true`, button is shown as disabled and does not generate tap events.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* When `true`, knob and progress move with animation when left or right direction
		* key is pressed, or when bar is tapped.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		animate: true,

		/**
		* When `false`, the slider's popup bubble is displayed while the slider is being
		* adjusted.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		noPopup: false,

		/**
		* When `true`, the popup displays a percentage value (rather than an absolute value).
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showPercentage: true,

		/**
		* Popup width in pixels.
		*
		* @type {Number|String}
		* @default 'auto'
		* @public
		*/
		popupWidth: 'auto',

		/**
		* Popup height in pixels; value should be less than `72`.
		*
		* @type {Number|String}
		* @default 67
		* @public
		*/
		popupHeight: 67,

		/**
		* Popup offset in pixels.
		*
		* @type {Number}
		* @default 8
		* @public
		*/
		popupOffset: 8,

		/**
		* When `false`, knob may be moved past the
		* [bgProgress]{@link moon.ProgressBar#bgProgress} value.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		constrainToBgProgress: false,

		/**
		* If set to `true`, an elastic visual effect is seen when the knob is dragged past
		* the [bgProgress]{@link moon.ProgressBar#bgProgress} value.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		elasticEffect: false,

		/**
		* Custom popup content (ignored if `null`).
		*
		* @type {String|null}
		* @default null
		* @public
		*/
		popupContent: null,

		/**
		* When `true`, popup content will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true,

		/**
		* @deprecated Replaced by [uppercase]{@link moon.Slider#uppercase}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		popupContentUpperCase: null
	},

	/**
	* @private
	*/
	events: {
		onChange: '',
		onChanging: '',
		onAnimateFinish: ''
	},

	/**
	* @private
	*/
	handlers: {
		ondragstart: 'dragstart',
		ondrag: 'drag',
		ondragfinish: 'dragfinish',
		onSpotlightFocused: 'spotFocused',
		onSpotlightSelect: 'spotSelect',
		onSpotlightBlur: 'spotBlur',
		onSpotlightLeft: 'spotLeft',
		onSpotlightRight: 'spotRight'
	},

	/**
	* @private
	*/
	moreComponents: [
		{kind: Animator, onStep: 'animatorStep', onEnd: 'animatorComplete'},
		{name: 'tapArea', kind: Control},
		{name: 'knob', kind: Control, ondown: 'showKnobStatus', onup: 'hideKnobStatus', components: [
			{name: 'popup', kind: Popup, classes: 'moon-slider-popup above', components: [
				{name: 'drawingLeft', kind: Control, tag: 'canvas', classes: 'moon-slider-popup-left'},
				{name: 'popupLabel', kind: Control, classes: 'moon-slider-popup-center' },
				{name: 'drawingRight', kind: Control, tag: 'canvas', classes: 'moon-slider-popup-right'}
			]}
		]}
	],

	/**
	* @private
	*/
	animatingTo: null,

	/**
	* @private
	*/
	popupLeftCanvasWidth: 27, // Popup left canvas width in pixel

	/**
	* @private
	*/
	popupRightCanvasWidth: 27, // Popup right canvas width in pixel

	/**
	* @private
	*/
	selected: false,

	/**
	* Animates to the given value.
	*
	* @param {Number} start - The start position, as an integer between `0` and `100`.
	* @param {Number} end - The end position, as an integer between `0` and `100`.
	* @public
	*/
	animateTo: function(start, end) {
		start = this.clampValue(this.min, this.max, start);
		end = this.clampValue(this.min, this.max, end); // Moved from animatorStep
		this.animatingTo = end;

		this.$.animator.play({
			startValue: start,
			endValue: end,
			node: this.hasNode()
		});
	},

	/**
	* Determines whether the slider is currently being dragged.
	*
	* @returns {Boolean} `true` if the slider is currently being dragged; otherwise, `false`.
	* @public
	*/
	isDragging: function() {
		return this.dragging;
	},

	/**
	* @private
	*/
	create: function() {
		ProgressBar.prototype.create.apply(this, arguments);
		if (ilib) {
			this._nf = new ilib.NumFmt({type: 'percentage', useNative: false});
		}

		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the popupContentUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.popupContentUpperCase !== null) this.uppercase = this.popupContentUpperCase;

		this.createComponents(this.moreComponents);
		this.initValue();
		this.disabledChanged();
		this.knobClassesChanged();
		this.popupLabelClassesChanged();
		this.popupContentChanged();
		this.tapAreaClassesChanged();
		this.initSliderStyles();
	},

	/**
	* @private
	*/
	destroy: function() {
		if (this._nf) {
			delete this._nf;
		}
		ProgressBar.prototype.destroy.apply(this, arguments);
	},

	/**
	* @private
	*/
	rendered: function() {
		ProgressBar.prototype.rendered.apply(this, arguments);
		this.drawToCanvas(this.popupColor);
		this._setValue(this.value);
	},

	/**
	* @private
	*/
	initSliderStyles: function() {
		this.updatePopupLabelColor();
		this.updatePopupHeight();
		this.updatePopupOffset();
		this.popupWidthChanged();
	},

	/**
	* @private
	*/
	disabledChanged: function() {
		this.addRemoveClass('disabled', this.disabled);
		this.$.knob.addRemoveClass('disabled', this.disabled);
		this.setTappable(!this.disabled);
		if (this.disabled) {
			this.hideKnobStatus();
		}
	},

	/**
	* @private
	*/
	knobClassesChanged: function(was) {
		this.$.knob.removeClass(was);
		this.$.knob.addClass(this.knobClasses);
	},

	/**
	* @private
	*/
	popupLabelClassesChanged: function(was) {
		this.$.popupLabel.removeClass(was);
		this.$.popupLabel.addClass(this.popupLabelClasses);
	},

	/**
	* @private
	*/
	tapAreaClassesChanged: function(was) {
		this.$.tapArea.removeClass(was);
		this.$.tapArea.addClass(this.tapAreaClasses);
	},

	/**
	* @private
	*/
	updatePopupOffset: function() {
		// console.log("updatePopupOffset:", this.getPopupHeight(), this.getPopupOffset(), ri.scale(this.getPopupHeight() + this.getPopupOffset() + 5));
		this.$.popup.applyStyle('top', dom.unit(-(ri.scale(this.getPopupHeight() + this.getPopupOffset() + 5)), 'rem'));
	},

	/**
	* Updates popup offset.
	*
	* @private
	*/
	popupOffsetChanged: function() {
		this.updatePopupOffset();
		this.drawToCanvas(this.popupColor);
	},

	/**
	* Updates popup width.
	*
	* @private
	*/
	popupWidthChanged: function() {
		if (this.popupWidth != 'auto') {
			this.$.popupLabel.applyStyle('width', dom.unit( this.getPopupWidth() - (this.popupLeftCanvasWidth + this.popupRightCanvasWidth) , 'rem'));
		}
	},

	/**
	* @private
	*/
	updatePopupHeight: function() {
		var h = this.getPopupHeight(),
			hRem = ri.scale(h);

		this.$.drawingLeft.setAttribute('height', hRem);
		this.$.drawingRight.setAttribute('height', hRem);
		this.$.popupLabel.applyStyle('height', dom.unit(ri.scale(h - 7), 'rem'));
		this.$.popup.applyStyle('height', dom.unit(ri.scale(h), 'rem'));
		this.$.popup.applyStyle('line-height', dom.unit(ri.scale(h - 6), 'rem'));
	},

	/**
	* Updates popup height.
	*
	* @private
	*/
	popupHeightChanged: function() {
		if (this.getPopupHeight() >= 72) {
			log.warn('This popupHeight API is designed for under 72 pixels.');
		}

		this.updatePopupHeight();
		this.popupOffsetChanged();
	},

	/**
	* @private
	*/
	updatePopupLabelColor: function() {
		this.$.popupLabel.applyStyle('background-color', this.popupColor);
	},

	/**
	* Updates popup color.
	*
	* @private
	*/
	popupColorChanged: function() {
		this.drawToCanvas(this.popupColor);
		this.updatePopupLabelColor();
	},

	/**
	* Updates popup content.
	*
	* @private
	*/
	popupContentChanged: function() {
		var content = this.getPopupContent();
		this._popupContent = this.get('uppercase') ? util.toUpperCase(content) : content;
		if (this._popupContent !== null) {
			this.$.popupLabel.setContent(this._popupContent);
		}
	},

	/**
	* @private
	*/
	uppercaseChanged: function() {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// popupContentUpperCase is fully deprecated and removed.
		if (this.popupContentUpperCase != this.uppercase) this.popupContentUpperCase = this.uppercase;
		this.popupContentChanged();
	},

	/**
	* @private
	*/
	popupContentUpperCaseChanged: function() {
		if (this.uppercase != this.popupContentUpperCase) this.uppercase = this.popupContentUpperCase;
		this.uppercaseChanged();
	},

	/**
	* Slider will snap to multiples of this value.
	*
	* @private
	*/
	calcIncrement: function(val) {
		return (Math.round(val / this.increment) * this.increment);
	},

	/**
	* Called only when [constrainToBgProgress]{@link moon.Slider#constrainToBgProgress} is
	* `true`.
	*
	* @private
	*/
	calcConstrainedIncrement: function(val) {
		return (Math.floor(val / this.increment) * this.increment);
	},

	/**
	* Initializes [value]{@link moon.Slider#value} at creation time.
	*
	* @private
	*/
	initValue: function() {
		if (this.constrainToBgProgress) {
			this.value = this.clampValue(this.min, this.bgProgress, this.value);
			this.value = (this.increment) ? this.calcConstrainedIncrement(this.value) : this.value;
		}

		this.updateKnobPosition(this.getValue());

		if (this.lockBar) {
			this.setProgress(this.getValue());
		}
	},

	/**
	* @private
	*/
	valueChanged : function(was, is){
		if (!this.dragging) {
			var allowAnimation = this.constrainToBgProgress && is <= this.bgProgress || !this.constrainToBgProgress;
			if (this.constrainToBgProgress) {
				is = this.clampValue(this.min, this.bgProgress, is); // Moved from animatorStep
				is = (this.increment) ? this.calcConstrainedIncrement(is) : is;
			}
			if (this.animate && allowAnimation) {
				this.animateTo(was, is);
			} else {
				this._setValue(is);
			}
		}
	},

	/**
	* @private
	*/
	minChanged: function (was, is) {
		this.initValue();
		this.progressChanged();
		this.bgProgressChanged();
	},

	/**
	* @private
	*/
	maxChanged: function (was, is) {
		this.initValue();
		this.progressChanged();
		this.bgProgressChanged();
	},

	/**
	* @private
	*/
	_setValue: function(val) {
		var v = this.clampValue(this.min, this.max, val);

		this.value = v;
		this.updateKnobPosition(v);

		if (this.lockBar) {
			this.setProgress(this.value);
		}

		this.sendChangeEvent({value: this.getValue()});
	},

	/**
	* @private
	*/
	getValue: function() {
		return (this.animatingTo !== null) ? this.animatingTo : this.value;
	},

	/**
	* @private
	*/
	updateKnobPosition: function(val) {
		var percent = this.calcPercent(val),
			knobValue = (this.showPercentage && this.popupContent === null) ? percent : val
		;

		this.$.knob.applyStyle('left', percent + '%');
		this.$.popup.addRemoveClass('moon-slider-popup-flip-h', percent > 50);
		this.$.popupLabel.addRemoveClass('moon-slider-popup-flip-h', percent > 50);

		this.updatePopupLabel(knobValue);
	},

	/**
	* @private
	*/
	updatePopupLabel: function(val) {
		var label = this._popupContent || this.calcPopupLabel(val);
		this.$.popupLabel.setContent(label);
	},

	/**
	* @private
	*/
	calcPopupLabel: function(val) {
		if (this.showPercentage) {
			if (ilib) {
				val = this._nf.format(Math.round(val));
			} else {
				val = Math.round(val) + '%';
			}
		}
		return val;
	},

	/**
	* @private
	*/
	calcKnobPosition: function(e) {
		var x = e.clientX - this.hasNode().getBoundingClientRect().left,
			pos = (x / this.getBounds().width) * (this.max - this.min) + this.min;
		return pos;
	},

	/**
	* @private
	*/
	dragstart: function(sender, e) {
		if (this.disabled) {
			return; // return nothing
		}
		if (e.horizontal) {
			e.preventDefault();
			this.dragging = true;
			Spotlight.freeze();
			this.$.knob.addClass('active');
			this.showKnobStatus();
			return true;
		}
	},

	/**
	* @private
	*/
	drag: function(sender, e) {
		if (this.dragging) {
			var v = this.calcKnobPosition(e), ev;

			if (this.constrainToBgProgress === true) {
				v = (this.increment) ? this.calcConstrainedIncrement(v) : v;
				ev = this.bgProgress + (v-this.bgProgress)*0.4;
				v = this.clampValue(this.min, this.bgProgress, v);
				this.elasticFrom = (this.elasticEffect === false || this.bgProgress > v) ? v : ev;
				this.elasticTo = v;
			} else {
				v = (this.increment) ? this.calcIncrement(v) : v;
				v = this.clampValue(this.min, this.max, v);
				this.elasticFrom = this.elasticTo = v;
			}

			this.updateKnobPosition(this.elasticFrom);
			this.set('value',this.elasticFrom);

			if (this.lockBar) {
				this.setProgress(v);
			}

			this.sendChangingEvent({value: v});

			return true;
		}
	},

	/**
	* @private
	*/
	dragfinish: function(sender, e) {
		if (this.disabled) {
			return; // return nothing
		}

		var v = this.elasticTo;
		if (this.constrainToBgProgress === true) {
			v = (this.increment) ? this.calcConstrainedIncrement(v) : v;
		} else {
			v = this.calcKnobPosition(e);
			v = (this.increment) ? this.calcIncrement(v) : v;
			v = this.clampValue(this.min, this.max, v);
		}

		this.dragging = false;
		Spotlight.unfreeze();
		this.set('value',v);
		this.sendChangeEvent({value: this.getValue()});
		e.preventTap();
		this.$.knob.removeClass('active');
		this.hideKnobStatus();
		return true;
	},

	/**
	* @private
	*/
	tap: function(sender, e) {
		if (this.tappable && !this.disabled) {
			var v = this.calcKnobPosition(e);
			v = (this.increment) ? this.calcIncrement(v) : v;
			v = (this.constrainToBgProgress && v>this.bgProgress) ? this.bgProgress : v;
			this.set('value',v);
			return true;
		}
	},

	/**
	* @private
	*/
	animatorStep: function(sender) {
		var	v = sender.value;

		this.updateKnobPosition(v);

		if (this.lockBar) {
			this.setProgress(v);
		}

		this.sendChangingEvent({value: v});
		return true;
	},

	/**
	* @fires moon.Slider#onAnimateFinish
	* @private
	*/
	animatorComplete: function(sender) {
		this._setValue(sender.value);
		this.animatingTo = null;
		this.doAnimateFinish(sender);
		return true;
	},

	/**
	* @private
	*/
	spotFocused: function(sender, e) {
		if (e.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	},

	/**
	* @private
	*/
	spotSelect: function() {
		this.selected = !this.selected;
		if (!this.noPopup) {
			this.$.popup.setShowing(this.selected);
			this.updateKnobPosition(this.getValue());
		}
		this.$.knob.addRemoveClass('spotselect', this.selected);
		return true;
	},

	/**
	* @private
	*/
	spotBlur: function() {
		if (!this.dragging) {
			if (this.$.knob) {
				this.$.knob.removeClass('spotselect');
			}
			if (this.$.popup) {
				this.$.popup.hide();
			}
			this.selected = false;
		}
	},

	/**
	* @private
	*/
	spotLeft: function(sender, e) {
		if (this.selected) {
			// If in the process of animating, work from the previously set value
			var v = this.getValue() - (this.increment || 1);

			this.set('value',v);
			return true;
		}
	},

	/**
	* @private
	*/
	spotRight: function(sender, e) {
		if (this.selected) {
			var v = this.getValue() + (this.increment || 1);

			this.set('value',v);
			return true;
		}
	},

	/**
	* @private
	*/
	showKnobStatus: function(sender, e) {
		if ((!this.disabled) && (!this.noPopup)) {
			this.$.popup.show();
			this.updateKnobPosition(this.getValue());
		}
	},

	/**
	* @private
	*/
	hideKnobStatus: function(sender, e) {
		if (!this.noPopup) {
			this.$.popup.hide();
		}
	},

	/**
	* @private
	*/
	drawToCanvas: function(bgColor) {
		bgColor = bgColor  || dom.getComputedStyleValue(this.$.knob.hasNode(), 'background-color');
		var h = ri.scale( this.getPopupHeight()+1 ), // height total
			hb = h - ri.scale(8), // height bubble
			hbc = (hb)/2, // height of bubble's center
			wre = ri.scale(26), // width's edge
			r = hbc, // radius is half the bubble height
			bcr = ri.scale(50), // bottom curve radius 50
			bcy = hb + bcr, //calculate the height of the center of the circle plus the radius to get the y coordinate of the circle to draw the bottom irregular arc
			lw = 1, // line width that will be tucked under the neighboring dom element's edge

			ctxLeft = this.$.drawingLeft.hasNode().getContext('2d'),
			ctxRight = this.$.drawingRight.hasNode().getContext('2d');

		this.$.drawingLeft.setAttribute('width', ri.scale( this.popupLeftCanvasWidth) );
		this.$.drawingRight.setAttribute('width', ri.scale( this.popupRightCanvasWidth) );

		// Set styles. Default color is knob's color
		ctxLeft.fillStyle = bgColor;
		// Draw shape with arrow on left
		ctxLeft.moveTo(0, h);
 		// arc(x, y, radius, startAngle, endAngle, counterClockwise);
		ctxLeft.arc(wre, bcy, bcr, 1.35 * Math.PI, 1.485 * Math.PI, false);
		ctxLeft.lineTo(wre, hb);
		ctxLeft.lineTo(wre, 0);
		ctxLeft.arcTo(0, 0, 0, hbc, r);
		ctxLeft.lineTo(0, h);
		ctxLeft.fill();
		// Add a spacer line
		ctxLeft.beginPath();
		ctxLeft.lineWidth = lw+1;
		ctxLeft.strokeStyle = bgColor;
		ctxLeft.moveTo(wre+lw, 0);
		ctxLeft.lineTo(wre+lw, hb);
		ctxLeft.stroke();

		// Set styles. Default color is knob's color
		ctxRight.fillStyle = bgColor;
		// Draw shape with arrow on right
		ctxRight.moveTo(lw, hb);
		ctxRight.arcTo(wre+lw, hb, wre+lw, hbc, r);

		ctxRight.arcTo(wre+lw, 0, lw, 0, r);
		ctxRight.lineTo(0, 0);
		ctxRight.fill();
		// Add a spacer line
		ctxRight.beginPath();
		ctxRight.lineWidth = lw+1;
		ctxRight.strokeStyle = bgColor;
		ctxRight.moveTo(0, 0);
		ctxRight.lineTo(0, hb);
		ctxRight.stroke();
	},

	/**
	* @private
	*/
	changeDelayMS: 50,

	/**
	* @fires moon.Slider#onChange
	* @private
	*/
	sendChangeEvent: function(data) {
		this.throttleJob('sliderChange', function() { this.doChange(data); }, this.changeDelayMS);
	},

	/**
	* @fires moon.Slider#onChanging
	* @private
	*/
	sendChangingEvent: function(data) {
		this.throttleJob('sliderChanging', function() { this.doChanging(data); }, this.changeDelayMS);
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Animator":15,"../../../enyo/lib/Control":26,"../../../enyo/lib/Popup":56,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/logger":97,"../../../enyo/lib/resolution":104,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275,"../ProgressBar":172}],159:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	ToolDecorator = require('../../../enyo/lib/ToolDecorator');

var
	Spotlight = require('../../../spotlight');

var
	Input = require('../Input'),
	RichText = require('../RichText'),
	TextArea = require('../TextArea');

/**
* {@link moon.InputDecorator} is a control that provides input styling. Any controls
* in the InputDecorator will appear to be inside an area styled as an input. Usually,
* an InputDecorator surrounds a [moon.Input]{@link moon.Input}:
*
* ```
* {kind: 'moon.InputDecorator', components: [
* 	{kind: 'moon.Input'}
* ]}
* ```
*
* Other controls, such as buttons, may be placed to the right or left of the
* input control, e.g.:
*
* ```
* {kind: 'moon.InputDecorator', components: [
* 	{kind: 'moon.IconButton', src: 'search.png'},
* 	{kind: 'moon.Input'},
* 	{kind: 'moon.IconButton', src: 'cancel.png'}
* ]}
* ```
*
* Note that the InputDecorator fits around the content inside it. If the
* decorator is sized, then its contents will likely need to be sized as well.
*
* ```
* {kind: 'moon.InputDecorator', style: 'width: 500px;', components: [
* 	{kind: 'moon.Input', style: 'width: 100%;'}
* ]}
* ```
*
* @class moon.InputDecorator
* @extends enyo.ToolDecorator
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.InputDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'moon.InputDecorator',

	/**
	* @private
	*/
	kind: ToolDecorator,

	/**
	* @private
	*/
	tag: 'label',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	spotlightDecorate: false,

	/**
	* @private
	*/
	handlers: {
		onDisabledChange  : 'disabledChangeHandler',
		onfocus           : 'focusHandler',
		onblur            : 'blurHandler',
		onSpotlightFocus  : 'spotlightFocusHandler',
		onSpotlightSelect : 'spotlightSelectHandler',
		onSpotlightBlur   : 'spotlightBlurHandler',
		onSpotlightLeft   : 'spotlightLeftHandler',
		onSpotlightRight  : 'spotlightRightHandler',
		onSpotlightUp     : 'spotlightUpHandler',
		onSpotlightDown   : 'spotlightDownHandler'
	},

	/**
	* @private
	*/
	_oInputControl: null,

	/**
	* Returns boolean indicating whether passed-in control is an input field.
	*
	* @private
	*/
	_isInput: function (oControl) {
		return (
			oControl instanceof Input		||
			oControl instanceof RichText	||
			oControl instanceof TextArea
		);
	},

	/**
	* Traverses tree of children to find input control.
	*
	* @private
	*/
	_findInputControl: function (oControl) {
		oControl = oControl || this;

		var oInputControl = null;

		for (var n=0; n<oControl.children.length; n++) {
			if (this._isInput(oControl.children[n])) {
				return oControl.children[n];
			}
			if ((oInputControl = this._findInputControl(oControl.children[n]))) {
				return oInputControl;
			}
		}
	},

	/**
	* @private
	*/
	create: function () {
		ToolDecorator.prototype.create.apply(this, arguments);
		this.updateFocus(false);
		this._oInputControl = this._findInputControl();
		if (this._oInputControl instanceof Input) {
			this.addClass('moon-divider-text moon-input-decorator');
		}
		if (this._oInputControl instanceof TextArea || this._oInputControl instanceof RichText) {
			this.addClass('moon-divider-text moon-textarea-decorator');
		}
	},

	/**
	* @private
	*/
	createComponent: function () {
		ToolDecorator.prototype.createComponent.apply(this, arguments);
		this._oInputControl = this._findInputControl();
	},

	/**
	* @private
	*/
	createComponents: function () {
		ToolDecorator.prototype.createComponents.apply(this, arguments);
		this._oInputControl = this._findInputControl();
	},

	/**
	* Updates styling based on focus state.
	*
	* @param {Boolean} bFocus - Whether to add/remove `moon-focused` class.
	* @public
	*/
	updateFocus: function (bFocus) {
		this.focused = bFocus;
		this.addRemoveClass('moon-focused', this.alwaysLooksFocused || this.focused);
	},

	/**
	* Retrieves the child input control.
	*
	* @returns {Object} A reference to the child input control.
	* @public
	*/
	getInputControl: function () {
		return this._oInputControl;
	},

	// Event handlers:
	/**************************************************/

	/**
	* @private
	*/
	focusHandler: function (oSender, oEvent) {
		if (Spotlight.getCurrent() != this) {
			// Force a spot here, even when we're in pointer mode,
			// to ensure that clicks inside us (e.g. to position
			// the cursor) don't cause Spotlight to unfreeze
			Spotlight.spot(this, null, true);
		}
		Spotlight.freeze();
		this.updateFocus(true);
	},

	/**
	* @private
	*/
	blurHandler: function () {
		Spotlight.unfreeze();
		this.updateFocus(false);
	},

	/**
	* @private
	*/
	disabledChangeHandler: function (oSender, oEvent) {
		this.addRemoveClass('moon-disabled', oEvent.originator.disabled);
	},

	// Spotlight Event handlers:
	/**************************************************/

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	spotlightFocusHandler: function () {
		this.bubble('onRequestScrollIntoView');
	},

	/**
	* @private
	*/
	spotlightSelectHandler: function (oSender, oEvent) {
		var oInput = this.getInputControl();
		if (oInput) {
			if (oInput.hasFocus() && oEvent) {
				return true;
			} else {
				oInput.focus();
			}
			return false;
		}
	},

	/**
	* @private
	*/
	spotlightBlurHandler: function (oSender, oEvent) {
		this.blur();
	},

	/**
	* @private
	*/
	spotlightLeftHandler: function (oSender, oEvent) {
		var oInput = this.getInputControl();
		if (oInput && oInput.hasFocus() && oInput.left) {
			if (oInput.left()) {
				oEvent.allowDomDefault();       // Allow keydown to bubble
				return true;                    // Prevent onSpotlightLeft to bubble
			} else {
				this.blur();
				oInput.blur();
			}
		}
	},

	/**
	* @private
	*/
	spotlightRightHandler: function (oSender, oEvent) {
		var oInput = this.getInputControl();
		if (oInput && oInput.hasFocus() && oInput.right) {
			if (oInput.right()) {
				oEvent.allowDomDefault();       // Allow keydown to bubble
				return true;                    // Prevent onSpotlightRight to bubble
			} else {
				this.blur();
				oInput.blur();
			}
		}
	},

	/**
	* @private
	*/
	spotlightUpHandler: function (oSender, oEvent) {
		var oInput = this.getInputControl();
		if (oInput && oInput.hasFocus() && oInput.up) {
			if (oInput.up()) {
				oEvent.allowDomDefault();       // Allow keydown to bubble
				return true;                    // Prevent onSpotlightUp to bubble
			} else {
				this.blur();
				oInput.blur();
			}
		}
	},

	/**
	* @private
	*/
	spotlightDownHandler: function (oSender, oEvent) {
		var oInput = this.getInputControl();
		if (oInput && oInput.hasFocus() && oInput.down) {
			if (oInput.down()) {
				oEvent.allowDomDefault();       // Allow keydown to bubble
				return true;                    // Prevent onSpotlightLeft to bubble
			} else {
				this.blur();
				oInput.blur();
			}
		}
	}
});
},{"../../../enyo/lib/ToolDecorator":77,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../Input":158,"../RichText":176,"../TextArea":189}],29:[function(require,module,exports){
require('../../../enyo');



var
	kind = require('../kind');
var
	DataList = require('../DataList'),
	VerticalGridDelegate = require('../VerticalGridDelegate');

/**
* {@link enyo.DataGridList} is a paginated {@link enyo.DataList} designed to lay out
* its children in a grid. Like `enyo.DataList`, it links its children directly to the
* underlying records in the collection specified as its collection.
*
* Because the layout is arbitrarily handled, spacing of children must be set using
* the kind's available API (e.g., with the [spacing]{@link enyo.DataGridList#spacing},
* [minWidth]{@link enyo.DataGridList#minWidth}, and
* [minHeight]{@link enyo.DataGridList#minHeight} properties).
* 
* Note that `enyo.DataGridList` will attempt to grow or shrink the size of its
* children in order to keep them evenly spaced.
*
* @class enyo.DataGridList
* @extends enyo.DataList
* @ui
* @public
*/
var DataGridList = module.exports = kind(
	/** @lends enyo.DataGridList.prototype */ {

	/**
	* @private
	*/
	name: 'enyo.DataGridList',

	/**
	* @private
	*/
	kind: DataList,

	/**
	* The spacing (in pixels) between elements in the [grid list]{@link enyo.DataGridList}. It 
	* should be an even number, or else it will be coerced into one for consistency. This is the
	* exact spacing to be allocated on all sides of each item.
	*
	* @type {Number}
	* @default 10
	* @public
	*/
	spacing: 10,

	/**
	* The minimum width (in pixels) for each [grid]{@link enyo.DataGridList} item. 
	* Grid items will not be collapsed beyond this size, but they may be proportionally
	* expanded.
	*
	* @type {Number}
	* @default 100
	* @public
	*/
	minWidth: 100,

	/**
	* The minimum height (in pixels) for each [grid]{@link enyo.DataGridList} item. 
	* Grid items will not be collapsed beyond this size, but they may be proportionally
	* expanded.
	*/
	minHeight: 100,

	/**
	* While {@link enyo.DataList} provides some generic [delegates]{@glossary delegate} for
	* handling [objects]{@glossary Object}, we have to arbitrarily lay out our children, so
	* we have our own. We add these and ensure that the appropriate delegate is selected
	* depending on the request.
	*
	* @method
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			var o = this.orientation;
			// this will only remap _vertical_ and _horizontal_ meaning it is still possible to
			// add others easily
			this.orientation = (o == 'vertical'? 'verticalGrid': (o == 'horizontal'? 'horizontalGrid': o));
			var s = this.spacing;
			// ensure that spacing is set to an even number or zero
			this.spacing = (s % 2 === 0? s: Math.max(s-1, 0));
			return sup.apply(this, arguments);
		};
	}),
	/**
	* Ensures that each item being created for the [DataGridList]{@link enyo.DataGridList}
	* has the correct CSS classes so it will display properly (and be movable, since the items
	* must be absolutely positioned).
	*
	* @method
	* @private
	*/
	initComponents: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			// note we wait until after the container and its children have been created
			// so these default properties will only apply to the real children of the grid
			var d = this.defaultProps,
				c = ' item';
			d.classes = (d.classes || '') + c;
		};
	}),
	/**
	* We don't want to worry about the normal required handling when `showing` changes
	* unless we're actually visible and the list has been fully rendered and we actually
	* have some data.
	*
	* @method
	* @private
	*/
	showingChanged: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			var len = this.collection? this.collection.length: 0;
			if (this.$.scroller.generated && len && this.showing) {
				// avoid the default handler and call the event handler method
				// designated by `enyo.DataList`
				this.didResize();
			}
		};
	}),

	/** 
	* We access this [kind's]{@glossary kind} [constructor]{@glossary constructor}
	* and need it to be undeferred at that time.
	*
	* @private
	*/

	
	/**
	* All of the CSS is relative to this class.
	*
	* @private
	*/
	classes: 'enyo-data-grid-list'
});

DataGridList.delegates.vertical = VerticalGridDelegate;
},{"../../../enyo":12,"../DataList":30,"../VerticalGridDelegate":82,"../kind":96}],123:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Button = require('../../../enyo/lib/Button');

var
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeText = Marquee.Text;

/**
* {@link moon.Button} is an {@link enyo.Button} with Moonstone styling applied.
* The color of the button may be customized by specifying a background color.
*
* For more information, see the documentation on
* [Buttons]{@linkplain $dev-guide/building-apps/controls/buttons.html} in the
* Enyo Developer Guide.
*
* @class moon.Button
* @extends enyo.Button
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Button.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Button',

	/**
	* @private
	*/
	kind: Button,

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	* @lends moon.Button.prototype
	*/
	published: {

		/**
		* A boolean parameter affecting the size of the button. If `true`, the
		* button's diameter will be set to 60px. However, the button's tap target
		* will still have a diameter of 78px, with an invisible DOM element
		* wrapping the small button to provide the larger tap zone.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		small: false,

		/**
		* A boolean parameter affecting the minimum width of the button. When `true`,
		* the minimum width will be set to 180px (or 130px if [small]{@link moon.Button#small}
		* is `true`). If `false`, the minimum width will be set to the current value of
		* `@moon-button-height` (thus forcing the button to be no smaller than a circle with
		* diameter `@moon-button-height`).
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		minWidth: true,

		/**
		* When `true`, the content will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true,

		/**
		* @deprecated Replaced by [uppercase]{@link moon.Button#uppercase}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		contentUpperCase: null
	},

	/**
	* @private
	*/
	classes: 'moon-large-button-text moon-button enyo-unselectable',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	handlers: {

		/**
		* `onSpotlightSelect` simulates `mousedown`.
		*
		* @private
		*/
		onSpotlightKeyDown	: 'depress',

		/**
		* `onSpotlightKeyUp` simulates `mouseup`.
		*
		* @private
		*/
		onSpotlightKeyUp	: 'undepress',

		/**
		* Also make sure we remove the pressed class if focus is removed from
		* this item before it receives a keyup.
		*
		* @private
		*/
		onSpotlightBlur		: 'undepress',

		/**
		* The handler for `onSpotlightFocused` bubbles a `requestScrollIntoView` event.
		*
		* @private
		*/
		onSpotlightFocused	: 'spotFocused'
	},

	/**
	* On creation, updates based on value of `this.small`.
	*
	* @private
	*/
	initComponents: function () {
		if (!(this.components && this.components.length > 0)) {
			this.createComponent({name: 'client', kind: MarqueeText, isChrome: true});
			this.createComponent({name: 'tapArea', kind: Control, classes: 'button-tap-area', isChrome: true});
		}
		if (this.small) this.smallChanged();
		if (this.minWidth) this.minWidthChanged();
		
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the contentUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.contentUpperCase !== null) this.uppercase = this.contentUpperCase;

		this.contentChanged();
		Button.prototype.initComponents.apply(this, arguments);
	},

	/**
	* Adds `pressed` CSS class.
	*
	* @private
	*/
	depress: function (inSender, inEvent) {
		if (inEvent.keyCode === 13) {
			this.addClass('pressed');
		}
	},

	/**
	* Bubbles `requestScrollIntoView` event.
	*
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	spotFocused: function (inSender, inEvent) {
		if (inEvent.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	},

	/**
	* Removes `pressed` CSS class.
	*
	* @private
	*/
	undepress: function () {
		this.removeClass('pressed');
	},

	/**
	* If `this.small` is `true`, `taparea` dimensions are increased.
	*
	* @private
	*/
	smallChanged: function () {
		if (this.small) {
			this.addClass('small');
			this.addClass('moon-small-button-text');
		} else {
			this.removeClass('small');
			this.removeClass('moon-small-button-text');
		}
	},

	/**
	* Override to handle potential child components.
	*
	* @private
	*/
	contentChanged: function () {
		var content = this.getContent();
		if (this.$.client) {
			this.$.client.setContent( this.get('uppercase') ? util.toUpperCase(content) : content );
		} else {
			Button.prototype.contentChanged.apply(this, arguments);
		}
	},

	/**
	* @private
	*/
	uppercaseChanged: function () {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// contentUpperCase is fully deprecated and removed.
		if (this.contentUpperCase != this.uppercase) this.contentUpperCase = this.uppercase;
		this.contentChanged();
	},

	/**
	* @private
	*/
	contentUpperCaseChanged: function () {
		if (this.uppercase != this.contentUpperCase) this.uppercase = this.contentUpperCase;
		this.uppercaseChanged();
	},

	/**
	* @private
	*/
	minWidthChanged: function () {
		if (this.minWidth) {
			this.addClass('min-width');
		} else {
			this.removeClass('min-width');
		}
	},

	/**
	* @private
	*/
	showingChanged: function () {
		Button.prototype.showingChanged.apply(this, arguments);
		if (!this.showing && this.hasClass('pressed')) {
			this.undepress();
		}
	}
});
},{"../../../enyo/lib/Button":20,"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Marquee":166}],126:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text,
	MarqueeSupport = Marquee.Support;


/**
* {@link moon.ChannelInfoBadge} is a simple kind used to display a badge
* containing channel information. It is the default kind for components added
* to {@link moon.ChannelInfo}.
*
* @class moon.ChannelInfoBadge
* @extends enyo.Control
* @ui
* @public
*/
var ChannelInfoBadge = kind(
	/** @lends moon.ChannelInfoBadge.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ChannelInfoBadge',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-video-badge-text moon-video-player-info-icon'
});

/**
* {@link moon.ChannelInfo} is a control that displays channel information.  It is
* designed to be used within the [infoComponents]{@link moon.VideoPlayer#infoComponents}
* block of a {@link moon.VideoPlayer}.
*
* Example:
* ```
* 	{
* 		kind: 'moon.ChannelInfo',
* 		no: 36,
* 		name: 'AMC',
* 		components: [
* 			{content: '3D'},
* 			{content: 'Live'},
* 			{content: 'REC 08:22', classes: 'moon-video-player-info-redicon'}
* 		]
* 	}
* ```
*
* @class moon.ChannelInfo
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ChannelInfo.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ChannelInfo',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-channelinfo',

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	*/
	marqueeOnSpotlight: false,

	/**
	* @private
	*/
	marqueeOnHover: true,

	/**
	* @private
	* @lends moon.ChannelInfo.prototype
	*/
	published: {

		/**
		* The channel number.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		channelNo: '',

		/**
		* The name of the channel.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		channelName: '',

		/**
		* When `true`, [channelNo]{@link moon.ChannelInfo#channelNo} will have locale-safe
		* uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercaseChannelNo: true,

		/**
		* @deprecated Replaced by [uppercaseChannelNo]{@link moon.ChannelInfo#uppercaseChannelNo}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		channelNoUpperCase: null
	},

	/**
	* @private
	*/
	defaultKind: ChannelInfoBadge,

	/**
	* @private
	*/
	components: [
		{kind: MarqueeText, name: 'channelNo', classes: 'moon-header-font moon-video-player-channel-info-no'},
		{kind: MarqueeText, name: 'channelName', classes: 'moon-video-player-channel-info-name'},
		{kind: Control, name: 'client', classes: 'moon-video-player-channel-info-badges'}
	],

	/**
	* @private
	*/
	bindings: [
		{from: 'channelName', to: '$.channelName.content'}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);

		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the channelNoUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.channelNoUpperCase !== null) this.uppercaseChannelNo = this.channelNoUpperCase;

		this.channelNoChanged();
	},

	/**
	* @private
	*/
	channelNoChanged: function () {
		var channelNo = this.getChannelNo();
		this.$.channelNo.setContent(this.get('uppercaseChannelNo') ? util.toUpperCase(channelNo) : channelNo);
	},

	/**
	* @private
	*/
	uppercaseChannelNoChanged: function () {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// channelNoUpperCase is fully deprecated and removed.
		if (this.channelNoUpperCase != this.uppercaseChannelNo) this.channelNoUpperCase = this.uppercaseChannelNo;
		this.channelNoChanged();
	},

	/**
	* @private
	*/
	channelNoUpperCaseChanged: function () {
		if (this.uppercaseChannelNo != this.channelNoUpperCase) this.uppercaseChannelNo = this.channelNoUpperCase;
		this.uppercaseChannelNoChanged();
	}
});

module.exports.ChannelInfoBadge = ChannelInfoBadge;
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Marquee":166}],138:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Marquee = require('../Marquee'),
	MarqueeItem = Marquee.Item,
	MarqueeSupport = Marquee.Support;

/**
* {@link moon.Divider} is a simply styled component that may be used as a separator
* between groups of components.
*
* @class moon.Divider
* @mixes moon.MarqueeSupport
* @mixes moon.MarqueeItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Divider.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Divider',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-divider moon-divider-text',

	/**
	* @private
	*/
	mixins: [MarqueeSupport, MarqueeItem],

	/**
	* @private
	*/
	marqueeOnSpotlight: false,

	/**
	* @private
	*/
	marqueeOnRender: true,

	/**
	* @private
	*/
	contentChanged: function () {
		this.content = this.content.split(' ').map(utils.cap).join(' ');
		Control.prototype.contentChanged.apply(this, arguments);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Marquee":166}],149:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	GridListImageItem = require('../../../layout/lib/GridListImageItem');

var
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeText = Marquee.Text;

/**
* {@link moon.GridListImageItem} extends {@link enyo.GridListImageItem}, adding
* Moonstone-specific configuration, styling, decorators, and focus-state management.
*
* You may create an image grid by adding instances of this kind as components of a
* {@link moon.DataGridList}.
*
* @class moon.GridListImageItem
* @extends enyo.GridListImageItem
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.GridListImageItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.GridListImageItem',

	/**
	* @private
	*/
	kind: GridListImageItem,

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	centered: true,

	/**
	* @private
	*/
	classes: 'moon-gridlist-imageitem',

	/**
	* @private
	*/
	componentOverrides: {
		caption: {kind: MarqueeText},
		subCaption: {kind: MarqueeText}
	},

	/**
	* @private
	*/
	bindings: [
		{from: '.allowHtml', to: '.$.caption.allowHtml'},
		{from: '.allowHtml', to: '.$.subCaption.allowHtml'}
	],

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocus: 'focused'
	},

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	focused: function (inSender, inEvent) {
		if (inEvent.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/GridListImageItem":117,"../../../moonstone":119,"../Marquee":166}],162:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeItem = Marquee.Item;

/**
* {@link moon.Item} is a focusable Moonstone-styled control that can display
* simple text or a set of controls.
*
* @class moon.Item
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @mixes moon.MarqueeItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Item.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Item',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-item',

	/**
	* @private
	*/
	mixins: [MarqueeSupport, MarqueeItem],

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocused: 'spotlightFocused'
	},

	/**
	* @private
	* @lends moon.Item.prototype
	*/
	published: {

		/**
		* If `true`, the control is shown as disabled and does not generate tap events.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false
	},

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.disabledChanged();
		if (this.children.length) {
			this.addClass('allow-wrap');
		}
	},

	/**
	* @private
	*/
	disabledChanged: function (inOld) {
		this.addRemoveClass('disabled', this.disabled);
	},

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	spotlightFocused: function (inSender, inEvent) {
		if (inEvent.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	},

	/**
	* @private
	*/
	tap: function () {
		return this.disabled;
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Marquee":166}],163:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Marquee = require('../Marquee'),
	MarqueeItem = Marquee.Item;

/**
* {@link moon.ItemOverlay} is a supplementary control that helps to manage
* layout within a {@link moon.Item}.
*
* ```
* {kind: "moon.Item", components: [
* 	{kind: "moon.ItemOverlay", autoHide: false, right: true, components:[
* 		{kind: "moon.Icon", icon: "arrowlargeup", small: true},
* 		{kind: "moon.Icon", icon: "arrowlargedown", small: true}
* 	]},
* 	{kind: "moon.MarqueeText", content: "Item   with   icons   auto   hides"}
* ]}
* ```
*
* @ui
* @class moon.ItemOverlay
* @extends enyo.Control
* @public
*/
var ItemOverlay = module.exports = kind(
	/** @lends moon.ItemOverlay.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ItemOverlay',

	/**
	* @private
	*/
	kind: Control,

	/**
 	* @private
 	*/
	classes: 'moon-item-overlay',

	/**
	* @private
	*/
	published: /** @lends moon.ItemOverlay.prototype */ {

		/**
		* When `true`, the controls in the overlay are only shown on focus; in
		* other words, if the overlay is not focused, the controls will be hidden.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoHide: false,

		/**
		* When `true`, the controls in the overlay are right-aligned.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		right: false

	},

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.autoHideChanged();
		this.rightChanged();
	},

	/**
	* @private
	*/
	autoHideChanged: function() {
		this.addRemoveClass('auto-hide', this.get('autoHide'));
	},


	/**
	* @private
	*/
	rightChanged: function() {
		this.addRemoveClass('right', this.get('right'));
	}

});

/**
* Provides a overlay layout support to moon.Item {@link moon.Item}.
*
* ```
* {kind: "moon.Item", mixins: ["moon.ItemOverlaySupport"], beginningComponents: [
* 	{kind: "moon.Icon", icon: "arrowlargeup", small: true},
* 	{kind: "moon.Icon", icon: "arrowlargedown", small: true}
* ],
* components: [
* 	{kind: "moon.MarqueeText", content: "Item   with   icons   auto   hides"}
* ]}
* ```
*
* @mixin moon.ItemOverlaySupport
* @public
*/
ItemOverlay.ItemOverlaySupport = {
	/**
	* @private
	*/
	name: 'moon.ItemOverlaySupport',

	/**
	* The components block to create left overlay. Only created in creation time.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	beginningComponents: null,

	/**
	* The components block to create right overlay. Only created in creation time.
	*
	* @type {Object}
	* @default null
	* @public
	*/
	endingComponents: null,

	/**
	* When `true`, the beginning controls in the overlay are only shown on focus; in
	* other words, if the overlay is not focused, the controls will be hidden.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	autoHideBeginning: false,

	/**
	* When `true`, the ending controls in the overlay are only shown on focus; in
	* other words, if the overlay is not focused, the controls will be hidden.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	autoHideEnding: false,

	bindings: [
		{from: 'autoHideBeginning', to: '$.beginning.autoHide'},
		{from: 'autoHideEnding', to: '$.ending.autoHide'}
	],

	initComponents: kind.inherit(function (sup) {
		return function () {
			if (!this.components || this.components.length === 0) {
				this.components = [{name: 'client', content: this.content}];
				if (this._mixins && this._mixins.indexOf('moon.MarqueeItem')) {
					this.components[0].mixins = [MarqueeItem];
				}
			}
			sup.apply(this, arguments);
			this.createComponents([{
				name: 'beginning', kind: ItemOverlay,
				classes: 'beginning', right: false, addBefore: this.controlParentName,
				components: this.beginningComponents
			},{
				name: 'ending', kind: ItemOverlay,
				classes: 'ending', right: true, addBefore: this.controlParentName,
				components: this.endingComponents
			}]);
		};
	})
};
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Marquee":166}],186:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text,
	MarqueeSupport = Marquee.Support;

/**
* {@link moon.Spinner} is a [control]{@link enyo.Control} that shows a spinning animation
* to indicate that activity is taking place. By default, the spinner is light-colored and
* suitable for displaying against a dark background. If you need a dark spinner (to be
* shown on a lighter background), apply the `moon-light` CSS class:
*
* ```javascript
* // Normal
* {kind: 'moon.Spinner'}
* // Light
* {kind: 'moon.Spinner', classes: 'moon-light'}
* // Normal with a message
* {kind: 'moon.Spinner', content: 'Loading...'}
* // Transparent background
* {kind: 'moon.Spinner', transparent: true}
* ```
*
* Typically, a spinner is shown to indicate activity and hidden to indicate that the activity
* has ended. The animation automatically starts when the spinner is shown. If you wish, you
* may control the animation directly by calling the [start()]{@link moon.Spinner#start},
* [stop()]{@link moon.Spinner#stop}, and [toggle()]{@link moon.Spinner#toggle} methods.
*
* `moon.Spinner` supports both `content` text and a `components` block. Note that you
* may only use one of these at a time. Using a `components` block may be desirable if,
* for example, the text in the content section needs [marquee]{@link moon.MarqueeSupport}
* functionality or you'd like to include an [icon]{@link moon.Icon} in the message.
*
* @class moon.Spinner
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Spinner.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Spinner',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-spinner',

	/**
	* Determines whether spinner's background is transparent.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	transparent: false,

	/**
	* Sets the spinner to be horizontally centered, relative to its containing control. Use in
	* combination with [moon.Spinner#center]{@link moon.Spinner#middle} to center this spinner
	* both horizontally and vertically, or just horizontally.
	*
	* @type {Boolean}
	* @default false
	* @public
	*/
	center: false,

	/**
	* When `true`, sets the spinner to be vertically centered inside its container. This option
	* has no effect if [moon.Spinner#center]{@link moon.Spinner#center} is `false`. Setting this
	* to false allows the spinner to only be horizontally centered, and not vertically centered.
	*
	* @type {Boolean}
	* @default true
	* @public
	*/
	middle: true,

	/**
	* @private
	*/
	components: [
		{name: 'decorator', kind: Control, classes: 'moon-spinner-ball-decorator spin-ball-animation', components: [
			{kind: Control, classes: 'moon-spinner-ball moon-spinner-ball1'},
			{kind: Control, classes: 'moon-spinner-ball moon-spinner-ball2'},
			{kind: Control, classes: 'moon-spinner-ball moon-spinner-ball3'}
		]}
	],

	/**
	* @private
	*/
	spinnerTools: [
		{name: 'client', kind: Control, classes: 'moon-spinner-client'}
	],

	/**
	* @private
	*/
	initComponents: function() {
		Control.prototype.initComponents.apply(this, arguments);
		this.createTools();
	},

	/**
	* @private
	*/
	createTools: function() {
		// This allows for the spinner instances with child components to not have
		// MarqueeText kind on the client container.
		var tools = util.clone(this.spinnerTools);
		if (!(this.components && this.components.length > 0)) {
			// If there are no components in the spinner, convert its client area to a MarqueeText kind
			util.mixin(tools[0], {
				kind: MarqueeText,
				mixins: [MarqueeSupport],
				marqueeOnSpotlight: false,
				marqueeOnHover: true,
				marqueeOnRender: true,
				marqueeOnRenderDelay: 1000
			});
		}
		this.createChrome(tools);
	},

	/**
	* @private
	*/
	create: function() {
		Control.prototype.create.apply(this, arguments);
		this.contentChanged();
		this.transparentChanged();
		this.centerChanged();
		this.middleChanged();
		this.addClass('running');
	},

	/**
	* Hides the animating spinner.
	*
	* @public
	*/
	stop: function() {
		this.set('showing', false);
	},

	/**
	* Shows the spinner with animation.
	*
	* @public
	*/
	start: function() {
		this.set('showing', true);
	},

	/**
	* Toggles the spinner's visibility state.
	*
	* @public
	*/
	toggle: function() {
		this.set('showing', !this.get('showing'));
	},

	/**
	* @private
	*/
	hasContent: function() {
		// true if this.content is set to something OR if there are more than zero components
		return (!!this.content || (this.components && this.components.length > 0));
	},

	/**
	* @private
	*/
	contentChanged: function(old) {
		Control.prototype.contentChanged.apply(this, arguments);
		if (this.content || old) {
			this.$.client.set('content', this.content);
		}
		this.$.client.set('showing', !!this.content);
		this.addRemoveClass('content', this.hasContent());
	},

	/**
	* @private
	*/
	centerChanged: function(old) {
		this.addRemoveClass('center',this.get('center'));
	},

	/**
	* @private
	*/
	middleChanged: function(old) {
		this.addRemoveClass('middle',this.get('middle'));
	},

	/**
	* @private
	*/
	transparentChanged: function() {
		this.addRemoveClass('moon-spinner-transparent-background', !!this.get('transparent'));
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Marquee":166}],199:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeText = Marquee.Text;

/**
* {@link moon.VideoInfoHeader} is a [control]{@link enyo.Control} that displays
* various information about a video. It is designed to be used within the
* [infoComponents]{@link moon.VideoPlayer#infoComponents} block of a {@link moon.VideoPlayer}.
*
* Example:
* ```javascript
* {
*	kind: 'moon.VideoInfoHeader',
*	title: 'Breaking Bad - Live Free Or Die',
*	subTitle: 'AMC (301) 7:00 PM - 8:00 PM',
*	description: 'As Walt deals with the aftermath of the Casa Tranquila explosion, '
*		+ 'Hank works to wrap up his investigation of Gus\' empire.',
*	components: [
*		{content: '3D'},
*		{content: 'Live'},
*		{content: 'REC 08:22', classes: 'moon-video-player-info-redicon'}
*	]
* }
* ```
*
* @class moon.VideoInfoHeader
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.VideoInfoHeader.prototype */ {

	/**
	* @private
	*/
	name: 'moon.VideoInfoHeader',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-video-info-header',

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	*/
	marqueeOnSpotlight: false,

	/**
	* @private
	*/
	marqueeOnRender: true,

	/**
	* @private
	* @lends moon.VideoInfoHeader.prototype
	*/
	published: {

		/**
		* Title of the `VideoInfoHeader`.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		title: '',

		/**
		* Subtitle of the `VideoInfoHeader`.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		subTitle: '',

		/**
		* Text below subtitle of the `VideoInfoHeader`.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		subSubTitle: '',

		/**
		* Main content of the `VideoInfoHeader`.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		description: '',

		/**
		* When `true`, the title text will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true,

		/**
		* @deprecated Replaced by [uppercase]{@link moon.VideoInfoHeader#uppercase}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		titleUpperCase: null
	},

	/**
	* @private
	*/
	components: [
		{name: 'title', kind: MarqueeText, classes: 'moon-header-font moon-video-player-info-title'},
		{name: 'subTitle', kind: Control, classes: 'moon-video-player-info-subtitle'},
		{name: 'subSubTitle', kind: Control, classes: 'moon-video-player-info-subsubtitle'},
		{name: 'client', kind: Control, classes: 'moon-video-player-info-client'},
		{kind: Control, components: [
			{name: 'description', kind: Control, classes: 'moon-video-player-info-description'}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.subTitle',		to: '.$.subTitle.content'},
		{from: '.subSubTitle',	to: '.$.subSubTitle.content'},
		{from: '.description',	to: '.$.description.content'}
	],

	/**
	* @private
	*/
	create: function() {
		Control.prototype.create.apply(this, arguments);

		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the contentUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.titleUpperCase !== null) this.uppercase = this.titleUpperCase;

		this.titleChanged();
	},

	/**
	* @private
	*/
	titleChanged: function() {
		this.$.title.set('content', this.get('uppercase') ? util.toUpperCase(this.get('title')) : this.get('title') );
	},

	/**
	* @private
	*/
	uppercaseChanged: function() {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// titleUpperCase is fully deprecated and removed.
		if (this.titleUpperCase != this.uppercase) this.titleUpperCase = this.uppercase;
		this.titleChanged();
	},

	/**
	* @private
	*/
	titleUpperCaseChanged: function() {
		if (this.uppercase != this.titleUpperCase) this.uppercase = this.titleUpperCase;
		this.uppercaseChanged();
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Marquee":166}],128:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Checkbox = require('../Checkbox'),
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeItem = Marquee.Item;

/**
* Fires when the control is either checked or unchecked.
*
* @event moon.CheckboxItem#onActivate
* @type {Object}
* @property {Boolean} checked - Whether the checkbox is currently checked.
* @property {Object} toggledControl - A reference to the {@link moon.CheckboxItem}
*	whose state changed. (Note that the originator of this event is actually the
*	{@link moon.Checkbox} contained within the CheckboxItem, so use this property
* to reference the CheckboxItem itself.)
*
* @public
*/

/**
* {@link moon.CheckboxItem} is a control that combines a {@link moon.Checkbox} with
* a text label. The label text may be set via the [content]{@link enyo.Control#content}
* property. The state of the checkbox may be retrieved by querying the
* [checked]{@link moon.CheckboxItem#checked} property.
*
* ```
*		{kind: 'moon.CheckboxItem', content: 'San Francisco',
*			onchange: 'checkedChanged'},
*		...
*		checkedChanged: function (inSender, inEvent) {
*			var checked = inSender.get('checked');
*		}
* ```
*
* You may place CheckboxItem objects inside an {@link enyo.Group} to create a group
* of checkboxes in which only one may be checked at any given time (similar to how a
* [RadioItemGroup]{@link moon.RadioItemGroup} behaves):
*
* ```
*		{kind: 'Group', components: [
*			{kind: 'moon.CheckboxItem', content: 'New York'},
*			{kind: 'moon.CheckboxItem', content: 'London'},
*			{kind: 'moon.CheckboxItem', content: 'San Francisco'},
*			{kind: 'moon.CheckboxItem', content: 'Beijing'}
*		]}
* ```
*
* @class moon.CheckboxItem
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.CheckboxItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.CheckboxItem',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	mixins: [MarqueeSupport],


	/**
	* @private
	* @lends moon.CheckboxItem.prototype
	*/
	published: {

		/**
		* Boolean value indicating whether checkbox is currently checked.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		checked: false,

		/**
		* Boolean value indicating whether checkbox is currently active item in group.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false,

		/**
		* If `true`, checkbox will be displayed on the right side of the checkbox item;
		* otherwise, it will be displayed on the left side.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		checkboxOnRight: false,

		/**
		* If `true`, checkbox is shown as disabled and does not generate tap events.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* If `true`, the value of the [checked]{@link moon.CheckboxItem#checked} property
		* cannot be changed through user input.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		locked: false,

		/**
		* Name of a font-based icon to use when displaying the checkbox. Consult
		* {@link moon.Icon} for valid values.
		*
		* @type {String}
		* @default 'check'
		* @public
		*/
		icon: 'check',

		/**
		* Optional path to an image asset. May be used to customize checkbox appearance.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		src: '',

		/**
		* If used as the base control within a {@link moon.DataList} or {@glossary subkind},
		* this should be set to `false` so that selection support can be synchronized to the
		* checked state of this control.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		handleTapEvent: true
	},

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.CheckboxItem#onActivate}
		*/
		onActivate: ''
	},

	/**
	* @private
	*/
	classes: 'moon-item moon-checkbox-item',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	handlers: {
		ontap: 'tap',
		onActivate: 'decorateActivateEvent',
		onSpotlightFocused: 'spotlightFocused'
	},

	/**
	* @private
	*/
	components: [
		{name: 'client', mixins: [MarqueeItem], classes: 'moon-checkbox-item-label-wrapper'},
		{name: 'input', kind: Checkbox, spotlight: false}
	],

	/**
	* @private
	*/
	bindings: [
		{from: 'allowHtml', to: '$.client.allowHtml'},
		{from: 'active', to: '$.input.active', oneWay: false}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.disabledChanged();
		this.checkboxOnRightChanged();
		this.lockedChanged();
	},

	/**
	* @private
	*/
	rendered: function () {
		Control.prototype.rendered.apply(this, arguments);
		if (this.get('src') != null || this.get('icon') != null) {
			this.srcChanged();
			this.iconChanged();
		}
		this.checkedChanged();
	},

	/**
	* @private
	*/
	disabledChanged: function () {
		this.addRemoveClass('disabled', this.disabled);
		this.$.input.setDisabled(this.disabled);
	},

	/**
	* @private
	*/
	checkedChanged: function () {
		this.$.input.setChecked(this.getChecked());
	},

	/**
	* @private
	*/
	checkboxOnRightChanged: function () {
		this.addRemoveClass('left-handed', !this.getCheckboxOnRight());
	},

	/**
	* waterfall event
	* @fires enyo.Control#ontap
	* @private
	*/
	tap: function (inSender, inEvent) {
		if (this.handleTapEvent) {
			if (inSender != this.$.input) {
				this.waterfallDown('ontap', inEvent, inSender);
			}
		}
	},

	/**
	* @fires moon.CheckboxItem#onActivate
	* @private
	*/
	decorateActivateEvent: function (inSender, inEvent) {
		inEvent.toggledControl = this;
		this.setChecked(this.$.input.getChecked());
		inEvent.checked = this.checked;
	},

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	spotlightFocused: function (inSender, inEvent) {
		if (inEvent.originator === this) {
			this.bubble('onRequestScrollIntoView');
		}
	},

	/**
	* @private
	*/
	contentChanged: function () {
		this.$.client.setContent(this.getContent());
	},

	/**
	* @private
	*/
	lockedChanged: function() {
		this.$.input.setLocked(this.locked);
	},

	/**
	* @private
	*/
	iconChanged: function() {
		this.$.input.setIcon(this.icon);
	},

	/**
	* @private
	*/
	srcChanged: function() {
		this.$.input.setSrc(this.src);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Checkbox":127,"../Marquee":166}],193:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils');

var
	Checkbox = require('../Checkbox');

/**
* {@link moon.ToggleSwitch}, which extends {@link moon.Checkbox}, is a control
* that looks like a switch with 'on' and 'off' states. When the toggle switch is
* tapped, it switches its state and fires an
* [onChange]{@link enyo.Checkbox#onChange} event.
*
* @class moon.ToggleSwitch
* @extends moon.Checkbox
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ToggleSwitch.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ToggleSwitch',

	/**
	* @private
	*/
	kind: Checkbox,

	/**
	* @private
	*/
	icon: 'circle',

	/**
	* @private
	*/
	classes: 'moon-toggle-switch',

	/**
	* @private
	*/
	rendered: function () {
		Checkbox.prototype.rendered.apply(this, arguments);
		// wait until after we're rendered to allow animation.
		util.asyncMethod(this, function () {
			this.addClass('animated');
		});
	}
});
},{"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Checkbox":127}],130:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	ri = require('../../../enyo/lib/resolution'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Popup = require('../../../enyo/lib/Popup');

var
	ContextualLayout = require('../../../layout/lib/ContextualLayout');

var
	Spotlight = require('../../../spotlight');

var
	IconButton = require('../IconButton'),
	MoonHistory = require('../History'),
	Scrim = require('../../../moonstone/lib/Scrim'),
	HistorySupport = MoonHistory.HistorySupport;

/**
* Fires when the contextual popup is to be shown.
*
* @event moon.ContextualPopup#onRequestShowPopup
* @type {Object}
* @property {Object} activator - A reference to the activating object.
* @public
*/

/**
* Fires when the contextual popup is to be hidden. No additional data is included
* with this event.
*
* @event moon.ContextualPopup#onRequestHidePopup
* @type {Object}
* @public
*/

/**
* Fires when the contextual popup is activated. Extends {@link enyo.Popup#onActivate}.
*
* @event moon.ContextualPopup#onActivate
* @type {Object}
* @property {Object} sentFromPopup - A reference to the popup.
* @public
*/

/**
* {@link moon.ContextualPopup} is a popup window control with Moonstone visual
* styling applied. It extends {@link enyo.Popup} and is designed to be used with
* {@link moon.ContextualPopupDecorator}.
*
* @class moon.ContextualPopup
* @extends enyo.Popup
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ContextualPopup.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ContextualPopup',

	/**
	* @private
	*/
	kind: Popup,

	/**
	* @private
	*/
	mixins: [HistorySupport],

	/**
	* @private
	*/
	layoutKind: ContextualLayout,

	/**
	* @private
	*/
	classes: 'moon-body-text moon-contextual-popup',

	/**
	* @private
	*/
	events: {
		onRequestSpot: ''
	},

	/**
	* @private
	*/
	handlers: {
		onRequestShowPopup: 'requestShow',
		onRequestHidePopup: 'requestHide',
		onActivate: 'decorateActivateEvent',
		onRequestScrollIntoView: '_preventEventBubble',
		onSpotlightContainerLeave: 'onLeave'
	},

	/**
	* @private
	*/
	eventsToCapture: {
		onSpotlightKeyDown: 'capturedKeyDown',
		onSpotlightFocus: 'capturedFocus'
	},

	/**
	* @private
	* @lends moon.ContextualPopup.prototype
	*/
	published: {

		/**
		* If `true`, focus cannot leave the constraints of the popup unless the
		* popup is explicitly closed.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		spotlightModal: false,

		/**
		* If `false`, the close button is hidden; if `true`, it is shown. When this
		* property is set to `'auto'` (the default), the close button is shown when
		* [spotlightModal]{@link moon.ContextualPopup#spotlightModal} is `true`.
		*
		* @type {String}
		* @default 'auto'
		* @public
		*/
		showCloseButton: 'auto'
	},

	/**
	* @private
	*/
	spotlight: 'container',

	/**
	* @private
	*/
	floating: true,

	/**
	* Determines whether a scrim will appear when the popup is modal.
	* Note that modal scrims are transparent, so you won't see them.
	*
	* @private
	*/
	scrimWhenModal: true,

	// Layout parameters

	/**
	* Vertical flush layout margin.
	*
	* @private
	*/
	vertFlushMargin:0,

	/**
	* Horizontal flush layout margin.
	*
	* @private
	*/
	horizFlushMargin:0,

	/**
	* Popups wider than this value are considered wide (for layout purposes).
	*
	* @private
	*/
	widePopup: ri.scale(210),

	/**
	* Popups longer than this value are considered long (for layout purposes).
	*
	* @private
	*/
	longPopup: ri.scale(210),

	/**
	* Do not allow horizontal flush popups past spec'd amount of buffer space on left/right
	* screen edge.
	*
	* @private
	*/
	horizBuffer: ri.scale(15),

	/**
	* @private
	*/
	activator: null,

	/**
	* @private
	*/
	tools: [
		{name: 'client', kind: Control, classes: 'moon-neutral moon-contextual-popup-client'},
		{name: 'closeButton', kind: IconButton, icon: 'closex', classes: 'moon-popup-close', ontap: 'closePopup', spotlight: false}
	],

	/**
	* Creates chrome components.
	*
	* @private
	*/
	initComponents: function () {
		this.createChrome(this.tools);
		Popup.prototype.initComponents.apply(this, arguments);
	},

	/**
	* Renders the contextual popup.
	*
	* @private
	*/
	render: function () {
		this.allowHtmlChanged();
		this.contentChanged();
		Popup.prototype.render.apply(this, arguments);
	},

	/**
	FixMe: overriding the control's default hide method to support the existing sequential tapping
	and the dependent decorator code inorder to handle some special cases.
	*/
	hide: function(inSender, e) {

		if (this.tapCaptured) {
			this.tapCaptured = false;
			this.popupActivated = true;
		} else {
			this.popupActivated = false;
		}
		Popup.prototype.hide.apply(this, arguments);

	},

	/**
	* Performs control-specific tasks before/after showing {@link moon.ContextualPopup}.
	*
	* @private
	*/
	requestShow: function (inSender, inEvent) {
		var n = inEvent.activator.hasNode();
		this.activator = inEvent.activator;
		if (n) {
			this.activatorOffset = this.getPageOffset(n);
		}
		this.show();
		this.configCloseButton();
		if (Spotlight.isSpottable(this)) {
			Spotlight.spot(this);
		}
		return true;
	},

	/**
	* @fires enyo.Popup#onActivate
	* @private
	*/
	decorateActivateEvent: function (inSender, inEvent) {
		inEvent.sentFromPopup = this;
	},

	/**
	* @private
	*/
	getPageOffset: function (inNode) {
		// getBoundingClientRect returns top/left values which are relative to the viewport and
		// not absolute
		var r = inNode.getBoundingClientRect();

		var pageYOffset = (window.pageYOffset === undefined) ? document.documentElement.scrollTop : window.pageYOffset;
		var pageXOffset = (window.pageXOffset === undefined) ? document.documentElement.scrollLeft : window.pageXOffset;
		var rHeight = (r.height === undefined) ? (r.bottom - r.top) : r.height;
		var rWidth = (r.width === undefined) ? (r.right - r.left) : r.width;

		return {top: r.top + pageYOffset, left: r.left + pageXOffset, height: rHeight, width: rWidth, bottom: r.top + pageYOffset + rHeight, right: r.left + pageXOffset + rWidth};
	},

	/**
	* @private
	*/
	resetDirection: function () {
		this.removeClass('right');
		this.removeClass('left');
		this.removeClass('high');
		this.removeClass('low');
		this.removeClass('below');
		this.removeClass('above');
	},

	/**
	* Alters the direction of the popup.
	*
	* @private
	*/
	alterDirection: function () {
		if (this.showing) {
			var clientRect = this.getBoundingRect(this.node);
			var viewPortHeight = dom.getWindowHeight();
			var viewPortWidth = dom.getWindowWidth();
			var offsetHeight = (clientRect.height - this.activatorOffset.height) / 2;
			var offsetWidth = (clientRect.width - this.activatorOffset.width) / 2;
			var popupMargin = 20;

			var bounds = {top: null, left: null};

			if(this.direction === 'left') {
				if(clientRect.width + popupMargin < this.activatorOffset.left) {
					this.resetDirection();
					this.addClass('right');

					if(this.activatorOffset.top < offsetHeight) {
						this.addClass('high');
						bounds.top = this.activatorOffset.top;
					} else if(viewPortHeight - this.activatorOffset.bottom < offsetHeight) {
						this.addClass('low');
						bounds.top = this.activatorOffset.bottom - clientRect.height;
					} else {
						bounds.top = this.activatorOffset.top - offsetHeight;
					}

					bounds.left = this.activatorOffset.left - clientRect.width;
				}
			} else if(this.direction === 'right') {
				if(viewPortWidth > this.activatorOffset.right + clientRect.width + popupMargin) {
					this.resetDirection();
					this.addClass('left');

					if(this.activatorOffset.top < offsetHeight) {
						this.addClass('high');
						bounds.top = this.activatorOffset.top;
					} else if(viewPortHeight - this.activatorOffset.bottom < offsetHeight) {
						this.addClass('low');
						bounds.top = this.activatorOffset.bottom - clientRect.height;
					} else {
						bounds.top = this.activatorOffset.top - offsetHeight;
					}

					bounds.left = this.activatorOffset.right;
				}
			} else if(this.direction === 'top') {
				if(clientRect.height + popupMargin < this.activatorOffset.top) {
					this.resetDirection();
					this.addClass('above');

					if(this.activatorOffset.left < offsetWidth) {
						this.addClass('right');
						bounds.left = this.activatorOffset.left;
					} else if(viewPortWidth - this.activatorOffset.right < offsetWidth) {
						this.addClass('left');
						bounds.left = this.activatorOffset.right - clientRect.width;
					} else {
						bounds.left = this.activatorOffset.left - offsetWidth;
					}

					bounds.top = this.activatorOffset.top - clientRect.height;
				}
			} else if(this.direction === 'bottom') {
				if(viewPortHeight > this.activatorOffset.bottom + clientRect.height + popupMargin) {
					this.resetDirection();
					this.addClass('below');

					if(this.activatorOffset.left < offsetWidth) {
						this.addClass('right');
						bounds.left = this.activatorOffset.left;
					} else if(viewPortWidth - this.activatorOffset.right < offsetWidth) {
						this.addClass('left');
						bounds.left = this.activatorOffset.right - clientRect.width;
					} else {
						bounds.left = this.activatorOffset.left - offsetWidth;
					}

					bounds.top = this.activatorOffset.bottom;
				}
			}

			this.setBounds(bounds);
		}
	},

	/**
	* @private
	*/
	getBoundingRect: function (node) {
		// getBoundingClientRect returns top/left values which are relative to the viewport and not absolute
		var o = node.getBoundingClientRect();
		if (!o.width || !o.height) {
			return {
				left: o.left,
				right: o.right,
				top: o.top,
				bottom: o.bottom,
				width: o.right - o.left,
				height: o.bottom - o.top
			};
		}
		return o;
	},

	/**
	* Dismisses popup if Escape keypress is detected.
	*
	* @private
	*/
	keydown: function (inSender, inEvent) {
		if (this.showing && this.autoDismiss && inEvent.keyCode == 27 /* escape */) {
			this.hide();
			Spotlight.spot(this.activator);
		}
	},

	/**
	* @private
	*/
	closePopup: function (inSender, inEvent) {
		this.$.closeButton.removeClass('pressed');
		this.hide();
		Spotlight.spot(this.activator);
	},

	/**
	* Determines whether to display close button.
	*
	* @private
	*/
	configCloseButton: function () {
		if (this.showCloseButton === true || (this.spotlightModal && this.showCloseButton !== false)) {
			this.$.closeButton.show();
			this.$.closeButton.spotlight = true;
			this.addClass('reserve-close');
		} else {
			this.$.closeButton.hide();
			this.$.closeButton.spotlight = false;
			this.removeClass('reserve-close');
		}
	},

	/**
	* @private
	*/
	contentChanged: function () {
		this.$.client.setContent(this.content);
	},

	/**
	* @private
	*/
	allowHtmlChanged: function () {
		this.$.client.setAllowHtml(this.allowHtml);
	},

	/**
	* Called when [spotlightModal]{@link moon.ContextualPopup#spotlightModal} changes.
	*
	* @private
	*/
	spotlightModalChanged: function () {
		this.configCloseButton();
	},

	/**
	* Called when [showCloseButton]{@link moon.ContextualPopup#showCloseButton} changes.
	*
	* @private
	*/
	showCloseButtonChanged: function () {
		this.configCloseButton();
	},

	/**
	* @private
	*/
	capturedKeyDown: function (inSender, inEvent) {
		if (inEvent.keyCode == 13) {
			this.downEvent = inEvent;
		}
		return this.modal && this.spotlightModal;
	},

	/**
	* @private
	*/
	capturedFocus: function(inSender, inEvent) {
		if(this.modal && this.spotlightModal) {
			Spotlight.spot(this);
			return true;
		}
	},

	/**
	* @private
	*/
	capturedTap: function (inSender, inEvent) {
		// If same activator tapped sequentially, the state of the popup is remembered.
		if (this.downEvent && this.downEvent.dispatchTarget.isDescendantOf(this.activator)) {
			this.popupActivated = true;
			this.tapCaptured = true;
		}
		Popup.prototype.capturedTap.apply(this, arguments);
	},

	/**
	* @private
	*/
	onLeave: function (oSender, oEvent) {
		if (oEvent.originator == this && !Spotlight.getPointerMode()) {
			this.popupActivated = false;
			this.hide();
			Spotlight.spot(this.activator);
		}
	},

	/**
	* @private
	*/
	_preventEventBubble: function (inSender, inEvent) {
		return true;
	},

	/**
	* @private
	*/
	showHideScrim: function (inShow) {
		if (this.floating && (this.scrim || (this.modal && this.scrimWhenModal))) {
			var scrim = this.getScrim();
			if (inShow && this.modal && this.scrimWhenModal) {
				// move scrim to just under the popup to obscure rest of screen
				var i = this.getScrimZIndex();
				this._scrimZ = i;
				scrim.showAtZIndex(i);
			} else {
				scrim.hideAtZIndex(this._scrimZ);
			}
			util.call(scrim, 'addRemoveClass', [this.scrimClassName, scrim.showing]);
		}
	},

	/**
	* @private
	*/
	getScrimZIndex: function () {
		// Position scrim directly below popup
		return this.findZIndex()-1;
	},

	/**
	* @private
	*/
	getScrim: function () {
		// show a transparent scrim for modal popups if
		// {@link moon.ContextualPopup#scrimWhenModal} is `true`, else show a
		// regular scrim.
		if (this.modal && this.scrimWhenModal) {
			return Scrim.scrimTransparent.make();
		}
		return Scrim.make();
	},

	/**
	* @private
	*/
	showingChanged: function () {
		Popup.prototype.showingChanged.apply(this, arguments);
		this.alterDirection();
		this.showHideScrim(this.showing);

		if (this.allowBackKey) {
			if (this.showing) {
				this.pushBackHistory();
			} else if(!this.showing && !MoonHistory.isHandlingBackAction()) {
				MoonHistory.ignorePopState();
			}
		}
	},

	/**
	* @private
	*/
	backKeyHandler: function() {
		if (this.showing) {
			this.hide();
		}

		if (this.spotlight && !this.spotlightDisabled) {
			this.doRequestSpot();
		}
		return true;
	},

	/**
	* @private
	*/
	directionChanged: function () {
		this.alterDirection();
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Popup":56,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/resolution":104,"../../../enyo/lib/utils":106,"../../../layout/lib/ContextualLayout":111,"../../../moonstone":119,"../../../moonstone/lib/Scrim":177,"../../../spotlight":275,"../History":152,"../IconButton":154}],168:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dev = require('../../../enyo/lib/dev'),
	animation = require('../../../enyo/lib/animation');

var
	Spotlight = require('../../../spotlight');

var
	IconButton = require('../IconButton');

/**
* Fires when page boundary is reached.
*
* @event moon.PagingControl#onPaginate
* @type {Object}
* @property {Number} scrollDelta - The distance of the scroll.
* @public
*/

/**
* Fires when we've determined how large the bounceback effect should be.
*
* @event moon.PagingControl#onPaginateScroll
* @type {Object}
* @property {Number} scrollDelta - The magnitude of the scroll bounceback.
* @public
*/

/**
* {@link moon.PagingControl} is a paging control button derived from
* {@link moon.IconButton}. This control is not intended for use outside of
* {@link moon.Scroller}.
*
* @class moon.PagingControl
* @extends moon.IconButton
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.PagingControl.prototype */ {

	/**
	* @private
	*/
	name: 'moon.PagingControl',

	/**
	* @private
	*/
	kind: IconButton,

	/**
	* @private
	*/
	classes: 'moon-paging-button no-background',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	* @lends moon.PagingControl.prototype
	*/
	published: {
		/**
		* The side of the control where the button will be.
		*
		* Supported values are `'top'`, `'right'`, `'bottom'`, and `'left'`.
		*
		* @type {String}
		* @default null
		* @public
		*/
		side: null
	},

	/**
	* @private
	*/
	noBackground: true,

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocused: 'noop',
		onSpotlightKeyDown: 'depress',
		onSpotlightKeyUp: 'undepress',
		ondown: 'down',
		onup: 'endHold',
		onleave: 'endHold',
		onhold: 'hold',
		onActivate: 'noop'
	},

	/**
	* @private
	*/
	events: {
		/**
		* {@link moon.PagingControl#onPaginate}
		*/
		onPaginate: '',

		/**
		* {@link moon.PagingControl#onPaginateScroll}
		*/
		onPaginateScroll: ''
	},

	/**
	* @private
	*/
	downTime: 0,

	/**
	* @private
	*/
	initialDelta: 2.5,

	/**
	* @private
	*/
	delta: 0,

	/**
	* @private
	*/
	maxDelta: 45,

	/**
	* @private
	*/
	tapDelta: 15,

	/**
	* @private
	*/
	bumpDeltaMultiplier: 3,

	/**
	* @private
	*/
	create: function() {
		IconButton.prototype.create.apply(this, arguments);
		this.sideChanged();
	},

	/**
	* Stops scrolling animation and triggers
	* [onPaginate]{@link moon.PagingControl#onPaginate} event with a delta
	* value for the bounceback effect.
	*
	* @fires moon.PagingControl#onPaginate
	* @public
	*/
	hitBoundary: function() {
		this.stopHoldJob();
		this.downTime = null;
		this.doPaginate({scrollDelta: this.delta * this.bumpDeltaMultiplier});
		Spotlight.Accelerator.cancel();
	},

	/**
	* @private
	*/
	_iconMappings: {
		'top': 'arrowlargeup',
		'bottom': 'arrowlargedown',
		'left': 'arrowlargeleft',
		'right': 'arrowlargeright'
	},

	/**
	* Set this control's CSS class based on its [side]{@link moon.PagingControl#side}
	* value.
	*
	* @private
	*/
	sideChanged: function(old) {
		var s = this.side;
		if(old) {
			this.removeClass(old);
		}
		this.addClass(s);
		this.setIcon(this._iconMappings[s]);
	},

	/**
	* @private
	*/
	down: function(sender, event) {
		if (this.disabled) {
			return;
		}

		this.downTime = dev.bench();
		this.delta = this.initialDelta;
	},

	/**
	* @private
	*/
	hold: function(sender, event) {
		if (this.disabled) {
			return;
		}

		this.startHoldJob();
	},

	/**
	* @private
	*/
	depress: function(sender, event) {
		IconButton.prototype.depress.apply(this, arguments);
		// keydown events repeat (while mousedown/hold does not); simulate
		// hold behavior with mouse by catching the second keydown event
		if (event.keyCode === 13) {
			if (!this.downCount) {
				this.down();
				this.downCount = 1;
			} else {
				this.downCount++;
			}
			if (this.downCount == 2) {
				this.hold();
			}
		}
	},

	/**
	* @private
	*/
	undepress: function(sender, event) {
		IconButton.prototype.undepress.apply(this, arguments);
		this.downCount = 0;
		this.endHold(sender, event);
	},

	/**
	* @private
	*/
	endHold: function(sender, event) {
		if (!this.downTime) {
			return;
		}

		this.stopHoldJob();
		this.sendPaginateEvent();
		this.downTime = null;
	},

	/**
	* @fires moon.PagingControl#onPaginateScroll
	* @private
	*/
	startHoldJob: function() {
		this.stopHoldJob();

		var t0 = dev.bench(),
			t = 0
		;

		var fn = this.bindSafely(function() {
			this.job = animation.requestAnimationFrame(fn);

			t = (dev.bench() - t0)/1000;
			this.delta = Math.min(this.maxDelta, this.delta + (0.1 * Math.pow(t, 1.1)));

			this.doPaginateScroll({scrollDelta: this.delta});
		});

		this.job = animation.requestAnimationFrame(fn);
	},

	/**
	* @private
	*/
	stopHoldJob: function() {
		this.job = animation.cancelRequestAnimationFrame(this.job);
	},

	/**
	* @fires moon.PagingControl#onPaginate
	* @private
	*/
	sendPaginateEvent: function() {
		var tapThreshold = 200,
			timeElapsed = dev.bench() - this.downTime,
			delta = (timeElapsed <= tapThreshold) ? this.tapDelta : this.delta;

		this.doPaginate({scrollDelta: delta});
	},

	/**
	* Overrides default focused handling to make sure scroller doesn't scroll to
	* this button.
	*
	* @private
	*/
	noop: function() { return true; }
});
},{"../../../enyo/lib/animation":84,"../../../enyo/lib/dev":85,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../IconButton":154}],184:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control');

var
	IconButton = require('../IconButton'),
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeText	= Marquee.Text;

/**
* Fires when the currently selected item changes.
* 
* @event moon.SimplePicker#onChange
* @type {Object}
* @property {enyo.Control} selected - A reference to the currently selected item.
* @property {String} content - The content of the currently selected item.
* @property {Number} index - The index of the currently selected item.
* @public
*/

/**
* {@link moon.SimplePicker} is a [control]{@link enyo.Control} that solicits a
* choice from the user by cycling through a list of options. The picker's child
* [components]{@link enyo.Component}, {@link moon.MarqueeText}
* [objects]{@glossary Object} by default, become the options for the picker.
*
* ```javascript
* {kind: 'moon.SimplePicker', onChange: 'changed', selectedIndex: 1, components: [
*	{content: 'San Francisco'},
*	{content: 'Boston'},
*	{content: 'Tokyo'}
* ]}
* ```
* 
* The picker may be changed programmatically by calling
* [previous()]{@link moon.SimplePicker#previous} or [next()]{@link moon.SimplePicker#next}, 
* or by modifying the [selectedIndex]{@link moon.SimplePicker#selectedIndex} published 
* property by calling `set('selectedIndex', <value>)`.
*
* The picker options may be modified programmatically in the standard manner, by calling
* `createComponent().render()` or `destroy()`.
*
* ```javascript
* // Add new items to picker
* this.$.picker.createComponent({'New York'}).render();
* this.$.picker.createComponent({'London'}).render();
*
* // Remove currently selected item from picker
* this.$.picker.getSelected().destroy();
* ```
*
* @class moon.SimplePicker
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.SimplePicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.SimplePicker',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-simple-picker',

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	*/
	events: {
		onChange: ''
	},

	/**
	* @private
	* @lends moon.SimplePicker.prototype
	*/
	published: {

		/**
		* Reference to currently selected item, if any.
		*
		* @type {enyo.Control}
		* @default ''
		* @public
		*/
		selected: '',

		/**
		* Index of currently selected item, if any.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		selectedIndex: 0,

		/**
		* When `true`, picker transitions animate left/right.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		animate: true,

		/**
		* When `true`, buttons are shown as disabled and do not generate tap events.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* When `true`, picker will wrap around from last item to first.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		wrap: false,

		/**
		* By default, {@link moon.SimplePicker} is an inline-block element;
		* setting `block: true` makes it a block element.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		block: false
	},

	/**
	* @private
	*/
	defaultKind: MarqueeText,

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocused: 'scrollIntoView'
	},

	/**
	* @private
	*/
	components: [
		{name: 'buttonLeft',  kind: IconButton, noBackground:true, classes: 'moon-simple-picker-button left', icon:'arrowlargeleft', onSpotlightKeyDown:'configureSpotlightHoldPulse', onSpotlightSelect: 'left', ondown: 'downLeft', onholdpulse:'left', defaultSpotlightDisappear: 'buttonRight'},
		{name: 'clientWrapper', kind: Control, classes:'moon-simple-picker-client-wrapper', components: [
			{name: 'client', kind: Control, classes: 'moon-simple-picker-client'}
		]},
		{name: 'buttonRight', kind: IconButton, noBackground:true, classes: 'moon-simple-picker-button right', icon:'arrowlargeright', onSpotlightKeyDown:'configureSpotlightHoldPulse', onSpotlightSelect: 'right', ondown: 'downRight', onholdpulse:'right', defaultSpotlightDisappear: 'buttonLeft'}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.animateChanged();
		this.initializeActiveItem();
		this.disabledChanged();
		this.selectedIndexChanged();
		this.updateMarqueeDisable();
		this.blockChanged();
		this.showHideNavButtons();
	},

	/**
	* @private
	*/
	scrollIntoView: function() {
		this.bubble('onRequestScrollIntoView');
	},

	/**
	* @fires moon.SimplePicker#onChange
	* @private
	*/
	fireChangedEvent: function() {
		if (!this.generated) {
			return;
		}

		this.doChange({
			selected:   this.selected,
			content:    this.selected && this.selected.content,
			index:      this.selected && this.selectedIndex
		});
	},

	/**
	* @private
	*/
	blockChanged: function() {
		this.addRemoveClass('block', this.block);
	},

	/**
	* Shows/hides previous/next buttons based on current index.
	*
	* @private
	*/
	showHideNavButtons: function() {
		var index = this.getSelectedIndex(),
			maxIndex = this.getClientControls().length - 1;
		var prevButton = this.$.buttonLeft;
		var nextButton = this.$.buttonRight;

		if (this.disabled) {
			this.hideNavButton(prevButton);
			this.hideNavButton(nextButton);
		// Always show buttons if _this.wrap_ is _true_
		} else if (this.wrap) {
			this.showNavButton(prevButton);
			this.showNavButton(nextButton);
		// If we have one or less options, always show no buttons
		} else if (maxIndex <= 0) {
			this.hideNavButton(prevButton);
			this.hideNavButton(nextButton);
		// If we are on the first option, hide the left button
		} else if (index <= 0) {
			this.showNavButton(nextButton);
			this.hideNavButton(prevButton);
		// If we are on the last item, hide the right button
		} else if (index >= maxIndex) {
			this.showNavButton(prevButton);
			this.hideNavButton(nextButton);
		// Otherwise show both buttons
		} else {
			this.showNavButton(prevButton);
			this.showNavButton(nextButton);
		}
	},

	/**
	* @private
	*/
	destroy: function() {
		this.destroying = true;
		Control.prototype.destroy.apply(this, arguments);
	},

	/**
	* @private
	*/
	addControl: function(ctl) {
		Control.prototype.addControl.apply(this, arguments);
		var addedIdx = this.getClientControls().indexOf(ctl),
			selectedIdx = this.selectedIndex;
		if (this.generated) {
			if ((selectedIdx < 0) || (addedIdx < selectedIdx)) {
				this.setSelectedIndex(selectedIdx + 1);
			} else if (selectedIdx == addedIdx) {
				// Force change handler, since the currently selected item actually changed
				this.selectedIndexChanged();
			}
			this.showHideNavButtons();
		}
	},

	/**
	* @private
	*/
	removeControl: function(ctl) {
		if (!this.destroying) {
			var removedIdx = this.getClientControls().indexOf(ctl),
				selectedIdx = this.selectedIndex,
				wasLast = (removedIdx == this.getClientControls().length-1);

			Control.prototype.removeControl.apply(this, arguments);

			// If removedIdx is -1, that means that the Control being removed is
			// not one of our picker items, so we don't need to update our state.
			// Probably, we're being torn down.
			if (removedIdx !== -1) {
				if ((removedIdx < selectedIdx) || ((selectedIdx == removedIdx) && wasLast)) {
					this.setSelectedIndex(selectedIdx - 1);
				} else if (selectedIdx == removedIdx) {
					// Force change handler, since the currently selected item actually changed
					this.selectedIndexChanged();
				}
				this.showHideNavButtons();
			}
		} else {
			this.inherited(arguments);
		}
	},

	/**
	* Hides passed-in [control]{@link enyo.Control} and disables {@glossary Spotlight}
	* functionality.
	*
	* @private
	*/
	hideNavButton: function(ctl) {
		ctl.setDisabled(true);
	},

	/**
	* Shows passed-in [control]{@link enyo.Control} and enables {@glossary Spotlight}
	* functionality.
	*
	* @private
	*/
	showNavButton: function(ctl) {
		ctl.setDisabled(false);
	},

	/**
	* @private
	*/
	disabledChanged: function() {
		this.$.client.addRemoveClass('disabled', this.disabled);
		if (this.generated) {
			this.showHideNavButtons();
		}
	},

	/**
	* @private
	*/
	animateChanged: function() {
		this.$.client.addRemoveClass('animated', this.animate);
	},

	/**
	* @private
	*/
	selectedChanged: function() {
		var idx = this.getClientControls().indexOf(this.selected);
		if (idx >= 0) {
			this.setSelectedIndex(idx);
		}
	},
	/*
	* When the picker is initialized, looks for any items with the `active` flag set to
	* `true`; if one is found, it is set as the currently selected item. This is done
	* without triggering an [onChange]{@link moon.SimplePicker#onChange} event, as
	* it happens during initialization.
	*
	* @private
	*/
	initializeActiveItem: function() {
		var i,
			controls = this.getClientControls();
		for (i = 0; i < controls.length; i++) {
			if (controls[i].active) {
				this.selectedIndex = i;
				this.selected = controls[i];
				return;
			}
		}
	},

	/**
	* @private
	*/
	selectedIndexChanged: function() {
		dom.transform(this.$.client, {translateX: (this.selectedIndex * -100) + '%'});
		this.updateMarqueeDisable();
		this.setSelected(this.getClientControls()[this.selectedIndex]);
		this.fireChangedEvent();
		this.showHideNavButtons();
		this.startMarquee();
	},

	/**
	* @private
	*/
	updateMarqueeDisable: function() {
		this.stopMarquee();
		var i,
			c = this.getClientControls();
		for (i = 0; i < c.length; i++) {
			if (i == this.selectedIndex) {
				c[i].disabled = false;
			} else {
				c[i].disabled = true;
			}
		}
	},

	/**
	* @private
	*/
	left: function(sender, e) {
		if (e && e.sentHold) { return; }
		this.previous(sender, e);
	},

	/**
	* @private
	*/
	right: function(sender, e) {
		if (e && e.sentHold) { return; }
		this.next(sender, e);
	},

	/**
	* @private
	*/
	downLeft: function(sender, e) {
		e.configureHoldPulse({endHold: 'onLeave', delay: 300});
		this.left(sender, e);
	},

	/**
	* @private
	*/
	downRight: function(sender, e) {
		e.configureHoldPulse({endHold: 'onLeave', delay: 300});
		this.right(sender, e);
	},

	/**
	* @private
	*/
	configureSpotlightHoldPulse: function(sender, e) {
		if (e.keyCode === 13) {
			e.configureHoldPulse({endHold: 'onLeave', delay: 300});
		}
	},

	/** 
	* Cycles the selected item to the one before the currently selected item. If chained from
	* an event, {@link Spotlight} hold pulse events will be canceled once the first item is
	* reached, unless [wrap]{@link moon.SimplePicker#wrap} is `true`. When calling this method
	* directly, no arguments are required.
	*
	* @param {Object} sender - (unused) Sender, if chained from event.
	* @param {Object} e - Event object, if chained from event.
	* @public
	*/
	previous: function(sender, e) {
		if (!this.disabled) {
			var idx = this.selectedIndex - 1;
			if (idx < 0) {
				idx = this.wrap ? this.getClientControls().length - 1 : 0;
			}
			if (!this.wrap && idx === 0 && e && e.cancelHoldPulse) {
				e.cancelHoldPulse();
			}
			this.setSelectedIndex(idx);
		}
	},

	/** 
	* Cycles the selected item to the one after the currently selected item. If chained from
	* an event, {@link Spotlight} hold pulse events will be canceled once the last item is
	* reached, unless [wrap]{@link moon.SimplePicker#wrap} is `true`. When calling this method
	* directly, no arguments are required.
	*
	* @param {Object} sender - (unused) Sender, if chained from event.
	* @param {Object} e - Event object, if chained from event.
	* @public
	*/
	next: function(sender, e) {
		if (!this.disabled) {
			var idx = this.selectedIndex + 1;
			if (idx > this.getClientControls().length - 1) {
				idx = this.wrap ? 0 : this.getClientControls().length - 1;
			}
			if (!this.wrap && idx === this.getClientControls().length - 1
				&& e && e.cancelHoldPulse) {
				e.cancelHoldPulse();
			}
			this.setSelectedIndex(idx);
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../IconButton":154,"../Marquee":166}],197:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	IconButton = require('../IconButton');

/**
* {@link moon.VideoFullscreenToggleButton} is a specialized {@link moon.IconButton};
* when placed inside a {@link moon.VideoPlayer}, the button may be tapped to toggle
* the video player's fullscreen state.
*
* @class moon.VideoFullscreenToggleButton
* @extends moon.IconButton
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.VideoFullscreenToggleButton */ {

	/**
	* @private
	*/
	name: 'moon.VideoFullscreenToggleButton',

	/**
	* @private
	*/
	kind: IconButton,
	
	/**
	* @private
	*/
	icon : 'exitfullscreen',

	/**
	* @private
	*/
	small: false,

	/**
	* @private
	*/
	classes : 'moon-icon-video-round-controls-style moon-icon-exitfullscreen-font-style',
	
	/**
	* @private
	*/
	events: {
		/**
		* {@link moon.VideoPlayer#onRequestToggleFullscreen}
		*/
		onRequestToggleFullscreen:''
	},
	
	/**
	* @private
	*/
	handlers: {
		/**
		* @fires moon.VideoPlayer#onRequestToggleFullscreen
		*/
		ontap: 'doRequestToggleFullscreen'
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../IconButton":154}],155:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Img = require('../../../enyo/lib/Image');

var
	ImageBadge = require('../ImageBadge');

/**
* {@link moon.Image} is a simple control that wraps an {@link enyo.Image} to provide proper
* alignment with text-based controls.
*
* In addition, `moon.Image` accepts optional {@link moon.ImageBadge} client components
* (ImageBadge being the default kind of Image), which are placed inside a container positioned
* over the image.  These badges are normally persistent, but may be shown or hidden based on
* {@glossary Spotlight} focus, using the
* [showBadgesOnSpotlight]{@link moon.Image#showBadgesOnSpotlight} property.
*
* ```
* {kind: 'moon.Image', src: 'assets/movie.png', showBadgesOnSpotlight: true, components: [
* 	{src: 'assets/icon-recommended.png'},
* 	{src: 'assets/icon-favorite.png'},
* 	{src: 'assets/icon-new/png', classes: 'float-right'}
* ]}
* ```
*
* @class moon.Image
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Image.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Image',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-image',

	/**
	* @private
	* @lends moon.Image.prototype
	*/
	published: {

		/**
		* The URL of the image.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		src: '',

		/**
		* The `alt` text for the image.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		alt: '',

		/**
		* If `true`, badges will only be shown when the image is within a
		* spotlightable component that has focus.  Otherwise, any badges provided
		* will always be shown.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		showBadgesOnSpotlight: false,

		/**
		* The image sizing strategy. See {@link enyo.Image} for details.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		sizing: '',

		/**
		* The image position when [sizing]{@link moon.Image#sizing} is used.  See
		* {@link enyo.Image} for details.
		*
		* @type {Object}
		* @default ''
		* @public
		*/
		position: ''
	},

	/**
	* @private
	*/
	defaultKind: ImageBadge,

	/**
	* @private
	*/
	components: [
		{name: 'image', kind: Img},
		{name: 'client', kind: Control, canGenerate: false, classes: 'moon-image-client'}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.src', to: '.$.image.src'},
		{from: '.alt', to: '.$.image.alt'},
		{from: '.sizing', to: '.$.image.sizing'},
		{from: '.position', to: '.$.image.position'}
	],

	/**
	* Only generate `this.$.client` if the instance has components.
	*
	* @method
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		if (this.getClientControls().length > 0) {
			this.$.client.canGenerate = true;
			this.addClass('has-children');
		}

		this.showBadgesOnSpotlightChanged();
	},

	/**
	* @private
	*/
	showBadgesOnSpotlightChanged: function () {
		this.addRemoveClass('show-on-spotlight', this.getShowBadgesOnSpotlight());
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Image":41,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../ImageBadge":156}],201:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Spotlight = require('../../../spotlight');

var
	ilib = require('../../../enyo-ilib');

var
	Slider = require('../Slider'),
	VideoFeedback = require('../VideoFeedback');

/**
* The parameter [object]{@glossary Object} used when displaying a {@link moon.VideoFeedback}
* control.
*
* @typedef {Object} moon.VideoTransportSlider~FeedbackParameterObject
* @property {Number} [playbackRate] - The playback rate.
* @property {Number} [jumpSize] - The jump size.
* @public
*/

/**
* Fires when user starts dragging the video position knob. No additional data is
* provided in this event.
*
* @event moon.VideoTransportSlider#onSeekStart
* @type {Object}
* @public
*/

/**
* Fires when user changes the video position by tapping the bar.
*
* @event moon.VideoTransportSlider#onSeek
* @type {Object}
* @property {Number} value - The position to seek to.
* @public
*/

/**
* Fires when user stops dragging the video position knob.
*
* @event moon.VideoTransportSlider#onSeekFinish
* @type {Object}
* @property {Number} value - The position to seek to.
* @public
*/

/**
* Fires when cursor enters the tap area.
*
* @event moon.VideoTransportSlider#onEnterTapArea
* @type {Object}
* @public
*/

/**
* Fires when cursor leaves the tap area.
*
* @event moon.VideoTransportSlider#onLeaveTapArea
* @type {Object}
* @public
*/

/**
* {@link moon.VideoTransportSlider} extends {@link moon.Slider}, adding specialized
* behavior related to video playback.
*
* ```javascript
* {kind: 'moon.VideoTransportSlider', value: 30}
* ```
*
* The [onSeekStart]{@link moon.VideoTransportSlider#onSeekStart} event is fired while
* the control knob is being dragged, the
* [onSeekFinish]{@link moon.VideoTransportSlider#onSeekFinish} event is fired when the
* drag finishes, and the [onSeek]{@link moon.VideoTransportSlider#onSeek} event is fired
* when the position is set by tapping the bar.
*
* @class moon.VideoTransportSlider
* @extends moon.Slider
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.VideoTransportSlider.prototype */ {

	/**
	* @private
	*/
	name: 'moon.VideoTransportSlider',

	/**
	* @private
	*/
	kind: Slider,

	/**
	* @private
	*/
	spotlight: false,

	/**
	* @private
	*/
	classes: 'moon-video-transport-slider',

	/**
	* @private
	* @lends moon.VideoTransportSlider.prototype
	*/
	published: {

		/**
		* Starting point of slider.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		rangeStart: 0,

		/**
		* Ending point of slider.
		*
		* @type {Number}
		* @default 100
		* @public
		*/
		rangeEnd: 100,

		/**
		* The position where the slider begins, expressed as a number between `0` and `1`.
		*
		* @type {Number}
		* @default 0.0625
		* @public
		*/
		beginPosition: 0.0625,

		/**
		* The position where the slider ends, expressed as a number between `0` and `1`.
		*
		* @type {Number}
		* @default 0.9375
		* @public
		*/
		endPosition: 0.9375,

		/**
		* Controls the slider draw.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		syncTick: true,

		/**
		* Determines whether the dummy area is shown.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showDummyArea: true,

		/**
		* When `true`, label is shown at the start and end positions.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showTickText: true,

		/**
		* When `true`, tick bar is shown at the start and end positions.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showTickBar: true,

		/**
		* When `true`, progress may extend past the hour markers.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		liveMode: false,

		/**
		* CSS classes to apply to background progress bar.
		*
		* @type {String}
		* @default 'moon-video-transport-slider-bg-bar'
		* @public
		*/
		bgBarClasses: 'moon-video-transport-slider-bg-bar',

		/**
		* CSS classes to apply to progress bar.
		*
		* @type {String}
		* @default 'moon-video-transport-slider-bar-bar'
		* @public
		*/
		barClasses: 'moon-video-transport-slider-bar-bar',

		/**
		* CSS classes to apply to popup label.
		*
		* @type {String}
		* @default 'moon-video-transport-slider-popup-label'
		* @public
		*/
		popupLabelClasses: 'moon-video-transport-slider-popup-label',

		/**
		* CSS classes to apply to knob.
		*
		* @type {String}
		* @default 'moon-video-transport-slider-knob'
		* @public
		*/
		knobClasses: 'moon-video-transport-slider-knob',

		/**
		* CSS classes to apply to tap area.
		*
		* @type {String}
		* @default 'moon-video-transport-slider-taparea'
		* @public
		*/
		tapAreaClasses: 'moon-video-transport-slider-taparea',

		/**
		* Color of value popup
		*
		* @type {String}
		* @default '#fff'
		* @public
		*/
		popupColor: '#fff',

		/**
		* Popup offset in pixels.
		*
		* @type {Number}
		* @default 25
		* @public
		*/
		popupOffset: 25,

		/**
		* Threshold value (percentage) for using animation effect on slider progress change.
		*
		* @type {Number}
		* @default 1
		* @public
		*/
		smallVariation: 1,

		/**
		* Popup height in pixels.
		*
		* @type {Number}
		* @default 67
		* @public
		*/
		popupHeight: 67
	},

	/**
	* @private
	*/
	handlers: {
		onTimeupdate: 'timeUpdate',
		onresize: 'handleResize'
	},

	/**
	* @private
	*/
	events: {
		onSeekStart: '',
		onSeek: '',
		onSeekFinish: '',
		onEnterTapArea: '',
		onLeaveTapArea: ''
	},

	/**
	* @private
	*/
	tickComponents: [
		{name: 'startWrapper', kind: Control, classes: 'moon-video-transport-slider-indicator-wrapper start', components: [
			{name: 'beginTickBar', kind: Control, classes: 'moon-video-transport-slider-indicator-bar-left'},
			{name: 'beginTickText', kind: Control, classes: 'moon-video-transport-slider-indicator-text', content: '00:00'}
		]},
		{name: 'endWrapper', kind: Control, classes: 'moon-video-transport-slider-indicator-wrapper end', components: [
			{name: 'endTickBar', kind: Control, classes: 'moon-video-transport-slider-indicator-bar-right'},
			{name: 'endTickText', kind: Control, classes: 'moon-video-transport-slider-indicator-text', content: '00:00'}
		]}
	],

	/**
	* @private
	*/
	popupLabelComponents: [
		{name: 'feedback', kind: VideoFeedback, showing:false},
		{name: 'popupLabelText', kind: Control}
	],

	/**
	* @private
	*/
	_previewMode: false,

	/**
	* @private
	*/
	create: function() {
		Slider.prototype.create.apply(this, arguments);
		this.$.popup.setAutoDismiss(false);		//* Always showing popup
		this.$.popup.captureEvents = false;		//* Hot fix for bad originator on tap, drag ...
		this.$.tapArea.onmove = 'preview';
		this.$.tapArea.onenter = 'enterTapArea';
		this.$.tapArea.onleave = 'leaveTapArea';
		//* Extend components
		this.createTickComponents();
		this.createPopupLabelComponents();
		this.showTickTextChanged();
		this.showTickBarChanged();

		if (ilib) {
			this.durfmt = new ilib.DurFmt({length: 'medium', style: 'clock', useNative: false});
			this.$.beginTickText.setContent(this.formatTime(0));

			var loc = new ilib.Locale(),
				language = loc.getLanguage(),
				// Hash of languages and the additional % widths they'll need to not run off the edge.
				langWidths = {
					ja: 0.05,
					pt: 0.05
				};

			if (langWidths[language]) {
				this.set('beginPosition', this.get('beginPosition') + langWidths[language] );
				this.set('endPosition', this.get('endPosition') - langWidths[language] );
			}
		}

		this.beginPositionChanged();
		this.endPositionChanged();
	},

	/**
	* @private
	*/
	createTickComponents: function() {
		this.createComponents(this.tickComponents, {owner: this, addBefore: this.$.tapArea});
	},

	/**
	* @private
	*/
	createPopupLabelComponents: function() {
		this.$.popupLabel.createComponents(this.popupLabelComponents, {owner: this});
		this.currentTime = 0;
	},

	/**
	* @fires enyo.VideoTransportSlider#onEnterTapArea
	* @private
	*/
	enterTapArea: function(sender, e) {
		this.startPreview();
		if (!this.disabled) {
			this.addClass('visible');
			this.doEnterTapArea();
		}
	},

	/**
	* @fires enyo.VideoTransportSlider#onLeaveTapArea
	* @private
	*/
	leaveTapArea: function(sender, e) {
		this.removeClass('visible');
		this.endPreview();
		this.doLeaveTapArea();
	},

	/**
	* @private
	*/
	preview: function(sender, e) {
		if (!this.disabled && !this.dragging) {
			if (!this._previewMode) {
				this.startPreview();
			}
			var v = this.calcKnobPosition(e);
			this.currentTime = this.transformToVideo(v);
			this._updateKnobPosition(this.currentTime);
		}
	},

	/**
	* @private
	*/
	startPreview: function(sender, e) {
		this._previewMode = true;
		this.$.feedback.setShowing(false);
	},

	/**
	* @private
	*/
	endPreview: function(sender, e) {
		this._previewMode = false;
		this.currentTime = this._currentTime;
		this._updateKnobPosition(this.currentTime);
		if (this.$.feedback.isPersistShowing()) {
			this.$.feedback.setShowing(true);
		}
	},

	/**
	* @private
	*/
	isInPreview: function(sender, e) {
		return this._previewMode;
	},

	/**
	* @private
	*/
	handleResize: function() {
		Slider.prototype.handleResize.apply(this, arguments);
		this.updateSliderRange();
	},

	/**
	* @private
	*/
	updateSliderRange: function() {
		this.beginTickPos = (this.max-this.min) * this.get('beginPosition');
		this.endTickPos = (this.max-this.min) * this.get('endPosition');

		if(this.showDummyArea) {
			this.setRangeStart(this.beginTickPos);
			this.setRangeEnd(this.endTickPos);
		} else {
			this.setRangeStart(this.min);
			this.setRangeEnd(this.max);
		}
		this.updateKnobPosition(this.value);
	},

	/**
	* @private
	*/
	setMin: function() {
		Slider.prototype.setMin.apply(this, arguments);
		this.updateSliderRange();
	},

	/**
	* @private
	*/
	setMax: function() {
		Slider.prototype.setMax.apply(this, arguments);
		this.updateSliderRange();
	},

	/**
	* @private
	*/
	setRangeStart: function(val) {
		this.rangeStart = this.clampValue(this.getMin(), this.getMax(), val);
		this.rangeStartChanged();
	},

	/**
	* @private
	*/
	setRangeEnd: function(val) {
		this.rangeEnd = this.clampValue(this.getMin(), this.getMax(), val);
		this.rangeEndChanged();
	},

	/**
	* @private
	*/
	beginPositionChanged: function() {
		// Set the width of the wrapper to twice the amount of it's position from the start.
		this.$.startWrapper.applyStyle('width', (this.get('beginPosition') * 200) + '%');
		this.updateSliderRange();
	},

	/**
	* @private
	*/
	endPositionChanged: function() {
		// Set the width of the wrapper to twice the amount of it's position from the end.
		this.$.endWrapper.applyStyle('width', ((this.get('endPosition') - 1) * -200) + '%');
		this.updateSliderRange();
	},

	/**
	* @private
	*/
	showTickTextChanged: function() {
		this.$.beginTickText.setShowing(this.getShowTickText());
		this.$.endTickText.setShowing(this.getShowTickText());
	},

	/**
	* @private
	*/
	showTickBarChanged: function() {
		if(this.showDummyArea) {
			this.showTickBar = true;
		}
		this.$.beginTickBar.setShowing(this.getShowTickBar());
		this.$.endTickBar.setShowing(this.getShowTickBar());
	},

	/**
	* @private
	*/
	rangeStartChanged: function() {
		this.updateInternalProperty();
		var p = this._calcPercent(this.rangeStart),
			property = 'margin-left';
		if (this.liveMode) {
			property = 'padding-left';
		}
		this.$.bar.applyStyle(property, p + '%');
		this.$.bgbar.applyStyle(property, p + '%');
	},

	/**
	* @private
	*/
	rangeEndChanged: function() {
		this.updateInternalProperty();
	},

	/**
	* @private
	*/
	updateInternalProperty: function() {
		this.updateScale();
		this.progressChanged();
		this.bgProgressChanged();
	},
	//* Sets value of hidden variable, _scaleFactor_.
	updateScale: function() {
		this.scaleFactor = (this.rangeEnd-this.rangeStart)/(this.max-this.min);
	},

	/**
	* @private
	*/
	calcPercent: function(val) {
		return (this.calcRatio(val) * 100) * this.scaleFactor;
	},

	/**
	* @private
	*/
	_calcPercent: function(val) {
		return this.calcRatio(val) * 100;
	},

	/**
	* @private
	*/
	calcVariationRatio: function(val) {
		return (val - this.value) / (this.max - this.min);
	},

	/**
	* @private
	*/
	calcVariationPercent: function(val) {
		return this.calcVariationRatio(val) * 100;
	},

	/**
	* @private
	*/
	updateKnobPosition: function(val) {
		if (!this.dragging && this.isInPreview()) { return; }
		this._updateKnobPosition(val);
	},

	/**
	* @private
	*/
	_updateKnobPosition: function(val) {
		var p = this.clampValue(this.min, this.max, val);
		p = this._calcPercent(p);
		var slider = this.inverseToSlider(p);
		this.$.knob.applyStyle('left', slider + '%');
		this.$.popup.addRemoveClass('moon-slider-popup-flip-h', slider > 50);
		this.$.popupLabel.addRemoveClass('moon-slider-popup-flip-h', slider > 50);
		if(this.currentTime !== undefined) {
			this.$.popupLabelText.setContent(this.formatTime(this.currentTime));
		}
	},

	/**
	* @private
	*/
	inverseToSlider: function(percent) {
		var val = this.scaleFactor * percent + this._calcPercent(this.rangeStart);
		return val;
	},

	/**
	* @private
	*/
	transformToVideo: function(val) {
		if (this.showDummyArea && (val < this.beginTickPos)) {
			val = this.rangeStart;
		}
		if (this.showDummyArea && (val > this.endTickPos)) {
			val = this.rangeEnd;
		}
		return (val - this.rangeStart) / this.scaleFactor;
	},

	/**
	* If user presses `this.$.tapArea`, seeks to that point.
	*
	* @private
	*/
	tap: function(sender, e) {
		if (this.tappable && !this.disabled) {
			var v = this.calcKnobPosition(e);

			v = this.transformToVideo(v);
			this.sendSeekEvent(v);

			if (this.isInPreview()) {
				//* This will move popup position to playing time when preview move is end
				this._currentTime = v;
			}
			return true;
		}
	},

	/**
	* @private
	*/
	setValue: function(val) {
		this.currentTime = val;
		if(Math.abs(this.calcVariationPercent(val)) > this.smallVariation) {
			Slider.prototype.setValue.apply(this, arguments);
		} else {
			this._setValue(val);
		}
	},

	/**
	* If `dragstart`, bubbles [onSeekStart]{@link moon.VideoTransportSlider#onSeekStart}
	* event.
	*
	* @fires moon.VideoTransportSlider#onSeekStart
	* @private
	*/
	dragstart: function(sender, e) {
		if (this.disabled) {
			return; // return nothing
		}
		if (e.horizontal) {
			var v = this.calcKnobPosition(e);
			if( this.showDummyArea && (v < this.beginTickPos || v > this.endTickPos) ) {
				// TODO : action in dummy area
				this.dummyAction = true;
			} else {
				// the call to the super class freezes spotlight, so it needs to be unfrozen in dragfinish
				var dragstart = Slider.prototype.dragstart.apply(this, arguments);
				if (dragstart) {
					this.doSeekStart();
				}
				this.dummyAction = false;
			}
			return true;
		}

		return true;
	},

	/**
	* If `drag`, bubbles [onSeek]{@link moon.VideoTransportSlider#onSeek} event and
	* overrides parent `drag` handler.
	*
	* @private
	*/
	drag: function(sender, e) {
		if (this.dragging) {
			var v = this.calcKnobPosition(e);

			//* Default behavior to support elastic effect
			v = this.transformToVideo(v);
			if (this.constrainToBgProgress === true) {
				v = (this.increment) ? this.calcConstrainedIncrement(v) : v;
				var ev = this.bgProgress + (v-this.bgProgress)*0.4;
				v = this.clampValue(this.min, this.bgProgress, v);
				this.elasticFrom = (this.elasticEffect === false || this.bgProgress > v) ? v : ev;
				this.elasticTo = v;
			} else {
				v = (this.increment) ? this.calcIncrement(v) : v;
				v = this.clampValue(this.min, this.max, v);
				this.elasticFrom = this.elasticTo = v;
			}
			this.currentTime = v;
			this.updateKnobPosition(this.elasticFrom);

			if (this.lockBar) {
				this.setProgress(this.elasticFrom);
				this.sendChangingEvent({value: this.elasticFrom});
				this.sendSeekEvent(this.elasticFrom);
			}
			return true;
		}
	},

	/**
	* If `dragfinish`, bubbles
	* [onSeekFinish]{@link moon.VideoTransportSlider#onSeekFinish} event and overrides
	* parent `dragfinish` handler.
	*
	* @fires moon.VideoTransportSlider#onSeekFinish
	* @private
	*/
	dragfinish: function(sender, e) {
		if (this.disabled) {
			return;
		}
		if(!this.dummyAction) {
			var v = this.calcKnobPosition(e);
			v = this.transformToVideo(v);
			var z = this.elasticTo;
			if (this.constrainToBgProgress === true) {
				z = (this.increment) ? this.calcConstrainedIncrement(z) : z;
				this.animateTo(this.elasticFrom, z);
				v = z;
			} else {
				v = (this.increment) ? this.calcIncrement(v) : v;
				this._setValue(v);
			}
			e.preventTap();
			// this.hideKnobStatus();
			this.doSeekFinish({value: v});
			Spotlight.unfreeze();
		}
		this.$.knob.removeClass('active');
		this.dummyAction = false;
		this.dragging = false;
		return true;
	},

	/**
	* Sends [onSeek]{@link moon.VideoTransportSlider#onSeek} event.
	*
	* @fires moon.VideoTransportSlider#onSeek
	* @private
	*/
	sendSeekEvent: function(val) {
		this.doSeek({value: val});
	},

	/**
	* During time update, updates buffered progress, canvas, video currentTime, and duration.
	*
	* @private
	*/
	timeUpdate: function(sender, e) {
		this._currentTime = sender._currentTime;
		if (!this.dragging && this.isInPreview()) { return; }
		this._duration = sender.duration;
		this.currentTime = this._currentTime;
		this.duration = this._duration;
		this.$.endTickText.setContent(this.formatTime(this.duration));
	},

	/**
	* Properly formats time.
	*
	* @private
	*/
	formatTime: function(val) {
		var hour = Math.floor(val / (60*60));
		var min = Math.floor((val / 60) % 60);
		var sec = Math.floor(val % 60);
		if (this.durfmt) {
			var time = {minute: min, second: sec};
			if (hour) {
				time.hour = hour;
			}
			return this.durfmt.format(time);
		} else {
			return (hour ? this.padDigit(hour) + ':' : '') + this.padDigit(min) + ':' + this.padDigit(sec);
		}
	},

	/**
	* Time formatting helper.
	*
	* @private
	*/
	padDigit: function(val) {
		return (val) ? (String(val).length < 2) ? '0'+val : val : '00';
	},

	/**
	* Sends current status to [feedback]{@link moon.VideoFeedback} control in response to
	* user input.
	*
	* @param {String} - msg The string to display.
	* @param {moon.VideoTransportSlider~FeedbackParameterObject} params - A
	*	[hash]{@glossary Object} of parameters that accompany the message.
	* @param {Boolean} persist - If `true`, the [feedback]{@link moon.VideoFeedback} control will
	*	not be automatically hidden.
	* @param {String} leftSrc - The source url for the image displayed on the left side of
	*	the feedback control.
	* @param {String} rightSrc - The source url for the image displayed on the right side
	*	of the feedback control.
	* @public
	*/
	feedback: function(msg, params, persist, leftSrc, rightSrc) {
		this.showKnobStatus();
		this.$.feedback.feedback(msg, params, persist, leftSrc, rightSrc, this.isInPreview());
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../Slider":185,"../VideoFeedback":196}],150:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	ri = require('../../../enyo/lib/resolution'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Input = require('../Input'),
	InputDecorator = require('../InputDecorator'),
	StyleAnimator = require('../StyleAnimator'),
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeText = Marquee.Text;

var _delayedMeasurementFinished;

/**
* Custom input event to allow apps to distinguish header inputs from regular inputs.
*
* @event moon.Header#onInputHeaderInput
* @type {Object}
* @property {Object} originalEvent - The original event fired from the input. See
*	{@link enyo.Input#oninput} for more event information.
* @public
*/

/**
* Custom input change event to allow apps to distinguish header input changes from
* regular input changes.
*
* @event moon.Header#onInputHeaderChange
* @type {Object}
* @property {Object} originalEvent - The original event fired from the input. See
*	{@link enyo.Input#onchange} for more event information.
* @public
*/

/**
* {@link moon.Header} is a Moonstone-styled control with a large title and an area for
* additional controls.
*
* @class moon.Header
* @extends enyo.Control
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Header.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Header',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-header',

	/**
	* @private
	* @lends moon.Header.prototype
	*/
	published: {

		/**
		* Title of the header.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		title: '',

		/**
		* Text above the header.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		titleAbove: '',

		/**
		* Text below the header.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		titleBelow: '',

		/**
		* Sub-text below the header.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		subTitleBelow: '',

		/**
		* Size of the header, for styling purposes. Will be one of `'large'` (the default),
		* `'medium'`, or `'small'`. If `'large'`, the `moon-header` CSS class will be applied
		* to this header; if `'medium'`, the `moon-medium-header` class will be applied; if
		* `'small'`, the `moon-small-header` class will be applied.
		*
		* @type {String}
		* @default 'large'
		* @public
		*/
		type: 'large',

		/**
		* If `true`, the `moon-medium-header` CSS class will be applied to this header.
		*
		* Note that this property will be deprecated soon. For now, it is being left in
		* for backward compatibility. Until it is removed, `small: true` refers to the
		* historical header size, which is now equivalent to `type: 'medium'`.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		small: false,

		/**
		* URL(s) of background image(s).
		* This may be a string referring a single background image, or an array of strings
		* referring to multiple background images. To support multiple background-images at
		* multiple resolutions, this property can accept several formats:
		* 1) A string src,
		* 2) An array of string srcs,
		* 3) A [MultiRes Hash]{@link moon.ri.selectSrc~src}
		* 4) An array of [MultiRes Hashs]{@link moon.ri.selectSrc~src}
		*
		* @type {(String|String[]|moon.ri.selectSrc~src|moon.ri.selectSrc~src[])}
		* @default null
		* @public
		*/
		backgroundSrc: null,

		/**
		* Position of background image, defined as a string of the form
		* `'<vertical> <horizontal>'`, with a space separating the `<vertical>`
		* and `<horizontal>` values (e.g., `'top right'`). If no second property
		* is specified, the `<horizontal>` value will default to `'right'`. As
		* with [backgroundSrc]{@link moon.Header#backgroundSrc}, an array of strings
		* may be supplied to position multiple background images. The order of items
		* should be the same as in `backgroundSrc`.
		*
		* @type {(String|String[])}
		* @default 'top right'
		* @public
		*/
		backgroundPosition: 'top right',

		/**
		* When using a full-bleed background image, set this property to `true` to indent
		* the header text/controls and remove the header lines.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		fullBleedBackground: false,

		/**
		* If `true`, title will be an input.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		inputMode: false,

		/**
		* When `true`, input will be blurred on Enter keypress, if it was previously
		* focused.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		dismissOnEnter: false,

		/**
		* Text to display when the input is empty.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		placeholder: '',

		/**
		* The value of the input.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		value: '',

		/**
		* When `true`, the title text will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true,

		/**
		* @deprecated Replaced by [uppercase]{@link moon.Header#uppercase}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		titleUpperCase: null
	},

	/**
	* @private
	*/
	mixins: [MarqueeSupport],

	/**
	* @private
	*/
	marqueeOnSpotlight: false,

	/**
	* @private
	*/
	marqueeOnHover: true,

	/**
	* @private
	*/
	marqueeOnRender: true,

	/**
	* @private
	*/
	marqueeOnRenderDelay: 10000,

	/**
	* Described in .moon-header class
	*
	* @private
	*/
	standardHeight: 360,

	/**
	* @private
	*/
	handlers: {
		oninput: 'handleInput',
		onchange: 'handleChange',
		onRequestCreateListActions: 'handleRequestCreateComponents',
		onListActionOpenChanged: 'handleListActionOpenChanged'
	},

	/**
	* @private
	*/
	events: {

		/**
		* Custom input event to allow apps to distinguish header inputs from regular inputs.
		*/
		onInputHeaderInput: '',

		/**
		* Custom input change event to allow apps to distinguish header input changes from
		* regular input changes.
		*/
		onInputHeaderChange: ''
	},

	/**
	* @private
	*/
	components: [
		{name: 'titleAbove', kind: Control, classes: 'moon-super-header-text moon-header-title-above'},
		{name: 'titleWrapper', kind: Control, classes: 'moon-header-title-wrapper', components: [
			{name: 'title', kind: MarqueeText, classes: 'moon-header-text moon-header-title', canGenerate: false},
			{name: 'inputDecorator', kind: InputDecorator, classes: 'moon-input-header-input-decorator',canGenerate: false, components: [
				{name: 'titleInput', kind: Input, classes: 'moon-header-text moon-header-title'}
			]}
		]},
		{name: 'titleBelow', kind: MarqueeText, classes: 'moon-sub-header-text moon-header-title-below'},
		{name: 'subTitleBelow', kind: MarqueeText, classes: 'moon-sub-header-text moon-header-sub-title-below'},
		{name: 'client', kind: Control, classes: 'moon-hspacing moon-header-client'},
		{name: 'animator', kind: StyleAnimator, onComplete: 'animationComplete'}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.value', to: '.$.titleInput.value', oneWay: false},
		{from: '.dismissOnEnter', to: '.$.titleInput.dismissOnEnter'}
	],

	/**
	* @private
	*/
	create: function () {
		this.inherited(arguments);

		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the titleUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.titleUpperCase !== null) this.uppercase = this.titleUpperCase;

		// Note: This smallchanged() line will be deprecated soon. For backward compatiblity, I leave it for a
		// while.
		this.smallChanged();
		this.typeChanged();
		this.titleChanged();
		this.titleAboveChanged();
		this.titleBelowChanged();
		this.subTitleBelowChanged();
		this.allowHtmlChanged();
		this.backgroundSrcChanged();
		this.backgroundPositionChanged();
		this.inputModeChanged();
		this.placeholderChanged();
		this.fullBleedBackgroundChanged();
	},

	rendered: function() {
		this.inherited(arguments);
		// At the first render, the fonts may not have finished loading yet. We delay the first
		// time using an async method, and set a flag so we know the deed is done at subsequent calls.
		if (_delayedMeasurementFinished) {
			this.adjustTitleWidth();
		} else {
			util.asyncMethod(this, function () {
				this.adjustTitleWidth();
				_delayedMeasurementFinished = true;
			});
		}
	},

	/**
	* @private
	*/
	allowHtmlChanged: function () {
		this.$.title.setAllowHtml( this.get('type') == 'small' ? true : this.allowHtml );
		this.$.titleBelow.setAllowHtml(this.allowHtml);
		this.$.subTitleBelow.setAllowHtml(this.allowHtml);
	},

	/**
	* @private
	*/
	backgroundSrcChanged: function () {
		var bgs = (util.isArray(this.backgroundSrc)) ? this.backgroundSrc : [this.backgroundSrc];
		bgs = util.map(bgs, this.bindSafely(function (inBackgroundSource) {
				return inBackgroundSource ? 'url(' + ri.selectSrc(inBackgroundSource) + ')' : null;
			}));
		this.applyStyle('background-image', (bgs.length) ? bgs.join(', ') : null);
	},

	/**
	* @private
	*/
	backgroundPositionChanged: function () {
		var bgp = this.backgroundPosition;
		if (util.isArray(bgp)) {
			bgp = (bgp.length) ? bgp.join(', ') : null;
		}
		// If `this.backgroundPosition` is set explicitly to inherit or initial, apply that
		// instead of assuming a position.
		if (bgp == 'inherit' || bgp == 'initial') {
			this.applyStyle('background-position', bgp);
			return;
		}
		var posArray = bgp && bgp.split(' ') || [],
			posStr = (posArray.length === 0) ? 'top right'
					: (posArray.length === 1) ? posArray[0] + ' right' : bgp;
		this.applyStyle('background-position', posStr);
	},

	/**
	* @private
	*/
	fullBleedBackgroundChanged: function () {
		this.addRemoveClass('full-bleed', this.fullBleedBackground);
	},

	/**
	* @private
	*/
	handleRequestCreateComponents: function (inSender, inEvent) {
		this.controlParent = null;
		this.createComponents(inEvent.components, {owner: inEvent.originator});
		this.discoverControlParent();
	},

	/**
	* Collapses the drawer, hiding its contents.
	*
	* @public
	*/
	collapseToSmall: function () {
		if (this.collapsed) {
			return;
		}

		var myStyle = dom.getComputedStyle(this.hasNode());
		var titleWrapperStyle = dom.getComputedStyle(this.$.titleWrapper.hasNode());
		var titleBelowStyle = dom.getComputedStyle(this.$.titleBelow.hasNode());
		var subTitleBelowStyle = dom.getComputedStyle(this.$.subTitleBelow.hasNode());
		var titleAboveStyle = dom.getComputedStyle(this.$.titleAbove.hasNode());

		// TODO - animator should track initial positions so we don't have to store these if we
		// want to reverse the animation
		this.smallAnimProps = {
			'height': myStyle['height']
		};
		this.$.titleWrapper.smallAnimProps = {
			'padding-left': titleWrapperStyle['padding-left'],
			'top': titleWrapperStyle['top']
		};
		this.$.title.smallAnimProps = {};
		this.$.titleAbove.smallAnimProps = {
			'height': titleAboveStyle['height'],
			'opacity': titleAboveStyle['opacity']
		};
		this.$.titleBelow.smallAnimProps = {
			'top': titleBelowStyle['top']
		};
		this.$.subTitleBelow.smallAnimProps = {
			'top': subTitleBelowStyle['top']
		};

		this.$.animator.newAnimation({
			name: 'collapseToSmall',
			duration: 200,
			timingFunction: 'linear',
			keyframes: {
				0: [{
					control: this,
					properties: {
						'height': 'current'
					}
				}, {
					control: this.$.titleWrapper,
					properties: {
						'padding-left': 'current',
						'top': 'current'
					}
				}, {
					control: this.$.titleAbove,
					properties: {
						'height': 'current',
						'opacity': 'current',
						'margin-top': 'current'
					}
				}, {
					control: this.$.title,
					properties: {}
				}, {
					control: this.$.titleBelow,
					properties: {
						'top': 'current'
					}
				}, {
					control: this.$.subTitleBelow,
					properties: {
						'top': 'current'
					}
				}],
				70: [],
				100: [{
					control: this,
					properties: {
						'height': dom.unit(ri.scale(260), 'rem')
					}
				}, {
					control: this.$.titleWrapper,
					properties: {}
				}, {
					control: this.$.titleAbove,
					properties: {
						'height': 0,
						'opacity': 0,
						'margin-top': 0
					}
				}, {
					control: this.$.title,
					properties: {}
				}, {
					control: this.$.titleBelow,
					properties: {}
				}, {
					control: this.$.subTitleBelow,
					properties: {}
				}]

			}
		});
		this.$.animator.play('collapseToSmall');
		this.collapsed = true;
	},

	/**
	* Expands the drawer, showing its contents.
	*
	* @public
	*/
	expandToLarge: function () {
		if (!this.collapsed) {
			return;
		}

		this.$.animator.newAnimation({
			name: 'expandToLarge',
			duration: 200,
			timingFunction: 'linear',
			keyframes: {
				0: [{
					control: this,
					properties: {
						'height': 'current'
					}
				}, {
					control: this.$.titleWrapper,
					properties: {
						'padding-left': 'current',
						'top': 'current'
					}
				}, {
					control: this.$.titleAbove,
					properties: {
						'height': 'current',
						'opacity': 'current',
						'margin-top': 'current'
					}
				}, {
					control: this.$.title,
					properties: {}
				}, {
					control: this.$.titleBelow,
					properties: {
						'top': 'current'
					}
				}, {
					control: this.$.subTitleBelow,
					properties: {
						'top': 'current'
					}
				}],
				30: [],
				100: [{
					control: this,
					properties: {
						'height': this.smallAnimProps.height
					}
				}, {
					control: this.$.titleWrapper,
					properties: {
						'padding-left': this.$.titleWrapper.smallAnimProps['padding-left'],
						'top': this.$.titleWrapper.smallAnimProps['top']
					}
				}, {
					control: this.$.titleAbove,
					properties: {
						'height': this.$.titleAbove.smallAnimProps['height'],
						'opacity': this.$.titleAbove.smallAnimProps['opacity'],
						'margin-top': this.$.titleAbove.smallAnimProps['margin-top']
					}
				}, {
					control: this.$.title,
					properties: {}
				}, {
					control: this.$.titleBelow,
					properties: {
						'top': this.$.titleBelow.smallAnimProps['top']
					}
				}, {
					control: this.$.subTitleBelow,
					properties: {
						'top': this.$.subTitleBelow.smallAnimProps['top']
					}
				}]
			}
		});
		this.$.animator.play('expandToLarge');
		this.collapsed = false;
	},

	/**
	* @private
	*/
	typeChanged: function () {
		this.addRemoveClass('moon-medium-header', this.get('type') == 'medium');
		this.addRemoveClass('moon-small-header', this.get('type') == 'small');
		this.contentChanged();
		if (this.generated) this.adjustTitleWidth();
	},

	/**
	* @private
	*/
	valueChanged: function () {
		this.$.titleInput.detectTextDirectionality((this.$.titleInput.value || this.$.titleInput.value === 0 || this.$.titleInput.value === '0') ? this.$.titleInput.value : this.$.titleInput.get('placeholder'));
	},

	/**
	* @private
	*/
	adjustTitleWidth: function() {
		var type = this.get('type'),
			// Measure client area's width + 40px of spacing
			client = this.$.client ? this.$.client.hasNode() : null,
			clientWidth = client ? client.offsetWidth : null,
			clientSpace = dom.unit(clientWidth + ri.scale(36), 'rem'),
			rtl = this.rtl;

		if (client) {
			// Set the margin on the correct side for the correct control, otherwise set it to nothing
			this.$.title.applyStyle('margin-right', (type == 'small' && !rtl && clientWidth) ? clientSpace : null);
			this.$.title.applyStyle('margin-left', (type == 'small' && rtl && clientWidth) ? clientSpace : null);

			this.$.titleBelow.applyStyle('margin-right', (type == 'medium' && !rtl && clientWidth) ? clientSpace : null);
			this.$.titleBelow.applyStyle('margin-left', (type == 'medium' && rtl && clientWidth) ? clientSpace : null);

			this.$.subTitleBelow.applyStyle('margin-right', (type == 'medium' && !rtl && clientWidth) ? clientSpace : null);
			this.$.subTitleBelow.applyStyle('margin-left', (type == 'medium' && rtl && clientWidth) ? clientSpace : null);
		}
	},

	/**
	* Note that this method will be deprecated soon. For now, it is being left in for
	* backward compatibility.
	*
	* @private
	*/
	smallChanged: function () {
		this.addRemoveClass('moon-medium-header', this.get('small'));
	},

	/**
	* @private
	*/
	contentChanged: function () {
		var title = this.get('uppercase')
					? util.toUpperCase(this.get('title') || this.get('content'))
					: (this.get('title') || this.get('content')),
			subtitle = this.get('titleBelow');
		if ((this.get('type') == 'small') && subtitle) {
			this.$.title.set('allowHtml', true);
			this.$.title.set('content', Control.prototype.rtl && !util.isRtl(subtitle + title) ?
				'<span class="moon-sub-header-text moon-header-sub-title">' + subtitle + '</span>' + '   ' + title :
				title + '   ' + '<span class="moon-sub-header-text moon-header-sub-title">' + subtitle + '</span>');
		} else {
			this.$.title.set('allowHtml', this.get('allowHtml') );
			this.$.title.set('content', title);
		}
		this.placeholderChanged();
	},

	/**
	* For backward-compatibility with original API.
	*
	* @private
	*/
	titleChanged: function () {
		this.contentChanged();
	},

	/**
	* @private
	*/
	placeholderChanged: function () {
		// For backward-compatibility with original API
		this.$.titleInput.set('placeholder', this.getTitleUpperCase()
				? util.toUpperCase(this.placeholder || this.title || this.content)
				: (this.placeholder || this.title || this.content) );
		this.valueChanged();
	},

	/**
	* @private
	*/
	uppercaseChanged: function () {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// titleUpperCase is fully deprecated and removed.
		if (this.titleUpperCase != this.uppercase) this.titleUpperCase = this.uppercase;
		this.titleChanged();
	},

	/**
	* @private
	*/
	titleUpperCaseChanged: function () {
		if (this.uppercase != this.titleUpperCase) this.uppercase = this.titleUpperCase;
		this.uppercaseChanged();
	},

	/**
	* @private
	*/
	titleAboveChanged: function () {
		this.$.titleAbove.addRemoveClass('no-border', this.titleAbove === '');
		this.$.titleAbove.set('content', this.titleAbove);
	},

	/**
	* @private
	*/
	titleBelowChanged: function () {
		this.$.titleBelow.set('content', this.titleBelow || '');
		this.contentChanged();
	},

	/**
	* @private
	*/
	subTitleBelowChanged: function () {
		this.$.subTitleBelow.set('content', this.subTitleBelow || '');
	},

	/**
	* Placeholder
	*
	* @private
	*/
	// animationComplete: function (inSender, inEvent) {
		// Do something?
	// },

	/**
	* @private
	*/
	inputModeChanged: function () {
		this.$.title.canGenerate = !this.inputMode;
		this.$.title.setShowing(!this.inputMode);
		this.$.inputDecorator.canGenerate = this.inputMode;
		this.$.inputDecorator.setShowing(this.inputMode);

		if (!this.inputMode) {
			if (!this.$.title.hasNode()) {
				this.$.title.render();
			}
			// Reset marquees when coming back to static text
			if (this.generated) {
				this.stopMarquee();
				this.startMarquee();
			}
		}
		if (this.inputMode && !this.$.inputDecorator.hasNode()) {
			this.$.inputDecorator.render();
		}
		this.addRemoveClass('moon-input-header', this.inputMode);
	},

	/**
	* Handles `input` event, firing custom
	* [onInputHeaderInput]{@link moon.Header#onInputHeaderInput} event.
	*
	* @fires moon.Header#onInputHeaderInput
	* @private
	*/
	handleInput: function (inSender, inEvent) {
		this.doInputHeaderInput({originalEvent: util.clone(inEvent, true)});
	},

	/**
	* Handles `change` event, firing custom
	* [onInputHeaderChange]{@link moon.Header#onInputHeaderChange} event.
	*
	* @fires moon.Header#onInputHeaderChange
	* @private
	*/
	handleChange: function (inSender, inEvent) {
		this.doInputHeaderChange({originalEvent: util.clone(inEvent, true)});
	},


	/**
	* Enlarges listActionDrawer's height to large type's height.
	*
	* @private
	*/
	handleListActionOpenChanged: function (inSender, inEvent) {
		if (!inEvent.open) {
			return;
		}
		inEvent.originator.beforeOpenDrawer(this.standardHeight, this.get('type'));
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/resolution":104,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Input":158,"../InputDecorator":159,"../Marquee":166,"../StyleAnimator":187}],131:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../Button');

/**
* {@link moon.ContextualPopupButton} is a {@link moon.Button} with additional
* styling applied.
*
* For more information, see the documentation on
* [Buttons]{@linkplain $dev-guide/building-apps/controls/buttons.html} in the
* Enyo Developer Guide.
*
* @class moon.ContextualPopupButton
* @extends moon.Button
* @ui
* @public
*/

module.exports = kind(
	/** @lends moon.ContextualPopupButton.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ContextualPopupButton',

	/**
	* @private
	*/
	kind: Button,

	/**
	* @private
	*/
	classes: 'contextual-popup-button'
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Button":123}],171:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Popup = require('../../../enyo/lib/Popup');

var
	Spotlight = require('../../../spotlight');

var
	Scrim = require('../Scrim'),
	Button = require('../Button'),
	IconButton = require('../IconButton'),
	MoonHistory = require('../History'),
	HistorySupport = MoonHistory.HistorySupport;

/**
* {@link moon.Popup} is an {@link enyo.Popup} that appears at the bottom of the
* screen and takes up the full screen width.
*
* @class moon.Popup
* @extends enyo.Popup
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Popup.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Popup',

	/**
	* @private
	*/
	kind: Popup,

	/**
	* @private
	*/
	mixins : [HistorySupport],

	/**
	* @private
	*/
	modal: true,

	/**
	* @private
	*/
	classes: 'moon moon-neutral enyo-unselectable moon-popup',

	/**
	* @private
	*/
	floating: true,

	/**
	* @private
	*/
	_bounds: null,

	/**
	* @private
	*/
	spotlight: 'container',

	/**
	* @private
	*/
	allowDefault: true,

	/**
	* @private
	*/
	handlers: {
		onRequestScrollIntoView   : '_preventEventBubble',
		ontransitionend           : 'animationEnd',
		onSpotlightSelect         : 'handleSpotlightSelect'
	},

	/**
	* @private
	*/
	eventsToCapture: {
		onSpotlightFocus: 'capturedFocus',
		onkeydown: 'captureKeyDown'
	},

	/**
	* @private
	* @lends moon.Popup.prototype
	*/
	published: {
		/**
		* Determines whether a scrim will appear when the dialog is modal. If `true`,
		* a transparent (i.e., invisible) overlay prevents the propagation of tap events.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		scrimWhenModal: true,

		/**
		* Determines whether or not to display a scrim. Only displays scrims when floating. When
		* the scrim is in the floating state (`floating: true`), it covers the entire viewport
		* (i.e., it is displayed on top of other controls).
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		scrim: true,

		/**
		* Optional class name to apply to the scrim. Be aware that the scrim is a singleton and
		* you will be modifying the scrim instance used for other popups.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		scrimClassName: '',

		/**
		* If `true`, {@glossary Spotlight} (focus) cannot leave the area of the popup unless the
		* popup is explicitly closed; if `false`, spotlight may be moved anywhere within the
		* viewport.  Note that setting the value of `spotlightModal` will have no effect on
		* spotlight behavior unless the [autoDismiss]{@link enyo.Popup#autoDismiss} property
		* inherited from {@link enyo.Popup} is set to `false` (default is `true`).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		spotlightModal: false,

		/**
		* When `false`, the close button is hidden; when `true`, it is shown. When
		* `showCloseButton` is set to `'auto'` (the default), the close button is shown when
		* [spotlightModal]{@link moon.Popup#spotlightModal} is `true`.
		*
		* @type {String}
		* @default 'auto'
		* @public
		*/
		showCloseButton: 'auto',

		/**
		* When `true`, popups will animate on/off screen.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		animate: true
	},

	/**
	* @private
	*/
	tools: [
		{name: 'client', kind: Control, classes:'enyo-fill'},
		{name: 'closeButton', kind: IconButton, icon: 'closex', classes: 'moon-popup-close', ontap: 'closePopup', showing:false}
	],

	/**
	* @private
	*/
	statics: { count: 0 },

	/**
	* @private
	*/
	defaultZ: 120,

	/**
	* @private
	*/
	activator: null,

	/**
	* Creates chrome components.
	*
	* @private
	*/
	initComponents: function() {
		this.createComponents(this.tools, {owner: this});
		Popup.prototype.initComponents.apply(this, arguments);
	},

	/**
	* @private
	*/
	create: function () {
		this.inherited(arguments);
		this.animateChanged();
	},

	/**
	* @private
	*/
	animateChanged: function() {
		this.addRemoveClass('animate', this.animate);
		if (!this.animate) {
			this.applyStyle('bottom', null);
		}
	},

	/**
	* Renders `moon.Popup`, extending enyo.Popup
	*
	* @private
	*/
	render: function() {
		this.allowHtmlChanged();
		this.contentChanged();
		Popup.prototype.render.apply(this, arguments);
	},

	/**
	* @private
	*/
	contentChanged: function() {
		this.$.client.setContent(this.content);
	},

	/**
	* @private
	*/
	allowHtmlChanged: function() {
		this.$.client.setAllowHtml(this.allowHtml);
	},

	/**
	* Sets `this.downEvent` on `onSpotlightSelect` event.
	*
	* @private
	*/
	handleSpotlightSelect: function(sender, event) {
		this.downEvent = event;
	},

	/**
	* If `this.downEvent` is set to a {@glossary Spotlight} event, skips normal popup
	* `capturedTap()` code.
	*
	* @private
	*/
	capturedTap: function(sender, event) {
		if (!this.downEvent || (this.downEvent.type != 'onSpotlightSelect')) {
			Popup.prototype.capturedTap.apply(this, arguments);
		}
	},

	/**
	* If the popup has no spottable children, an [Enter] key down will cause it to be hidden
	* because Spotlight will try to spot the nearest or last control for a 5-way key down.
	* Since there isn't a spottable child, a control outside the popup is focused which triggers
	* `capturedFocus` which hides the Popup.
	*
	* @private
	*/
	captureKeyDown: function (sender, event) {
		this.preventHide = (event.keyCode == 13 || event.keyCode == 16777221) && !Spotlight.isSpottable(this);
	},

	/**
	* @private
	*/
	capturedFocus: function (sender, event) {
		// While we're open, we hijack Spotlight focus events. In all cases, we want
		// to prevent the default 5-way behavior (which is to focus on the control nearest
		// to the pointer in the chosen direction)...
		var last = Spotlight.getLastControl(),
			cur = Spotlight.getCurrent(),
			focusCapturedControl = event.originator;
		// There are two cases where we want to focus back on ourselves...
		// NOTE: The logic used here to detect these cases is highly dependent on certain
		// nuances of how Spotlight currently tracks the "last" and "current" focus. It will
		// probably need to be updated if / when Spotlight gets some love in this area.
		if (
			// Case 1: We were probably just opened in pointer mode. The pointer is outside
			// the popup, which means a 5-way press will likely focus some control outside the
			// popup, unless we prevent it by re-spotting ourselves.
			//(last === this && !cur.isDescendantOf(this)) ||
			(last === this && !focusCapturedControl.isDescendantOf(this)) ||
			// Case 2: We were probably opened in 5-way mode and then the pointer was moved
			// (likely due to incidental movement of the magic remote). It's possible that the
			// user actually wants to exit the popup by focusing on something outside, but more
			// likely that they have accidentally wiggled the remote and intend to be moving
			// around within the popup -- so, again, we re-spot ourselves.
			(last.isDescendantOf(this) && cur !== this)

		) {
			Spotlight.spot(this);
		}
		// In all other cases, the user probably means to exit the popup by moving out, so we
		// close ourselves.
		else if (!this.preventHide) {
			this.hide();
		}
		return true;
	},

	/**
	* Determines whether to display close button.
	*
	* @private
	*/
	configCloseButton: function() {
		if (!this.$.closeButton) { return; }

		var shouldShow = (this.showCloseButton === true || (this.spotlightModal === true && this.showCloseButton !== false));

		if (shouldShow != this.$.closeButton.getShowing()) {
			this.$.closeButton.setShowing(shouldShow);
			this.addRemoveClass('reserve-close', shouldShow);
			if (this.generated) {
				this.resize();
			}
		}
	},

	/**
	* Called if [spotlightModal]{@link moon.Popup#spotlightModal} changes.
	*
	* @private
	*/
	spotlightModalChanged: function() {
		this.configCloseButton();
	},

	/**
	* Called if [showCloseButton]{@link moon.Popup#showCloseButton} changes.
	*
	* @private
	*/
	showCloseButtonChanged: function() {
		this.configCloseButton();
	},

	/**
	* @private
	*/
	showingChanged: function() {
		// reset flag to prevent hiding popup when Enter pressed on unspottable popup
		this.preventHide = false;

		if (this.showing) {
			if (this.isAnimatingHide) {
				// need to call this early to prevent race condition where animationEnd
				// originated from a "hide" context but we are already in a "show" context
				this.animationEnd = util.nop;
				Popup.count--;
				// if we are currently animating the hide transition, release
				// the events captured when popup was initially shown
				if (this.captureEvents) {
					this.release();
				}
				this.isAnimatingHide = false;
			}
			this.activator = Spotlight.getCurrent();
		}
		else {
			if (this.generated) {
				this.respotActivator();
			}
		}

		if (this.showing) {
			// Run inherited immediately
			Popup.prototype.showingChanged.apply(this, arguments);
			this.show();
		} else {
			this.hide();
			if (this.animate) {
				this.isAnimatingHide = true;
				// Instead of hiding the scrim with the inherited enyo method, when the
				// animation is finished, fire it now, so interactive control is returned to the
				// applicaiton while our popup is animating to the closed position.
				this.showHideScrim(this.showing);
				var args = arguments;
				this.animationEnd = this.bindSafely(function (sender, ev) {
					if (ev.originator === this) {
						// Delay inherited until animationEnd
						Popup.prototype.showingChanged.apply(this, args);
						this.animationEnd = util.nop;
						this.isAnimatingHide = false;
					}
				});
			} else {
				// Run inherited immediately
				Popup.prototype.showingChanged.apply(this, arguments);
			}
		}

		if (this.showing) {
			this.configCloseButton();
			// Spot ourselves, unless we're already spotted
			var current = Spotlight.getCurrent();
			if (!current || !current.isDescendantOf(this)) {
				if (Spotlight.isSpottable(this)) {
					Spotlight.spot(this);
				}
				// If we're not spottable, just unspot whatever was previously spotted
				else {
					Spotlight.unspot();
				}
			}
		}

		if (this.allowBackKey) {
			if (this.showing) {
				this.pushBackHistory();
			} else if(!this.showing && !MoonHistory.isHandlingBackAction()) {
				MoonHistory.ignorePopState();
			}
		}
	},

	/**
	* Show the popup. This respects the current state of the
	* [animate]{@link moon.Popup#animate} property, showing with or without animation.
	*
	* @public
	*/
	show: function() {
		Popup.prototype.show.apply(this, arguments);
		this.addClass('showing');
	},

	/**
	* Hide the popup. This respects the current state of the
	* [animate]{@link moon.Popup#animate} property, hiding with or without animation.
	*
	* @public
	*/
	hide: function() {
		Popup.prototype.hide.apply(this, arguments);
		this.removeClass('showing');
	},

	/**
	* Overrides the default `getShowing()` behavior to avoid setting `this.showing` based on the
	* CSS `display` property.
	*
	* @private
	*/
	getShowing: function() {
		if (this.animate) {
			return this.showing;
		} else {
			Popup.prototype.getShowing.apply(this, arguments);
		}
	},

	/**
	* Skips animation and jumps to the final shown state.
	*
	* @public
	*/
	showDirect: function() {
		var anim = this.animate;
		if (anim) {
			this.set('animate', false);
		}
		this.show();
		if (anim) {
			// getComputedStyleValue forces the browser to update the style rules before
			// proceeding. Otherwise the removal and addition of the "animate" class happens in
			// one rendering-pass, which will have no visual difference.
			this.getComputedStyleValue('display');
			this.set('animate', anim);
		}
	},

	/**
	* Skips animation and jumps to the final hidden state.
	*
	* @public
	*/
	hideDirect: function() {
		var anim = this.animate;
		if (anim) {
			this.set('animate', false);
		}
		this.hide();
		if (anim) {
			this.set('animate', anim);
		}
	},

	/**
	* @private
	*/
	showHideScrim: function(show) {
		if (this.floating && (this.scrim || (this.modal && this.scrimWhenModal))) {
			var scrim = this.getScrim();
			if (show && this.modal && this.scrimWhenModal) {
				// move scrim to just under the popup to obscure rest of screen
				var i = this.getScrimZIndex();
				this._scrimZ = i;
				scrim.showAtZIndex(i);
			} else {
				scrim.hideAtZIndex(this._scrimZ);
			}
			scrim.addRemoveClass(this.scrimClassName, scrim.showing);
		}
	},

	/**
	* @private
	*/
	getScrimZIndex: function() {
		// Position scrim directly below popup
		return this.findZIndex()-1;
	},

	/**
	* @private
	*/
	getScrim: function() {
		// show a transparent scrim for modal popups if scrimWhenModal is true
		// if scrim is true, then show a regular scrim.
		if (this.modal && this.scrimWhenModal && !this.scrim) {
			return Scrim.scrimTransparent.make();
		}
		return Scrim.scrim.make();
	},

	/**
	* @private
	*/

	/**
	* Removes focused style from close button and hides the popup.
	*
	* @private
	*/
	closePopup: function(sender, event) {
		if (this.$.closeButton) {
			this.$.closeButton.removeClass('pressed');
		}
		this.hide();
	},

	/**
	* Attempts to respot the activating control when the popup is hidden.
	*
	* @private
	*/
	respotActivator: function() {
		var a = this.activator;
		// We're about to spot something, so we first call release() to avoid capturing
		// (and preventing) the resulting SpotlightFocus event.
		this.release();
		// Attempt to identify and re-spot the activator if present
		if (a && !a.destroyed) {
			Spotlight.spot(a);
			if (a instanceof Button) {
				a.removeClass('pressed');
			}
		} else {
			// As a failsafe, attempt to spot the container if no activator is present
			Spotlight.spot(Spotlight.getFirstChild(this.container));
		}
		this.activator = null;
	},

	/**
	* @private
	*/
	_preventEventBubble: function(sender, event) {
		return true;
	},

	/**
	* @private
	*/
	destroy: function() {
		this.showHideScrim(false);
		Popup.prototype.destroy.apply(this, arguments);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Popup":56,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275,"../Button":123,"../History":152,"../IconButton":154,"../Scrim":177}],173:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Animator = require('../../../enyo/lib/Animator'),
	Control = require('../../../enyo/lib/Control');

var
	Button = require('../Button');

/**
* Fires when progress button finishes animating to a position. No event-specific data is sent 
* with this event.
*
* @event moon.ProgressButton#onButtonProgressFinish
* @type {Object}
* @public
*/

/**
* `moon.ProgressButton` is an animated button to show progress from one state to another.
*
* ```
* {kind: 'moon.ProgressButton', progress: 10, content: 'Download', postContent: 'Launch'}
* ```
*
* To animate progress changes, call the {@link moon.ProgressButton#animateProgressTo} method:
*
* ```
* this.$.progressButton.animateProgressTo(50);
* ```
*
* You may customize the color of the bar by applying a style via the
* {@link moon.ProgressButton#barClasses} property, e.g.:
*
* ```
* {kind: 'moon.ProgressButton', barClasses: 'class-name'}
* ```
*
* For more information, see the documentation on [Progress Button
* Indicators](building-apps/controls/progress-button-indicators.html) in the Enyo
* Developer Guide
*
* @class moon.ProgressButton
* @extends moon.Button
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ProgressButton.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ProgressButton',

	/**
	* @private
	*/
	kind: Button,

	/**
	* @private
	*/
	classes: 'moon-progress-button',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	* @lends moon.ProgressButton.prototype
	*/
	published: {

		/**
		* Current position of progress button.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		progress: 0,

		/**
		* Minimum progress value (i.e., no progress made).
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		min: 0,

		/**
		* Maximum progress value (i.e., process complete).
		*
		* @type {Number}
		* @default 100
		* @public
		*/
		max: 100,

		/**
		* Optional CSS classes to apply to progress button bar.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		barClasses: '',

		/**
		* The text to display after the progress has been completed.
		*
		* @type {String}
		* @default 'Completed'
		* @public
		*/
		postContent: 'Completed',

		/**
		* Toggle whether there will be animation on the progress updates
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		animated: true,

		/**
		* The amount of fixed-steps the progress bar should increment to. 4 steps would step to
		* 25%, 50%, 75%, and 100%. 5 steps would step to 20%, 40%, 60%, 80%, and 100%. etc.
		*
		* @type {Number}
		* @default 4
		* @public
		*/
		steps: 4
	},

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.ProgressButton#onButtonProgressFinish}
		*/
		onButtonProgressFinish: ''
	},

	/**
	* @private
	*/
	components: [
		{name: 'progressAnimator', kind: Animator, onStep: 'progressAnimatorStep', onEnd: 'progressAnimatorComplete'},
		{name: 'bar', kind: Control, classes: 'moon-progress-button-bar'},
		{name: 'progressPercent', kind: Control, classes: 'moon-progress-button-progresspercent'}
	],

	/**
	* @private
	*/
	create: function () {
		Button.prototype.create.apply(this, arguments);
		this.preContent = this.content;
		this.addRemoveClass('moon-progress-button-rtl', this.rtl);
		this.progressChanged();
		this.animatedChanged();
		this.barClassesChanged();
	},

	/**
	* @private
	*/
	barClassesChanged: function (old) {
		this.$.bar.removeClass(old);
		this.$.bar.addClass(this.barClasses);
	},

	/**
	* @private
	*/
	progressChanged: function () {
		this.progress = this.clampValue(this.min, this.max, this.progress);

		var progress,
			percent = this.calcPercent(this.progress),
			offset = -10,
			minimumVisibleProgress = 10,
			increment = parseInt(100 / this.get('steps'), 10);
		if (percent < 100) {
			this.removeClass('completed');
		}
		if (percent < 5) {
			if (percent === 0) {
				this._inProgress(false);
				this.set('content', this.preContent);
				this.$.progressPercent.set('content', '');
				this.removeClass('in-progress');
			} else {
				this._inProgress(true);
				this.updateProgressPercent(percent);
			}
			// The value is so small that it should not be visible.
			this.$.bar.applyStyle('transform', 'translateX(-100%)');
			this.$.bar.applyStyle('-webkit-transform', 'translateX(-100%)');
			progress = 0;
		} else if (percent >= 5 && percent < 100) {
			// Disable spotlight: you can't click a button once it's in progress
			this._inProgress(true);
			if (percent < increment) {
				// Statically set the size of the progress bar if it's less than 1 increment.
				progress = minimumVisibleProgress;
			} else {
				// Calculate how many increments we should use
				progress = parseInt(percent / increment, 10) * increment;
			}
			this.updateProgressPercent(percent);
			// Only change the progress bar if it's different from the last time this was run
			if (progress != this._visibleProgress) {
				this.$.bar.applyStyle('transform', 'translateX(-' + (100 + offset - progress) + '%)');
				this.$.bar.applyStyle('-webkit-transform', 'translateX(-' + (100 + offset - progress) + '%)');
			}
		} else if (percent >= 100) {
			// Make it spottable again, now that it's finished.
			this.$.bar.applyStyle('transform', null);
			this.$.bar.applyStyle('-webkit-transform', null);
			this.setPostContent();
			progress = 100;
		}
		// Remember the last progress state
		this._visibleProgress = progress;
	},

	/**
	* @private
	*/
	_inProgress: function (state) {
		this.addRemoveClass('in-progress', state);
		this.set('spotlight', !state);
	},

	/**
	* @private
	*/
	clampValue: function (min, max, value) {
		return Math.max(min, Math.min(value, max));
	},

	/**
	* @private
	*/
	animatedChanged: function () {
		this.addRemoveClass('animated', this.get('animated'));
	},

	/**
	* @private
	*/
	calcRatio: function (value) {
		return (value - this.min) / (this.max - this.min);
	},

	/**
	* @private
	*/
	calcPercent: function (value) {
		return this.calcRatio(value) * 100;
	},

	/**
	* @private
	*/
	updateBarPosition: function (percent) {
		this.$.bar.applyStyle('width', percent + '%');
	},

	/**
	* @private
	*/
	updateProgressPercent: function(percent) {
		this.set('content', '');
		this.$.progressPercent.set('content', Math.round(percent) + '%');
	},

	/**
	* @private
	*/
	setPostContent: function(){
		this.startJob('completeProgress', function () {
			this.$.progressPercent.set('content', '');
			this.addClass('completed');
			this.set('content', this.get('postContent'));

			// When the animation is done, we are finally no longer in-progress.
			this.startJob('completeProgressDone', function () {
				this._inProgress(false);
			}, 200); // Same as the CSS transition duration
		}, 1000);
	},

	/**
	* Animates progress to the passed-in value.
	*
	* @param {Number} value  The destination number
	* @public
	*/
	animateProgressTo: function (value) {
		this.$.progressAnimator.play({
			startValue: this.progress,
			endValue: value,
			node: this.hasNode()
		});
	},

	/**
	* @private
	*/
	progressAnimatorStep: function (sender) {
		this.setProgress(sender.value);
		return true;
	},

	/**
	* @fires moon.ProgressBar#onButtonProgressFinish
	* @private
	*/
	progressAnimatorComplete: function (sender) {
		this.doButtonProgressFinish();
		return true;
	}
});
},{"../../../enyo/lib/Animator":15,"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Button":123}],191:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils');

var
	Button = require('../Button');

/**
* Fires when the value of the toggle button changes.
*
* @event moon.ToggleButton:onChange
* @type {Object}
* @property {Boolean} value - Current state of the ToggleButton.
* @public
*/

/**
* {@link moon.ToggleButton}, which extends {@link moon.Button}, is a button with two
* states, 'on' and 'off'. When the toggle button is tapped, it switches its state
* and fires an [onChange]{@link moon.ToggleButton#onChange} event.
*
* You may show the same text for both toggle states (via the
* [content]{@link enyo.Control#content} property), or different text for each state,
* using the [toggleOnLabel]{@link moon.ToggleButton#toggleOnLabel} and
* [toggleOffLabel]{@link moon.ToggleButton#toggleOffLabel} properties. Note that both
* `toggleOnLabel` and `toggleOffLabel` must be set in order to display different labels;
* otherwise, the `content` property will be used.
*
* @class moon.ToggleButton
* @extends moon.Button
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ToggleButton.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ToggleButton',

	/**
	* @private
	*/
	kind: Button,

	/**
	* @private
	* @lends moon.ToggleButton.prototype
	*/
	published: {

		/**
		* Boolean indicating whether toggle button is currently in the 'on' state.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		value: false,

		/**
		* Button text displayed in the 'on' state. If not specified, the
		* [content]{@link enyo.Control#content} property will be used as button text.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		toggleOnLabel: '',

		/**
		* Button text displayed in the 'off' state. If not specified, the
		* [content]{@link enyo.Control#content} property will be used as button text.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		toggleOffLabel: ''
	},

	/*
	* @private
	*/
	events: {
		onChange: ''
	},

	/*
	* @private
	*/
	_rendered: false,

	/*
	* @private
	*/
	classes: 'moon-toggle-button',

	/*
	* @private
	*/
	create: function () {
		Button.prototype.create.apply(this, arguments);
		this.updateContent();
		this.updateVisualState();
	},

	/*
	* @private
	*/
	rendered: function () {
		Button.prototype.rendered.apply(this, arguments);
		this.setActive(this.value);
		this.fireChangeEvent();
		this._rendered = true;
	},

	/*
	* @private
	*/
	updateVisualState: function () {
		this.addRemoveClass('moon-toggle-button-on', this.value && !this.disabled);
	},

	/*
	* @private
	*/
	disabledChanged: function () {
		Button.prototype.disabledChanged.apply(this, arguments);
		this.updateVisualState();
	},

	/*
	* @private
	*/
	valueChanged: function () {
		this.updateContent();
		this.updateVisualState();
		this.setActive(this.value);
		this.fireChangeEvent();
	},

	/*
	* @private
	*/
	toggleOnLabelChanged: function () {
		this.updateContent();
	},

	/*
	* @private
	*/
	toggleOffLabelChanged: function () {
		this.updateContent();
	},

	/*
	* We override the inherited `activeChanged()` method.
	*
	* @private
	*/
	activeChanged: function () {
		if (this._rendered) {
			this.active = util.isTrue(this.active);
			this.setValue(this.active);
		}
		this.bubble('onActivate');
	},

	/*
	* we override the inherited `tap()` method.
	*
	* @private
	*/
	tap: function () {
		if (this.disabled) {
			return true;
		} else {
			this.setValue(!this.value);
		}
	},

	/*
	* @private
	*/
	updateContent: function () {
		if (!this.toggleOnLabel || !this.toggleOffLabel) {
			this.setContent(this.content);
		} else {
			this.setContent(this.value ? this.toggleOnLabel : this.toggleOffLabel);
		}
	},

	/*
	* @private
	*/
	fireChangeEvent: function () {
		this.doChange({value: this.value});
	}
});
},{"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Button":123}],195:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Spotlight = require('../../../spotlight');

var
	Button = require('../Button');

/**
* Bubble this event from a contained [control]{@link enyo.Control} to mute tooltips. No data
* needs be passed with this event.
*
* @event moon.TooltipDecorator#onRequestMuteTooltip
* @type {Object}
* @public
*/

/**
* Bubble this event from a contained [control]{@link enyo.Control} to unmute tooltips. No data
* needs be passed with this event.
*
* @event moon.TooltipDecorator#onRequestUnmuteTooltip
* @type {Object}
* @public
*/

/**
* {@link moon.TooltipDecorator} is a control that activates a {@link moon.Tooltip}. It
* surrounds a control such as a button and displays the tooltip when the control generates
* an `onenter` event:
*
* ```
* {kind: 'moon.TooltipDecorator', components: [
*	{kind: 'moon.Button', content: 'Tooltip'},
*	{kind: 'moon.Tooltip', content: 'I am a tooltip for a button.'}
* ]}
* ```
*
* Here is an example with a {@link moon.Input} control and a decorator around the input:
*
* ```
* {kind: 'moon.TooltipDecorator', components: [
*	{kind: 'moon.InputDecorator', components: [
*		{kind: 'moon.Input', placeholder: 'Just an input...'}
*	]},
*	{kind: 'moon.Tooltip', content: 'I am just a tooltip for an input.'}
* ]}
* ```
*
* Automatic hiding and showing of tooltips may be disabled by calling
* [mute()]{@link moon.TooltipDecorator#mute} or by bubbling the
* [onRequestMuteTooltip]{@link moon.TooltipDecorator#onRequestMuteTooltip} event;
* it may be re-enabled by calling [unmute()]{@link moon.TooltipDecorator#unmute}
* or by bubbling the
* [onRequestUnmuteTooltip]{@link moon.TooltipDecorator#onRequestUnmuteTooltip} event.
*
* @class moon.TooltipDecorator
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends  moon.TooltipDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'moon.TooltipDecorator',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	defaultKind: Button,

	/**
	* @private
	*/
	classes: 'moon-contextual-popup-decorator',

	/**
	* @private
	*/
	handlers: {
		onenter: 'requestShowTooltip',
		onleave: 'requestHideTooltip',
		onSpotlightFocused: 'requestShowTooltip',
		onSpotlightBlur: 'requestHideTooltip',
		onRequestMuteTooltip: 'mute',
		onRequestUnmuteTooltip: 'unmute'
	},

	/**
	* @private
	* @lends moon.TooltipDecorator.prototype
	*/
	published: {
		/**
		* Boolean indicating whether tooltips are automatically shown when the activator is
		* hovered over.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoShow: true
	},

	/**
	* Disables automatic tooltip showing and hiding.
	*
	* @public
	*/
	mute: function () {
		this.setAutoShow(false);
	},

	/**
	* Re-enables automatic tooltip showing and hiding after being muted.
	*
	* @public
	*/
	unmute: function () {
		this.setAutoShow(true);
	},

	/**
	* @private
	*/
	autoShowChanged: function () {
		if (!this.autoShow) {
			this.requestHideTooltip();
		}
	},

	/**
	* @private
	*/
	tap: function () {
		this.requestHideTooltip();
	},

	/**
	* @private
	*/
	requestShowTooltip: function (inSender, inEvent) {
		if (this.autoShow && !Spotlight.isFrozen()) {
			if (inEvent.type == 'onSpotlightFocused' || Spotlight.getPointerMode()) {
				this.waterfallDown('onRequestShowTooltip', {originator: inSender}, this);
			}
		}
	},

	/**
	* @private
	*/
	requestHideTooltip: function () {
		this.waterfallDown('onRequestHideTooltip');
	},

	/**
	* Cancel any pending tooltip showing if the decorator or one of its ancestors is hidden
	*
	* @private
	*/
	showingChangedHandler: function (sender, event) {
		Control.prototype.showingChangedHandler.apply(this, arguments);
		if (!event.showing) {
			this.requestHideTooltip();
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../Button":123}],267:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Table = require('../../../moonstone/lib/Table');

module.exports = kind({
	name: 'moon.sample.TableSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Divider, content: 'Static Table'},
		{kind: Table, components: [
			{classes: 'header', components: [
				{content: 'Question'},
				{content: 'Agree'},
				{content: 'Indifferent'},
				{content: 'Disagree'}
			]},
			{classes: 'moon-body-text', components: [
				{content: 'When should tables be used?'},
				{content: 'Always'},
				{content: 'Sometimes'},
				{content: 'Never'}
			]},
			{classes: 'moon-body-text', components: [
				{content: 'How cool are tables?'},
				{content: 'Very'},
				{content: 'A little'},
				{content: 'Not at all'}
			]}
		]},
		{tag: 'br'},
		{kind: Divider, content: 'Generated Table'},
		{name: 'month', classes: 'section'},
		{name: 'calendarTable', kind: Table, components: [
			{classes: 'header', components: [
				{content: 'Sun'},
				{content: 'Mon'},
				{content: 'Tue'},
				{content: 'Wed'},
				{content: 'Thu'},
				{content: 'Fri'},
				{content: 'Sat'}
			]}
		]}
	],
	monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	create: function () {
		Control.prototype.create.apply(this, arguments);

		var currentRow,
			dateObj = new Date();

		// calculate current date
		var currentDate = dateObj.getDate();

		// calculate date of first day of the month
		dateObj.setDate(1);
		var offset = dateObj.getDay();

		// calculate date of last day of the month
		var lastDate = this.getDaysInMonth(dateObj.getMonth(), dateObj.getYear());

		// this calculation can probably be simplified, but allows for padding blank spaces in
		// the calendar to display a "full" table
		for (var i=0; i<lastDate+offset+(((lastDate+offset)%7)?7-((lastDate+offset)%7):0); i++) {
			if (i%7 === 0) {
				currentRow = this.$.calendarTable.createComponent({});
			}
			if (i<offset || i>=lastDate+offset) {
				currentRow.createComponent({});
			} else {
				var cellDay = {content: (i-offset+1)};
				if ((i-offset+1) === currentDate) {
					cellDay = utils.mixin(cellDay, {classes: 'current'});
				}
				currentRow.createComponent(cellDay);
			}
		}

		// set month display
		this.$.month.setContent(this.monthNames[dateObj.getMonth()] + ' ' + dateObj.getFullYear());
	},
	// adapted from http://stackoverflow.com/questions/1810984/number-of-days-in-any-month
	getDaysInMonth: function (m, y) {
		return (/8|3|5|10/).test(m)?30:m==1?((y%4===0)&&y%100)||(y%400===0)?29:28:31;
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Table":188}],140:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dispatcher = require('../../../enyo/lib/dispatcher'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Drawer = require('../../../enyo/lib/Drawer');

var
	Spotlight = require('../../../spotlight');

var
	History = require('../History'),
	Icon = require('../Icon'),
	Item = require('../Item'),
	MoonDrawer = require('../Drawer'),
	HistorySupport = History.HistorySupport;

/**
* Handler for initial rendering event.
*
* @event moon.Drawers#onDrawersRendered
* @type {Object}
* @property {Number} drawersHeight - The height of the drawer.
* @public
*/

/**
* Handler for initial resizing event to size drawers to fullscreen.
*
* @event moon.Drawers#onDrawersResized
* @type {Object}
* @property {Number} drawersHeight - The height of the drawer.
* @public
*/


/**
* {@link moon.Drawers} is a container kind designed to hold a set of {@link moon.Drawer}
* objects and client content. The [drawers]{@link moon.Drawers#drawers} property accepts
* an array of Drawer controls. The associated handles are positioned in their own small
* drawer, centered at the top of the "dresser" (the region containing the array of Drawer
* controls and the activator nub).
*
* When a handle is selected, it opens the corresponding Drawer object's main drawer or
* control drawer, depending on how the Drawer object is configured. The control's child
* components may be of any kind.
*
* ```
* {
*	kind: 'moon.Drawers',
*	drawers: [
*		{
*			name: 'musicDrawer',
*			kind: 'moon.Drawer',
*			handle: {kind: 'moon.DrawerHandle', content: 'Handle'},
*			components: [
*				{content: 'Drawer Content'}
*			],
*			controlDrawerComponents: [
*				{content: 'Controls'}
*			]
*		}
*	],
*	components: [
*		{content: 'Content Area'}
*	]
* }
* ```
*
* @class moon.Drawers
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Drawers.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Drawers',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	mixins : [HistorySupport],

	/**
	* @private
	*/
	classes: 'moon-drawers enyo-fit',

	/**
	* @private
	* @lends moon.Drawers.prototype
	*/
	published: {

		/**
		* Populate with an array of {@link moon.Drawer} components.
		*
		* @type {Object[]}
		* @default null
		* @public
		*/
		drawers: null,

		/**
		* When using a font-based icon, the name of the icon to be used.
		* The following icon names are valid:
		*
		* 'drawer'
		* 'arrowlargeup'
		* 'arrowlargedown'
		* 'arrowlargeleft'
		* 'arrowlargeright'
		* 'arrowsmallup'
		* 'arrowsmalldown'
		* 'arrowsmallleft'
		* 'arrowsmallright'
		* 'closex'
		* 'check'
		* 'search'
		*
		* @type {String}
		* @default ''
		* @public
		*/
		icon: '',

		/**
		* URL specifying path to icon image.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		src: ''
	},

	/**
	* @private
	*/
	iconClosed: 'arrowsmalldown',

	/**
	* @private
	*/
	iconOpen: 'arrowsmallup',

	/**
	* @private
	*/
	handlers: {
		//* Handlers to update the activator when the state of the contained drawers changes
		onActivate: 'drawerActivated',
		onDeactivate: 'drawerDeactivated',
		onSpotlightDown:'spotDown',
		onSpotlightUp:'spotUp'
	},

	/**
	* @private
	*/
	components: [
		{name: 'activator', kind: Control, classes: 'moon-drawers-activator', spotlight: true, ontap: 'activatorHandler', components: [
			{name: 'activatorIcon', kind: Icon, classes: 'moon-drawers-activator-icon', small: false}
		]},
		{name: 'handleContainer', kind: Drawer, classes: 'moon-drawers-handle-container', resizeContainer: false, open: false, spotlightDisabled: true, onpostresize: 'resizeHandleContainer', components: [
			{name: 'handles', kind: Control, classes: 'moon-neutral moon-drawers-handles'}
		]},
		{name: 'drawers', kind: Control, classes: 'moon-drawers-drawer-container'},
		{name: 'client', kind: Control, classes: 'moon-drawers-client'}
	],

	/**
	* @private
	*/
	eventsToCapture: {
		ontap: 'captureTapSelect',
		onSpotlightFocus: 'captureSpotFocus',
		onSpotlightSelect: 'captureTapSelect'
	},

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.$.drawers.createComponents(this.drawers, {kind: MoonDrawer, owner: this.owner});
		this.setupHandles();
		this.updateActivator();
	},

	/**
	* Event waterfalls down.
	* @fires moon.Drawers#onDrawersRendered
	* @private
	*/
	rendered: function () {
		Control.prototype.rendered.apply(this, arguments);
		var dh = document.body.getBoundingClientRect().height;
		this.waterfall('onDrawersRendered', {drawersHeight: dh});
	},

	/**
	* @private
	*/
	srcChanged: function () {
		this.updateActivator();
	},

	/**
	* @private
	*/
	iconChanged: function () {
		this.updateActivator();
	},

	/**
	* @private
	*/
	setupHandles: function () {
		var controls, index,
			handles = [];

		// cover the case where one is not defined
		if (this.drawers) {
			for (index = 0; index < this.drawers.length; ++index) {
				handles.push(this.drawers[index].handle || {});
			}
			this.$.handles.createComponents(handles, {kind: Item, owner:this});
			controls = this.$.handles.getControls();
			handles.forEach(function (handle, idx) {
				controls[idx].addClass('moon-drawers-handle');
				controls[idx].tap = this.bindSafely(this.handleTapped);
			}, this);
		}
	},

	/**
	* @private
	*/
	activatorHandler: function () {
		if (this.drawerOpen()) {
			this.closeDrawers();
		} else {
			if (this.$.handles.getControls().length == 1) {
				this.openDrawer(this.$.handles.getControls()[0]);
				this.updateActivator(true);
			} else {
				if (this.$.handleContainer.getOpen()) {
					this.closeHandleContainer();
				} else {
					this.openHandleContainer();
				}
			}
		}
	},

	/**
	* @private
	*/
	openHandleContainer: function () {
		this.$.handleContainer.spotlightDisabled = false;
		this.$.handleContainer.setOpen(true);
		this.updateActivator(true);
		dispatcher.capture(this.$.handleContainer, this.eventsToCapture, this);
		if (this.allowBackKey) {
			this.pushBackHistory();
		}
	},

	/**
	* @private
	*/
	closeHandleContainer: function () {
		dispatcher.release(this.$.handleContainer);
		this.$.handleContainer.spotlightDisabled = true;
		this.$.handleContainer.setOpen(false);
		this.updateActivator(this.drawerOpen());
	},

	/**
	* @private
	*/
	handleTapped: function (sender, ev) {
		this.openDrawer(ev.originator);
		return true;
	},

	/**
	* @private
	*/
	openDrawer: function (drawer) {
		var handles = this.$.handles.getControls();
		for (var index = 0; index < handles.length; ++index) {
			if (handles[index] == drawer || Spotlight.Util.isChild(handles[index],drawer)) {
				drawer = this.$.drawers.getControls()[index];
				drawer.toggleDrawer();
				this.closeHandleContainer();
				dispatcher.capture(drawer, this.eventsToCapture, this);
				return;
			}
		}
	},

	/**
	* @private
	*/
	drawerOpen: function () {
		var drawers = this.$.drawers.getControls();
		for (var index = 0; index < drawers.length; ++index) {
			if (drawers[index].getOpen() || drawers[index].getControlsOpen()) {
				return true;
			}
		}
		return false;
	},

	/**
	* @private
	*/
	closeDrawers: function () {
		var drawers = this.$.drawers.getControls();
		for (var index = 0; index < drawers.length; ++index) {
			var drawer = drawers[index];
			if (drawer.getOpen() || drawer.getControlsOpen()) {
				dispatcher.release(drawer);
				drawer.setOpen(false);
				drawer.setControlsOpen(false);
			}
		}
		this.updateActivator(false);
	},

	/**
	* @private
	*/
	captureSpotFocus: function (sender, ev) {
		// Only close drawers on 5-way focus in the client (not pointer focus)
		if (ev.dir && ev.dispatchTarget.isDescendantOf(this.$.client)) {
			this.closeDrawers();
			this.closeHandleContainer();
		}
	},

	/**
	* @private
	*/
	captureTapSelect: function (sender, ev) {
		// Any tap or select in the client area closes the dresser/drawer
		if (ev.dispatchTarget.isDescendantOf(this.$.client)) {
			this.closeDrawers();
			this.closeHandleContainer();
		}
	},

	/**
	* @private
	*/
	drawerActivated: function (sender, ev) {
		if (ev.originator instanceof MoonDrawer) {
			this.updateActivator(true);
			// Hide client when fullscreen drawer is open so it is not focusable
			if (ev.originator.getOpen()) {
				this.$.client.hide();
			}
		}
	},

	/**
	* @private
	*/
	drawerDeactivated: function (sender, ev) {
		if (ev.originator instanceof MoonDrawer) {
			if (!ev.originator.getOpen() && !ev.originator.getControlsOpen()) {
				this.updateActivator(false);
			}
			// Re-show client when closing fullscreen drawer
			if (!ev.originator.getOpen()) {
				this.$.client.show();
			}
		}
	},

	/**
	* @private
	*/
	updateActivator: function (up) {
		var icon = this.get('icon'),
			src = this.get('src');
		this.$.activator.addRemoveClass('open', up);
		if (up) {
			// Drawer is open
			this.$.activatorIcon.set('src', '');
			this.$.activatorIcon.set('icon', this.iconOpen);
		} else {
			this.$.activatorIcon.set('src', src);
			// If there is a src, but no icon, set icon to ''.
			// Otherwise fall back to assigned icon or the default closed icon
			this.$.activatorIcon.set('icon', (src && !icon) ? '' : (icon || this.iconClosed));
		}
	},

	/**
	* @fires moon.Drawers#onDrawersResized
	* @private
	*/
	handleResize: function () {
		Control.prototype.handleResize.apply(this, arguments);
		var dh = document.body.getBoundingClientRect().height;
		this.waterfall('onDrawersResized', {drawersHeight: dh});
		this.updateActivator(false);
	},

	/**
	* Updates the activator's style only if it is not animating, so that there
	* are no visual artifacts.
	*
	* @private
	*/
	resizeHandleContainer: function (sender, ev) {
		util.asyncMethod(ev.delegate.bindSafely(function () {
			if (!this.$.animator.isAnimating()) {
				this.parent.$.activator.addRemoveClass('drawer-open', this.parent.drawerOpen() ? true : false);
			}
		}));
	},

	/**
	* @private
	*/
	handleAtIndex: function (index) {
		return this.$.handles.getControls()[index];
	},

	/**
	* @private
	*/
	destroy: function () {
		dispatcher.release(this.$.handleContainer);
		for (var i=0, c$=this.$.drawers.getControls(); i<c$.length; i++) {
			dispatcher.release(c$[i]);
		}
		Control.prototype.destroy.apply(this, arguments);
	},

	/**
	* @private
	*/
	backKeyHandler: function () {
		this.closeHandleContainer();
		return true;
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Drawer":32,"../../../enyo/lib/dispatcher":86,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275,"../Drawer":139,"../History":152,"../Icon":153,"../Item":162}],145:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Group = require('../../../enyo/lib/Group');

var
	Spotlight = require('../../../spotlight');

var
	ExpandableListDrawer = require('../ExpandableListDrawer'),
	Item = require('../Item'),
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text;

/**
* {@link moon.ExpandableListItem}, which extends {@link moon.Item}, displays a header
* while also allowing additional content to be stored in an {@link enyo.Drawer}. When
* the header is selected, the drawer opens below. To close the drawer, tap on the
* header text or navigate (via 5-way) back to the top of the drawer.
*
* The control's child components may be of any kind; by default, they are
* instances of `moon.Item`.
*
* ```
* 		{kind: 'moon.ExpandableListItem', content: 'A Countries', components: [
* 			{content: 'Algeria'},
* 			{content: 'Argentina'},
* 			{content: 'Australia'}
* 		]},
* 		{kind: 'moon.ExpandableListItem', content: 'B Countries', components: [
* 			{content: 'Belgium'},
* 			{content: 'Bolivia'},
* 			{content: 'Brazil'}
* 		]}
*
* When multiple ExpandableListItems are used in a group, only one may be open at
* a given time.
*
* ```
* 		{kind: 'enyo.Group', highlander: true, components: [
* 			{kind: 'moon.ExpandableListItem',  open: true,
* 			content: 'This is a grouped ExpandableListItem', components: [
* 				{content: 'Item One'},
* 				{content: 'Item Two'}
* 			]},
* 			{kind: 'moon.ExpandableListItem',
* 				content: 'This is another grouped ExpandableListItem', components: [
* 					{content: 'Item Three'},
* 					{content: 'Item Four'}
* 				]
* 			},
* 			{kind: 'moon.ExpandableListItem',
* 				content: 'This is yet another grouped ExpandableListItem', components: [
* 					{content: 'Item Five'},
* 					{content: 'Item Six'}
* 				]
* 			}
* 		]}
* ```
*
* @class moon.ExpandableListItem
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ExpandableListItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandableListItem',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	* @lends moon.ExpandableListItem.prototype
	*/
	published: {

		/**
		* If `true`, the drawer automatically closes when the user navigates to the top of the
		* control; if `false`, the user must select/tap the header to close the drawer.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoCollapse: false,

		/**
		* If `true`, the drawer is expanded, showing this item's contents. Use this property
		* (rather than [active]{@link moon.ExpandableListItem#active}) to set the item's
		* initial state.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		open: false,

		/**
		* Boolean that reflects the value of the [open]{@link moon.ExpandableListItem#open}
		* property; it is used to support the {@link enyo.Group} API for grouping a set of
		* ExpandableListItems in which only one is expanded at a time. Note that the `open`
		* property (not the `active` property) controls the initial state of the picker.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false,

		/**
		* If `true`, the user is prevented from moving {@glossary Spotlight} past the bottom
		* of the drawer (when open) using 5-way controls.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		lockBottom: false,

		/**
		* If `true`, item is shown as disabled and does not generate tap events.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false
	},

	/**
	* @private
	*/
	classes: 'moon-expandable-list-item',

	/**
	* @private
	*/
	spotlight: false,

	/**
	* @private
	*/
	defaultKind: Item,

	/**
	* @private
	*/
	handlers: {
		onSpotlightDown: 'spotlightDown',
		onDrawerAnimationEnd: 'drawerAnimationEnd'
	},

	/**
	* @private
	*/
	components: [
		// headerContainer required to avoid bad scrollWidth returned in RTL for certain text
		// widths (webkit bug)
		{name: 'headerContainer', kind: Control, classes: 'moon-expandable-list-item-header moon-expandable-picker-header moon-expandable-list-header', onSpotlightFocus: 'headerFocus', ontap: 'expandContract', components: [
			{name: 'header', kind: MarqueeText}
		]},
		{name: 'drawer', kind: ExpandableListDrawer, resizeContainer:false, classes: 'moon-expandable-list-item-client', components: [
			{name: 'client', kind: Group, tag: null}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.allowHtml', to: '.$.header.allowHtml'},
		{from: '.disabled', to: '.$.headerContainer.disabled'}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.openChanged();
		this.setActive(this.open);
		this.disabledChanged();
	},

	/**
	* Facade for header content.
	*
	* @private
	*/
	contentChanged: function () {
		this.$.header.setContent(this.getContent());
	},

	/**
	* Facade for drawer.
	*
	* @private
	*/
	openChanged: function () {
		var open = this.getOpen();
		this.addRemoveClass('open', open);
		this.$.drawer.setOpen(open);
		this.$.drawer.spotlightDisabled = !open;
		this.setActive(open);
	},

	/**
	* @private
	*/
	disabledChanged: function () {
		var disabled = this.getDisabled();

		this.addRemoveClass('disabled', disabled);
		if (disabled) {
			this.setActive(false);
		}
	},

	/**
	* @fires enyo.GroupItem#onActivate
	* @private
	*/
	activeChanged: function () {
		this.bubble('onActivate', {allowHighlanderDeactivate:true});
		this.setOpen(this.active);
	},

	/**
	* If closed, opens drawer and highlights first spottable child.
	*
	* @private
	*/
	expandContract: function (inSender, inEvent) {
		this.toggleActive();

		if (this.getActive() && !Spotlight.getPointerMode()) {
			Spotlight.spot(Spotlight.getFirstChild(this.$.drawer));
		}
	},

	/**
	* @private
	*/
	toggleActive: function () {
		if (this.getOpen()) {
			this.setActive(false);
		} else {
			this.setActive(true);
		}
	},

	/**
	* If drawer is currently open, and event was sent via keypress (i.e., it has a direction),
	* process header focus.
	*
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	headerFocus: function (inSender, inEvent) {
		var direction = inEvent && inEvent.dir;

		if (this.getOpen() && this.getAutoCollapse() && direction === 'UP') {
			this.setActive(false);
		}

		if (inEvent.originator === this.$.header) {
			this.bubble('onRequestScrollIntoView');
		}
	},

	/**
	* Check for the last item in the client area, and prevent 5-way focus movement below it,
	* per UX specs.
	*
	* @private
	*/
	spotlightDown: function (inSender, inEvent) {
		var children = Spotlight.getChildren(this.$.client);
		if (this.getLockBottom() && this.getOpen() && children.length && inEvent.originator == children[children.length - 1]) {
			return true;
		}
	},

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	drawerAnimationEnd: function () {
		this.bubble('onRequestScrollIntoView', {scrollInPointerMode: true});
		return true;
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../ExpandableListDrawer":144,"../Item":162,"../Marquee":166}],164:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	Item = require('../Item');

/**
* {@link moon.LabeledTextItem}, which extends {@link moon.Item}, is a
* [control]{@link enyo.Control} that combines text content with a text label.
*
* @class moon.LabeledTextItem
* @extends moon.Item
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.LabeledTextItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.LabeledTextItem',

	/**
	* @private
	*/
	kind: Item,
	
	/**
	* @private
	*/
	classes: 'moon-labeledtextitem',

	/**
	* @private
	*/
	components:[
		{name: 'label', classes: 'label'},
		{name: 'text', classes: 'text'}
	],

	/**
	* @private
	*/
	create: function() {
		Item.prototype.create.apply(this, arguments);
		this.labelChanged();
		this.textChanged();
	},
	
	/**
	* @private
	* @lends moon.LabeledTextItem.prototype
	*/
	published: {

		/** 
		* The label to be displayed along with the text.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		label: '',
		
		/** 
		* The text to be displayed in the item.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		text: ''
	},
	
	/**
	* @private
	*/
	bindings: [
		{from: '.allowHtml', to: '.$.label.allowHtml'},
		{from: '.allowHtml', to: '.$.text.allowHtml'}
	],

	/**
	* @private
	*/
	labelChanged: function() {
		this.$.label.setContent(this.label);
	},
	
	/**
	* @private
	*/
	textChanged: function() {
		this.$.text.setContent(this.text);
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Item":162}],181:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils');

var
	Item = require('../Item');

/**
* Fires when the item is tapped. No event-specific data is sent with this event.
*
* @event moon.SelectableItem#onActivate
* @type {Object}
* @public
*/

/**
* {@link moon.SelectableItem} is a {@link moon.Item} with a flag to track
* selection state.  It is particularly useful within the context of the
* [Enyo Group API]{@link enyo.Group}.
*
* When selected, the item appears as underlined.
*
* If multiple SelectableItem objects are used in a group, only one of them
* may be in the selected state at a given time.
*
* @class moon.SelectableItem
* @extends moon.Item
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.SelectableItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.SelectableItem',

	/**
	* @private
	*/
	kind: Item,
	
	/**
	* @private
	*/
	classes: 'moon-selectable-item',
	
	/**
	* @private
	*/
	events: {
		onActivate: ''
	},
	
	/**
	* @private
	*/
	handlers: {
		// Prevents double bubbling of _onchange_ in IE.
		onclick: ''
	},

	/**
	* @private
	* @lends moon.SelectableItem.prototype
	*/
	published: {

		/**
		* Will be `true` if this item is currently selected; otherwise, `false`.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		selected: false,

		/**
		* For use with the [Enyo Group API]{@link enyo.Group}. Will be `true` if this item
		* is the selected item in the group. Within this kind, the
		* [selected]{@link moon.SelectableItem#selected} and `active` properties appear to
		* behave similarly; however, `active` is meant to be used by {@link enyo.Group},
		* while `selected` is to be used for changing selection state.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false,
		
		/**
		* If used as the base control within a {@link moon.DataList} or {@glossary subkind},
		* this should be set to `false` so that selection support can be synchronized to the
		* checked state of this control.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		handleTapEvent: true
	},
	
	/**
	* @method
	* @private
	*/
	create: function() {
		Item.prototype.create.apply(this, arguments);
		this.contentChanged();
		this.updateSelectedValue();
	},

	/**
	* @private
	*/
	rendered: function() {
		Item.prototype.rendered.apply(this, arguments);
		this.updateActiveValue();
	},

	/**
	* @private
	*/
	shouldDoTransition: function(selected) {
		return selected === true;
	},

	/**
	* @private
	*/
	tap: function(sender, e) {
		if (this.disabled) {
			return true;
		}
		if (this.handleTapEvent) {
			this.setActive(!this.getActive());
			this.bubble('onchange');
		}
	},

	/**
	* @private
	*/
	updateSelectedValue: function() {
		var selected = this.getSelected();
		this.addRemoveClass('selected', selected);
		this.setNodeProperty('selected', selected);
		this.setAttribute('selected', selected ? 'selected' : '');
		this.reflow();
	},

	/**
	* @private
	*/
	updateActiveValue: function() {
		this.setActive(this.getSelected());
	},

	/**
	* @private
	*/
	selectedChanged: function() {
		this.updateSelectedValue();
		this.updateActiveValue();
	},

	/**
	* For use with the [Enyo Group API]{@link enyo.Group}, which is supported by this object.
	* Called when the active item within the group changes. The
	* [active]{@link moon.SelectableItem#active} property and
	* [onActivate]{@link moon.SelectableItem#onActivate} event are both part of the
	* Group API.
	*
	* @private
	*/
	activeChanged: function() {
		this.active = utils.isTrue(this.active);
		this.setSelected(this.active);
		this.resetMarquee();
		this.bubble('onActivate');
	}
});
},{"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../Item":162}],222:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Item = require('../../../moonstone/lib/Item');

module.exports = kind({
	name: 'moon.sample.DividerSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{classes:'moon-4h', components: [
			{kind: Divider, content: 'Divider 1'},
			{kind: Item, content: 'Item 1'},
			{kind: Item, content: 'Item 2'},
			{kind: Item, content: 'Item 3'},
			{kind: Item, content: 'Item 4'},

			{classes:'moon-1v'}, // Spacer

			{kind: Divider, content: 'Divider 2'},
			{kind: Item, content: 'Item 1'},
			{kind: Item, content: 'Item 2'},

			{classes:'moon-1v'}, // Spacer

			{kind: Divider, content: 'Very Long Divider with truncation'},
			{kind: Item, content: 'Item 1'},
			{kind: Item, content: 'Item 2'}
		]}
	]
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Item":162}],148:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	CheckboxItem = require('../CheckboxItem');

/**
* {@link moon.FormCheckbox} is a labeled checkbox designed for use in form layouts.
* Unlike {@link moon.CheckboxItem}, which it extends, `moon.FormCheckbox` provides
* a circular 'hit target' that is always visible, regardless of whether the checkbox
* is currently checked.
*
* @class moon.FormCheckbox
* @extends moon.CheckboxItem
* @ui
* @public
*/

module.exports = kind(
	/** @lends moon.FormCheckbox.prototype */ {

	/**
	* @private
	*/
	name: 'moon.FormCheckbox',

	/**
	* @private
	*/
	kind: CheckboxItem,

	/**
	* @private
	*/
	classes: 'moon-formcheckbox-item'
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../CheckboxItem":128}],256:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	Divider = require('../../../moonstone/lib/Divider'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	ProgressBar = require('../../../moonstone/lib/ProgressBar');

module.exports = kind({
	name: 'moon.sample.ProgressSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Divider, content: 'Progress Bars'},
		{kind: ProgressBar, progress: 25},
		{kind: ProgressBar, progress: 25, bgProgress: 75},
		{kind: ProgressBar, progress: 50, barClasses: 'moon-sample-green'},
		{kind: ProgressBar, progress: 50, barClasses: 'moon-sample-red'},
		{tag: 'br'},
		{kind: InputDecorator, style: 'margin-right:10px;', components: [
			{kind: Input, placeholder: 'Value'}
		]},
		{kind: Button, content: 'Set', small: true, classes: 'moon-sample-spaced-button', ontap: 'changeValue'},
		{kind: Button, content: '-', small: true, classes: 'moon-sample-spaced-button', ontap: 'decValue'},
		{kind: Button, content: '+', small: true, classes: 'moon-sample-spaced-button', ontap: 'incValue'},
		{tag: 'br'},
		{tag: 'br'},
		{style: 'width:240px;', components: [
			{name: 'animateSetting', kind: CheckboxItem, checked: true, content: 'Animated'}
		]}
	],
	changeValue: function (sender, event) {
		for (var i in this.$) {
			if (this.$[i].kind == ProgressBar) {
				if (this.$.animateSetting.getChecked()) {
					this.$[i].animateProgressTo(this.$.input.getValue());
				} else {
					this.$[i].setProgress(this.$.input.getValue());
				}
			}
		}
	},
	incValue: function () {
		this.$.input.setValue(Math.min(parseInt(this.$.input.getValue() || 0, 10) + 10, 100));
		this.changeValue();
	},
	decValue: function () {
		this.$.input.setValue(Math.max(parseInt(this.$.input.getValue() || 0, 10) - 10, 0));
		this.changeValue();
	}
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/ProgressBar":172}],192:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	CheckboxItem = require('../CheckboxItem'),
	ToggleSwitch = require('../ToggleSwitch');

/**
* {@link moon.ToggleItem} is a control that combines a {@link moon.ToggleSwitch}
* with a text label.
*
* @class moon.ToggleItem
* @extends moon.CheckboxItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ToggleItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ToggleItem',

	/**
	* @private
	*/
	kind: CheckboxItem,

	/**
	* @private
	*/
	icon: 'circle',

	/**
	* @private
	*/
	classes: 'moon-toggle-item',

	/**
	* @private
	*/
	checkboxOnRight: true,

	/**
	* @private
	*/
	componentOverrides: {
		client: {classes: 'moon-toggle-item-label-wrapper'},
		input: {kind: ToggleSwitch, spotlight: false}
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../CheckboxItem":128,"../ToggleSwitch":193}],178:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dispatcher = require('../../../enyo/lib/dispatcher'),
	dom = require('../../../enyo/lib/dom'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	ScrollStrategy = require('../../../enyo/lib/ScrollStrategy'),
	TouchScrollStrategy = require('../../../enyo/lib/TouchScrollStrategy'),
	ScrollMath = require('../../../enyo/lib/ScrollMath'),
	Signals = require('../../../enyo/lib/Signals');

var
	Spotlight = require('../../../spotlight');

var
	config = require('../options'),
	PagingControl = require('../PagingControl'),
	ScrollThumb = require('../ScrollThumb');

/**
* {@link moon.ScrollStrategy} inherits from {@link enyo.TouchScrollStrategy}.
* Its main purpose is to handle scroller paging for {@link moon.Scroller} and
* {@link moon.DataList}.
*
* @class moon.ScrollStrategy
* @extends enyo.TouchScrollStrategy
* @public
*/
var MoonScrollStrategy = module.exports = kind(
	/** @lends moon.ScrollStrategy.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ScrollStrategy',

	/**
	* @private
	*/
	kind: TouchScrollStrategy,

	/**
	* @private
	* @lends moon.ScrollStrategy.prototype
	*/
	published: {

		/**
		* The ratio of mousewheel "delta" units to pixels scrolled. Increase this value to
		* increase the distance scrolled by the scroll wheel. Note that mice/trackpads do not
		* emit the same delta units per "notch" or flick of the scroll wheel/trackpad; that
		* can vary based on intensity and momentum.
		*
		* @type {Number}
		* @default 2
		* @public
		*/
		scrollWheelMultiplier: 2,

		/**
		* The ratio of the maximum distance scrolled by each scroll wheel event to the
		* height/width of the viewport. Setting a value larger than `1` is not advised since,
		* in that scenario, a single scroll event could potentially move more than one
		* viewport's worth of content (depending on the delta received), resulting in skipped
		* content.
		*
		* @type {Number}
		* @default 0.2
		* @public
		*/
		scrollWheelPageMultiplier: 0.2,

		/**
		* The ratio of the distance scrolled per tap of the paging button to the height/width
		* of the viewport. Setting a value larger than `1` is not advised since, in that
		* scenario, a single paging button tap would move more than one viewport's worth of
		* content, resulting in skipped content.
		*
		* @type {Number}
		* @default 0.8
		* @public
		*/
		paginationPageMultiplier: 0.8,

		/**
		* The ratio of continuous-scrolling "delta" units to pixels scrolled. Increase this
		* value to increase the distance scrolled when the pagination buttons are held.
		*
		* @type {Number}
		* @default 8
		* @public
		*/
		paginationScrollMultiplier: 8,

		/**
		* If 'true', paging controls are hidden when content fit in scroller
		* even when spotlightPagingControls is true.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		hideScrollColumnsWhenFit: false
	},

	/**
	* If `true`, measure the size of the scroll columns on initial render.
	* See {@link moon.ScrollStrategy#measureScrollColumns} for details.
	*
	* @private
	*/
	measureScrollColumns: false,

	/**
	* @private
	*/
	handlers: {
		onRequestScrollIntoView : 'requestScrollIntoView',
		onRequestSetupBounds	: 'requestSetupBounds',
		onenter                 : 'enter',
		onleave                 : 'leave',
		onSpotlightFocused      : 'manageSpotlightFocus',
		onSpotlightBlur         : 'manageSpotlightFocus'
	},

	/**
	* @private
	*/
	tools: [
		{kind: ScrollMath, onScrollStart: 'scrollMathStart', onScroll: 'scrollMathScroll', onScrollStop: 'scrollMathStop', onStabilize: 'scrollMathStabilize'}
	],

	/**
	* @private
	*/
	components: [
		{name: 'clientContainer', kind: Control, classes: 'moon-scroller-client-wrapper', components: [
			{name: 'viewport', kind: Control, classes:'moon-scroller-viewport', components: [
				{name: 'client', kind: Control, classes: 'enyo-touch-scroller matrix-scroll-client matrix3dsurface'}
			]}
		]},
		{name: 'vColumn', kind: Control, classes: 'moon-scroller-v-column', components: [
			{name: 'pageUpControl', kind: PagingControl, defaultSpotlightDisappear: 'pageDownControl', defaultSpotlightDown: 'pageDownControl', side: 'top', onPaginateScroll: 'paginateScroll', onPaginate: 'paginate', onSpotlightUp: 'spotPaging'},
			{name: 'vthumbContainer', kind: Control, classes: 'moon-scroller-thumb-container moon-scroller-vthumb-container', components: [
				{name: 'vthumb', kind: ScrollThumb, classes: 'moon-scroller-vthumb hidden', axis: 'v'}
			]},
			{name: 'pageDownControl', kind: PagingControl, defaultSpotlightDisappear: 'pageUpControl', defaultSpotlightUp: 'pageUpControl', side: 'bottom', onPaginateScroll: 'paginateScroll', onPaginate: 'paginate', onSpotlightDown: 'spotPaging'}
		]},
		{name: 'hColumn', kind: Control, classes: 'moon-scroller-h-column', components: [
			{name: 'pageLeftControl', kind: PagingControl, defaultSpotlightDisappear: 'pageRightControl', defaultSpotlightRight: 'pageRightControl', side: 'left', onPaginateScroll: 'paginateScroll', onPaginate: 'paginate', onSpotlightLeft: 'spotPaging'},
			{name: 'hthumbContainer', kind: Control, classes: 'moon-scroller-thumb-container moon-scroller-hthumb-container', components: [
				{name: 'hthumb', kind: ScrollThumb, classes: 'moon-scroller-hthumb hidden', axis: 'h'}
			]},
			{name: 'pageRightControl', kind: PagingControl, defaultSpotlightDisappear: 'pageLeftControl', defaultSpotlightLeft: 'pageLeftControl', side: 'right', onPaginateScroll: 'paginateScroll', onPaginate: 'paginate', onSpotlightRight: 'spotPaging'}
		]},
		{kind: Signals, onSpotlightModeChanged: 'spotlightModeChanged', isChrome: true}
	],

	/**
	* @private
	*/
	create: function() {
		TouchScrollStrategy.prototype.create.apply(this, arguments);
		this.transform = dom.canTransform();
		this.accel = dom.canAccelerate();
		this.container.addClass('enyo-touch-strategy-container');
		this.translation = this.accel ? 'matrix3d' : 'matrix';
		this.showHideScrollColumns(this.spotlightPagingControls);
	},

	/**
	* Calls super-super-inherited (i.e., skips {@link enyo.TouchScrollStrategy}'s) `rendered()`
	* function to avoid thumb flicker at render time. Then shows or hides page controls.
	*
	* @private
	*/
	rendered: function() {
		var measure = this.measureScrollColumns && !ScrollStrategy._scrollColumnsMeasured;

		if (measure) {
			// We temporarily add the v-scroll-enabled class so that
			// we can measure the width of the vertical scroll column
			// after rendering and store it as a static property -- see
			// _measureScrollColumns().
			//
			// The v-scroll-enabled class will automatically be removed
			// after we measure, when we call setupBounds() (which in
			// turn calls enableDisableScrollColumns()).
			this.$.clientContainer.addClass('v-scroll-enabled');
		}

		ScrollStrategy.prototype.rendered.apply(this, arguments);

		if (measure) {
			this._measureScrollColumns();
		}
		this.setupBounds();
		this.spotlightPagingControlsChanged();
	},

	/**
	* Moonstone's data grid list delegate uses scroll column metrics to calculate
	* available space for list controls. These metrics are derived via some LESS
	* calculations, so to avoid brittleness we choose to measure them from the DOM
	* rather than mirror the calculations in JavaScript.
	*
	* Upon request, we do the measurement here (the first time a scroller is rendered)
	* and cache the values in static properties, to avoid re-measuring each time we need
	* the metrics.
	*
	* @private
	*/
	_measureScrollColumns: function() {
		var cs;
		cs = dom.getComputedStyle(this.$.clientContainer.hasNode());
		MoonScrollStrategy.vScrollColumnSize =
			parseInt(cs['padding-left'], 10) +
			parseInt(cs['padding-right'], 10);
		MoonScrollStrategy.hScrollColumnSize = this.$.hColumn.hasNode().offsetHeight;
		MoonScrollStrategy._scrollColumnsMeasured = true;
	},

	/**
	* @private
	*/
	handleResize: function() {
		this.resizing = true;
		this.resetCachedValues();
		this.setupBounds();
		this.resizing = false;
	},

	/**
	* @private
	*/
	setupBounds: function() {
		this.calcBoundaries();
		this.syncScrollMath();
		this.enableDisableScrollColumns();
		this.setThumbSizeRatio();
		this.clampScrollPosition();
	},

	/**
	* Gets the left scroll position within the scroller.
	*
	* @returns {Number} The left scroll position.
	* @public
	*/
	getScrollLeft: function() {
		return this.scrollLeft;
	},

	/**
	* Gets the top scroll position within the scroller.
	*
	* @returns {Number} The top scroll position.
	* @public
	*/
	getScrollTop: function() {
		return this.scrollTop;
	},

	/**
	* Sets the left scroll position within the scroller.
	*
	* @param {Number} left - The desired scroll-left measurement (in pixels).
	* @public
	*/
	setScrollLeft: function(left) {
		var m = this.$.scrollMath,
			p = this.scrollLeft;
		m.setScrollX(-left);
		m.stabilize();
		if (p != -m.x) {
			// We won't get a native scroll event,
			// so need to make one ourselves
			m.doScroll();
		}
	},

	/**
	* Sets the top scroll position within the scroller.
	*
	* @param {Number} top - The desired scroll-top measurement (in pixels).
	* @public
	*/
	setScrollTop: function(top) {
		var m = this.$.scrollMath,
			p = this.scrollTop;
		m.setScrollY(-top);
		m.stabilize();
		if (p != -m.y) {
			// We won't get a native scroll event,
			// so need to make one ourselves
			m.doScroll();
		}
	},

	/**
	* Scrolls to specific x/y positions within the scroll area.
	*
	* @param {Number} x - The horizontal position.
	* @param {Number} y - The vertical position.
	* @param {Boolean} [animate=true] - Whether to animate to the new scroll position.
	* @public
	*/
	scrollTo: function(x, y, animate) {
		this.stop();
		if (this.resizing || animate === false) {
			var b = this.getScrollBounds();
			x = Math.max(Math.min(x, b.maxLeft), 0);
			y = Math.max(Math.min(y, b.maxTop),  0);
			this.effectScroll(x, y);
			this.syncScrollMath();
			this.bubble('onScroll');
		} else {
			this._scrollTo(x, y);
		}
	},

	/**
	* Overrides {@link enyo.TouchScrollStrategy#maxHeightChanged}.
	*
	* @private
	*/
	maxHeightChanged: function() {
		// content should cover scroller at a minimum if there's no max-height.
		this.$.client.applyStyle('min-height', this.maxHeight ? null : '100%');
		this.$.client.applyStyle('max-height', this.maxHeight);
		this.$.clientContainer.addRemoveClass('enyo-scrollee-fit', !this.maxHeight);
	},

	// Event handling

	/**
	* Disables dragging.
	*
	* @private
	*/
	shouldDrag: function(sender, event) { return true; },

	/**
	* On `hold` event, stops scrolling.
	*
	* @private
	*/
	hold: function(sender, event) {
		if (!this.isPageControl(event.originator)) {
			TouchScrollStrategy.prototype.hold.apply(this, arguments);
		}
	},

	/**
	* On `down` event, stops scrolling.
	*
	* @private
	*/
	down: function(sender, event) {
		if (!this.isPageControl(event.originator) && this.isScrolling() && !this.isOverscrolling()) {
			event.preventTap();
			this.stop();
		}
	},

	/**
	* On `mousewheel` event, scrolls a fixed amount.
	*
	* @private
	*/
	mousewheel: function(sender, event) {
		if (this.useMouseWheel) {
			var isScrolling = this.isScrolling();
			this.scrollBounds = this._getScrollBounds();
			this.setupBounds();

			var x = null,
				y = null,
				showVertical = this.showVertical(),
				showHorizontal = this.showHorizontal(),
				dir = null,
				val = null,
				max = null,
				delta = null
			;

			//* If we don't have to scroll, allow mousewheel event to bubble
			if (!showVertical && !showHorizontal) {
				this.scrollBounds = null;
				return false;
			}

			if (showVertical) {
				dir = event.wheelDeltaY >= 0 ? 1 : -1;
				val = Math.abs(event.wheelDeltaY * this.scrollWheelMultiplier);
				max = this.scrollBounds.clientHeight * this.scrollWheelPageMultiplier;
				delta = Math.min(val, max);
				y = (isScrolling ? this.lastScrollToY : this.scrollTop) + -dir * delta;
			}

			if (showHorizontal) {
				var intDirection = 1;
				// Reverse the direction for RTL
				if (this.$.pageLeftControl.rtl) {
					intDirection = -1;
				}
				if (event.wheelDeltaX) {
					dir = (event.wheelDeltaX >= 0 ? 1 : -1) * intDirection;
					val = Math.abs(event.wheelDeltaX * this.scrollWheelMultiplier);
					max = this.scrollBounds.clientWidth * this.scrollWheelPageMultiplier;
					delta = Math.min(val, max);
					x = (isScrolling ? this.lastScrollToX : this.scrollLeft) + -dir * delta;
				} else if (!showVertical) {
					// only use vertical wheel for horizontal scrolling when no vertical bars shown
					dir = (event.wheelDeltaY >= 0 ? 1 : -1) * intDirection;
					val = Math.abs(event.wheelDeltaY * this.scrollWheelMultiplier);
					max = this.scrollBounds.clientWidth * this.scrollWheelPageMultiplier;
					delta = Math.min(val, max);
					x = (isScrolling ? this.lastScrollToX : this.scrollLeft) + -dir * delta;
				}
			}

			this.scrollTo(x, y);
			event.preventDefault();
			this.scrollBounds = null;
			return true;
		}
	},

	/**
	* On `enter` event, sets `this.hovering` to `true` and shows pagination controls.
	*
	* @private
	*/
	enter: function(sender, event) {
		this.hovering = true;
		this.calcBoundaries();
		this.enableDisableScrollColumns();
		this.showHideScrollColumns(true);
		this.updateHoverOnPagingControls(true);
	},

	/**
	* On `leave` event, sets `this.hovering` to `false` and hides pagination controls.
	*
	* @private
	*/
	leave: function(sender, event) {
		this.hovering = false;
		this.showHideScrollColumns(false);
	},

	/**
	* Show / hide pagination controls in response to 5-way focus / blur events.
	*
	* @private
	*/
	manageSpotlightFocus: function(sender, event) {
		if (!Spotlight.getPointerMode()) {
			this.showHideScrollColumns(event.type == 'onSpotlightFocused');
		}
	},

	/**
	* Handles `paginate` events sent from [paging control]{@link moon.PagingControl} buttons.
	*
	* @private
	*/
	paginate: function(sender, event) {
		var sb = this.getScrollBounds(),
			scrollYDelta = sb.clientHeight * this.paginationPageMultiplier,
			scrollXDelta = sb.clientWidth * this.paginationPageMultiplier,
			side = event.originator.side,
			x = this.getScrollLeft(),
			y = this.getScrollTop()
		;

		switch (side) {
		case 'left':
			x -= scrollXDelta;
			break;
		case 'top':
			y -= scrollYDelta;
			break;
		case 'right':
			x += scrollXDelta;
			break;
		case 'bottom':
			y += scrollYDelta;
			break;
		}

		x = Math.max(0, Math.min(x, sb.maxLeft));
		y = Math.max(0, Math.min(y, sb.maxTop));

		this._scrollTo(x, y);

		return true;
	},

	/**
	* Handles `paginateScroll` events sent from [paging control]{@link moon.PagingControl}
	* buttons.
	*
	* @private
	*/
	paginateScroll: function(sender, event) {
		if (!event || !event.scrollDelta) {
			return;
		}

		var delta = event.scrollDelta * this.paginationScrollMultiplier,
			side = event.originator.side,
			val
		;

		switch (side) {
			case 'left':
				val = this.scrollLeft - delta;
				// When we hit the left, bounce and end scrolling
				if (val <= -this.$.scrollMath.leftBoundary) {
					this.setScrollLeft(-this.$.scrollMath.leftBoundary);
					this.$.pageLeftControl.hitBoundary();
				} else {
					this.setScrollLeft(val);
				}
				break;
			case 'top':
				val = this.scrollTop - delta;
				// When we hit the top, bounce and end scrolling
				if (val <= -this.$.scrollMath.topBoundary) {
					this.setScrollTop(-this.$.scrollMath.topBoundary);
					this.$.pageUpControl.hitBoundary();
				} else {
					this.setScrollTop(val);
				}
				break;
			case 'right':
				val = this.scrollLeft + delta;
				// When we hit the right, bounce and end scrolling
				if (val >= -this.$.scrollMath.rightBoundary) {
					this.setScrollLeft(-this.$.scrollMath.rightBoundary);
					this.$.pageRightControl.hitBoundary();
				} else {
					this.setScrollLeft(val);
				}

				break;
			case 'bottom':
				val = this.scrollTop + delta;
				// When we hit the bottom, bounce and end scrolling
				if (val >= -this.$.scrollMath.bottomBoundary) {
					this.setScrollTop(-this.$.scrollMath.bottomBoundary);
					this.$.pageDownControl.hitBoundary();
				} else {
					this.setScrollTop(val);
				}
				break;
		}

		return true;
	},

	/**
	* Scrolls to specific x/y positions within the scroll area.
	*
	* @private
	*/
	_scrollTo: function(x, y) {
		this.lastScrollToX = x;
		this.lastScrollToY = y;
		this.$.scrollMath.scrollTo(x, y);
	},

	/**
	* Returns `true` if passed-in [control]{@link enyo.Control} is one of four page controls.
	*
	* @private
	*/
	isPageControl: function(control) {
		return (
			control === this.$.pageUpControl ||
			control === this.$.pageDownControl ||
			control === this.$.pageLeftControl ||
			control === this.$.pageRightControl
		);
	},

	/**
	* @private
	*/
	calcBoundaries: function() {
		var s = this.$.scrollMath || this,
			b = this._getScrollBounds()
		;
		s.bottomBoundary = -1 * b.maxTop;
		s.rightBoundary = -1 * b.maxLeft;

		this.updatePagingControlState();
	},

	/**
	* @private
	*/
	effectScroll: function(x, y) {
		this.scrollLeft = (x !== null && !isNaN(x))? x: (this.scrollLeft || 0);
		this.scrollTop  = (y !== null && !isNaN(y))? y: (this.scrollTop  || 0);
		dom.transformValue(this.$.client, this.translation, this.generateMatrix());

		// since effectScroll will happen frequently but paging control status changes
		// infrequently, fire it immediately and then throttle the next update
		if (!this._updatePagingJob) {
			this.updatePagingControlState();
		} else {
			clearTimeout(this._updatePagingJob);
		}

		this._updatePagingJob = setTimeout(this.bindSafely(function () {
			this.updatePagingControlState();
			this._updatePagingJob = null;
		}), 32);
	},

	/**
	* @private
	*/
	generateMatrix: function() {
		var x = -1 * this.scrollLeft,
			y = -1 * this.scrollTop
		;

		/// Reverse the direction for RTL
		if (this.$.pageLeftControl.rtl) {
			x*= -1;
		}

		return (this.accel)
			?   '1,         0,     0,  0, '
			+   '0,         1,     0,  0, '
			+   '0,         0,     1,  0, '
			+    x + ', ' + y + ', 0,  1'

			:   '1, 0, 0, 1, ' + x + ', ' + y
		;
	},

	/**
	* @private
	*/
	effectScrollStop: function() { },

	/**
	* @private
	*/
	effectOverscroll: function() { },

	/**
	* @private
	*/
	spotlightPagingControlsChanged: function() {
		this.updateHoverOnPagingControls(!this.spotlightPagingControls);
		this.showHideScrollColumns(this.spotlightPagingControls);
		if (this.generated) {
			this.setupBounds();
		}
	},

	/**
	* @private
	*/
	updateHoverOnPagingControls: function(hover) {
		this.$.pageLeftControl.addRemoveClass('hover', hover);
		this.$.pageRightControl.addRemoveClass('hover', hover);
		this.$.pageUpControl.addRemoveClass('hover', hover);
		this.$.pageDownControl.addRemoveClass('hover', hover);
	},

	/**
	* @private
	*/
	updatePagingControlState: function () {
		// Update disabled state of paging controls based on bounds
		var m = this.$.scrollMath,
			b = this._getScrollBounds(),
			canVScroll = b.height > b.clientHeight,
			canHScroll = b.width > b.clientWidth,
			disablePageUp = (b.top <= 0) || !canVScroll,
			disablePageDown = (b.top >= -1 * m.bottomBoundary) || !canVScroll,
			disablePageLeft = (b.left <= 0) || !canHScroll,
			disablePageRight = (b.left >= -1 * m.rightBoundary) || !canHScroll;

		// Enable all of the paging controls (which are not already enabled) first, so that we
		// are not beholden to any ordering issues that can cause erratic Spotlight behavior.
		if (!disablePageUp) this.$.pageUpControl.set('disabled', false);
		if (!disablePageDown) this.$.pageDownControl.set('disabled', false);
		if (!disablePageLeft) this.$.pageLeftControl.set('disabled', false);
		if (!disablePageRight) this.$.pageRightControl.set('disabled', false);

		if (disablePageUp) this.$.pageUpControl.set('disabled', true);
		if (disablePageDown) this.$.pageDownControl.set('disabled', true);
		if (disablePageLeft) this.$.pageLeftControl.set('disabled', true);
		if (disablePageRight) this.$.pageRightControl.set('disabled', true);
	},

	/**
	* Decorate spotlight events from paging controls so user can 5-way out of container
	*
	* @private
	*/
	spotPaging: function (sender, event) {
		event.requestLeaveContainer = true;
	},

	/**
	* Because the thumb columns are a fixed size that impacts the scroll bounds, we capture
	* the difference for use in thumb rendering math.
	*
	* @private
	*/
	setThumbSizeRatio: function() {
		var scrollBounds = this.getScrollBounds();
		this.$.vthumb.setSizeRatio(this.getVerticalThumbBounds().height/scrollBounds.clientHeight);
		this.$.hthumb.setSizeRatio(this.getHorizontalThumbBounds().width/scrollBounds.clientWidth);
	},

	/**
	* Responds to child components' requests to be scrolled into view.
	*
	* @private
	*/
	requestScrollIntoView: function(sender, event) {
		var originator, showVertical, showHorizontal,
			bubble = false;
		if (!Spotlight.getPointerMode() || event.scrollInPointerMode === true) {
			originator = event.originator;
			showVertical = this.showVertical();
			showHorizontal = this.showHorizontal();
			this.scrollBounds = this._getScrollBounds();
			this.setupBounds();
			this.scrollBounds = null;
			if ((showVertical || showHorizontal) && (originator.showing)) {
				this.animateToControl(originator, event.scrollFullPage, event.scrollInPointerMode || false);
				if ((showVertical && this.$.scrollMath.bottomBoundary) || (showHorizontal && this.$.scrollMath.rightBoundary)) {
					this.alertThumbs();
				}
			} else {
				// Scrollers that don't need to scroll bubble their onRequestScrollIntoView,
				// to allow items in nested scrollers to be scrolled
				bubble = true;
			}
		}
		return !bubble;
	},

	/**
	* Responds to child components' requests to update scroll bounds without
	* scrolling into view.
	*
	* @private
	*/
	requestSetupBounds: function(sender, event) {
		if (this.generated) {
			this.scrollBounds = this._getScrollBounds();
			this.setupBounds();
			this.scrollBounds = null;
			if ((this.showVertical() && this.$.scrollMath.bottomBoundary) || (this.showHorizontal() && this.$.scrollMath.rightBoundary)) {
				this.alertThumbs();
			}
		}
		return true;
	},

	/**
	* @private
	*/
	spotlightModeChanged: function(sender, event) {
		var activatePageControls = this.shouldShowPageControls();
		this.showHideScrollColumns(activatePageControls);
		this.updateHoverOnPagingControls(activatePageControls);
	},

	/**
	* Enables or disables scroll columns.
	*
	* @private
	*/
	enableDisableScrollColumns: function() {
		this.enableDisableVerticalScrollControls(this.showVertical());
		this.enableDisableHorizontalScrollControls(this.showHorizontal());
	},

	/**
	* Enables or disables vertical scroll column.
	*
	* @private
	*/
	enableDisableVerticalScrollControls: function(enabled) {
		this.$.clientContainer.addRemoveClass('v-scroll-enabled', enabled);
		this.$.vColumn.addRemoveClass('v-scroll-enabled', enabled);
		this.$.hColumn.addRemoveClass('v-scroll-enabled', enabled);
		this.$.pageUpControl.spotlight = enabled && this.spotlightPagingControls;
		this.$.pageDownControl.spotlight = enabled && this.spotlightPagingControls;
	},

	/**
	* Enables or disables horizontal scroll column.
	*
	* @private
	*/
	enableDisableHorizontalScrollControls: function(enabled) {
		this.$.clientContainer.addRemoveClass('h-scroll-enabled', enabled);
		this.$.vColumn.addRemoveClass('h-scroll-enabled', enabled);
		this.$.hColumn.addRemoveClass('h-scroll-enabled', enabled);
		this.$.pageLeftControl.spotlight = enabled && this.spotlightPagingControls;
		this.$.pageRightControl.spotlight = enabled && this.spotlightPagingControls;
	},

	/**
	* Shows or hides scroll columns.
	*
	* @private
	*/
	showHideScrollColumns: function(show) {
		this.showHideVerticalScrollColumns(show);
		this.showHideHorizontalScrollColumns(show);
	},

	/**
	* Shows or hides vertical scroll columns.
	*
	* @private
	*/
	showHideVerticalScrollColumns: function(show) {
		this.$.vColumn.addRemoveClass('visible', show || this.spotlightPagingControls);
	},

	/**
	* Shows or hides horizontal scroll columns.
	*
	* @private
	*/
	showHideHorizontalScrollColumns: function(show) {
		this.$.hColumn.addRemoveClass('visible', show || this.spotlightPagingControls);
	},

	/**
	* Returns boolean indicating whether page controls should be shown at all for this scroller.
	*
	* @private
	*/
	shouldShowPageControls: function() {
		return (Spotlight.getPointerMode() && this.hovering && !this.spotlightPagingControls);
	},

	/**
	* Determines whether we should be showing the vertical scroll column.
	*
	* @private
	*/
	showVertical: function() {
		return (this.getVertical() == 'scroll' ||
				(this.getVertical() !== 'hidden' &&
				((-1 * this.$.scrollMath.bottomBoundary > 0) ||
				(this.spotlightPagingControls && !this.hideScrollColumnsWhenFit))));
	},

	/**
	* Determines whether we should be showing the horizontal scroll column.
	*
	* @private
	*/
	showHorizontal: function() {
		return (this.getHorizontal() == 'scroll' ||
				(this.getHorizontal() !== 'hidden' &&
				((-1 * this.$.scrollMath.rightBoundary > 0) ||
				(this.spotlightPagingControls && !this.hideScrollColumnsWhenFit))));
	},

	/**
	* Update bounds after change hideScrollColumnsWhenFit option changes.
	*
	* @private
	*/
	hideScrollColumnsWhenFitChanged: function(old) {
		this.requestSetupBounds();
	},

	/**
	* @private
	*/
	_getScrollBounds: function() {
		if (this.scrollBounds) {
			return this.scrollBounds;
		}
		var containerBounds = this.getContainerBounds(),
			s = this.getScrollSize(),
			b = {
				top: this.getScrollTop(),
				left: this.getScrollLeft(),
				clientHeight: containerBounds.height,
				clientWidth: containerBounds.width,
				height: s.height,
				width: s.width
			};

		b.maxLeft = Math.max(0, b.width - b.clientWidth);
		b.maxTop = Math.max(0, b.height - b.clientHeight);

		util.mixin(b, this.getOverScrollBounds());

		return b;
	},

	/**
	* @private
	*/
	getContainerBounds: function() {
		var containerBounds = this.$.clientContainer.getBounds();
		if(containerBounds) {
			var paddingExtents = dom.calcPaddingExtents(this.$.clientContainer.hasNode());
			containerBounds.width  -= (paddingExtents.left + paddingExtents.right);
			containerBounds.height -= (paddingExtents.top  + paddingExtents.bottom);
		}
		return containerBounds;
	},

	/**
	* @private
	*/
	getVerticalThumbBounds: function() {
		return this.vBounds ? this.vBounds : this.$.vthumbContainer.getBounds();
	},

	/**
	* @private
	*/
	getHorizontalThumbBounds: function() {
		return this.hBounds ? this.hBounds : this.$.hthumbContainer.getBounds();
	},

	/**
	* @private
	*/
	resetCachedValues: function() {
		this.vBounds = null;
		this.hBounds = null;
		this.scrollBounds = null;
	},
	/**
	* Scrolls until the passed-in [control]{@link enyo.Control} is in view.
	* If `scrollFullPage` is set, scrolls until the edge of `control` is aligned
	* with the edge of the visible scroll area.
	*
	* @param {Control} control - The [control]{@link enyo.Control} to scroll into view.
	* @param {Boolean} [scrollFullPage] - If `true`, scrolls until the edge of `control` is
	*	aligned with the edge of the visible scroll area. If `undefined`, the value in the
	*	container's `scrollFullPage` property is used.
	* @param {Boolean} [animate=true] - Set to `false` to prevent animation.
	* @private
	*/
	animateToControl: function(control, scrollFullPage, animate) {
		var controlBounds  = control.getAbsoluteBounds(),
			absoluteBounds = this.$.viewport.getAbsoluteBounds(),
			scrollBounds   = this._getScrollBounds(),
			offsetTop,
			offsetLeft,
			offsetHeight,
			offsetWidth,
			xDir,
			yDir,
			x,
			y
		;

		// Make absolute controlBounds relative to scroll position
		controlBounds.top += scrollBounds.top;
		if (this.rtl) {
			controlBounds.right += scrollBounds.left;
		} else {
			controlBounds.left += scrollBounds.left;
		}

		offsetTop      = controlBounds.top - absoluteBounds.top;
		offsetLeft     = (this.rtl ? controlBounds.right : controlBounds.left) - (this.rtl ? absoluteBounds.right : absoluteBounds.left);
		offsetHeight   = controlBounds.height;
		offsetWidth    = controlBounds.width;

		// Allow local scrollFullPage param to override scroller property
		scrollFullPage = (typeof scrollFullPage === 'undefined') ? this.container.getScrollFullPage() : scrollFullPage;

		// 0: currently visible, 1: right of viewport, -1: left of viewport
		xDir = (offsetLeft >= scrollBounds.left && offsetLeft + offsetWidth <= scrollBounds.left + scrollBounds.clientWidth)
			? 0
			: offsetLeft - scrollBounds.left > 0
				? 1
				: offsetLeft - scrollBounds.left < 0
					? -1
					: 0;

		// 0: currently visible, 1: below viewport, -1: above viewport
		yDir = (offsetTop >= scrollBounds.top && offsetTop + offsetHeight <= scrollBounds.top + scrollBounds.clientHeight)
			? 0
			: offsetTop - scrollBounds.top > 0
				? 1
				: offsetTop - scrollBounds.top < 0
					? -1
					: 0;

		scrollBounds.xDir = xDir;
		scrollBounds.yDir = yDir;

		switch (xDir) {
			case 0:
				x = this.getScrollLeft();
				break;
			case 1:
				// If control requested to be scrolled all the way to the viewport's left, or if the control
				// is larger than the viewport, scroll to the control's left edge. Otherwise, scroll just
				// far enough to get the control into view.
				if (scrollFullPage || offsetWidth > scrollBounds.clientWidth) {
					x = offsetLeft;
				} else {
					x = offsetLeft - scrollBounds.clientWidth + offsetWidth;
					// If nodeStyle exists, add the _marginRight_ to the scroll value.
					x += dom.getComputedBoxValue(control.hasNode(), 'margin', 'right');
				}
				break;
			case -1:
				// If control requested to be scrolled all the way to the viewport's right, or if the control
				// is larger than the viewport, scroll to the control's right edge. Otherwise, scroll just
				// far enough to get the control into view.
				if (scrollFullPage || offsetWidth > scrollBounds.clientWidth) {
					x = offsetLeft - scrollBounds.clientWidth + offsetWidth;
				} else {
					x = offsetLeft;
					// If nodeStyle exists, subtract the _marginLeft_ to the scroll value.
					x -= dom.getComputedBoxValue(control.hasNode(), 'margin', 'left');
				}
				break;
		}

		switch (yDir) {
			case 0:
				y = this.getScrollTop();
				break;
			case 1:
				// If control requested to be scrolled all the way to the viewport's top, or if the control
				// is larger than the viewport, scroll to the control's top edge. Otherwise, scroll just
				// far enough to get the control into view.
				if (scrollFullPage || offsetHeight > scrollBounds.clientHeight) {
					y = offsetTop;
					// If nodeStyle exists, add the _marginBottom_ to the scroll value.
					y -= dom.getComputedBoxValue(control.hasNode(), 'margin', 'top');
				} else {
					y = offsetTop - scrollBounds.clientHeight + offsetHeight;
					// If nodeStyle exists, add the _marginBottom_ to the scroll value.
					y += dom.getComputedBoxValue(control.hasNode(), 'margin', 'bottom');
				}
				break;
			case -1:
				// If control requested to be scrolled all the way to the viewport's bottom, or if the control
				// is larger than the viewport, scroll to the control's bottom edge. Otherwise, scroll just
				// far enough to get the control into view.
				if (scrollFullPage || offsetHeight > scrollBounds.clientHeight) {
					y = offsetTop - scrollBounds.clientHeight + offsetHeight;
				} else {
					y = offsetTop;
					// If nodeStyle exists, subtract the _marginTop_ to the scroll value.
					y -= dom.getComputedBoxValue(control.hasNode(), 'margin', 'bottom');
				}
				break;
		}

		// If x or y changed, scroll to new position
		if (x !== this.getScrollLeft() || y !== this.getScrollTop()) {
			this.scrollTo(x, y, animate);
		}
	},

	/**
	* @private
	*/
	clampScrollPosition: function() {
		var x = this.clampX(),
			y = this.clampY();

		if (x !== this.getScrollLeft() || y !== this.getScrollTop()) {
			this.scrollTo(x, y);
		}
	},

	/**
	* @private
	*/
	clampX: function() {
		var m = this.$.scrollMath;
		return Math.min(Math.max(this.getScrollLeft(), -1*m.leftBoundary), -1*m.rightBoundary);
	},

	/**
	* @private
	*/
	clampY: function() {
		var m = this.$.scrollMath;
		return Math.min(Math.max(this.getScrollTop(), -1*m.topBoundary), -1*m.bottomBoundary);
	}
});

// FIXME: Webkit will change the scrollTop value of the scroller viewport to keep the current
// tab-focused control onscreen if we allow it to handle tabs itself, so we defeat native
// TAB focus movement here.
dispatcher.features.push(function(e) {
	if ((e.type == 'keydown') && (e.keyCode == 9)) {
		e.preventDefault();
	}
});

MoonScrollStrategy.Touch = kind({
	name: 'moon.TouchScrollStrategy',
	kind: TouchScrollStrategy,
	create: function () {
		TouchScrollStrategy.prototype.create.apply(this, arguments);
		if (!config.accelerate) {
			this.transform = false;
			this.accel = false;

			if(this.overscroll) {
				//so we can adjust top/left if browser can't handle translations
				this.$.client.applyStyle('position', 'relative');
			}
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/ScrollMath":63,"../../../enyo/lib/ScrollStrategy":64,"../../../enyo/lib/Signals":68,"../../../enyo/lib/TouchScrollStrategy":78,"../../../enyo/lib/dispatcher":86,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275,"../PagingControl":168,"../ScrollThumb":179,"../options":204}],124:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Group = require('../../../enyo/lib/Group');

var
	ilib = require('../../../enyo-ilib');

var
	SimplePicker = require('../SimplePicker');

/**
* Fires when a date is selected. No additional data is passed in this event.
*
* @event moon.CalendarDate#onDateSelected
* @type {Object}
* @public
*/

/**
* Fires when [value]{@link moon.Calendar#value} changes.
*
* @event moon.Calendar#onChange
* @type {Object}
* @property {Date} value - A standard JavaScript {@glossary Date} object
* @public
*/

/**
* {@link moon.CalendarDate} implements a control representing a single day, used by
* the monthly calendar kind {@link moon.Calendar}.
*
* @class moon.CalendarDate
* @extends enyo.Control
* @ui
* @public
*/
var CalendarDate = kind(
	/** @lends moon.CalendarDate.prototype */ {

	/**
	* @private
	*/
	name: 'moon.CalendarDate',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	* @lends moon.CalendarDate.prototype
	*/
	published: {

		/**
		* {@glossary Date} object
		*
		* @type {Date}
		* @default null
		* @public
		*/
		value: null,

		/**
		* Whether this date's coloring should be different from normal.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		color: false,

		/**
		* Used when the CalendarDate is part of an {@link enyo.Group}. A value of
		* `true` indicates that this is the active button of the group; false,
		* that it is not the active button.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		active: false
	},

	/**
	* @private
	*/
	events: {
		onDateSelected:''
	},

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	small: true,

	/**
	* @private
	*/
	marquee: false,

	/**
	* @private
	*/
	minWidth: false,

	/**
	* @private
	*/
	classes: 'moon-calendar-picker-date enyo-unselectable',

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		if (ilib && arguments.length > 0 && typeof(arguments[0].formatter) !== 'undefined') {
			// re-use this formatter to avoid creating a new one for each calendar date instance
			this._dateFmt = arguments[0].formatter;
		}
	},

	/**
	* @private
	*/
	colorChanged: function () {
		this.addRemoveClass('moon-calendar-picker-date-shadow', this.color);
	},

	/**
	* @private
	*/
	valueChanged: function () {
		if (this.value) {
			if (ilib) {
				this.localeValue = ilib.Date.newInstance({
					unixtime: this.value.getTime(),
					timezone: 'local'
				});
				this.setContent(this._dateFmt.format(this.localeValue));
			} else {
				this.setContent(this.value.getDate());
			}
		}
	},

	/**
	* Only called when [iLib]{@glossary ilib} is available. Allows the same
	* formatter to be shared across all calendar date instances, which is more
	* efficient than having each one make its own formatter.
	* @private
	*/
	setDateFormatter: function (formatter) {
		// need to recreate the local value because
		// the new locale may have a different time
		// zone or calendar, so the date components
		// (year/month/day) may be different than before
		this.localeValue = ilib.Date.newInstance({
			unixtime: this.value.getTime(),
			timezone: 'local'
		});

		// reformat the number with the new timezone/calendar/locale
		this._dateFmt = formatter;
		this.setContent(this._dateFmt.format(this.localeValue));
	},

	/**
	* @private
	* @fires moon.CalendarDate#onDateSelected
	*/
	tap: function () {
		this.doDateSelected();
	}
});

/**
* {@link moon.SimpleMonthPicker} implements a control representing the month picker,
* used by the monthly calendar kind {@link moon.Calendar}, which can represent
* internationalized months when [iLib]{@glossary iLib} is available.
*
* @ui
* @class moon.SimpleMonthPicker
* @extends moon.SimplePicker
* @public
*/
var SimpleMonthPicker = kind(
	/** @lends moon.SimpleMonthPicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.SimpleMonthPicker',

	/**
	* @private
	*/
	kind: SimplePicker,

	/**
	* @private
	*/
	published: /** @lends moon.SimpleMonthPicker.prototype */ {

		/**
		* How many months to show. A few international calendars
		* have more than 12 months in some years, but by default,
		* we will use the Gregorian calendar with 12 months.
		*
		* @type {Number}
		* @default 12
		* @public
		*/
		months: 12
	},

	/**
	* Shows/hides previous/next buttons based on current index.
	*
	* @private
	* @override
	*/
	showHideNavButtons: function() {
		var index = this.getSelectedIndex(),
			maxIndex = Math.max(this.months, this.getClientControls().filter(function(val, idx, arr) { return val.content; }).length) - 1;
		var prevButton = this.rtl ? this.$.buttonRight : this.$.buttonLeft;
		var nextButton = this.rtl ? this.$.buttonLeft : this.$.buttonRight;

		if (this.disabled) {
			this.hideNavButton(prevButton);
			this.hideNavButton(nextButton);
		// Always show buttons if _this.wrap_ is _true_
		} else if (this.wrap) {
			this.showNavButton(prevButton);
			this.showNavButton(nextButton);
		// If we have one or less options, always show no buttons
		} else if (maxIndex <= 0) {
			this.hideNavButton(prevButton);
			this.hideNavButton(nextButton);
		// If we are on the first option, hide the left button
		} else if (index <= 0) {
			this.showNavButton(nextButton);
			this.hideNavButton(prevButton);
		// If we are on the last item, hide the right button
		} else if (index >= maxIndex) {
			this.showNavButton(prevButton);
			this.hideNavButton(nextButton);
		// Otherwise show both buttons
		} else {
			this.showNavButton(prevButton);
			this.showNavButton(nextButton);
		}
	},

	/**
	* Cycles the selected item to the one after the currently selected item.
	* Make sure not to cycle past the last month in the picker for this
	* calendar.
	*
	* @public
	* @override
	*/
	next: function(sender, e) {
		if (!this.disabled) {
			var idx = this.selectedIndex + 1;
			var max = Math.min(this.getClientControls().length, this.months);
			if (idx > max - 1) {
				idx = this.wrap ? 0 : max - 1;
			}
			if (!this.wrap && idx === max - 1
				&& e && e.cancelHoldPulse) {
				e.cancelHoldPulse();
			}
			this.setSelectedIndex(idx);
		}
	}

});

/**
* {@link moon.Calendar} is a control that displays a monthly calendar, with the
* month name at the top and a grid of days, grouped into rows by week, below.
*
* The header buttons are used to navigate to the desired month; the desired day
* is selected by tapping on it.
*
* ```
* {kind: 'moon.Calendar', content: 'Calendar Title'}
* ```
*
* @class moon.Calendar
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Calendar.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Calendar',


	/**
	* @private
	* @lends moon.Calendar.prototype
	*/
	published: {

		/**
		*
		* Current locale used for formatting. May be set after the control is
		* created, in which case the control will be updated to reflect the
		* new value.  Only valid if [iLib]{@glossary ilib} is loaded.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		locale: '',

		/**
		*
		* The current {@glossary Date} object.
		*
		* @type {Date}
		* @default null
		* @public
		*/
		value: null,

		/**
		*
		* The first day of the week in the current locale.
		* Valid values are `0` (i.e., Sunday) through `6` (Saturday). Default is `0`.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		firstDayOfWeek: 0,

		/**
		*
		* Maximum number of weeks to display on a screen.
		* If this value is greater than `9`, dates two months in the future may be
		* shown. Unexpected input may result in errors.
		*
		* @type {Number}
		* @default 6
		* @public
		*/
		maxWeeks: 6,

		/**
		*
		* Start value for range of years displayed in year picker.
		*
		* @type {Number}
		* @default 1900
		* @public
		*/
		startYear: 1900,

		/**
		*
		* End value for range of years displayed in year picker.
		*
		* @type {Number}
		* @default 2200
		* @public
		*/
		endYear: 2200,

		/**
		* When `true`, the days will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercaseDays: true,

		/**
		*
		* CSS classes used to decorate day labels (e.g., `'moon-divider'`).
		*
		* @type {String}
		* @default ''
		* @public
		*/
		dayOfWeekClasses: '',

		/**
		*
		* Length of abbreviation to use for day of the week.
		* Accepted values are `'short'`, `'medium'`, `'long'`, and `'full'`.
		* Or you can use the first char of it because ilib stores its first char only.
		* Only valid if [iLib]{@glossary ilib} is loaded.
		*
		* @type {String}
		* @default 'short' || 's'
		* @public
		*/
		dayOfWeekLength: 's'	//short
	},

	/**
	* @private
	*/
	events: {
		/**
			Fires when the date changes.

			`inEvent.value` contains a standard JavaScript Date object representing
			the current date.
		*/
		onChange: ''
	},

	/**
	* @private
	*/
	months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],

	/**
	* @private
	*/
	days: ['S','M','T','W','T','F','S'],

	/**
	* @private
	*/
	classes: 'moon-calendar-picker',

	/**
	* @private
	*/
	components: [
		{name: 'monthPicker', kind: SimpleMonthPicker, classes: 'moon-calendar-picker-month', onChange: 'selectMonthPicker'},
		{name: 'yearPicker', kind: SimplePicker, classes: 'moon-calendar-picker-year', onChange: 'selectYearPicker'},
		{name: 'days', classes: 'moon-calendar-picker-days moon-neutral', kind: Group},
		{name: 'dates', kind: Group}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.initCalendar();
		this.set('value', this.value || new Date(), true);
		if (ilib) {
			this.setLocale(new ilib.LocaleInfo().locale);
		}
	},

	/**
	* Creates picker contents with default `(en-US)` values.
	*
	* @private
	*/
	initCalendar: function () {
		var i;
		var startYear = this.getStartYear(),
			endYear = this.getEndYear(),
			numberOfMonths = 12; // in the Gregorian calendar

		if (ilib) {
			this.cal = ilib.Cal.newInstance();
			this.localeValue = ilib.Date.newInstance({timezone: 'local'});
			this._dateFmt = new ilib.DateFmt({
				type: 'date',	// only format the date component, not the time
				date: 'd',		// 'd' is the date of month
				useNative: false,
				length: 'short',	//it uses 2 chars to abbreviate properly
				timezone: 'local'
			});
			// Create 13 months components in the month picker to take care of
			// the Hebrew calendar, but only show the last month in those Hebrew
			// years that actually have 13 months
			numberOfMonths = 13;
		}

		//Populates SimplePicker with years.
		for (i = startYear; i <= endYear; i++) {
			this.$.yearPicker.createComponent({content: i, classes: 'picker-content'});
		}
		//Populates SimplePicker with months of the year, from JAN to DEC.
		var months = this.months;
		for (i = 0; i < numberOfMonths; i++) {
			this.$.monthPicker.createComponent({content: months[i], classes: 'picker-content'});
		}
		//Initializes days of the week. SUN is the first and SAT is the last.
		for(i = 0; i < 7; i++) {
			this.$.days.createComponent({
				content: this.days[i],
				classes: 'moon-calendar-picker-day-base ' + (this.dayOfWeekClasses || 'moon-calendar-picker-day'),
				disabled: true
			});
		}
		//Populates Calendar with CalendarDate objects.
		if (!this.$.dates.controls.length) {
			for (i = 1; i <= this.maxWeeks * 7; i++) {
				this.$.dates.createComponent({
					kind: CalendarDate,
					onDateSelected:'selectDate',
					formatter: this._dateFmt // undefined if ilib is not available
				}, {owner:this});
			}
		}
	},

	/**
	* according to the value, adjust the year bounds and update the year picker
	*
	* @private
	*/
	adjustYearBounds: function(){
		var i, yearDiff,
			count = this.$.yearPicker.getClientControls().length,
			year = this.value instanceof Date ? this.value.getFullYear() : this.startYear;

		this.startYear = year < this.startYear ? year : this.startYear;
		this.endYear = year > this.endYear ? year : this.endYear;
		yearDiff = this.endYear - this.startYear;
		if(count <= yearDiff){
			for(i = count; i <= yearDiff; i++) {
				this.$.yearPicker.createComponent({classes: 'picker-content'});
			}
			this.updateYearPicker();
			this.$.yearPicker.render();
		}
	},

	/**
	 * When [iLib]{@glossary ilib} is supported, calculates the start year in
	 * the current calendar. Otherwise, returns the value of the
	 * [startYear]{@link moon.Calendar#startYear} published property.
	 *
	 * @private
	 */
	getStartYear: function() {
		if (ilib) {
			var greg = ilib.Date.newInstance({
				type: "gregorian",
				year: this.startYear,
				month: 1,
				day: 1,
				timezone: 'local'
			});
			var localCalendarDate = ilib.Date.newInstance({
				julianday: greg.getJulianDay(),
				timezone: "local"
			});
			return localCalendarDate.getYears();
		} else {
			return this.startYear;
		}
	},

	/**
	 * When [iLib]{@glossary ilib} is supported, calculates the end year in
	 * the current calendar. Otherwise, returns the value of the
	 * [endYear]{@link moon.Calendar#endYear} property.
	 *
	 * @private
	 */
	getEndYear: function() {
		if (ilib) {
			var greg = ilib.Date.newInstance({
				type: "gregorian",
				year: this.endYear,
				month: 1,
				day: 1,
				timezone: 'local'
			});
			var localCalendarDate = ilib.Date.newInstance({
				julianday: greg.getJulianDay(),
				timezone: "local"
			});
			return localCalendarDate.getYears();
		} else {
			return this.endYear;
		}
	},

	/**
	* When [iLib]{@glossary ilib} is supported, `this.locale` is taken from the
	* value passed in at Calendar instantiation time, or retrieved from the
	* default locale `(en-US)`.
	*
	* @fires moon.Calendar#onChange
	* @private
	*/
	localeChanged: function () {
		if (ilib) {
			ilib.setLocale(this.locale);
			// the new locale may use a different calendar,
			// so redo the local date in that new calendar
			// The this.value does not change, but the local date does.
			this.localeValue = ilib.Date.newInstance({
				unixtime: this.value.getTime(),
				timezone: 'local'
			});

			this._monthFmt = undefined; // force it to recreate the formatter
			this._dayFmt = undefined;
			this.calendarChanged();
			this.firstDayOfWeek = -1; // Force change handler when locale changes
			this.setFirstDayOfWeek(new ilib.LocaleInfo(this.locale).getFirstDayOfWeek());

			// notify each date instance as well
			var dates = this.$.dates.getControls();
			this._dateFmt = new ilib.DateFmt({
				type: 'date',	// only format the date component, not the time
				date: 'd',		// 'd' is the date of month
				useNative: false,
				length: 's',	//"short" uses 2 chars to abbreviate properly
				timezone: 'local'
			});
			for (var i = 0; i < this.$.dates.controls.length; i++) {
				dates[i].setDateFormatter(this._dateFmt);
			}
		}
		this.updateYearPicker();
		this.updateMonthPicker();
		this.setDayOfWeekLength(this._dateFmt.length);
		this.doChange({value: this.value});
	},

	/**
	* Sometimes the first day of week changes because of a locale change.
	* When this happens, we destroy the day label and reconstruct it.
	* We create a new `ilib.Date` instance with the time of the given day, and
	* get a Gregorian date instance that represents the first day of the week.
	*
	* @private
	*/
	firstDayOfWeekChanged: function () {
		this.updateDays();
		this.updateDates();
	},

	/**
	* We were previously relying on a non-guaranteed ordering of calls (change handlers
	* on bindings, transformation of binding values) to perform validation on the
	* Date value before updating a control with this value. Though this ordering was
	* non-guaranteed, it has since changed and can possibly affect any code that is
	* improperly relying on the specific ordering of these calls. We instead handle the
	* validation in the generic setter and facade this via the `setValue()` method.
	*
	* @private
	*/
	setValue: function (inValue) {
		this.set('value', inValue);
	},

	/**
	* @method
	* @private
	*/
	set: function (path, value) {
		if (path == 'value') {
			if(isNaN(value) || value === null) {
				value = new Date();
			}
		}
		Control.prototype.set.apply(this, arguments);
	},

	/**
	* @fires moon.Calendar#onChange
	* @private
	*/
	valueChanged: function (inOld) {
		var month, year;
		if (ilib) {
			this.localeValue = ilib.Date.newInstance({
				unixtime: this.value.getTime(),
				timezone: 'local'
			});
			month = this.localeValue.getMonths() - 1;
			year = this.localeValue.getYears();
		} else {
			month = this.value.getMonth();
			year = this.value.getFullYear();
		}
		this.adjustYearBounds();
		if (!this.generated || this.$.monthPicker.getSelectedIndex() != month) {
			this.$.monthPicker.setSelectedIndex(month);
		}
		if (!this.generated || this.$.yearPicker.getSelected().getContent() != year) {
			this.$.yearPicker.setSelectedIndex(year - this.getStartYear());
		}
		this.updateDates();
		if (this.value) {
			this.doChange({value: this.value});
		}
	},

	/**
	* Updates year picker.
	*
	* @private
	*/
	updateYearPicker: function () {
		var i, l,
			yearPickerControls = this.$.yearPicker.getClientControls(),
			startYear = this.getStartYear(),
			endYear = this.getEndYear();
		for (i = 0, l = endYear - startYear; i <= l; i++) {
			yearPickerControls[i].setContent(i + startYear);
		}
		var year = (ilib) ? this.localeValue.getYears() : this.value.getFullYear();
		this.$.yearPicker.setSelectedIndex(year - this.getStartYear());
	},

	/**
	* Updates month name displayed in month picker.
	*
	* @private
	*/
	updateMonthPicker: function () {
		var month;
		if (ilib) {
			if (typeof(this._monthFmt) === 'undefined') {
				this._monthFmt = new ilib.DateFmt({
					locale: this.locale,
					type: 'date',	//only format the date component, not the time
					date: 'm',		//'m' is the month of year
					useNative: false,
					length: 'long'
				});
			}
			var numberOfMonths = this.cal.getNumMonths(this.localeValue.getYears());
			var monthPickerControls = this.$.monthPicker.getClientControls();

			// show the 13th month for those calendars that use it, and only in those
			// years that use it
			this.$.monthPicker.setMonths(numberOfMonths);

			// this depends on the year because some calendars have 12 or 13 months,
			// depending on which year it is
			var monthNames = this._monthFmt.getMonthsOfYear({
				year: this.localeValue.getYears(),
				length: 'long'
			});
			for (var i = 0; i < monthNames.length - 1; i++) {
				monthPickerControls[i].setContent(monthNames[i+1]);
			}
			month = this.localeValue.getMonths() - 1;
		} else {
			month = this.value.getMonth();
		}
		this.$.monthPicker.setSelectedIndex(month);
	},

	/**
	* Updates days of the week from first day to last day.
	* If [iLib]{@glossary ilib} is loaded, a `'0'` value for `this.firstDayOfweek`
	* means Sunday and `'1'` means Monday.
	*
	* @private
	*/
	updateDays: function () {
		if (typeof(this._dayFmt) === 'undefined' && ilib) {
			this._dayFmt = new ilib.DateFmt({
				type: 'date',	//only format the date component, not the time
				date: 'w',		//'w' is the day of the week
				useNative: false,
				length: this.dayOfWeekLength,
				locale: this.locale
			});
		}

		var daysControls = this.$.days.getClientControls(),
			daysOfWeek = this._dayFmt.getDaysOfWeek(),
			dayOfWeek;
		for(var i = 0; i < 7; i++) {
			dayOfWeek = (this.firstDayOfWeek + i) % 7;
			if (ilib) {
				daysControls[i].setContent(this.get('uppercaseDays') ? util.toUpperCase(daysOfWeek[dayOfWeek]) : daysOfWeek[dayOfWeek]);
			} else {
				daysControls[i].setContent(this.days[dayOfWeek]);
			}
		}
	},

	/**
	* Sets up first week of this month.
	* Before the first day of this month, days from the previous month will be
	* used to fill the calendar.
	*
	* @private
	*/
	updatePrevMonth: function () {
		var dt,
			dates,
			i;
		if (ilib) {
			// get the first of this month
			dt = ilib.Date.newInstance({
				year: this.localeValue.getYears(),
				month: this.localeValue.getMonths(),
				day: 1,
				timezone: 'local'
			});

			// find the week-start day on or before the first of the month
			var sunday = dt.onOrBefore(this.firstDayOfWeek);

			// if the sunday is before the current date
			var sunJD = sunday.getJulianDay();
			var daysBefore = Math.floor(dt.getJulianDay() - sunJD);
			if (daysBefore > 0) {
				dates = this.$.dates.getControls();
				var temp;
				for (i = 0; i <= daysBefore; i++) {
					temp = ilib.Date.newInstance({
						julianday: sunJD + i,
						timezone: 'local'
					});
					dates[i].setValue(temp.getJSDate());
					dates[i].setColor(true);
				}
				return daysBefore;
			}
		} else {
			var value = this.value;
			dt = new Date(value.getFullYear(), value.getMonth(), value.getDate());
			dt.setDate(0);
			var thisYear = dt.getFullYear(),
				datesOfPrevMonth = dt.getDate(),
				dayOfLastDate = dt.getDay() - this.firstDayOfWeek,
				prevMonth = dt.getMonth();
			if (dayOfLastDate < 0) {
				dayOfLastDate += 7;
			}
			if (dayOfLastDate !== 6) {
				dates = this.$.dates.getControls();
				for (i = 0; i <= dayOfLastDate; i++) {
					dates[i].setValue(new Date(thisYear, prevMonth, datesOfPrevMonth - dayOfLastDate + i));
					dates[i].setColor(true);
				}
			}
		}
		return 0;
	},

	/**
	* Sets up last week of this month.
	* After the last day of this month, days from the next month will be used to
	* fill the calendar.
	*
	* @private
	*/
	updateNextMonth: function (datesOfPrevMonth, monthLength) {
		var startIndex = datesOfPrevMonth + monthLength,
			dates = this.$.dates.getControls(),
			i;

		if (ilib) {
			var lastDay = ilib.Date.newInstance({
				year: this.localeValue.getYears(),
				month: this.localeValue.getMonths(),
				day: monthLength,
				timezone: 'local'
			});

			// get the first day of the next month
			var jd = lastDay.getJulianDay() + 1;
			var temp;
			for (i = 0; i < this.$.dates.controls.length - startIndex; i++) {
				temp = ilib.Date.newInstance({
					julianday: jd + i,
					timezone: 'local'
				});
				dates[startIndex + i].setValue(temp.getJSDate());
				dates[startIndex + i].setColor(true);
			}
		} else {
			var value = this.value;
			var dt = new Date(value.getFullYear(), value.getMonth(), value.getDate());
			dt.setMonth(dt.getMonth() + 1);
			var thisYear = dt.getFullYear(),
				nextMonth = dt.getMonth();
			for (i = 0; i < this.$.dates.controls.length - startIndex; i++) {
				dates[startIndex + i].setValue(new Date(thisYear, nextMonth, i + 1));
				dates[startIndex + i].setColor(true);
			}
		}
	},

	/**
	* @private
	*/
	updateDates: function () {
		var datesOfPrevMonth = this.updatePrevMonth(),
			monthLength,
			thisYear,
			thisMonth,
			dates,
			temp,
			i;

		if (ilib) {
			thisYear = this.localeValue.getYears();
			thisMonth = this.localeValue.getMonths();
			monthLength = this.getMonthLength(thisYear, thisMonth);
			dates = this.$.dates.getControls();
			for (i = 0; i < monthLength; i++) {
				temp = ilib.Date.newInstance({
					year: thisYear,
					month: thisMonth,
					day: i + 1,
					timezone: 'local'
				});
				dates[datesOfPrevMonth + i].setValue(temp.getJSDate());
				dates[datesOfPrevMonth + i].setColor(false);
			}
			this.$.dates.setActive(dates[datesOfPrevMonth - 1 + this.localeValue.getDays()]);
		} else {
			thisYear = this.value.getFullYear();
			thisMonth = this.value.getMonth();
			monthLength = this.getMonthLength(thisYear, thisMonth);
			dates = this.$.dates.getControls();
			for (i = 0; i < monthLength; i++) {
				dates[datesOfPrevMonth + i].setValue(new Date(thisYear, thisMonth, i + 1));
				dates[datesOfPrevMonth + i].setColor(false);
			}
			this.$.dates.setActive(dates[datesOfPrevMonth - 1 + this.value.getDate()]);
		}
		this.updateNextMonth(datesOfPrevMonth, monthLength);
	},

	/**
	* @private
	*/
	setYear: function (newYear) {
		var month,
			day,
			newMonthLength;

		if (ilib) {
			if (this.localeValue.getYears() != newYear) {
				month = this.localeValue.getMonths();
				day = this.localeValue.getDays();

				newMonthLength = this.getMonthLength(newYear, month);

				this.localeValue = ilib.Date.newInstance({
					year: newYear,
					month: month,
					day: (day > newMonthLength) ? newMonthLength : day,
					timezone: 'local'
				});

				this.setValue(this.localeValue.getJSDate());

				// Some years have a different number of months in other calendars,
				// so we need to make sure to update the month names in the picker
				this.updateMonthPicker();
			}
		} else {
			if (this.value.getFullYear() != newYear) {
				month = this.value.getMonth();
				day = this.value.getDate();

				newMonthLength = this.getMonthLength(newYear, month);
				var newValue = new Date(newYear, month, (newMonthLength < day) ? newMonthLength : day);
				this.setValue(newValue);
			}
		}
	},

	/**
	* @private
	*/
	setMonth: function (newMonth) {
		var year,
			day,
			newMonthLength,
			value,
			newValue;

		if (ilib) {
			newMonth++; // convert to ilib month
			if (this.localeValue.getMonths() != newMonth) {
				year = this.localeValue.getYears();
				day = this.localeValue.getDays();

				newMonthLength = this.getMonthLength(year, newMonth);

				this.localeValue = ilib.Date.newInstance({
					year: year,
					month: newMonth,
					day: (day > newMonthLength) ? newMonthLength : day,
					timezone: 'local'
				});

				this.setValue(this.localeValue.getJSDate());
			}
		} else {
			if (this.value.getMonth() != newMonth) {
				value = this.value;
				newMonthLength = this.getMonthLength(value.getFullYear(), newMonth);
				newValue = new Date(value.getFullYear(), newMonth, (newMonthLength < value.getDate()) ? newMonthLength : value.getDate());
				this.setValue(newValue);
			}
		}
	},

	/**
	* @private
	*/
	setDate: function (newDate) {
		var year,
			month,
			newMonthLength,
			value,
			newValue;

		if (ilib) {
			year = this.localeValue.getYears();
			month = this.localeValue.getMonths();

			newMonthLength = this.getMonthLength(year, month);

			this.localeValue = ilib.Date.newInstance({
				year: year,
				month: month,
				day: (newDate > newMonthLength) ? newMonthLength : newDate,
				timezone: 'local'
			});

			this.setValue(this.localeValue.getJSDate());
		} else {
			value = this.value;
			newMonthLength = this.getMonthLength(value.getFullYear(), value.getMonth());
			newValue = new Date(value.getFullYear(), value.getMonth(), (newMonthLength < newDate) ? newMonthLength : newDate);
			this.setValue(newValue);
		}
	},

	/**
	* Responds to selection of a particular [CalendarDate]{@link moon.CalendarDate}.
	*
	* @private
	*/
	selectDate: function (inSender, inEvent) {
		var newValue = inEvent.originator.value;
		this.setValue(newValue);
		if (ilib) {
			this.localeValue = ilib.Date.newInstance({
				unixtime: newValue.getTime(),
				timezone: 'local'
			});
		}
		return true;
	},

	/**
	* Responds to change of year in year picker.
	*
	* @private
	*/
	selectYearPicker: function (inSender, inEvent) {
		var year = this.$.yearPicker.getSelected().getContent();
		this.setYear(year);
		// some calendars have a different number of months and different
		// names of months depending on the year
		this.updateMonthPicker();
	},

	/**
	* Responds to change of month in month picker.
	*
	* @private
	*/
	selectMonthPicker: function (inSender, inEvent) {
		var month = this.$.monthPicker.getSelectedIndex();
		this.setMonth(month);
	},

	/**
	* Returns number of days in a particular month/year.
	*
	* @private
	*/
	getMonthLength: function (inYear, inMonth) {
		if (ilib) {
			return this.cal.getMonLength(inMonth, inYear);
		} else {
			return 32 - new Date(inYear, inMonth, 32).getDate();
		}
	},

	/**
	* When [iLib]{@glossary ilib} is supported, and type of calendar is changed
	* (e.g., from gregorian to thaisolar, julian, arabic, hebrew or chinese),
	* calendar should check for any differences in year, month and day.
	*
	* @private
	*/
	calendarChanged: function () {
		var newCalendar = ilib.Cal.newInstance();
		if (newCalendar.getType() !== this.cal.getType()) {
			this.cal = newCalendar;
			this._monthFmt = undefined; // force it to recreate the formatter
			this.updateMonthPicker();
			this.updateYearPicker();
		}
	},

	/**
	* Switches CSS classes when the user (or developer) changes the day label
	* style dynamically.
	*
	* @private
	*/
	dayOfWeekClassesChanged: function (inOld) {
		var dayControls = this.$.days.getClientControls();
		for (var i = 0; i < dayControls.length; i++) {
			dayControls[i].removeClass(inOld || 'moon-calendar-picker-day');
			dayControls[i].addClass(this.dayOfWeekClasses || 'moon-calendar-picker-day');
		}
	},

	/**
	* @private
	*/
	dayOfWeekLengthChanged: function () {
		this._dayFmt = undefined;
		this.updateDays();
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Control":26,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../SimplePicker":184}],240:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	Img = require('../../../moonstone/lib/Image');

module.exports = kind({
	name: 'moon.sample.ImageSample',
	classes: 'moon enyo-unselectable enyo-fit image-sample',
	components: [
		{kind: Divider, content: 'Image'},
		{kind: Img, src: 'http://lorempixel.com/64/64/city/1/', alt: 'HD'},
		{kind: Img, src: 'http://lorempixel.com/128/128/city/1/', alt: 'FHD'},
		{kind: Img, src: 'http://lorempixel.com/256/256/city/1/', alt: 'UHD'},
		{kind: Divider, content: 'Multi-res'},
		{kind: BodyText, content: 'The below image will change its source resolution based on the screen size at the time this sample is loaded.'},
		{kind: Img, src: {'hd': 'http://lorempixel.com/64/64/city/1/', 'fhd': 'http://lorempixel.com/128/128/city/1/', 'uhd': 'http://lorempixel.com/256/256/city/1/'}, alt: 'Large'}
	]
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Image":155}],200:[function(require,module,exports){
require('../../../moonstone');

var
	dispatcher = require('../../../enyo/lib/dispatcher'),
	dom = require('../../../enyo/lib/dom'),
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Animator = require('../../../enyo/lib/Animator'),
	Control = require('../../../enyo/lib/Control'),
	Signals = require('../../../enyo/lib/Signals'),
	Video = require('../../../enyo/lib/Video');

var
	Spotlight = require('../../../spotlight');

var
	FittableColumns = require('../../../layout/lib/FittableColumns'),
	Panels = require('../../../layout/lib/Panels'),
	CarouselArranger = require('../../../layout/lib/CarouselArranger');

var
	ilib = require('../../../enyo-ilib');

var
	$L = require('../i18n'),
	IconButton = require('../IconButton'),
	MoonHistory = require('../History'),
	HistorySupport = MoonHistory.HistorySupport;
	Spinner = require('../Spinner'),
	VideoFullscreenToggleButton = require('../VideoFullscreenToggleButton'),
	VideoTransportSlider = require('../VideoTransportSlider'),

/**
* Fires when [disablePlaybackControls]{@link moon.VideoPlayer#disablePlaybackControls}
* is `true` and the user taps one of the [controls]{@link enyo.Control}; may be handled to
* re-enable the controls, if desired. No event-specific information is sent with this event.
*
* @event moon.VideoPlayer#onPlaybackControlsTapped
* @type {Object}
* @public
*/

/**
* Child controls may bubble this event to toggle the fullscreen state of the video player.
* No additional data needs to be sent with this event.
*
* @event moon.VideoPlayer#onRequestToggleFullscreen
* @type {Object}
* @public
*/

/**
* Child controls may bubble this event to request an update to the current video position.
*
* @event moon.VideoPlayer#onRequestTimeChange
* @type {Object}
* @property {Number} value - Requested time index.
* @public
*/

/**
* {@link moon.VideoPlayer} is an HTML5 [video]{@glossary video} player control.  It wraps
* an {@link enyo.Video} [object]{@glossary Object} to provide Moonstone-styled standard
* transport [controls]{@link enyo.Control}, optional app-specific controls, and an information
* bar for displaying video information and player feedback.
*
* All of the standard HTML5 media [events]{@glossary event} bubbled from `enyo.Video` will
* also bubble from this control.
*
* Client [components]{@link enyo.Component} added to the `components` block are rendered into
* the video player's transport control area, and should generally be limited to instances of
* {@link moon.IconButton}. If more than two client components are specified, they will be
* rendered into an "overflow" screen, reached by activating a button to the right of the
* controls.
*
* Client components addded to the [infoComponents]{@link moon.VideoPlayer#infoComponents}
* block will be created as a header for the video.
*
* ```javascript
* {
*	kind: 'moon.VideoPlayer',
*	src: 'http://www.w3schools.com/html/mov_bbb.mp4',
*	components: [
*		// Custom icons for app-specific features
*		{kind: 'moon.IconButton', src: 'assets/feature1.png', ontap: 'feature1'},
*		{kind: 'moon.IconButton', src: 'assets/feature2.png', ontap: 'feature2'},
*		{kind: 'moon.IconButton', src: 'assets/feature3.png', ontap: 'feature3'}
*	],
*	infoComponents: [
*		{kind: 'moon.VideoHeaderBackground', components: [
*			{kind: 'moon.VideoInfoHeader', ... }
*		]
*	],
* }
* ```
*
* @class moon.VideoPlayer
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.VideoPlayer.prototype */ {

	/**
	* @private
	*/
	name: 'moon.VideoPlayer',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	mixins: [HistorySupport],

	/**
	* @private
	*/
	spotlight: true,

	// Fixme: When enyo-fit is used than the background image does not fit to video while dragging.
	/**
	* @private
	*/
	classes: 'moon-video-player enyo-unselectable',

	/**
	* @private
	*/
	events: {
		onPlaybackControlsTapped: ''
	},

	/**
	* @private
	* @lends moon.VideoPlayer.prototype
	*/
	published: {

		/**
		* URL of HTML5 video file.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		src: '',

		/**
		* Array for setting multiple sources for the same video.
		*
		* @type {String[]}
		* @default null
		* @public
		*/
		sources: null,

		/**
		* A [component]{@link enyo.Component} definition block describing components to
		* be created as an information block above the video. Usually, this contains a
		* [moon.VideoInfoBackground]{@link moon.VideoInfoBackground} with a
		* [moon.VideoInfoHeader]{@link moon.VideoInfoHeader} in it.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		infoComponents: null,

		/**
		* If `true`, the video player is resized after metadata is loaded, based on the
		* [aspectRatio]{@link moon.VideoPlayer#aspectRatio} contained in the metadata. This
		* applies only to [inline]{@link moon.VideoPlayer#inline} mode (i.e., when
		* `inline` is `true`).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoResize: false,

		/**
		* Video aspect ratio, specified as `'width:height'`, or `'none'`.  When an aspect ratio
		* is specified at render time, the player's height or width will be updated to respect
		* the ratio, depending on whether [fixedHeight]{@link moon.VideoPlayer#fixedHeight} is
		* `true` or `false`. If [autoResize]{@link moon.VideoPlayer#autoResize} is `true`, the
		* `aspectRatio` will be updated based on the metadata for the current video and the
		* player will be resized accordingly. This applies only to
		* [inline]{@link moon.VideoPlayer#inline} mode.
		*
		* @type {String}
		* @default '16:9'
		* @public
		*/
		aspectRatio: '16:9',

		/**
		* When `true`, the width will be adjusted at render time based on the observed height
		* and the aspect ratio. When `false` (the default), the height will be adjusted at
		* render time based on the observed width and the aspect ratio. This property is ignored
		* if [aspectRatio]{@link moon.VideoPlayer#aspectRatio} is `'none'` or a **falsy**
		* value.  In addition, this applies only to [inline]{@link moon.VideoPlayer#inline} mode.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		fixedHeight: false,

		/**
		* Amount of time (in milliseconds) after which control buttons are automatically hidden.
		*
		* @type {Number}
		* @default 7000
		* @public
		*/
		autoCloseTimeout: 7000,

		/**
		* Duration of the video.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		duration: 0,

		/**
		* If `true`, playback starts automatically when video is loaded.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoplay: false,

		/**
		* If `false`, fullscreen video control overlays (info or transport) are not shown
		* or hidden automatically in response to `up` or `down` events.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoShowOverlay: true,

		/**
		* If `true`, the overlay will be shown in response to pointer movement (in addition to
		* `up` and `down` events).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		shakeAndWake: false,

		/**
		* If `false`, the top [infoComponents]{@link moon.VideoPlayer#infoComponents} are
		* not automatically shown or hidden in response to `up` events.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoShowInfo: true,

		/**
		* If `false`, the bottom slider/controls are not automatically shown or hidden in
		* response to `down` events.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoShowControls: true,

		/**
		* When `true`, the top [infoComponents]{@link moon.VideoPlayer#infoComponents} are
		* shown with no timeout; when `false` (the default), they are shown based on the
		* value of the [autoShowInfo]{@link moon.VideoPlayer#autoShowInfo} property.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		showInfo: false,

		/**
		* When `false`, the player starts in fullscreen mode; when `true`, it starts in
		* inline mode. As this is meant to be initialized on startup, fire the
		* [onRequestToggleFullscreen]{@link moon.VideoPlayer#onRequestToggleFullscreen}
		* event from a child control or call
		* [toggleFullscreen()]{@link moon.VideoPlayer#toggleFullscreen} to dynamically
		* toggle between fullscreen and inline mode.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		inline: false,

		/**
		* Amount of time (in seconds) to jump in response to jump buttons. This value is ignored
		* when [jumpStartEnd]{@link moon.VideoPlayer#jumpStartEnd} is `true`.
		*
		* @type {Number}
		* @default 30
		* @public
		*/
		jumpSec: 30,

		/**
		* If `true`, the "jump forward" and "jump back" buttons jump to the start and end of the
		* video, respectively.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		jumpStartEnd: false,

		/**
		* When `true`, popups opened from the video player's client controls are automatically
		* hidden.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoHidePopups: true,

		/**
		* If `false`, the progress bar is removed and any additional controls are moved
		* downward.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showProgressBar: true,

		/**
		* If `false`, the transport controls are removed, but the icon button area is kept.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showPlaybackControls: true,

		/**
		* When `true`, playback controls are hidden when the slider is hovered over.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		hideButtonsOnSlider: true,

		/**
		* If `true`, the slider is disabled and will not be enabled when video data has
		* loaded.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disableSlider: false,

		/**
		* If `false`, the "jump forward" and "jump back" buttons are hidden.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showJumpControls: true,

		/**
		* When `true`, the fast-forward and rewind buttons are visible.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		showFFRewindControls: false,

		/**
		* If `true`, the slider and playback controls are disabled. If the user taps the
		* controls, an
		* [onPlaybackControlsTapped]{@link moon.VideoPlayer#onPlaybackControlsTapped}
		* event will be bubbled.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disablePlaybackControls: false,

		/**
		* When `true`, playback controls are only active when the video player has a valid
		* source URL and no errors occur during video loading.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		disablePlaybackControlsOnUnload: true,

		/**
		* If `false`, the Play/Pause control is hidden.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showPlayPauseControl: true,

		/**
		* If `false`, the video element is hidden.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		showVideo: true,

		/**
		* When `true`, a spinner is automatically shown when video is in the play state but
		* is still loading/buffering.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoShowSpinner: true,

		/**
		* Source of image file to show when video isn't available or user has not yet tapped the
		* play button.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		poster: '',

		/**
		* If `false`, video player won't respond to remote control.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		handleRemoteControlKey: true,

		/**
		* Base URL for icons
		*
		* @private
		*/
		iconPath: 'images/video-player/',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		jumpBackIcon: 'skipbackward',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		rewindIcon: 'backward',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		playIcon: 'play',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		pauseIcon: 'pause',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		fastForwardIcon: 'forward',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		jumpForwardIcon: 'skipforward',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		moreControlsIcon: 'arrowextend',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		lessControlsIcon: 'arrowshrink',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		inlinePlayIcon: 'play',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		inlinePauseIcon: 'pause',

		/**
		* Name of font-based icon or image file.
		*
		* @private
		*/
		inlineFullscreenIcon: 'fullscreen',

		/**
		* Default hash of playback states and their associated playback rates.
		* playbackRateHash: {
		*	fastForward: ['2', '4', '8', '16'],
		*	rewind: ['-2', '-4', '-8', '-16'],
		*	slowForward: ['1/4', '1/2'],
		*	slowRewind: ['-1/2', '-1']
		* }
		*
		* @private
		*/
		playbackRateHash: {
			fastForward: ['2', '4', '8', '16'],
			rewind: ['-2', '-4', '-8', '-16'],
			slowForward: ['1/4', '1/2', '1'],
			slowRewind: ['-1/2', '-1']
		}
	},

	/**
	* @private
	*/
	handlers: {
		onRequestTimeChange: 'timeChange',
		onRequestToggleFullscreen: 'toggleFullscreen',
		onSpotlightKeyUp: 'resetAutoTimeout',
		onSpotlightKeyDown: 'spotlightKeyDownHandler',
		onSpotlightUp: 'spotlightUpHandler',
		onSpotlightDown: 'spotlightDownHandler',
		onSpotlightLeft: 'spotlightLeftRightFilter',
		onSpotlightRight: 'spotlightLeftRightFilter',
		onresize: 'handleResize'
	},

	/**
	* @private
	*/
	eventsToCapture: {
		onSpotlightFocus: 'capturedFocus'
	},

	/**
	* @private
	*/
	bindings: [
		{from: '.src',						to:'.$.video.src'},
		{from: '.sources',					to:'.$.video.sourceComponents'},
		{from: '.playbackRateHash',			to:'.$.video.playbackRateHash'},
		{from: '.poster',					to:'.$.video.poster'},
		{from: '.constrainToBgProgress',	to:'.$.slider.constrainToBgProgress'},
		{from: '.elasticEffect',			to:'.$.slider.elasticEffect'},
		{from: '.showJumpControls',			to:'.$.jumpForward.showing'},
		{from: '.showJumpControls',			to:'.$.jumpBack.showing'},
		{from: '.showFFRewindControls',		to:'.$.fastForward.showing'},
		{from: '.showFFRewindControls',		to:'.$.rewind.showing'},
		{from: '.showPlayPauseControl',		to:'.$.fsPlayPause.showing'},
		{from: '.showVideo',				to:'.$.videoContainer.showing'}
	],

	/**
	* @private
	*/
	observers: {
		updateSource: ['src', 'sources']
	},

	/**
	* @private
	*/
	_isPlaying: false,

	/**
	* @private
	*/
	_canPlay: false,

	/**
	* @private
	*/
	_autoCloseTimer: null,

	/**
	* @private
	*/
	_currentTime: 0,

	/**
	* @private
	*/
	_panelsShowing: false,

	/**
	* @private
	*/
	components: [
		{kind: Signals, onPanelsShown: 'panelsShown', onPanelsHidden: 'panelsHidden', onPanelsHandleFocused: 'panelsHandleFocused', onPanelsHandleBlurred: 'panelsHandleBlurred', onFullscreenChange: 'fullscreenChanged', onkeyup:'remoteKeyHandler', onSpotlightModeChanged: "resetPreviewMode"},
		{name: 'videoContainer', kind: Control, classes: 'moon-video-player-container', components: [
			{name: 'video', kind: Video, classes: 'moon-video-player-video',
				ontimeupdate: 'timeUpdate', onloadedmetadata: 'metadataLoaded', durationchange: 'durationUpdate', onloadeddata: 'dataloaded', onprogress: '_progress', onPlay: '_play', onpause: '_pause', onStart: '_start',  onended: '_stop',
				onFastforward: '_fastforward', onSlowforward: '_slowforward', onRewind: '_rewind', onSlowrewind: '_slowrewind',
				onJumpForward: '_jumpForward', onJumpBackward: '_jumpBackward', onratechange: 'playbackRateChange', ontap: 'videoTapped', oncanplay: '_setCanPlay', onwaiting: '_waiting', onerror: '_error'
			},
			{name: 'spinner', kind: Spinner, classes: 'moon-video-player-spinner'}
		]},

		//* Fullscreen controls
		{name: 'fullscreenControl', kind: Control, classes: 'moon-video-fullscreen-control enyo-fit scrim', onmousemove: 'mousemove', components: [

			{name: 'videoInfoHeaderClient', kind: Control, showing: false, classes: 'moon-video-player-header'},

			{name: 'playerControl', kind: Control, classes: 'moon-video-player-bottom', showing: false, components: [
				{name: 'controls', kind: FittableColumns, rtl:false, classes: 'moon-video-player-controls', ontap: 'resetAutoTimeout', components: [

					{name: 'leftPremiumPlaceHolder', kind: Control, classes: 'moon-video-player-premium-placeholder-left'},

					{name: 'controlsContainer', kind: Panels, arrangerKind: CarouselArranger, fit: true, draggable: false, classes: 'moon-video-player-controls-container', components: [
						{name: 'trickPlay', kind: Control, ontap:'playbackControlsTapped', components: [
							{name: 'playbackControls', kind: Control, classes: 'moon-video-player-control-buttons', components: [
								{name: 'jumpBack',		kind: IconButton, small: false, onholdpulse: 'onHoldPulseBackHandler', ontap: 'onjumpBackward', onrelease: 'onReleaseHandler'},
								{name: 'rewind',		kind: IconButton, small: false, ontap: 'rewind'},
								{name: 'fsPlayPause',	kind: IconButton, small: false, ontap: 'playPause'},
								{name: 'fastForward',	kind: IconButton, small: false, ontap: 'fastForward'},
								{name: 'jumpForward',	kind: IconButton, small: false, onholdpulse: 'onHoldPulseForwardHandler', ontap: 'onjumpForward', onrelease: 'onReleaseHandler'}
							]}
						]},
						{name: 'client', kind: Control, classes: 'moon-video-player-more-controls'}
					]},

					{name: 'rightPremiumPlaceHolder', kind: Control, classes: 'moon-video-player-premium-placeholder-right', components: [
						{name: 'moreButton', kind: IconButton, small: false, ontap: 'moreButtonTapped'}
					]}
				]},

				{name: 'sliderContainer', kind: Control, classes: 'moon-video-player-slider-container', components: [
					{name: 'slider', kind: VideoTransportSlider, rtl: false, disabled: true, onSeekStart: 'sliderSeekStart', onSeek: 'sliderSeek', onSeekFinish: 'sliderSeekFinish',
						onEnterTapArea: 'onEnterSlider', onLeaveTapArea: 'onLeaveSlider', ontap:'playbackControlsTapped'
					}
				]}
			]}
		]},
		//* Inline controls
		{name: 'inlineControl', kind: Control, classes: 'moon-video-inline-control', components: [
			{name: 'currPosAnimator', kind: Animator, onStep: 'currPosAnimatorStep', onEnd: 'currPosAnimatorComplete'},
			{name: 'bgProgressStatus', kind: Control, classes: 'moon-video-inline-control-bgprogress'},
			{name: 'progressStatus', kind: Control, classes: 'moon-video-inline-control-progress'},
			{kind: Control, classes: 'moon-video-inline-control-text', components: [
				{name: 'currTime', kind: Control, content: '00:00 / 00:00'}
			]},
			{name: 'ilPlayPause', kind: IconButton, ontap: 'playPause'},
			{name: 'ilFullscreen', kind: VideoFullscreenToggleButton, small: true}
		]}
	],

	/**
	* @private
	*/
	create: function() {
		Control.prototype.create.apply(this, arguments);
		this.updateSource();
		this.createInfoControls();
		this.inlineChanged();
		this.showInfoChanged();
		this.autoShowInfoChanged();
		this.autoShowControlsChanged();
		this.autoplayChanged();
		this.updateMoreButton();
		this.showPlaybackControlsChanged();
		this.showProgressBarChanged();
		this.jumpSecChanged();
		this.updatePlaybackControlState();
		this.retrieveIconsSrcOrFont(this.$.jumpBack, this.jumpBackIcon, 'moon-icon-video-main-control-font-style');
		this.retrieveIconsSrcOrFont(this.$.rewind, this.rewindIcon, 'moon-icon-video-main-control-font-style');
		this.retrieveIconsSrcOrFont(this.$.fastForward, this.fastForwardIcon, 'moon-icon-video-main-control-font-style');
		this.retrieveIconsSrcOrFont(this.$.jumpForward, this.jumpForwardIcon, 'moon-icon-video-main-control-font-style');
		this.retrieveIconsSrcOrFont(this.$.ilFullscreen, this.inlineFullscreenIcon, 'moon-video-inline-control-fullscreen');
		this.$.ilFullscreen.removeClass('moon-icon-video-round-controls-style moon-icon-exitfullscreen-font-style');
		if (ilib) {
			this.durfmt = new ilib.DurFmt({length: 'medium', style: 'clock', useNative: false});
		}
	},

	/**
	* @private
	*/
	checkIconType: function(icon) {
		var imagesrcRegex=/\.(jpg|jpeg|png|gif)$/i;
		var iconType=imagesrcRegex.test(icon)?'image':'iconfont';
		return iconType;
	},

	/**
	* @private
	*/
	transformIconSrc: function(icon) {
		var iconPath=Boolean(this.checkIconType(icon)=='image')?(this.iconPath+icon):icon;
		return iconPath;
	},

	/**
	* @private
	*/
	disablePlaybackControlsChanged: function() {
		this.updatePlaybackControlState();
	},

	/**
	* @private
	*/
	disablePlaybackControlsOnUnloadChanged: function() {
		this.updatePlaybackControlState();
	},

	/**
	* @private
	*/
	updatePlaybackControlState: function() {
		var disabled = this.disablePlaybackControls ||
			this._panelsShowing ||
			(this.disablePlaybackControlsOnUnload && (this._errorCode || (!this.getSrc() && !this.getSources()) ));
		this.updateSliderState();
		this.$.playbackControls.addRemoveClass('disabled', disabled);
		this.$.jumpBack.setDisabled(disabled);
		this.$.rewind.setDisabled(disabled);
		this.$.fsPlayPause.setDisabled(disabled);
		this.$.fastForward.setDisabled(disabled);
		this.$.jumpForward.setDisabled(disabled);
		this.$.ilPlayPause.setDisabled(disabled);
		var currentSpot = Spotlight.getCurrent();
		if (currentSpot && currentSpot.disabled) {
			if (this.isFullscreen() || !this.getInline()) {
				this.spotFSBottomControls();
			} else {
				Spotlight.spot(this.$.ilFullscreen);
			}
		}
	},

	/**
	* @private
	*/
	playbackControlsTapped: function() {
		if (this.disablePlaybackControls) {
			this.bubble('onPlaybackControlsTapped');
		}
	},
	/**
	* @private
	*/
	resetPreviewMode: function(){
		if(!Spotlight.getPointerMode() && this.$.slider.isInPreview() && !this.inline) {
			this.$.controls.setShowing(true);
			this.$.slider.endPreview();
		}
	},

	/**
	* @private
	*/
	rendered: function() {
		Control.prototype.rendered.apply(this, arguments);
		//* Change aspect ratio based on initialAspectRatio
		this.aspectRatioChanged();
	},

	/**
	* @private
	*/
	showPlaybackControlsChanged: function(was) {
		this.$.trickPlay.set('showing', this.showPlaybackControls);
		this.$.moreButton.set('showing', this.showPlaybackControls && this.clientComponentsCount > 2);
		this.toggleSpotlightForMoreControls(!this.showPlaybackControls);
		this.$.client.addRemoveClass('moon-video-player-more-controls', this.showPlaybackControls);
	},

	/**
	* @private
	*/
	showProgressBarChanged: function(was) {
		this.$.sliderContainer.setShowing(this.showProgressBar);
	},

	/**
	* @private
	*/
	updateSource: function(old, value, source) {
		this._canPlay = false;
		this._isPlaying = this.autoplay;
		this._errorCode = null;
		this.updatePlayPauseButtons();
		this.updateSpinner();
		this.updatePlaybackControlState();
		this._resetTime();

		// since src and sources are mutually exclusive, clear the other property
		// when one changes
		if (source === 'src') {
			this.sources = null;
		} else if (source === 'sources') {
			this.src = '';
		}
	},

	/**
	* Returns the underlying {@link enyo.Video} control (wrapping the HTML5 video node).
	*
	* @returns {enyo.Video} - An {@link enyo.Video} control.
	* @public
	*/
	getVideo: function() {
		return this.$.video;
	},

	/**
	* @private
	*/
	createInfoControls: function() {
		var owner = this.hasOwnProperty('infoComponents') ? this.getInstanceOwner() : this;
		this.$.videoInfoHeaderClient.createComponents(this.infoComponents, {owner: owner});
	},

	/**
	* @private
	*/
	createClientComponents: function(comps) {
		comps = (comps) ? util.clone(comps) : [];
		this.clientComponentsCount = comps.length;
		if (!this._buttonsSetup) {
			this._buttonsSetup = true;
			if (!comps || comps.length === 0) {
				// No components - destroy more button
				this.$.leftPremiumPlaceHolder.hide();
				this.$.rightPremiumPlaceHolder.hide();
			} else if (comps.length <= 2) {
				// One or two components - destroy more button and utilize left/right premium placeholders
				this.$.leftPremiumPlaceHolder.createComponent(comps.shift(), {owner: this.getInstanceOwner()});
				if (comps.length === 1) {
					this.$.rightPremiumPlaceHolder.createComponent(comps.shift(), {owner: this.getInstanceOwner()});
				}
			} else {
				// More than two components - use extra panel, with left premium plaeholder for first component
				this.$.leftPremiumPlaceHolder.createComponent(comps.shift(), {owner: this.getInstanceOwner()});
			}
			// Create the rest of the components in the client (panels)
			this.createComponents(comps, {owner: this.getInstanceOwner()});
		} else {
			Control.prototype.createClientComponents.apply(this, arguments);
		}
	},

	/**
	* @private
	*/
	playIconChanged: function() {
		this.updatePlayPauseButtons();
	},

	/**
	* @private
	*/
	pauseIconChanged: function() {
		this.updatePlayPauseButtons();
	},

	/**
	* @private
	*/
	inlinePlayIconChanged: function() {
		this.updatePlayPauseButtons();
	},

	/**
	* @private
	*/
	inlinePauseIconChanged: function() {
		this.updatePlayPauseButtons();
	},

	/**
	* @private
	*/
	moreControlsIconChanged: function() {
		this.updateMoreButton();
	},

	/**
	* @private
	*/
	lessControlsIconChanged: function() {
		this.updateMoreButton();
	},

	/**
	* @private
	*/
	autoplayChanged: function() {
		this.$.video.setAutoplay(this.autoplay);
		this._isPlaying = this.autoplay;
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* @private
	*/
	jumpSecChanged: function() {
		this.$.video.setJumpSec(this.jumpSec);
	},

	/**
	* @private
	*/
	disableSliderChanged: function() {
		this.updateSliderState();
	},

	/**
	* @private
	*/
	updateSliderState: function() {
		//* this should be be called on create because default slider status should be disabled.
		var disabled =
			this.disableSlider ||
			this.disablePlaybackControls ||
			!this._loaded ||
			(this.disablePlaybackControlsOnUnload && (this._errorCode || (!this.getSrc() && !this.getSources()) ));
		this.$.slider.setDisabled(disabled);
		// We need an explicit call to showKnobStatus as moon.Slider's disabledChanged method
		// only handles hiding of the knob status. This behavior should not be changed in
		// disabledChanged, as the normal behavior of moon.Slider is to display the knob status
		// upon dragging, whereas moon.VideoPlayer is forcing the knob status to be shown when
		// the slider is visible.
		if (!disabled) {
			this.$.slider.showKnobStatus();
		}
	},

	/**
	* @private
	*/
	autoShowOverlayChanged: function() {
		this.autoShowInfoChanged();
		this.autoShowControlsChanged();
		if (this.autoShowOverlay) {
			this.resetAutoTimeout();
		}
	},

	/**
	* @private
	*/
	autoShowInfoChanged: function() {
		if (this.$.videoInfoHeaderClient.getShowing() && !this.autoShowInfo && !this.showInfo) {
			this.$.videoInfoHeaderClient.hide();
		}
		if (this.autoShowInfo) {
			this.resetAutoTimeout();
		}
	},

	/**
	* @private
	*/
	autoShowControlsChanged: function() {
		if (this.$.playerControl.getShowing() && !this.autoShowControls) {
			this.$.playerControl.hide();
		}
		if (this.autoShowControls) {
			this.resetAutoTimeout();
		}
	},

	/**
	* @private
	*/
	showInfoChanged: function() {
		this.$.videoInfoHeaderClient.setShowing(this.showInfo);

		if (this.showInfo) {
			// Kick off any marquees in the video info header
			this.$.videoInfoHeaderClient.waterfallDown('onRequestStartMarquee');
		}
	},

	/**
	* @private
	*/
	inlineChanged: function() {
		// Force fullscreen
		this.addRemoveClass('enyo-fullscreen enyo-fit', !this.inline);
		// Padding-bottom contains inline controls
		this.addRemoveClass('moon-video-inline', this.inline);
		// show hide controls visibility
		this.$.inlineControl.setShowing(this.inline);
		this.$.fullscreenControl.setShowing(!this.inline);
		if (!this.inline) {
			this.$.inlineControl.canGenerate = false;
		}
		this.spotlight = !this.inline;
	},

	/**
	* Unloads the current video source, stopping all playback and buffering.
	*
	* @public
	*/
	unload: function() {
		this.$.video.unload();
		this._resetTime();
		this._loaded = false;
		this._isPlaying = false;
		this._canPlay = false;
		this._errorCode = null;
		this.src = '';
		this.sources = null;
		this.updatePlaybackControlState();
		this.updateSpinner();
	},
	showScrim: function(show) {
		this.$.fullscreenControl.addRemoveClass('scrim', !show);
	},

	/**
	* @private
	*/
	updateSpotability: function() {
		var spotState = this._panelsShowing ? false : (this._controlsShowing ? 'container' : true);
		this.updatePlaybackControlState();
		this.set('spotlight', spotState);
		this.$.leftPremiumPlaceHolder.spotlightDisabled = this._panelsShowing;
		this.$.rightPremiumPlaceHolder.spotlightDisabled = this._panelsShowing;
	},

	/**
	* @private
	*/
	panelsShown: function(sender, e) {
		this._panelsShowing = true;
		this._controlsShowing = false;
		this._infoShowing = false;
		this.updateSpotability();
		if (e.initialization) {
			return;
		}

		if ((this.isFullscreen() || !this.getInline()) && this.isOverlayShowing()) {
			this.hideFSControls();
			Spotlight.unspot();
		}
	},

	/**
	* @private
	*/
	panelsHidden: function(sender, e) {
		var current;

		this._panelsShowing = false;
		this.updateSpotability();

		current = Spotlight.getCurrent();
		if (!current || !current.isDescendantOf(this)) {
			Spotlight.spot(this);
		}
	},

	/**
	* @private
	*/
	panelsHandleFocused: function(sender, e) {
		this._infoShowing = this.$.videoInfoHeaderClient.getShowing();
		this._controlsShowing = this.$.playerControl.getShowing();
		this.hideFSControls(true);
	},

	/**
	* @private
	*/
	panelsHandleBlurred: function(sender, e) {
		if (this.isLarge() && !this.isOverlayShowing()) {
			if (this._infoShowing) {
				this.showFSInfo();
			}
			if (this._controlsShowing) {
				util.asyncMethod(this, 'showFSBottomControls');
			}
		}
	},

	/**
	* @private
	*/
	isLarge: function() {
		return this.isFullscreen() || !this.get('inline');
	},

	/**
	* @private
	*/
	spotlightLeftRightFilter: function(sender, e) {
		return this.spotlightModal && e.originator === this;
	},

	/**
	* @private
	*/
	spotlightUpHandler: function(sender, e) {
		if (this._shouldHandleUpDown) {
			// Toggle info header on 'up' press
			if (e.originator !== this.$.slider) {
				if (!this.$.videoInfoHeaderClient.getShowing()) {
					this.showFSInfo();
				} else {
					this.hideFSInfo();
				}
			}
			return true;
		}
	},

	/**
	* @private
	*/
	spotlightDownHandler: function(sender, e) {
		if (this._shouldHandleUpDown) {
			// Toggle info header on 'down' press
			if (!this.$.playerControl.getShowing()) {
				this.showFSBottomControls();
			} else {
				this.hideFSBottomControls();
			}
			return true;
		}
	},

	/**
	* @private
	*/
	spotlightKeyDownHandler: function(sender, e) {
		this._shouldHandleUpDown = this.isLarge() && (e.originator === this || Spotlight.getParent(e.originator) === this);
	},

	///// Fullscreen controls /////


	/**
	* @private
	*/
	_holdPulseThreadhold: 400,

	/**
	* @private
	*/
	_holding: false,

	/**
	* @private
	*/
	_sentHold: false,

	/**
	* Returns `true` if any piece of the overlay is showing.
	*
	* @private
	*/
	isOverlayShowing: function() {
		return this.$.videoInfoHeaderClient.getShowing() || this.$.playerControl.getShowing();
	},

	/**
	* Resets the timeout, or wakes the overlay.
	*
	* @private
	*/
	mousemove: function(sender, e) {
		if (this.isOverlayShowing()) {
			this.resetAutoTimeout();
		} else if (this.shakeAndWake) {
			this.showFSControls();
		}
	},

	/**
	* Sets `this.visible` to `true` and clears hide job.
	*
	* @private
	*/
	showFSControls: function(sender, e) {
		this.showFSInfo();
		this.showFSBottomControls();
	},

	/**
	* @private
	*/
	hideFSControls: function(spottingHandled) {
		if (this.isOverlayShowing()) {
			this.hideFSInfo();
			this.hideFSBottomControls();
		}
		if (!spottingHandled) {
			Spotlight.setPointerMode(false);
			Spotlight.spot(this);
		}
		this.stopJob('autoHide');
	},

	/**
	* Sets `this.visible` to `true` and clears hide job.
	*
	* @private
	*/
	showFSBottomControls: function(sender, e) {
		if (this.autoShowOverlay && this.autoShowControls) {
			this.resetAutoTimeout();
			this.showScrim(true);
			this.$.playerControl.setShowing(true);
			this.$.playerControl.resize();
			if (!this.showPlaybackControls) {
				//* Fixed index
				this.$.controlsContainer.setIndex(1);
			}

			//* Initial spot
			this.spotFSBottomControls();

			this.$.slider.showKnobStatus();
			if (this.$.video.isPaused()) {
				this.updateFullscreenPosition();
			}
			// When controls are visible, set as container to remember last focused control
			this.set('spotlight', 'container');
			this.pushBackHistory();
		}
	},

	/**
	* @private
	*/
	spotFSBottomControls: function() {
		if (this.showPlaybackControls) {
			if (this.$.controlsContainer.getIndex() === 0) {
				if (Spotlight.spot(this.$.fsPlayPause) === false) {
					if(Spotlight.spot(this.$.fastForward) === false){
						if(Spotlight.spot(this.$.jumpForward) === false) {
							Spotlight.spot(Spotlight.getFirstChild(this.$.controls));
						}
					}
				}
			} else {
				Spotlight.spot(Spotlight.getFirstChild(this.$.controlsContainer.getActive()));
			}
		} else {
			var oTarget = Spotlight.getFirstChild(this.$.leftPremiumPlaceHolder);
			Spotlight.spot(oTarget);
		}
	},

	/**
	* Sets `this.visible` to `false`.
	*
	* @private
	*/
	hideFSBottomControls: function() {
		// When controls are hidden, set as just a spotlight true component,
		// so that it is spottable (since it won't have any spottable children),
		// and then spot itself
		this.set('spotlight', true);
		// Only spot the player if hiding is triggered from player control
		if (Spotlight.hasCurrent() && Spotlight.getParent(Spotlight.getCurrent()) === this) {
			Spotlight.spot(this);
		}
		if (this.autoHidePopups) {
			// Hide enyo.Popup-based popups (including moon.Popup)
			this.$.playerControl.waterfall('onRequestHide');
			// Hide moon.ContextualPopups
			this.$.playerControl.waterfall('onRequestHidePopup');
		}
		this.showScrim(false);
		this.$.playerControl.setShowing(false);
	},

	/**
	* Sets `this.visible` to `true` and clears hide job.
	*
	* @private
	*/
	showFSInfo: function() {
		if (this.autoShowOverlay && this.autoShowInfo) {
			this.resetAutoTimeout();
			this.$.videoInfoHeaderClient.setShowing(true);
			this.$.videoInfoHeaderClient.resize();

			// Kick off any marquees in the video info header
			this.$.videoInfoHeaderClient.waterfallDown('onRequestStartMarquee');
			if (this.allowBackKey) {
				this.pushBackHistory();
			}
		}
	},

	/**
	* Sets `this.visible` to `false`.
	*
	* @private
	*/
	hideFSInfo: function() {
		if (!this.showInfo) {
			this.$.videoInfoHeaderClient.setShowing(false);
		}
	},

	/**
	* @private
	*/
	resetAutoTimeout: function() {
		if (this.isFullscreen() || !this.getInline()) {
			this.startJob('autoHide', this.bindSafely('hideFSControls'), this.getAutoCloseTimeout());
		}
	},

	/**
	* Toggles play/pause state based on `this.playing`.
	*
	* @private
	*/
	playPause: function(sender, e) {
		if (this._isPlaying) {
			this.pause(sender, e);
		} else {
			this.play(sender, e);
		}
		return true;
	},

	/**
	* @private
	*/
	onHoldPulseBackHandler: function(sender, e) {
		if (!this.jumpStartEnd) {
			if (e.holdTime > this._holdPulseThreadhold) {
				if (sender._sentHold !== true) {
					this.jumpToStart(sender, e);
					sender._sentHold = true;
					return true;
				}
			} else {
				sender._holding = true;
				sender._sentHold = false;
			}
		}
	},

	onReleaseHandler: function(sender, e) {
		if (sender._sentHold && sender._sentHold === true) sender._sentHold = false;
	},

	/**
	* @private
	*/
	onHoldPulseForwardHandler: function(sender, e) {
		if (!this.jumpStartEnd) {
			if (e.holdTime > this._holdPulseThreadhold) {
				if (sender._sentHold !== true) {
					this.jumpToEnd(sender, e);
					sender._sentHold = true;
					return true;
				}
			} else {
				sender._holding = true;
				sender._sentHold = false;
			}
		}
	},

	/**
	* @private
	*/
	onEnterSlider: function(sender, e) {
		if (this.hideButtonsOnSlider) {
			this.$.controls.setShowing(false);
		}
	},

	/**
	* @private
	*/
	onLeaveSlider: function(sender, e) {
		if (this.hideButtonsOnSlider && !this.$.slider.isDragging()) {
			this.$.controls.setShowing(true);
		}
	},

	/**
	* @private
	*/
	onjumpBackward: function(sender, e) {
		if (this.jumpStartEnd) {
			this.jumpToStart(sender, e);
		} else {
			if (!sender._holding || (sender._holding && sender._sentHold !== true)) {
				this.jumpBackward(sender, e);
			}
			sender._holding = false;
		}
	},

	/**
	* @private
	*/
	onjumpForward: function(sender, e) {
		if (this.jumpStartEnd) {
			this.jumpToEnd(sender, e);
		} else {
			if (!sender._holding || (sender._holding && sender._sentHold !== true)) {
				this.jumpForward(sender, e);
			}
			sender._holding = false;
		}
	},

	/**
	* @private
	*/
	sendFeedback: function(msg, params, persist, leftSrc, rightSrc) {
		params = params || {};
		this.$.slider.feedback(msg, params, persist, leftSrc, rightSrc);
	},

	////// Slider event handling //////

	/**
	* When seeking starts, pauses video.
	*
	* @private
	*/
	sliderSeekStart: function(sender, e) {
		this._isPausedBeforeDrag = this.$.video.isPaused();
		this.pause();
		return true;
	},

	/**
	* When seeking completes, plays video.
	*
	* @private
	*/
	sliderSeekFinish: function(sender, e) {
		if (e.value < this.duration - 1) {
			if (!this._isPausedBeforeDrag) {
				this.play();
			} else {
				this.pause();
			}
			this._isPausedBeforeDrag = this.$.video.isPaused();
		}
		if (!this.$.slider.isInPreview()) {
			this.$.controls.show();
		}
		this.setCurrentTime(e.value);
		return true;
	},

	/**
	* When seeking, sets video time.
	*
	* @private
	*/
	sliderSeek: function(sender, e) {
		this.setCurrentTime(e.value);
		return true;
	},

	/**
	* Programatically updates slider position to match `this.currentTime`/`this.duration`.
	*
	* @private
	*/
	updateFullscreenPosition: function() {
		if (this.$.slider.isDragging()) {
			return;
		}
		this.$.slider.setValue(this._currentTime);
	},

	/**
	* @private
	*/
	capture: function () {
		dispatcher.capture(this, this.eventsToCapture);
	},

	/**
	* @private
	*/
	release: function () {
		dispatcher.release(this);
	},

	/**
	* @private
	*/
	capturedFocus: function (sender, event) {
		Spotlight.spot(this);
		return true;
	},

	///// Inline controls /////

	/**
	* @private
	*/
	updateInlinePosition: function() {
		var percentComplete = this.duration ? Math.round(this._currentTime * 1000 / this.duration) / 10 : 0;
		this.$.progressStatus.applyStyle('width', percentComplete + '%');
		this.$.currTime.setContent(this.formatTime(this._currentTime) + ' / ' + this.formatTime(this.duration));
	},

	/**
	* @private
	*/
	videoTapped: function() {
		if (this.getInline() && !this.isFullscreen()) {
			this.playPause();
		}
	},

	/**
	* Toggles fullscreen state.
	*
	* @public
	*/
	toggleFullscreen: function() {
		if (this.isFullscreen()) {
			this.cancelFullscreen();
		} else {
			this.requestFullscreen();
		}
	},

	/**
	* @private
	*/
	fullscreenChanged: function(sender, e) {
		Spotlight.unspot();
		if (this.isFullscreen()) {
			this.$.ilFullscreen.undepress();
			this.$.ilFullscreen.removeClass('moon-icon-video-round-controls-style moon-icon-exitfullscreen-font-style');
			this.spotlight = true;
			this.spotlightModal = true;
			this.removeClass('inline');
			this.$.inlineControl.setShowing(false);
			this.$.fullscreenControl.setShowing(true);
			this.showFSControls();
			this.$.controlsContainer.resize();
			this.capture();
		} else {
			this.release();
			this.stopJob('autoHide');
			this.addClass('inline');
			this.$.inlineControl.setShowing(true);
			this.$.fullscreenControl.setShowing(false);
			Spotlight.spot(this.$.ilFullscreen);
			this.spotlight = false;
			this.spotlightModal = false;
		}
		this.updatePosition();
	},

	/**
	* Plays the video.
	*
	* @public
	*/
	play: function() {
		this.currTimeSync = true;
		this._isPlaying = true;
		this.$.video.play();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Pauses the video.
	*
	* @public
	*/
	pause: function() {
		this._isPlaying = false;
		this.$.video.pause();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Changes the playback speed based on the previous playback setting, by cycling through
	* the appropriate speeds.
	*
	* @public
	*/
	rewind: function() {
		this._isPlaying = false;
		this.$.video.rewind();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Jumps to beginning of media [source]{@link moon.VideoPlayer#src} and sets
	* [playbackRate]{@link enyo.Video#playbackRate} to `1`.
	*
	* @public
	*/
	jumpToStart: function() {
		this.$.video.jumpToStart();
		this.updatePlayPauseButtons();
		this.updateSpinner();
		if(this._isPlaying){
			this.$.video.play();
		}
	},

	/**
	* Jumps backward [jumpSec]{@link moon.VideoPlayer#jumpSec} seconds from the current time.
	*
	* @public
	*/
	jumpBackward: function() {
		this.$.video.jumpBackward();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Changes the playback speed based on the previous playback setting, by cycling through
	* the appropriate speeds.
	*
	* @public
	*/
	fastForward: function() {
		this._isPlaying = false;
		this.$.video.fastForward();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Jumps to end of media [source]{@link moon.VideoPlayer#src} and sets
	* [playbackRate]{@link enyo.Video#playbackRate} to `1`.
	*
	* @public
	*/
	jumpToEnd: function() {
		this._isPlaying = false;
		if ( this.$.video.isPaused() ) {
			//* Make video able to go futher than the buffer
			this.$.video.play();
		}
		this.$.video.jumpToEnd();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Jumps forward [jumpSec]{@link moon.VideoPlayer#jumpSec} seconds from the current time.
	*
	* @public
	*/
	jumpForward: function() {
		this.$.video.jumpForward();
		this.updatePlayPauseButtons();
		this.updateSpinner();
	},

	/**
	* Sets the current time in the video.
	*
	* @param {Number} val - The current time to set the video to, in seconds.
	* @public
	*/
	setCurrentTime: function(val) {
		this.$.video.setCurrentTime(val);
	},

	/**
	* Responds to `onRequestTimeChange` event by setting current video time.
	*
	* @private
	*/
	timeChange: function(sender, e) {
		this.setCurrentTime(e.value);
	},

	/**
	* Refreshes size of video player.
	*
	* @private
	*/
	handleResize: function() {
		this.aspectRatioChanged();
	},

	/**
	* Updates the height/width based on the video's aspect ratio.
	*
	* @private
	*/
	aspectRatioChanged: function() {
		// Case 5: Fixed size provided by user
		if (!this.inline || this.aspectRatio == 'none' || !this.aspectRatio) { return; }

		var videoAspectRatio = null,
			width = this.getComputedStyleValue('width'),
			height = this.getComputedStyleValue('height'),
			ratio = 1;

		videoAspectRatio = this.aspectRatio.split(':');

		// If fixedHeight is true, update width based on aspect ratio
		if (this.fixedHeight) {
			// Case 2: Automatic resize based on video aspect ratio (fixed height):
			// Case 4: Fixed aspect ratio provided by user (fixed-height):
			ratio = videoAspectRatio[0] / videoAspectRatio[1];
			this.applyStyle('width', dom.unit(parseInt(height, 10) * ratio, 'rem'));
		// If fixedHeight is false, update height based on aspect ratio
		} else if (!this.fixedHeight) {
			// Case 1: Automatic resize based on video aspect ratio (fixed width):
			// Case 3: Fixed aspect ratio provided by user (fixed-width):
			ratio = videoAspectRatio[1] / videoAspectRatio[0];
			this.applyStyle('height', dom.unit(parseInt(width, 10) * ratio, 'rem'));
		}
	},

	/**
	* @private
	*/
	updatePosition: function() {
		if (this.isFullscreen() || !this.getInline()) {
			this.updateFullscreenPosition();
		} else {
			this.updateInlinePosition();
		}
	},

	/**
	* Properly formats time.
	*
	* @private
	*/
	formatTime: function(val) {
		var hour = Math.floor(val / (60*60));
		var min = Math.floor((val / 60) % 60);
		var sec = Math.floor(val % 60);
		if (this.durfmt) {
			var time = {minute: min, second: sec};
			if (hour) {
				time.hour = hour;
			}
			return this.durfmt.format(time);
		} else {
			return (hour ? this.padDigit(hour) + ':' : '') + this.padDigit(min) + ':' + this.padDigit(sec);
		}
	},

	/**
	* Time formatting helper.
	*
	* @private
	*/
	padDigit: function(val) {
		return (val) ? (String(val).length < 2) ? '0'+val : val : '00';
	},

	/**
	* Switches play/pause buttons as appropriate.
	*
	* @private
	*/
	updatePlayPauseButtons: function() {
		if (this._isPlaying) {
			this.retrieveIconsSrcOrFont(this.$.fsPlayPause, this.pauseIcon, 'moon-icon-playpause-font-style');
		} else {
			this.retrieveIconsSrcOrFont(this.$.fsPlayPause, this.playIcon, 'moon-icon-playpause-font-style');
		}
		if (this._isPlaying) {
			this.retrieveIconsSrcOrFont(this.$.ilPlayPause, this.inlinePauseIcon, 'moon-video-inline-control-play-pause');
		} else {
			this.retrieveIconsSrcOrFont(this.$.ilPlayPause, this.inlinePlayIcon, 'moon-video-inline-control-play-pause');
		}
	},

	/**
	* Retrieves icons through either `setSrc()` or `setIcon()`, depending on the icon type.
	*
	* @private
	*/
	retrieveIconsSrcOrFont:function(src, icon, classes){
		var t = this.bindSafely('transformIconSrc');
		if(this.checkIconType(icon) == 'image') {
			src.setIcon('');
			src.setSrc(t(icon));
			if(src !== this.$.ilPlayPause){
				src.addRemoveClass(classes, Boolean(this.checkIconType(icon) == 'iconfont'));
			}
			src.addRemoveClass('moon-icon-', Boolean(this.checkIconType(icon) == 'iconfont'));
			src.addRemoveClass('"moon-icon-' + icon + '"', Boolean(this.checkIconType(icon) == 'iconfont'));
		}
		if(this.checkIconType(icon) == 'iconfont') {
			src.setSrc('');
			src.setIcon(t(icon));
			src.addRemoveClass(classes, Boolean(this.checkIconType(icon) == 'iconfont'));
			src.applyStyle('background-image', src.src);
		}
	},

	/**
	* Turns spinner on or off, as appropriate.
	*
	* @private
	*/
	updateSpinner: function() {
		var spinner = this.$.spinner;
		if (this.autoShowSpinner && this._isPlaying && !this._canPlay && !this._errorCode) {
			spinner.start();
			this.addClass("spinner-showing");
		} else if (spinner.getShowing()) {
			this.removeClass("spinner-showing");
			spinner.stop();
		}
	},

	/**
	* @private
	*/
	autoShowSpinnerChanged: function() {
		this.updateSpinner();
	},

	/**
	* When `moreButton` is tapped, toggles visibility of player controls and extra
	* functionality.
	*
	* @private
	*/
	moreButtonTapped: function(sender, e) {
		var index = this.$.controlsContainer.getIndex();
		if (index === 0) {
			this.retrieveIconsSrcOrFont(this.$.moreButton, this.lessControlsIcon, 'moon-icon-video-round-controls-style moon-icon-video-more-controls-font-style');
			this.toggleSpotlightForMoreControls(true);
			this.$.controlsContainer.next();
		} else {
			this.retrieveIconsSrcOrFont(this.$.moreButton, this.moreControlsIcon, 'moon-icon-video-round-controls-style moon-icon-video-more-controls-font-style');
			this.toggleSpotlightForMoreControls(false);
			this.$.controlsContainer.previous();
		}
	},
	updateMoreButton: function() {
		var index = this.$.controlsContainer.getIndex();
		if (index === 0) {
			this.retrieveIconsSrcOrFont(this.$.moreButton, this.moreControlsIcon, 'moon-icon-video-round-controls-style moon-icon-video-more-controls-font-style');
		} else {
			this.retrieveIconsSrcOrFont(this.$.moreButton, this.lessControlsIcon, 'moon-icon-video-round-controls-style moon-icon-video-more-controls-font-style');
		}
	},
	toggleSpotlightForMoreControls: function(moreControlsSpottable) {
		this.$.playbackControls.spotlightDisabled = moreControlsSpottable;
		this.$.client.spotlightDisabled = !moreControlsSpottable;
	},

	///////// VIDEO EVENT HANDLERS /////////

	/**
	* Updates the video time.
	*
	* @private
	*/
	timeUpdate: function(sender, e) {
		//* Update _this.duration_ and _this.currentTime_
		if (!e && e.srcElement || e.currentTime == null) {
			return;
		}

		this.duration = e.duration;
		this._currentTime = e.currentTime;

		this.updatePosition();

		// TODO: Event handler shouldn't know about event delegates.
		// Waterfall should handle this automatically.
		// See https://enyojs.atlassian.net/browse/ENYO-3188
		delete e.delegate;
		this.waterfall('onTimeupdate', e);
	},

	/**
	* Called when video successfully loads video metadata.
	*
	* @private
	*/
	metadataLoaded: function(sender, e) {
		//* Update aspect ratio based on actual video aspect ratio when autoResize is true.
		if (this.autoResize && this.$.video) {
			this.setAspectRatio(this.$.video.getAspectRatio());
		}
		this.durationUpdate(sender, e);
	},

	/**
	* @private
	*/
	durationUpdate: function(sender, e) {
		this.duration = this.$.video.getDuration();
		this._currentTime = this.$.video.getCurrentTime();

		this.$.slider.setMin(0);
		this.$.slider.setMax(this.duration);

		this.updatePosition();

		this.waterfall('onTimeupdate', e);
	},

	/**
	* @private
	*/
	_loaded: false,

	/**
	* @private
	*/
	dataloaded: function(sender, e) {
		this._loaded = true;
		this.updateSliderState();
		this.durationUpdate(sender, e);
	},

	/**
	* @private
	*/
	_getBufferedProgress: function(node) {
		var bufferData = node.buffered,
			numberOfBuffers = bufferData.length,
			highestBufferPoint = 0,
			duration = node.duration || 0,
			endPoint = 0,
			i
		;

		if (duration === 0 || isNaN(duration)) {
			return {value: 0, percent: 0};
		}

		// Find furthest along buffer end point and use that (only supporting one buffer range for now)
		for (i = 0; i < numberOfBuffers; i++) {
			endPoint = bufferData.end(i);
			highestBufferPoint = (endPoint > highestBufferPoint) ? endPoint : highestBufferPoint;
		}
		return {value: highestBufferPoint, percent: highestBufferPoint/duration*100};
	},

	/**
	* We get this event while buffering is in progress.
	*
	* @private
	*/
	_progress: function(sender, e) {
		var buffered = this._getBufferedProgress(e.srcElement);
		if (this.isFullscreen() || !this.getInline()) {
			this.$.slider.setBgProgress(buffered.value);
		} else {
			this.$.bgProgressStatus.applyStyle('width', buffered.percent + '%');
		}
	},

	/**
	* @private
	*/
	_resetTime: function() {
		this._currentTime = 0;
		this.duration = 0;
		this.updatePosition();
		this.$.slider.setBgProgress(0);
		this.$.bgProgressStatus.applyStyle('width', 0);
	},

	/**
	* @private
	*/
	_play: function(sender, e) {
		this.sendFeedback('Play');
	},

	/**
	* @private
	*/
	_pause: function(sender, e) {
		// Don't send pause feedback if we are rewinding
		if (e.srcElement.playbackRate < 0) {
			return;
		}
		if (e.srcElement.currentTime === 0) {
			this.sendFeedback('Stop', {}, true);
			return;
		}
		this.sendFeedback('Pause', {}, true);
	},

	/**
	* @private
	*/
	_stop: function(sender, e) {
		this.pause();
		this.updatePlayPauseButtons();
		this.updateSpinner();
		this.sendFeedback('Stop');
	},

	/**
	* @private
	*/
	_fastforward: function(sender, e) {
		this.sendFeedback('Fastforward', {playbackRate: e.playbackRate}, true);
	},

	/**
	* @private
	*/
	_slowforward: function(sender, e) {
		this.sendFeedback('Slowforward', {playbackRate: e.playbackRate}, true);
	},

	/**
	* @private
	*/
	_rewind: function(sender, e) {
		this.sendFeedback('Rewind', {playbackRate: e.playbackRate}, true);
	},

	/**
	* @private
	*/
	_slowrewind: function(sender, e) {
		this.sendFeedback('Slowrewind', {playbackRate: e.playbackRate}, true);
	},

	/**
	* @private
	*/
	_jumpForward: function(sender, e) {
		this.sendFeedback('JumpForward', {jumpSize: e.jumpSize}, false);
	},

	/**
	* @private
	*/
	_jumpBackward: function(sender, e) {
		this.sendFeedback('JumpBackward', {jumpSize: e.jumpSize}, false);
	},

	/**
	* @private
	*/
	_waiting: function(sender, e) {
		this._canPlay = false;
		this.updateSpinner();
	},

	/**
	* @private
	*/
	_setCanPlay: function(sender, e) {
		this._canPlay = true;
		this.updateSpinner();
	},

	/**
	* @private
	*/
	_error: function(sender, e) {
		// Error codes in e.currentTarget.error.code
		// 1: MEDIA_ERR_ABORTED, 2: MEDIA_ERR_NETWORK, 3: MEDIA_ERR_DECODE,
		// 4: MEDIA_ERR_SRC_NOT_SUPPORTED
		this._errorCode = e.currentTarget.error.code;
		this._loaded = false;
		this._isPlaying = false;
		this._canPlay = false;
		this.$.currTime.setContent($L('Error'));
		this._stop();
		this.updateSpinner();
		this.updatePlaybackControlState();
	},

	/**
	* @private
	*/
	remoteKeyHandler: function(sender, e) {
		if (this.handleRemoteControlKey && !this.disablePlaybackControls) {
			var showControls = false;
			switch (e.keySymbol) {
			case 'play':
				this.play(sender, e);
				showControls = true;
				break;
			case 'pause':
				this.pause(sender, e);
				showControls = true;
				break;
			case 'rewind':
				if (this.showFFRewindControls) {
					this.rewind(sender, e);
					showControls = true;
				}
				break;
			case 'fastforward':
				if (this.showFFRewindControls) {
					this.fastForward(sender, e);
					showControls = true;
				}
				break;
			case 'stop':
				this._isPlaying = false;
				this.jumpToStart();
				this.$.slider.setValue(0);
				this.sendFeedback('Stop');
				showControls = true;
				break;
			}
			if (showControls) {
				if(!this.$.playerControl.getShowing()) {
					this.showFSBottomControls();
				} else {
					this.resetAutoTimeout();
				}
			}
		}
		return true;
	},

	/**
	* @private
	*/
	backKeyHandler: function () {
		// if videoInfoHeaderClient and playerControl are visible
		// it means that we pushed video player into history stack twice.
		// to set correct target for next back key, we should pop one instance.
		var visibleUp = this.$.videoInfoHeaderClient.getShowing(),
			visibleDown = this.$.playerControl.getShowing();

		if (visibleUp && visibleDown
			&& MoonHistory.getCurrentObj() == this) {
			MoonHistory.ignorePopState();
			MoonHistory._popBackHistory();
		}
		if (visibleUp) {
			this.hideFSInfo();
		}
		if (visibleDown) {
			this.hideFSBottomControls();
		}
		return true;
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Animator":15,"../../../enyo/lib/Control":26,"../../../enyo/lib/Signals":68,"../../../enyo/lib/Video":83,"../../../enyo/lib/dispatcher":86,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../layout/lib/CarouselArranger":110,"../../../layout/lib/FittableColumns":113,"../../../layout/lib/Panels":118,"../../../moonstone":119,"../../../spotlight":275,"../History":152,"../IconButton":154,"../Spinner":186,"../VideoFullscreenToggleButton":197,"../VideoTransportSlider":201,"../i18n":203}],160:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	Header = require('../Header');

/**
* {@link moon.InputHeader} is a header that uses an input for the title. While this
* was initially created as an independent subkind of {@link moon.Header}, its unique
* functionality has since been folded back into the latter kind, making the current
* incarnation of `moon.InputHeader` simply a `moon.Header` whose
* [inputMode]{@link moon.Header#inputMode} is set to `true`. We continue to offer
* `moon.InputHeader` as a separate kind for reasons of convenience and backward
* compatibility.
*
* The [title]{@link moon.Header#title} property is used as the input placeholder,
* while the [value]{@link moon.Header#value} property contains the contents of the
* input. Developers may listen for
* [onInputHeaderInput]{@link moon.Header#onInputHeaderInput} and
* [onInputHeaderChange]{@link moon.Header#onInputHeaderChange} events from the
* embedded input to respond to changes.
*
* ```
* {
* 	kind: 'moon.InputHeader',
* 	title: 'Input Header',
* 	titleAbove: '02',
* 	titleBelow: 'Sub Header',
* 	subTitleBelow: 'Sub-sub Header',
* 	components: [
* 		{kind: 'moon.IconButton', src: 'assets/icon-like.png'},
* 		{kind: 'moon.IconButton', src: 'assets/icon-next.png'}
* 	]
* }
* ```
*
* @class moon.InputHeader
* @extends moon.Header
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.InputHeader.prototype */ {

	/**
	* @private
	*/
	name: 'moon.InputHeader',

	/**
	* @private
	*/
	kind: Header,

	/**
	* @private
	*/
	classes: 'moon-input-header',

	/**
	* @private
	*/
	inputMode: true
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../Header":150}],169:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control');

var
	FittableLayout = require('../../../layout/lib/FittableLayout'),
	FittableRows = require('../../../layout/lib/FittableRows'),
	FittableRowsLayout = FittableLayout.Rows;

var
	Spotlight = require('../../../spotlight');

var
	options = require('../options'),
	StyleAnimator = require('../StyleAnimator'),
	Header = require('../Header'),
	Marquee = require('../Marquee'),
	MarqueeSupport = Marquee.Support,
	MarqueeItem = Marquee.Item;

/**
* Fires when this [panel]{@link moon.Panel} has completed its pre-arrangement transition.
* No additional data is passed with this event.
*
* @event moon.Panel#onPreTransitionComplete
* @type {Object}
* @public
*/

/**
* Fires when this [panel]{@link moon.Panel} has completed its post-arrangement transition.
* No additional data is passed with this event.
*
* @event moon.Panel#onPostTransitionComplete
* @type {Object}
* @public
*/

/**
* {@link moon.Panel} is the default kind for controls created inside a
* [moon.Panels]{@link moon.Panels} container. A `moon.Panels` will typically
* contain several instances of `moon.Panel`.
*
* The built-in features include an embedded {@link moon.Header} and an
* {@link enyo.FittableRows} layout for the main body content.
*
* @class moon.Panel
* @extends enyo.Control
* @ui
* @public
*/

module.exports = kind(
	/** @lends moon.Panel.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Panel',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	* @lends moon.Panel.prototype
	*/
	published: {
		/**
		* Facade for the [title]{@link moon.Header#title} property of the embedded
		* {@link moon.Header}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		title: '',

		/**
		* Facade for the [titleAbove]{@link moon.Header#titleAbove} property of the
		* embedded {@link moon.Header}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		titleAbove: '',

		/**
		* Facade for the [titleBelow]{@link moon.Header#titleBelow} property of the
		* embedded {@link moon.Header}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		titleBelow: '',

		/**
		* Facade for the [subTitleBelow]{@link moon.Header#subTitleBelow} property
		* of the embedded {@link moon.Header}.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		subTitleBelow: '',

		/**
		* When `true`, the header's [titleAbove]{@link moon.Header#titleAbove} property
		* is automatically populated with the panel index.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoNumber: true,

		/**
		* Facade for the [type]{@link moon.Header#type} property of the embedded
		* {@link moon.Header}.
		* Valid values are: `'large'`, `'small'`, and `'medium'`.
		*
		* @type {String}
		* @default 'large'
		* @public
		*/
		headerType: 'large',

		/**
		* Facade for the [small]{@link moon.Header#small} property of the embedded
		* {@link moon.Header}. Note that this property will be deprecated soon. Until
		* it is removed, `'smallHeader: true'` refers to the historical header size,
		* which is now equivalent to `type: 'medium'`.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		smallHeader: false,

		/**
		* If `true`, the header collapses when the panel body is scrolled down.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		collapsingHeader: false,

		/**
		* Facade for the [allowHtml]{@link enyo.Control#allowHtml} property of the
		* embedded {@link moon.Header}.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		allowHtmlHeader: false,

		/**
		* Facade for the [backgroundSrc]{@link moon.Header#backgroundSrc} property
		* of the embedded {@link moon.Header}.
		*
		* @type {(String|String[]|moon.ri.selectSrc~src|moon.ri.selectSrc~src[])}
		* @default null
		* @public
		*/
		headerBackgroundSrc: null,

		/**
		* Facade for the [backgroundPosition]{@link moon.Header#backgroundPosition}
		* property of the embedded {@link moon.Header}.
		*
		* @type {(String|String[])}
		* @default 'top right'
		* @public
		*/
		headerBackgroundPosition: 'top right',

		/**
		* An object containing additional settings for the {@link moon.Header}. Any
		* values specified here will be mixed into the header definition.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		headerOptions: null,

		/**
		* Facade for the [titleUpperCase]{@link moon.Header#titleUpperCase} property
		* of the embedded {@link moon.Header}.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		titleUpperCase: true
	},

	/**
	* @private
	*/
	events: {
		/**
		* {@link moon.Panel#onPreTransitionComplete}
		*/
		onPreTransitionComplete: '',
		/**
		* {@link moon.Panel#onPostTransitionComplete}
		*/
		onPostTransitionComplete: ''
	},

	/**
	* @private
	*/
	handlers: {
		onScroll: 'scroll'
	},

	/**
	* @private
	*/
	spotlight: 'container',

	/**
	* @private
	*/
	classes: 'moon-panel',

	/**
	* @private
	*/
	layoutKind: FittableRowsLayout,

	/**
	* @private
	*/
	headerOption: null, //* Deprecated

	/**
	* @private
	*/
	preventTransform: !options.accelerate,

	/**
	* @private
	*/
	preventAccelerate: !options.accelerate,

	/**
	* @private
	*/
	panelTools : [
		{name: 'breadcrumb', kind: Control, ontap: 'handleBreadcrumbTap', classes: 'moon-panel-breadcrumb', components: [
			{name: 'breadcrumbViewport', kind: Control, classes: 'moon-panel-breadcrumb-viewport', components: [
				{name: 'breadcrumbBackground', kind: Control, classes: 'moon-panel-small-header-wrapper', components: [
					{name: 'breadcrumbTitleAbove', kind: Control, classes: 'moon-super-header-text moon-panel-small-header-title-above'},
					{name: 'breadcrumbText', kind: Control, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-sub-header-text moon-panel-small-header'}
				]}
			]}
		]},
		{name: 'viewport', kind: Control, classes: 'moon-panel-viewport', onwebkitAnimationEnd: 'animationComplete', components: [
			{name: 'contentWrapper', kind: FittableRows, classes: 'moon-panel-content-wrapper', components: [
				/* header will be created here programmatically in createTools after mixing-in headerOptions */
				{name: 'panelBody', kind: FittableRows, fit: true, classes: 'moon-panel-body'}
			]}
		]},

		{name: 'animator', kind: StyleAnimator, onComplete: 'animationComplete'},
		{name: 'spotlightDummy', kind: Control, spotlight: false, style: 'width:0;height:0;'}
	],

	/**
	* @private
	*/
	headerConfig : {name: 'header', kind: Header, onComplete: 'headerAnimationComplete', isChrome: true},

	/**
	* @private
	*/
	bindings: [
		{from: '.title', to: '.$.header.title'},
		{from: '.title', to: '.$.breadcrumbText.content'},
		{from: '.titleAbove', to: '.$.header.titleAbove'},
		{from: '.titleAbove', to: '.$.breadcrumbTitleAbove.content'},
		{from: '.titleBelow', to: '.$.header.titleBelow'},
		{from: '.subTitleBelow', to: '.$.header.subTitleBelow'},
		{from: '.allowHtmlHeader', to: '.$.header.allowHtml'},
		{from: '.allowHtmlHeader', to: '.$.breadcrumbText.allowHtml'},
		{from: '.headerBackgroundSrc', to: '.$.header.backgroundSrc'},
		{from: '.headerBackgroundPosition', to: '.$.header.backgroundPosition'},
		{from: '.titleUpperCase', to: '.$.header.titleUpperCase'},
		{from: '.headerType', to: '.$.header.type', oneWay: false}
	],

	/**
	* @private
	*/
	headerComponents: [],

	/**
	* @private
	*/
	isBreadcrumb: false,

	/**
	* @private
	*/
	isOffscreen: false,

	/**
	* @private
	*/
	isHeaderCollapsed: false,

	/**
	* @private
	*/
	shrinking: false,

	/**
	* @private
	*/
	growing: false,

	/**
	* Set by {@link moon.BreadcrumbArranger} during {@link moon.BreadcrumbArranger#size}
	* based on the value of {@link moon.Panels#animate}.
	*
	* @private
	*/
	animate: !options.accelerate,

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		// FIXME: Need to determine whether headerComponents was passed on the instance or kind to get the ownership correct
		if (this.headerComponents) {
			var owner = this.hasOwnProperty('headerComponents') ? this.getInstanceOwner() : this;
			this.$.header.createComponents(this.headerComponents, {owner: owner});
		}
		this.autoNumberChanged();
		// Note: This line will be deprecated soon. For backward compatiblity, I leave it for a while.
		this.smallHeaderChanged();
		this.headerTypeChanged();
		this.animateChanged();
	},

	/**
	* @private
	*/
	initComponents: function () {
		this.createTools();
		this.controlParentName = 'panelBody';
		this.discoverControlParent();
		Control.prototype.initComponents.apply(this, arguments);
	},

	/**
	* @private
	*/
	createTools: function () {
		// Create everything but the header
		this.createChrome(this.panelTools);
		// Special-handling for header, which can have its options modified by the instance
		var hc = util.clone(this.headerConfig || {});
		hc.addBefore = this.$.panelBody;
		util.mixin(hc, this.headerOptions || this.headerOption);
		this.$.contentWrapper.createComponent(hc, {owner:this});
	},

	/**
	* On reflow, updates `this.$.contentWrapper` bounds.
	* @private
	*/
	reflow: function () {
		Control.prototype.reflow.apply(this, arguments);
		this.getInitAnimationValues();
		this.updateViewportSize();
		this.shrinkAsNeeded();
	},

	/**
	* Updates `this.$.contentWrapper` to have the height/width of `this`.
	* @private
	*/
	updateViewportSize: function () {
		var node = this.hasNode();

		if (!node || this.isBreadcrumb) {
			return;
		}

		this.$.viewport.applyStyle('height', dom.unit(this.initialHeight, 'rem'));
		this.$.viewport.applyStyle('width', dom.unit(this.initialWidth, 'rem'));
		this.$.contentWrapper.applyStyle('height', dom.unit(this.initialHeight, 'rem'));
		this.$.contentWrapper.applyStyle('width', dom.unit(this.initialWidth, 'rem'));
	},

	/**
	* Forcibly applies layout kind changes to `this.$.panelBody`.
	* @private
	*/
	layoutKindChanged: function () {
		this.$.panelBody.setLayoutKind(this.layoutKind);
	},

	/**
	* @private
	*/
	updateSpotability: function () {
		if (this.isOffscreen) {
			this.spotlightDisabled = true;
			this.removeSpottableProps();
			this.removeSpottableBreadcrumbProps();
		} else {
			if (this.isBreadcrumb) {
				this.spotlightDisabled = true;
				this.addSpottableBreadcrumbProps();
			}
			else {
				this.spotlightDisabled = false;
				this.$.spotlightDummy.spotlight = false;
				if (!Spotlight.isSpottable(this)) {
					// make dummy div spottable if there is no spottable child
					this.$.spotlightDummy.spotlight = true;
				}
			}
		}
	},

	/**
	* @private
	*/
	handleBreadcrumbTap: function (sender, event) {
		event.breadcrumbTap = true;
	},

	/**
	* Note: `smallHeader` will be deprecated soon.
	* @private
	*/
	scroll: function (sender, event) {
		if (this.collapsingHeader && ((this.headerType === 'large') || !this.smallHeader)) {
			if (event.originator.y < 0) {
				this.collapseHeader();
			} else {
				this.expandHeader();
			}
		}
	},

	/**
	* @private
	*/
	animateChanged: function () {
		this.addRemoveClass('moon-composite', this.animate);
	},

	/**
	* Note: This method will be deprecated soon.
	* @private
	*/
	smallHeaderChanged: function () {
		this.$.header.setSmall(this.smallHeader);
		if (this.generated) {
			this.$.contentWrapper.resize();
		}
	},

	/**
	* @private
	*/
	headerTypeChanged: function () {
		this.$.header.setType(this.headerType);
		if (this.generated) {
			this.$.contentWrapper.resize();
		}
	},

	/**
	* @private
	*/
	collapseHeader: function () {
		if (!this.isHeaderCollapsed) {
			this.$.header.collapseToSmall();
			this.isHeaderCollapsed = true;
		}
	},

	/**
	* @private
	*/
	expandHeader: function () {
		if (this.isHeaderCollapsed) {
			this.$.header.expandToLarge();
			this.isHeaderCollapsed = false;
		}
	},

	/**
	* Updates [titleAbove]{@link moon.Panel#titleAbove} when
	* [autoNumber]{@link moon.Panel#autoNumber} changes.
	* @private
	*/
	autoNumberChanged: function () {
		if (this.getAutoNumber() === true && this.container) {
			// This gets the index regardless of whether the panel is client or chome
			var n = this.parent.indexOfChild(this) + 1;
			n = ((n < 10) ? '0' : '') + n;
			this.setTitleAbove(n);
		}
	},

	/**
	* @private
	*/
	generateAutoNumber: function () {
		var adjustedIndex = this.indexInContainer() + 1;
		return (adjustedIndex < 10) ? '0'+ adjustedIndex : adjustedIndex;
	},

	/**
	* @private
	*/
	addSpottableBreadcrumbProps: function () {
		this.$.breadcrumbBackground.set('spotlight', true);
	},

	/**
	* @private
	*/
	removeSpottableBreadcrumbProps: function () {
		this.$.breadcrumbBackground.set('spotlight', false);
		this.$.breadcrumbBackground.removeClass('spotlight');
	},

	/**
	* @private
	*/
	removeSpottableProps: function () {
		this.$.breadcrumbBackground.set('spotlight', false);
	},

	/**
	* @private
	*/
	shrinkAsNeeded: function () {
		if (this.needsToShrink) {
			this.shrink();
			this.needsToShrink = false;
		}
	},

	/**
	* @private
	*/
	enableMarquees: function () {
		this.$.breadcrumbText.enableMarquee();
		this.$.header.enableMarquee();
	},

	/**
	* @private
	*/
	disableMarquees: function () {
		this.$.breadcrumbText.disableMarquee();
		this.$.header.disableMarquee();
	},

	/**
	* @private
	*/
	startMarqueeAsNeeded: function (info) {
		var onscreen = !info.offscreen;
		if (onscreen) {
			if (this.isBreadcrumb) {
				this.$.breadcrumbText.enableMarquee();
				this.$.breadcrumbText.startMarquee();
			}
			else {
				this.$.header.enableMarquee();
				this.$.header.startMarquee();
			}
		}
	},

	/**
	* @private
	*/
	getHeader: function () {
		return this.$.header;
	},

	/**
	* Called directly by {@link moon.Panels}.
	* @private
	*/
	initPanel: function (info) {
		this.set('isBreadcrumb', info.breadcrumb);
		this.set('isOffscreen', info.offscreen);
		this.updateSpotability();
		if (this.isBreadcrumb) {
			this.needsToShrink = true;
		}
		this.disableMarquees();
		this.startMarqueeAsNeeded(info);
	},

	/**
	* Called directly by {@link moon.Panels}.
	* @private
	*/
	preTransition: function (info) {
		this.disableMarquees();
		this.addClass('transitioning');
		if (!this.shrinking && info.breadcrumb && (!this.isBreadcrumb || this.growing)) {
			this.shrinkAnimation();
			return true;
		}

		return false;
	},

	/**
	* Called directly by {@link moon.Panels}.
	* @private
	*/
	postTransition: function (info) {
		this.removeClass('transitioning');

		if (!this.growing && !info.breadcrumb && (this.isBreadcrumb || this.shrinking) && this.hasClass('shrunk')) {
            //only grow if it has been shrunk before
			this.growAnimation();
			return true;
		}

		return false;
	},

	/**
	* Called directly by {@link moon.Panels}.
	* @private
	*/
	updatePanel: function (info) {
		if (!info.animate) {
			this.disableMarquees();
		}

        if (this.isBreadcrumb && !info.breadcrumb) {
            this.grow();
        }

        if (!this.isBreadcrumb && info.breadcrumb) {
            this.shrink();
        }

		this.set('isBreadcrumb', info.breadcrumb);
		this.set('isOffscreen', info.offscreen);
		this.updateSpotability();
		this.startMarqueeAsNeeded(info);
	},

	/**
	* Called directly on the panel by {@link moon.Panels} when the panel has completed a
	* transition. You may override this function in a panel subkind to perform
	* post-transition work (e.g., loading data for the panel).
	*
	* @param {Object} info - Information from the [Panels]{@link moon.Panels} component.
	* Additional information may be supplied by the arranger, such as breadcrumb and
	* offscreen status.
	* @param {Number} info.from - The index the parent Panels was moving from for this transition.
	* @param {Number} info.to - The index the parent Panels was moving to for this transition.
	* @param {Number} info.index - The current index of this [panel]{@link moon.Panel}.
	* @param {Boolean} info.animate - Whether the parent Panels is set to animate.
	* @public
	*/
	transitionFinished: function (info) {
		this.updatePanel(info);
	},

	/**
	* @private
	*/
	shrinkAnimation: function () {
		this.growing = false;
		this.shrinking = true;
		this.addClass('shrunken');
		this.addClass('shrinking');
	},

	/**
	* @private
	*/
	shrink: function () {
		this.addClass('shrunken');
	},

	/**
	* @private
	*/
	growAnimation: function () {
		this.growing = true;
		this.shrinking = false;
		this.addClass('growing');
		this.removeClass('shrunken');
	},

	/**
	* @private
	*/
	grow: function () {
		this.removeClass('shrunken');
	},

	/**
	* Was protected
	* @private
	*/
	getInitAnimationValues: function () {
		var node = this.hasNode(),
			paddingT = parseInt(dom.getComputedStyleValue(node, 'padding-top'), 10),
			paddingR = parseInt(dom.getComputedStyleValue(node, 'padding-right'), 10),
			paddingB = parseInt(dom.getComputedStyleValue(node, 'padding-bottom'), 10),
			paddingL = parseInt(dom.getComputedStyleValue(node, 'padding-left'), 10);
		this.initialHeight = node.offsetHeight - paddingT - paddingB;
		this.initialWidth = node.offsetWidth   - paddingR - paddingL;
	},

	/**
	* @private
	*/
	haltAnimations: function () {
		this.removeClass('growing');
		this.removeClass('shrinking');
	},

	/**
	* @private
	*/
	preTransitionComplete: function () {
		this.shrinking = false;
		this.doPreTransitionComplete();
	},

	/**
	* @private
	*/
	postTransitionComplete: function () {
		this.growing = false;
		this.doPostTransitionComplete();
	},

	/**
	* @private
	*/
	animationComplete: function (sender, event) {
		if (this.shrinking) {
			this.removeClass('shrinking');
			this.preTransitionComplete();
			return true;
		}
		if (this.growing) {
			this.removeClass('growing');
			this.postTransitionComplete();
			return true;
		}
	},

	/**
	* @private
	*/
	headerAnimationComplete: function (sender, event) {
		if (event.animation) {
			switch (event.animation.name) {
			case 'collapseToSmall':
			case 'expandToLarge':
				// FIXME: It would be better to call this during the animation so it resizes
				// smoothly, but that's not possible with CSS transitions; it will jump now
				this.resize();
				return true;	// We stop header animation event bubble up here.
			}
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../layout/lib/FittableLayout":114,"../../../layout/lib/FittableRows":115,"../../../moonstone":119,"../../../spotlight":275,"../Header":150,"../Marquee":166,"../StyleAnimator":187,"../options":204}],132:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Spotlight = require('../../../spotlight');

var
	ContextualPopupButton = require('../ContextualPopupButton');

/**
* {@link moon.ContextualPopupDecorator} is a control that loosely couples a
* {@link moon.ContextualPopup} with an activating control, which may be a button
* or any other control that fires an [onActivate]{@link enyo.Control#onActivate}
* event. The decorator surrounds both the activating control and the contextual popup.
*
* When the control is activated, the popup shows itself in the correct position
* relative to the activator.
*
* ```
*		{kind: 'moon.ContextualPopupDecorator', components: [
*			{content: 'Show Popup'},
*			{kind: 'moon.ContextualPopup',
*				components: [
*					{content:'Sample component in popup'}
*				]
*			}
*		]}
* ```
*
* @class moon.ContextualPopupDecorator
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ContextualPopupDecorator.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ContextualPopupDecorator',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	defaultKind: ContextualPopupButton,

	/**
	* Selection on iOS prevents tap events, so avoid.
	*
	* @private
	*/
	classes: 'moon-contextual-popup-decorator',

	/**
	* @private
	*/
	handlers: {
		onActivate: 'activated',
		onShow: 'popupShown',
		onHide: 'popupHidden',
		onRequestSpot: 'requestSpot'
	},

	/**
	* @fires enyo.Control#onActivate
	* @private
	*/
	activated: function (inSender, inEvent) {
		// Don't process activate events that came from inside this decorator
		if (inEvent.sentFromPopup && inEvent.sentFromPopup.isDescendantOf(this)) {
			return;
		}

		if (inEvent.originator.active) {
			this.activator = inEvent.originator;
			// if this ContextualPopup is already activated
			if (this.popupActivated) {
				inEvent.originator.active = false;
				this.popupActivated = false;
			} else {
				this.activator.addClass('active');
				this.requestShowPopup();
			}
		}
	},

	/**
	* Handles `onShow` event.  Since the popup is a 'client control' of the decorator,
	* we should provide a connector between them.
	*
	* @param {Object} inSender - The component that most recently propagated the `onShow` event.
	* @param {Object} inEvent - An object containing event information.
	* @private
	*/
	popupShown: function (inSender, inEvent) {
		if (this.popup === undefined) {
			this.popup = inEvent.originator;
		}
	},

	/**
	* Handles `onHide` event. If you tap outside of the popup, it will close.
	*
	* @private
	*/
	popupHidden: function () {
		if (this.activator) {
			this.popupActivated = this.popup.popupActivated;
			this.activator.active = false;
			this.activator.removeClass('active');
			this.activator.removeClass('pressed');
		}
	},

	/**
	* Event waterfalls down.
	* @fires moon.ContextualPopup#onRequestShowPopup
	* @private
	*/
	requestShowPopup: function () {
		this.waterfallDown('onRequestShowPopup', {activator: this.activator});
	},

	/**
	* Event waterfalls down.
	* @fires moon.ContextualPopup#onRequestHidePopup
	* @private
	*/
	requestHidePopup: function () {
		this.waterfallDown('onRequestHidePopup');
	},

	/**
	* When back key is pressed, return spotlight focus to popup button
	*
	* @private
	*/
	requestSpot: function (inSender, inEvent) {
		Spotlight.spot(this);
		return true;
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../ContextualPopupButton":131}],137:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control');

var
	Popup = require('../Popup'),
	IconButton = require('../IconButton'),
	BodyText = require('../BodyText'),
	Divider = require('../Divider'),
	MoonHistory = require('../History'),
	HistorySupport = MoonHistory.HistorySupport,
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text,
	MarqueeSupport = Marquee.Support;

/**
* {@link moon.Dialog} is a {@link moon.Popup} with a title, a subtitle, a
* message, and an area for additional controls.
*
* @class moon.Dialog
* @extends moon.Popup
* @mixes moon.MarqueeSupport
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Dialog.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Dialog',

	/**
	* @private
	*/
	kind: Popup,

	/**
	* @private
	*/
	classes: 'moon-dialog',

	/**
	* @private
	* @lends moon.Dialog.prototype
	*/
	published: {

		/**
		* The title for the dialog.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		title: '',

		/**
		* The subtitle for the dialog.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		subTitle: '',

		/**
		* The message for the dialog.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		message: '',

		/**
		* When `true`, the title text will have locale-safe uppercasing applied.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		uppercase: true,

		/**
		* @deprecated Replaced by [uppercase]{@link moon.Dialog#uppercase}.
		*
		* Formerly defaulted to `true`, now defaults to `null` and will only have
		* an effect when explicitly set (for complete backward compatibility).
		*
		* @type {Boolean}
		* @default null
		* @public
		*/
		titleUpperCase: null
	},

	/**
	* @private
	*/
	mixins: [MarqueeSupport, HistorySupport],

	/**
	* @private
	*/
	marqueeOnSpotlight: false,

	/**
	* @private
	*/
	marqueeOnHover: true,

	/**
	* @private
	*/
	marqueeOnRender: true,

	/**
	* @private
	*/
	marqueeOnRenderDelay: 5000,

	/**
	* @private
	*/
	tools: [
		{name: 'closeButton', kind: IconButton, icon: 'closex', classes: 'moon-popup-close', ontap: 'closePopup', showing: false},
		{kind: Control, classes: 'moon-dialog-client-wrapper', components: [
			{name: 'client', kind: Control, classes: 'moon-dialog-client'},
			{components: [
				{name: 'title', kind: MarqueeText, classes: 'moon-popup-header-text moon-dialog-title'},
				{name: 'subTitle', kind: Control, classes: 'moon-dialog-sub-title'}
			]}
		]},
		{kind: Divider, classes: 'moon-dialog-divider'},
		{name: 'message', kind: BodyText, classes: 'moon-dialog-content'},
		{name: 'spotlightDummy', kind: Control, spotlight: false}
	],

	/**
	* @private
	*/
	create: function () {
		Popup.prototype.create.apply(this, arguments);

		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// the titleUpperCase property is fully deprecated and removed. The legacy
		// property takes precedence if it exists.
		if (this.titleUpperCase !== null) this.uppercase = this.titleUpperCase;

		this.titleChanged();
		this.subTitleChanged();
		this.messageChanged();
	},

	/**
	* @private
	*/
	titleChanged: function () {
		var title = this.getTitle();
		this.$.title.setContent( this.get('uppercase') ? util.toUpperCase(title) : title );
	},

	/**
	* @private
	*/
	uppercaseChanged: function () {
		// FIXME: Backwards-compatibility for deprecated property - can be removed when
		// titleUpperCase is fully deprecated and removed.
		if (this.titleUpperCase != this.uppercase) this.titleUpperCase = this.uppercase;
		this.titleChanged();
	},

	/**
	* @private
	*/
	titleUpperCaseChanged: function () {
		if (this.uppercase != this.titleUpperCase) this.uppercase = this.titleUpperCase;
		this.uppercaseChanged();
	},

	/**
	* @private
	*/
	subTitleChanged: function () {
		this.$.subTitle.setContent(this.subTitle);
	},

	/**
	* @private
	*/
	messageChanged: function () {
		this.$.message.setContent(this.message);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../BodyText":121,"../Divider":138,"../History":152,"../IconButton":154,"../Marquee":166,"../Popup":171}],255:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	Divider = require('../../../moonstone/lib/Divider'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	ProgressButton = require('../../../moonstone/lib/ProgressButton');

module.exports = kind({
	name: 'moon.sample.ProgressButtonSample',
	classes: 'moon enyo-unselectable enyo-fit',
	contentChange: false,
	components: [
		{kind: Divider, content: 'Progress Button with Auto Download'},
		{name: 'autoDownload', kind: ProgressButton, content: 'Auto Download', postContent: 'Auto Launch', progress: 0, ontap: 'startDownloading'},
		{tag: 'br'},
		{tag: 'br'},
		{kind: Divider, content: 'Simple Progress Button'},
		{name: 'progressButton', kind: ProgressButton, progress: 0, content: 'Download', postContent: 'Launch', barClasses: 'moon-sample-blue', ontap: 'changeValue'},
		{tag: 'br'},
		{tag: 'br'},
		{kind: InputDecorator, style: 'margin-right:10px;', components: [
			{kind: Input, value: 10}
		]},
		{kind: Button, content: 'Set', small: true, classes: 'moon-sample-spaced-button', ontap: 'changeValue'},
		{kind: Button, content: '-', small: true, classes: 'moon-sample-spaced-button', ontap: 'decValue'},
		{kind: Button, content: '+', small: true, classes: 'moon-sample-spaced-button', ontap: 'incValue'},
		{tag: 'br'},
		{tag: 'br'},
		{style: 'width:240px;', components: [
			{name: 'animateSetting', kind: CheckboxItem, checked: true, content: 'Animated'}
		]}
	],
	bindings: [
		{from: '$.animateSetting.checked', to: '$.autoDownload.animated'},
		{from: '$.animateSetting.checked', to: '$.progressButton.animated'}
	],
	changeValue: function (sender, event) {
		if (this.$.animateSetting.getChecked()) {
			this.$.progressButton.animateProgressTo(this.$.input.getValue());
		} else {
			this.$.progressButton.setProgress(this.$.input.getValue());
		}
	},
	incValue: function () {
		this.$.input.setValue(Math.min(parseInt(this.$.input.getValue() || 0, 10) + 10, 100));
		this.changeValue();
	},
	decValue: function () {
		this.$.input.setValue(Math.max(parseInt(this.$.input.getValue() || 0, 10) - 10, 0));
		this.changeValue();
	},
	startDownloading: function () {
		var _this = this;
		if (_this.contentChange === false) {
			_this.downloadProgress = 0;
			_this.contentChange = true;
			var timer = setInterval(function () {
				++_this.downloadProgress;
				_this.$.autoDownload.animateProgressTo(_this.downloadProgress);
				if (_this.downloadProgress >= 100) {
					clearInterval(timer);
				}
			}, 100);
		}
	}
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/ProgressButton":173}],271:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Button = require('../../../moonstone/lib/Button'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator');

module.exports = kind({
	name: 'moon.sample.TooltipSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		//Top row of buttons
		{classes: 'moon-5v', components:[
			{kind: TooltipDecorator, components: [
				{kind: Button, disabled: true, centered: true, content: 'Left Tooltip'},
				{kind: Tooltip, content: 'I\'m a left tooltip.', position: 'above'}
			]},

			{kind: TooltipDecorator, style: 'float:right', components: [
				{kind: Button, content: 'Right Tooltip'},
				{name: 'toolTip', kind: Tooltip, uppercase: false, content: 'I\'m a right tooltip.'}
			]}
		]},
		//Second row of buttons
		{classes: 'moon-5v', components:[
			{kind: TooltipDecorator, components: [
				{kind: Button, small: true, content: 'Item with Left Floating Tooltip'},
				{kind: Tooltip, floating: true, content: 'I\'m a left floating tooltip.'}
			]},

			{kind: TooltipDecorator, style: 'float: right', components: [
				{kind: Button, disabled: true, small: true, content: 'Item with Right Floating Tooltip'},
				{name: 'toolTipFloating', floating: true, kind: Tooltip, content: 'I\'m a right floating text tooltip', position: 'above'}
			]}
		]},
		// third row of buttons
		{fit: true, components:[
			{kind: TooltipDecorator, components: [
				{kind: InputDecorator, components: [
					{kind: Input, style: 'width: 130px;', placeholder: 'Above'}
				]},
				{kind: Tooltip, floating: true, content: 'I\'m a tooltip for an input.', position: 'above'}
			]},

			{kind: TooltipDecorator, style: 'float:right;', components: [
				{kind: InputDecorator, components: [
					{kind: Input, style: 'width: 130px;', placeholder: 'Below'}
				]},
				{kind: Tooltip, content: 'I\'m a tooltip for an input.', position: 'below'}
			]}
		]},
		//Bottom row of buttons
		{components:[
			{kind: TooltipDecorator, components: [
				{kind: IconButton, src: 'assets/icon-button-enyo-logo.png'},
				{kind: Tooltip, floating: true, content: 'Floating tooltip for an IconButton.'}
			]},

			{kind: TooltipDecorator, style: 'float:right;', components: [
				{kind: IconButton, src: 'assets/icon-button-enyo-logo.png'},
				{kind: Tooltip, floating: false, content: 'I\'m a tooltip for an IconButton.'}
			]}
		]}
	]
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195}],120:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Drawer = require('../../../enyo/lib/Drawer'),
	Group = require('../../../enyo/lib/Group');

var
	ExpandableListItem = require('../ExpandableListItem'),
	Item = require('../Item'),
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text;

/**
* {@link moon.Accordion} is a {@link moon.ExpandableListItem} with an arrow button
* to the right of the header and additional margin space to the left of the item list.
*
* To open or close the drawer, tap on the header text or navigate (via 5-way)
* back to the top of the drawer.
*
* The control's child components may be of any kind; by default, they are
* instances of {@link moon.Item}.
*
* ```
* {kind: 'moon.Accordion', content: 'This is an accordion', components: [
* 	{content: 'Item One'},
* 	{content: 'Item Two'}
* ]},
* {kind: 'moon.Accordion', content: 'This is another accordion', components: [
* 	{content: 'Item Three'},
* 	{content: 'Item Four'}
* ]}
* ```
*
* When multiple Accordions are used in a group, only one may be open at a given time.
*
* ```
* {kind: 'Group', highlander: true, components: [
* 	{kind: 'moon.Accordion',  open: true, content: 'This is a grouped accordion', components: [
* 		{content: 'Item One'},
* 		{content: 'Item Two'}
* 	]},
* 	{kind: 'moon.Accordion', content: 'This is another grouped accordion', components: [
* 		{content: 'Item Three'},
* 		{content: 'Item Four'}
* 	]},
* 	{kind: 'moon.Accordion', content: 'This is yet another grouped accordion', components: [
* 		{content: 'Item Five'},
* 		{content: 'Item Six'}
* 	]}
* ]}
* ```
*
* @class moon.Accordion
* @extends moon.ExpandableListItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Accordion.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Accordion',

	/**
	* @private
	*/
	kind: ExpandableListItem,

	/**
	* @private
	*/
	classes: 'moon-accordion',

	/**
	* @private
	*/
	components: [
		{name: 'headerWrapper', kind: Item, classes: 'moon-accordion-header-wrapper', onSpotlightFocus: 'headerFocus', ontap: 'expandContract', components: [
			// headerContainer required to avoid bad scrollWidth returned in RTL for certain text widths
			// (webkit bug)
			{name: 'headerContainer', kind: Control, classes: 'moon-expandable-list-item-header moon-expandable-picker-header moon-accordion-header', components: [
				{name: 'header', kind: MarqueeText}
			]}
		]},
		{name: 'drawer', kind: Drawer, resizeContainer:false, classes: 'moon-expandable-list-item-client', components: [
			{name: 'client', kind: Group, tag: null}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.disabled', to: '.$.headerWrapper.disabled'}
	]
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Drawer":32,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../ExpandableListItem":145,"../Item":162,"../Marquee":166}],136:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Signals = require('../../../enyo/lib/Signals');

var
	Spotlight = require('../../../spotlight');

var
	ilib = require('../../../enyo-ilib');

var
	ExpandableListDrawer = require('../ExpandableListDrawer'),
	ExpandableListItem = require('../ExpandableListItem'),
	Item = require('../Item'),
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text;

/**
* Fires when the picker's value changes.
*
* @event moon.DateTimePickerBase#onChange
* @type {Object}
* @property {String} name - The name of this control.
* @property {Date} value - A standard JavaScript {@glossary Date} object representing
* the picker's current value.
* @public
*/

/**
* {@link moon.DateTimePickerBase} is a base kind implementing fuctionality shared by
* {@link moon.DatePicker} and {@link moon.TimePicker}. It is not intended to be used
* directly.
*
* @class moon.DateTimePickerBase
* @extends moon.ExpandableListItem
* @ui
* @protected
*/

module.exports = kind(
	/** @lends moon.DateTimePickerBase.prototype */ {

	/**
	* @private
	*/
	name: 'moon.DateTimePickerBase',

	/**
	* @private
	*/
	kind: ExpandableListItem,

	/**
	* @private
	*/
	defaultKind: Control,

	/**
	* @private
	*/
	classes: 'moon-expandable-picker moon-date-picker',

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.DateTimePickerBase#onChange}
		*/
		onChange: ''
	},

	/**
	* @private
	* @lends moon.DateTimePickerBase.prototype
	*/
	published: {

		/**
		* Text to be displayed as the current value if no item is currently selected.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		noneText: '',

		/**
		* The locale (in IETF format) used for picker formatting.
		*
		* This setting only applies when the [iLib]{@glossary ilib} library is loaded.
		*
		* When `iLib` is not present, U.S. English `(en-US)` formatting is applied.
		*
		* When `iLib` is present and `locale` is set to the default value `(null)`,
		* the picker uses `iLib`'s current locale (which `iLib` tries to determine
		* from the system).
		*
		* When `iLib` is present and an explicit `locale` is provided, that locale
		* will be used (regardless of `iLib`'s current locale).
		*
		* The `locale` value may be changed after the picker is created; if this happens,
		* the picker will be reformatted to reflect the new setting.
		*
		* @type {Object}
		* @default null
		* @public
		*/
		locale: null,

		/**
		* The value of the picker, expressed as a standard JavaScript {@glossary Date}
		* object.
		*
		* @type {Date}
		* @default null
		* @public
		*/
		value: null,

		/**
		* If `true`, the picker will use a 12-hour clock (this value is ignored when
		* `iLib` is loaded, since the meridiem will be set by the current locale).
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		meridiemEnable: false
	},

	/**
	* Set in subkind.
	*
	* @private
	*/
	iLibFormatType: null,

	/**
	* Set in subkind.
	*
	* @private
	*/
	defaultOrdering: null,

	/**
	* @private
	*/
	components: [
		{name: 'headerWrapper', kind: Item, classes: 'moon-date-picker-header-wrapper', onSpotlightFocus: 'headerFocus', ontap: 'expandContract', components: [
			// headerContainer required to avoid bad scrollWidth returned in RTL for certain text widths (webkit bug)
			{name: 'headerContainer', kind: Control, classes: 'moon-expandable-list-item-header moon-expandable-picker-header moon-expandable-datetime-header', components: [
				{name: 'header', kind: MarqueeText}
			]},
			{name: 'currentValue', kind: MarqueeText, classes: 'moon-expandable-picker-current-value'}
		]},
		{name: 'drawer', kind: ExpandableListDrawer, resizeContainer:false, classes:'moon-expandable-list-item-client indented', components: [
			{name: 'client', kind: Control, classes: 'enyo-tool-decorator moon-date-picker-client', onSpotlightLeft:'closePicker', onSpotlightSelect: 'closePicker'}
		]},
		{kind: Signals, onlocalechange: 'handleLocaleChangeEvent'}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.disabled', to: '.$.headerWrapper.disabled'}
	],

	/**
	* @private
	*/
	create: function () {
		ExpandableListItem.prototype.create.apply(this, arguments);
		this.initDefaults();
	},

	/**
	* @private
	*/
	initILib: function () {
		var fmtParams = {
			type: this.iLibFormatType,
			useNative: false,
			timezone: 'local',
			length: 'full',
			date: 'dmwy'
		};

		fmtParams.locale = this.locale;
		this.iLibLocale = ilib.getLocale();
		this._tf = new ilib.DateFmt(fmtParams);
	},

	/**
	* @private
	*/
	initDefaults: function () {
		var ordering;
		//Attempt to use the ilib lib (assuming that it is loaded)
		if (ilib) {
			this.initILib();
			ordering = this._tf.getTemplate();
		} else {
			ordering = this.defaultOrdering;
		}
		this.setupPickers(ordering);
		this.noneTextChanged();
	},

	/**
	* @private
	*/
	setupPickers: function (ordering) {
		// implement in subkind, calling this.inherited() at the end
		this.pickers = this.getClientControls();
	},

	/**
	* @private
	*/
	formatValue: function () {
		// implement in subkind
	},

	/**
	* @fires moon.DateTimePickerBase#onChange
	* @private
	*/
	valueChanged: function (inOld) {
		this.syncingPickers = true;
		this.setChildPickers(inOld);
		this.syncingPickers = false;

		if (this.value) {
			this.doChange({name:this.name, value:this.value});
		} else {
			this.noneTextChanged();
		}
	},

	/**
	* @private
	*/
	setChildPickers: function (inOld) {
		// implement in subkind
	},

	/**
	* If no item is selected, sets [noneText]{@link moon.DateTimePickerBase#noneText}
	* as current value.
	*
	* @private
	*/
	noneTextChanged: function () {
		if(!this.value) {
			this.$.currentValue.setContent(this.getNoneText());
		} else {
			this.$.currentValue.setContent(this.formatValue());
		}
	},

	/**
	* When [open]{@link moon.ExpandableListItem#open} changes, shows/hides the current value.
	*
	* @private
	*/
	openChanged: function () {
		ExpandableListItem.prototype.openChanged.apply(this, arguments);
		var pickers = this.pickers,
			i, p;
		if (pickers && this.open) {
			for (i = 0; i < pickers.length; i++) {
				p = pickers[i];
				if (p.getClientControls().length > 0) {
					p = p.getClientControls()[0];
				}
				p.reflow();
			}
		}
	},

	/**
	* @private
	*/
	toggleActive: function () {
		if (this.getOpen()) {
			this.setActive(false);
			if (!Spotlight.getPointerMode()) {
				Spotlight.spot(this.$.headerWrapper);
			}
		} else {
			if (!this.value) {
				this.setValue(new Date());
			}
			this.setActive(true);
		}
	},

	/**
	* @private
	*/
	closePicker: function (inSender, inEvent) {
		/**
		* If select/enter is pressed on any date picker item or the left key is pressed on the
		* first item, close the drawer
		*/
		if (inEvent.type == 'onSpotlightSelect' ||
			this.$.client.children[0].id == inEvent.originator.id) {
			this.expandContract();
			this.noneTextChanged();
			return true;
		}
	},

	/**
	* @private
	*/
	localeChanged: function () {
		// Our own locale property has changed, so we need to rebuild our child pickers
		if (ilib) {
			ilib.setLocale(this.locale);
			this.iLibLocale = ilib.getLocale();
		}
		this.refresh();
	},

	/**
	* @private
	*/
	handleLocaleChangeEvent: function () {
		// We've received a localechange event from the system, which means either the system
		// locale or the timezone may have changed.
		if (ilib && ilib.getLocale() !== this.iLibLocale) {
			// We're using iLib locale, and it has changed, so we'll rebuild the child pickers
			// entirely
			this.refresh();
		} else {
			// We don't care about the iLib locale or it hasn't changed, but timezone might have
			// changed, so we'll just update the child pickers
			this.setChildPickers();
		}
	},

	/**
	* @private
	*/
	refresh: function (){
		this.destroyClientControls();
		this.pickers = null;
		if (this._tf) {
			delete this._tf;
		}
		if (this.value && ilib){
			this.localeValue = ilib.Date.newInstance({unixtime: this.value.getTime(), timezone: "local"});
		}
		this.initDefaults();
		this.render();
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Control":26,"../../../enyo/lib/Signals":68,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../ExpandableListDrawer":144,"../ExpandableListItem":145,"../Item":162,"../Marquee":166}],142:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Drawer = require('../../../enyo/lib/Drawer');

var
	Spotlight = require('../../../spotlight');

var
	ExpandableListItem = require('../ExpandableListItem'),
	Item = require('../Item'),
	Input = require('../Input'),
	InputDecorator = require('../InputDecorator'),
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text;

/**
* Fires when the current text changes. This passes through {@link enyo.Input#onChange}.
*
* @event moon.ExpandableInput#onChange
* @type {Object}
* @property {String} value - The value of the input.
* @public
*/

/**
* {@link moon.ExpandableInput}, which extends {@link moon.ExpandableListItem}, is a
* drop-down input that prompts the user to enter text.
*
* @class moon.ExpandableInput
* @extends moon.ExpandableListItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ExpandableInput.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandableInput',

	/**
	* @private
	*/
	kind: ExpandableListItem,

	/**
	* @private
	*/
	classes: 'moon-expandable-input',

	/**
	* @private
	*/
	events: {

		/** {@link moon.ExpandableInput#onChange} */
		onChange: ''
	},

	/**
	* @private
	* @lends moon.ExpandableInput.prototype
	*/
	published: {

		/**
		* Text to be displayed as the current value if no item is currently selected.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		noneText: '',

		/**
		* Text to be displayed in the input if no text has been entered.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		placeholder: '',

		/**
		* Initial value of the input.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		value: ''
	},

	/**
	* @private
	*/
	autoCollapse: true,

	/**
	* @private
	*/
	lockBottom: false,

	/**
	* @private
	*/
	components: [
		{name: 'headerWrapper', kind: Item, classes: 'moon-expandable-picker-header-wrapper', onSpotlightFocus: 'headerFocus', ondown: 'headerDown', ontap: 'expandContract', components: [
			// headerContainer required to avoid bad scrollWidth returned in RTL for certain text widths (webkit bug)
			{name: 'headerContainer', kind: Control, classes: 'moon-expandable-list-item-header moon-expandable-picker-header moon-expandable-input-header', components: [
				{name: 'header', kind: MarqueeText}
			]},
			{name: 'currentValue', kind: MarqueeText, classes: 'moon-expandable-picker-current-value'}
		]},
		{name: 'drawer', kind: Drawer, resizeContainer:false, classes:'moon-expandable-list-item-client indented', components: [
			{name: 'inputDecorator', kind: InputDecorator, onSpotlightBlur: 'inputBlur', onSpotlightFocus: 'inputFocus', onSpotlightDown: 'inputDown', components: [
				{name: 'clientInput', kind: Input, onchange: 'doChange', onkeyup: 'inputKeyUp'}
			]}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.value', to: '.$.clientInput.value', oneWay: false},
		{from: '.placeholder', to: '.$.clientInput.placeholder'},
		{from: '.showCurrentValue', to: '.$.currentValue.showing'},
		{from: '.currentValueText', to: '.$.currentValue.content'},
		{from: '.disabled', to: '.$.headerWrapper.disabled'}
	],

	/**
	* @private
	*/
	computed: {
		'showCurrentValue': ['open', 'value', 'noneText'],
		'currentValueText': ['value', 'noneText']
	},

	/**
	* Computed property
	*
	* @private
	*/
	showCurrentValue: function () {
		return !this.open && this.currentValueText() !== '';
	},

	/**
	* Computed property
	*
	* @private
	*/
	currentValueText: function () {
		return (this.value === '') ? this.noneText : this.value;
	},

	/**
	* @private
	*/
	expandContract: function () {
		if (this.getOpen()) {
			this.closeDrawerAndHighlightHeader();
		} else {
			this.toggleActive();
		}
	},

	/**
	* @private
	*/
	toggleActive: function () {
		if (this.getOpen()) {
			this.setActive(false);
			this.$.clientInput.blur();
		} else {
			this.setActive(true);
			Spotlight.unspot();
			this.focusInput();
		}
	},

	/**
	* Focuses the {@link moon.Input} when the input decorator receives focus.
	*
	* @private
	*/
	inputFocus: function (inSender, inEvent) {
		var direction = inEvent && inEvent.dir;
		if (this.getOpen() && direction) {
			this.focusInput();
		}
	},

	/**
	* Value should be submitted if user clicks outside control. We check for
	* `onSpotlightFocus` and `mouseover` to avoid contracting the input on an event
	* fired from itself.
	*
	* @private
	*/
	inputBlur: function (inSender, inEvent) {
		var eventType = Spotlight.getLastEvent().type;
		if (Spotlight.getPointerMode() && eventType !== 'onSpotlightFocus' && eventType !== 'mouseover') {
			this.toggleActive();
		}
	},

	/**
	* @private
	*/
	inputKeyUp: function (inSender, inEvent) {
		if (inEvent.keyCode === 13) {
			this.closeDrawerAndHighlightHeader();
		}
	},

	/**
	* @private
	*/
	headerDown: function () {
		Spotlight.unfreeze();
	},

	/**
	* Focuses the input field if navigating down from the header while the drawer is open.
	*
	* @private
	*/
	spotlightDown: function (inSender, inEvent) {
		if (inEvent.originator === this.$.headerWrapper && this.getOpen()) {
			this.focusInput();
		}
	},

	/**
	* Focuses the input field.
	*
	* @private
	*/
	focusInput: function () {
		this.$.clientInput.focus();
		// Force cursor to end of text. We were sometimes seeing the
		// cursor positioned at the start of the text, which caused
		// problems in 5-way mode (where there's no way to move the
		// cursor).
		this.$.clientInput.hasNode().selectionStart = this.value.length;
	},

	/**
	* If [lockBottom]{@link moon.ExpandableInput#lockBottom} is `true`, don't allow user
	* to navigate down from the input field; if `false`, close the drawer and return
	* `true` to keep {@glossary Spotlight} on header.
	*
	* @private
	*/
	inputDown: function (inSender, inEvent) {
		if (this.getLockBottom()) {
			this.focusInput();
		} else {
			this.closeDrawerAndHighlightHeader();
		}
		return true;
	},

	/**
	* We manually set pointer mode to `false` as this seems to be the
	* least harmful method to re-highlight the header after the drawer
	* closes. The other options had side effects of resetting the
	* current spotted control to the root, or requiring a double-press to
	* subsequently move via 5-way.
	*
	* @private
	*/
	closeDrawerAndHighlightHeader: function () {
		var mode = Spotlight.getPointerMode();
		Spotlight.setPointerMode(false);
		Spotlight.unfreeze();
		Spotlight.spot(this.$.headerWrapper);
		Spotlight.setPointerMode(mode);
		this.toggleActive();
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Drawer":32,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../ExpandableListItem":145,"../Input":158,"../InputDecorator":159,"../Item":162,"../Marquee":166}],146:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Component = require('../../../enyo/lib/Component'),
	Control = require('../../../enyo/lib/Control'),
	Group = require('../../../enyo/lib/Group');

var
	Spotlight = require('../../../spotlight');

var
	BodyText = require('../BodyText'),
	CheckboxItem = require('../CheckboxItem'),
	ExpandableListDrawer = require('../ExpandableListDrawer'),
	ExpandableListItem = require('../ExpandableListItem'),
	Item = require('../Item'),
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text;

/**
* Fires when the currently selected item changes.
*
* @event moon.ExpandablePicker#onChange
* @type {Object}
* @property {Object|Object[]} selected - A reference to the currently selected item,
*	or (if [multipleSelection]{@link moon.ExpandablePicker#multipleSelection} is `true`),
*	an array of selected items.
* @property {String} content - The content of the currently selected item, or (if
*	[multipleSelection]{@link moon.ExpandablePicker#multipleSelection} is `true`), a comma
*	(plus space) separated list of the selected items' content.
* @property {Number} index - The index of the currently selected item, or (if
*	[multipleSelection]{@link moon.ExpandablePicker#multipleSelection} is `true`), an array
* of the index values of the selected items.
* @public
*/

/**
* {@link moon.ExpandablePicker}, which extends {@link moon.ExpandableListItem}, is
* a drop-down picker menu that solicits a choice from the user. The picker's child
* components, which are instances of {@link moon.CheckboxItem} by default, provide
* the options for the picker.
*
* ```
* {kind: 'moon.ExpandablePicker', noneText: 'None Selected', content: 'Choose City',
* components: [
*	{content: 'San Francisco'},
*	{content: 'Boston'},
*	{content: 'Tokyo'}
* ]}
* ```
*
* The currently selected item is available in the picker's
* [selected]{@link moon.ExpandablePicker#selected} property and may be accessed in
* the normal manner, by calling `get('selected')` and `set('selected', <value>)`.
* Similarly, the index of the current selection is available in
* [selectedIndex]{@link moon.ExpandablePicker#selectedIndex}. When the
* [multipleSelection]{@link moon.ExpandablePicker#multipleSelection} property is set
* to `true`, `selected` contains an array of selected items, and `selectedIndex`
* contains an array of the selected items' index values.
*
* The [onChange]{@link moon.ExpandablePicker#onChange} event is fired when the
* selected item changes.
*
* The picker's options may be modified programmatically in the standard manner, by
* calling `createComponent().render()` or `destroy()`.
*
* ```
* // Add new items to picker
* this.$.expandablePicker.createComponent({'New York'}).render();
* this.$.expandablePicker.createComponent({'London'}).render();
*
* // Remove currently selected item from picker
* this.$.expandablePicker.getSelected().destroy();
* ```
*
* When the picker is minimized, the content of the currently selected item is
* displayed as subtext below the picker label. If multiple selection is enabled,
* the content of all selected items will be displayed as a comma-separated list.
*
* @class moon.ExpandablePicker
* @extends moon.ExpandableListItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ExpandablePicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandablePicker',

	/**
	* @private
	*/
	kind: ExpandableListItem,

	/**
	* @private
	*/
	classes: 'moon-expandable-picker',

	/**
	* @private
	*/
	events: {
		/**
		* {@link moon.ExpandablePicker#onChange}
		*/
		onChange: ''
	},

	/**
	* @private
	* @lends moon.ExpandablePicker.prototype
	*/
	published: {

		/**
		* Reference to currently selected item, if any, or (when
		* [multipleSelection]{@link moon.ExpandablePicker#multipleSelection} is `true`),
		* an array of selected items.
		*
		* @type {Object | Object[]}
		* @default null
		* @public
		*/
		selected: null,

		/**
		* Index of the currently selected item, or `-1` if nothing is selected. If
		* [multipleSelection]{@link moon.ExpandablePicker#multipleSelection} is `true`,
		* this will be array of the selected items' index values, or an empty array if
		* nothing is selected.
		*
		* @type {Number | Number[]}
		* @default -1
		* @public
		*/
		selectedIndex: -1,

		/**
		* Text to be displayed as the current value if no item is currently selected.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		noneText: '',

		/**
		* Text to be displayed when the drawer is opened.
		*
		* @type {String}
		* @default null
		* @public
		*/
		helpText: null,

		/**
		* If `true`, picker auto-collapses when an item is selected.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		autoCollapseOnSelect: true,

		/**
		* If `true`, multiple selection is allowed.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		multipleSelection: false
	},

	/**
	* @private
	*/
	autoCollapse: true,

	/**
	* @private
	*/
	lockBottom: true,

	/**
	* @private
	*/
	defaultKind: CheckboxItem,

	/**
	* @private
	*/
	selectAndCloseDelayMS: 600,

	/**
	* @private
	*/
	components: [
		{name: 'headerWrapper', kind: Item, classes: 'moon-expandable-picker-header-wrapper', onSpotlightFocus: 'headerFocus', ontap: 'expandContract', components: [
			// headerContainer required to avoid bad scrollWidth returned in RTL for certain text widths (webkit bug)
			{name: 'headerContainer', kind: Control, classes: 'moon-expandable-list-item-header moon-expandable-picker-header', components: [
				{name: 'header', kind: MarqueeText}
			]},
			{name: 'currentValue', kind: MarqueeText, classes: 'moon-expandable-picker-current-value'}
		]},
		{name: 'drawer', kind: ExpandableListDrawer, resizeContainer:false, classes:'moon-expandable-list-item-client', onDrawerAnimationEnd: 'handleDrawerAnimationEnd', components: [
			{name: 'client', tag: null, kind: Group, onActivate: 'activated', highlander: true},
			{name: 'helpText', kind: BodyText, canGenerate: false, classes: 'moon-expandable-picker-help-text'}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: 'allowHtml', to: '$.header.allowHtml'},
		{from: 'allowHtml', to: '$.currentValue.allowHtml'},
		{from: 'disabled', to: '$.headerWrapper.disabled'}
	],

	/**
	* @private
	*/
	create: function() {
		if (this.multipleSelection) {
			this.selected = (this.selected) ? this.selected : [];
			this.selectedIndex = (this.selectedIndex != -1) ? this.selectedIndex : [];
		}
		// super initialization
		ExpandableListItem.prototype.create.apply(this, arguments);

		this.selectedIndexChanged();
		this.noneTextChanged();
		this.helpTextChanged();
		this.openChanged();
	},

	/**
	* @private
	*/
	initComponents: function() {
		var override = {client: {highlander: !this.multipleSelection}};
		this.kindComponents = Component.overrideComponents(this.kindComponents, override);
		ExpandableListItem.prototype.initComponents.apply(this, arguments);
	},

	/**
	* @private
	*/
	rendered: function () {
		ExpandableListItem.prototype.rendered.apply(this, arguments);
		if (!this.$.drawer.renderOnShow) this.isDrawerRendered = true;
	},

	/**
	* @private
	*/
	multiSelectCurrentValue: function () {
		if (!this.multipleSelection) {
			return;
		}
		var controls = this.getCheckboxControls();
		var str = '';
		this.selectedIndex.sort();
		for (var i=0; i < this.selectedIndex.length; i++) {
			if (!str) {
				str = controls[this.selectedIndex[i]].getContent();
			} else {
				str = str + ', ' + controls[this.selectedIndex[i]].getContent();
			}
		}
		if (!str) {
			str = this.getNoneText();
		}
		return str;
	},

	/**
	* When the [selected]{@link moon.ExpandablePicker#selected} control changes,
	* updates [checked]{@link moon.CheckboxItem#checked} values appropriately and
	* fires an [onChange]{@link moon.ExpandablePicker#onChange} event.
	*
	* @fires moon.ExpandablePicker#onChange
	* @private
	*/
	selectedChanged: function (inOldValue) {
		var selected = this.getSelected(),
		controls = this.getCheckboxControls(),
		index = -1,
		i; //declaring i here to fix travis error

		if (this.multipleSelection) {
			this.rebuildSelectedIndices(selected, controls);
			if(this.hasNode()) {
				this.fireChangeEvent();
			}
		} else {
			for (i=0;i<controls.length;i++) {
				if(controls[i] === selected) {
					controls[i].setChecked(true);
					index = i;
				} else if (controls[i].checked) {
					controls[i].silence();
					controls[i].setChecked(false);
					controls[i].unsilence();
				}
			}
			if (index > -1 && selected !== inOldValue) {
				this.setSelectedIndex(index);
				this.$.currentValue.setContent(selected.getContent());
				if(this.hasNode()) {
					this.fireChangeEvent();
				}
			}
		}
	},

	/**
	* When the {@link moon.ExpandablePicker#selectedIndex} changes, calls
	* `setChecked()` on the appropriate control.
	*
	* @private
	*/
	selectedIndexChanged: function () {
		var selected = this.getSelected(),
		controls = this.getCheckboxControls(),
		index = this.getSelectedIndex();

		if (this.multipleSelection) {
			for (var i = 0; i < controls.length; i++) {
				var selIndex = selected.indexOf(controls[i]);
				if (index.indexOf(i) >= 0) {
					controls[i].setChecked(true);
					if (selIndex == -1) {
						selected.push(controls[i]);
					}
				} else {
					controls[i].setChecked(false);
					if (selIndex >= 0) {
						selected.splice(selIndex, 1);
					}
				}
			}
			this.$.currentValue.setContent(this.multiSelectCurrentValue());
			if(this.hasNode()) {
				this.fireChangeEvent();
			}
		} else {
			if (controls[index] && controls[index] !== selected) {
				this.setSelected(controls[index]);
			}
		}
	},

	/**
	* If there is no selected item, uses [noneText]{link @moon.ExpandablePicker#noneText}
	* as current value.
	*
	* @private
	*/
	noneTextChanged: function () {
		if (this.multipleSelection) {
			if (!this.getSelected().length && !this.getSelectedIndex().length) {
				this.$.currentValue.setContent(this.getNoneText());
			}
		} else {
			if (!this.getSelected() && this.getSelectedIndex() == -1) {
				this.$.currentValue.setContent(this.getNoneText());
			}
		}
	},

	/**
	* When [open]{@link moon.ExpandablePicker#open} changes, shows/hides `this.$.currentValue`.
	*
	* @private
	*/
	openChanged: function () {
		this.inherited(arguments);
		this.$.currentValue.setShowing(!this.open);
		this.setActive(this.getOpen());
	},

	/**
	* When drawer is opened/closed, shows/hides `this.$.helpText`.
	*
	* @private
	*/
	helpTextChanged: function () {
		if (this.helpText !== null && !this.$.helpText.canGenerate) {
			this.generateHelpText();
		}
		this.$.helpText.setContent(this.helpText);
		this.$.helpText.setShowing(!!this.helpText);
	},

	/**
	* @method
	* @private
	*/
	destroy: function () {
		// When the expandablePicker itself is going away, take note so we don't try and do
		// single-picker option remove logic such as setting some properties to default
		// value when each picker option is destroyed
		this.destroying = true;
		ExpandableListItem.prototype.destroy.apply(this, arguments);
	},

	/**
	* @method
	* @private
	*/
	rebuildSelectedIndices: function(selected, controls) {
		this.selectedIndex = [];
		selected = selected || this.getSelected();
		controls = controls || this.getCheckboxControls();

		for (var i = 0; i < controls.length; i++) {
			if (selected.indexOf(controls[i]) >= 0) {
				controls[i].setChecked(true);
				this.selectedIndex.push(i);
			} else {
				controls[i].silence();
				controls[i].setChecked(false);
				controls[i].unsilence();
			}
		}
		this.$.currentValue.setContent(this.multiSelectCurrentValue());
	},

	/**
	* @method
	* @private
	*/
	removeControl: function (inControl) {
		// Skip extra work during panel destruction.
		if (!this.destroying) {
			// set currentValue, selected and selectedIndex to defaults value
			if (this.multipleSelection) {
				for (var i = 0; i < this.selected.length; i++) {
					if (this.selected[i] === inControl) {
						this.selected.splice(i, 1);
						break;
					}
				}
				// in case of multipleSection, removing control could change
				// selected array.
				this.rebuildSelectedIndices();
			} else {
				if (this.selected === inControl) {
					this.setSelected(null);
					this.setSelectedIndex(-1);
					this.$.currentValue.setContent(this.getNoneText());
				}
			}
		}
		ExpandableListItem.prototype.removeControl.apply(this, arguments);
	},

	/**
	* @private
	*/
	generateHelpText: function () {
		this.$.helpText.canGenerate = true;
		this.$.helpText.render();
	},

	/**
	* When an item is chosen, marks it as checked and closes the picker.
	*
	* @private
	*/
	activated: function (inSender, inEvent) {
		var toggledControl = inEvent && inEvent.toggledControl, index;

		if (!toggledControl) {
			return;
		}

		index = this.getCheckboxControls().indexOf(toggledControl);

		if (this.multipleSelection) {
			if (index >= 0) {
				// if toggledControl is checked but it is out of this.selected, them push it
				if (inEvent.checked && (this.selected.indexOf(toggledControl) == -1)) {
					this.selected.push(toggledControl);
					this.selectedChanged();
				}
				// if toggledControl is not checked but it is in this.selected, them pull it out
				if (!inEvent.checked && (this.selected.indexOf(toggledControl) >= 0)) {
					this.selected.splice(this.selected.indexOf(toggledControl), 1);
					this.selectedChanged();
				}
			}
		} else {
			if (inEvent.checked && index >= 0) {
				this.setSelected(toggledControl);
			}
		}

		if (this.getAutoCollapseOnSelect() && this.isDrawerRendered && this.getOpen()) {
			this.startJob('selectAndClose', 'selectAndClose', this.selectAndCloseDelayMS);
		}

		return true;
	},

	/**
	* Returns the picker items. Override point for child kinds altering the source of the items.
	*
	* @private
	*/
	getCheckboxControls: function () {
		return this.getClientControls();
	},

	/**
	* Closes drawer and selects header.
	*
	* @private
	*/
	selectAndClose: function () {
		this.setActive(false);
		if (!Spotlight.getPointerMode() && Spotlight.getCurrent() && Spotlight.getCurrent().isDescendantOf(this)) {
			Spotlight.spot(this.$.headerWrapper);
		}
	},

	/**
	* Fires an `onChange` event.
	*
	* @fires moon.ExpandablePicker#onChange
	* @private
	*/
	fireChangeEvent: function () {
		var contentStr = (this.multipleSelection) ? this.multiSelectCurrentValue() : this.getSelected().getContent();
		this.doChange({
			selected: this.getSelected(),
			content: contentStr,
			index: this.getSelectedIndex()
		});
	},

	/**
	* @private
	*/
	multipleSelectionChanged : function (inOldValue) {
		if (this.multipleSelection) {
			if (this.selected) {
				this.selected = [this.selected];
			} else {
				this.selected = [];
			}
			this.selectedIndex = [];
		} else {
			this.selected = (this.selected.length) ? this.selected[0] : null;
			this.selectedIndex = -1;
		}
		this.$.client.setHighlander(!this.multipleSelection);
		this.selectedChanged();
	},

	/**
	* @private
	*/
	handleDrawerAnimationEnd: function () {
		if (!this.isDrawerRendered) this.isDrawerRendered = true;
	}
});
},{"../../../enyo/lib/Component":23,"../../../enyo/lib/Control":26,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../BodyText":121,"../CheckboxItem":128,"../ExpandableListDrawer":144,"../ExpandableListItem":145,"../Item":162,"../Marquee":166}],157:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	path = require('../../../enyo/lib/pathResolver'),
	Control = require('../../../enyo/lib/Control'),
	Img = require('../../../enyo/lib/Image');

var
	Item = require('../Item'),
	LabeledTextItem = require('../LabeledTextItem');

/**
* {@link moon.ImageItem}, which derives from {@link moon.Item}, is a control that combines an
* {@link enyo.Image} with a {@link moon.LabeledTextItem}. By default, the image is displayed to
* the left of the text; to display the image on the right, set
* [imageAlignRight]{@link moon.ImageItem#imageAlignRight} to `true`.
*
* @class moon.ImageItem
* @extends moon.Item
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ImageItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ImageItem',

	/**
	* @private
	*/
	classes: 'moon-imageitem',

	/**
	* @private
	*/
	kind: Item,

	/**
	* @private
	*/
	components:[
		{name: 'image', kind: Img},
		{name: 'textItem', kind: LabeledTextItem, spotlight: false}
	],

	/**
	* @private
	* @lends moon.ImageItem.prototype
	*/
	published: {

		/**
		* The absolute URL path to the image.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		source: '',

		/**
		* The label to be displayed along with the text.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		label: '',

		/**
		* The text to be displayed in the item.
		*
		* @type {String}
		* @default ''
		* @public
		*/
		text: '',

		/**
		* Set to `true` to align image to right of text.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		imageAlignRight: false
	},

	/**
	* @private
	*/
	bindings: [
		{from: '.allowHtml', to: '.$.textItem.allowHtml'}
	],

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.sourceChanged();
		this.labelChanged();
		this.textChanged();
		this.imageAlignRightChanged();
	},

	/**
	* @private
	*/
	sourceChanged: function () {
		if (!this.source || this.source === '') {
			return;
		}
		this.$.image.setAttribute('src', path.rewrite(this.source));
	},

	/**
	* @private
	*/
	labelChanged: function () {
		this.$.textItem.setLabel(this.label);
	},

	/**
	* @private
	*/
	textChanged: function () {
		this.$.textItem.setText(this.text);
	},

	/**
	* @private
	*/
	imageAlignRightChanged: function () {
		this.addRemoveClass('align-right', this.imageAlignRight);
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Image":41,"../../../enyo/lib/kind":96,"../../../enyo/lib/pathResolver":101,"../../../moonstone":119,"../Item":162,"../LabeledTextItem":164}],174:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	SelectableItem = require('../SelectableItem');

/**
* {@link moon.RadioItem} is a modified {@link moon.Item} designed for use inside
* a {@link moon.RadioItemGroup}.
*
* For more information, see the documentation on
* [Radio Items]{@linkplain $dev-guide/building-apps/controls/radio-items.html}
* in the Enyo Developer Guide.
*
* @class moon.RadioItem
* @extends moon.SelectableItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.RadioItem.prototype */ {

	/**
	* @private
	*/
	name: 'moon.RadioItem',

	/**
	* @private
	*/
	kind: SelectableItem,

	/**
	* @private
	*/
	create: function() {
		SelectableItem.prototype.create.apply(this, arguments);
		this.removeClass('moon-selectable-item');
		this.addClass('moon-radio-item');
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone":119,"../SelectableItem":181}],161:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control'),
	Scroller = require('../../../enyo/lib/Scroller');

var
	FlyweightRepeater = require('../../../layout/lib/FlyweightRepeater');

var
	ScrollStrategy = require('../ScrollStrategy'),
	TouchScrollStrategy = ScrollStrategy.Touch;

/**
* Fires when the currently selected value changes.
*
* @event moon.IntegerPicker#onChange
* @type {Object}
* @property {Number} value - The currently selected value.
* @property {String} name - The name of the picker instance.
* @public
*/

/**
* {@link moon.IntegerPicker} is a control that displays a list of integers
* ranging from [min]{@link moon.IntegerPicker#min} to [max]{@link moon.IntegerPicker#max},
* soliciting a choice from the user.
*
* To initialize the picker to a particular integer, set the
* [value]{@link moon.IntegerPicker#value} property to that integer:
*
* ```
* {kind: 'moon.IntegerPicker', noneText: 'None Selected',
*	content: 'Choose a Number', min: 0, max: 25, value: 5}
* ```
*
* The picker may be changed programmatically by modifying the `value`, `min`,
* and `max` properties in the normal manner, by calling [set()]{@link enyo.Object#set}.
*
* @class moon.IntegerPicker
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.IntegerPicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.IntegerPicker',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	*/
	classes: 'moon-scroll-picker-container',

	/**
	* @private
	* @lends moon.IntegerPicker.prototype
	*/
	published: {
		/**
		* When `true`, button is shown as disabled and does not generate tap events.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		disabled: false,

		/**
		* When `true`, picker transitions animate left/right.
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		animate: true,

		/**
		* Current value of the picker.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		value: 0,

		/**
		* Minimum value of the picker.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		min: 0,

		/**
		* Maximum value of the picker.
		*
		* @type {Number}
		* @default 9
		* @public
		*/
		max: 9,

		/**
		* Amount by which to increment or decrement when moving picker between
		* [min]{@link moon.IntegerPicker#min} and [max]{@link moon.IntegerPicker#max}.
		*
		* @type {Number}
		* @default 1
		* @public
		*/
		step: 1,

		/**
		* If a number is specified, the picker value is displayed as this many
		* zero-filled digits.
		*
		* @type {Number}
		* @default null
		* @public
		*/
		digits: null,

		/**
		* When `true`, incrementing beyond [max]{@link moon.IntegerPicker#max} will wrap to
		* [min]{@link moon.IntegerPicker#min}, and decrementing beyond `min` will wrap to
		* `max`.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		wrap: false,

		/**
		* The minimum width of the picker. If not set, or set to a low value, the width
		* of the picker will fluctuate slightly depending on the rendered width of the value.
		*
		* @type {Number}
		* @default 50
		* @public
		*/
		minWidth: 50

	},

	/**
	* @private
	*/
	handlers: {
		onSpotlightUp:'next',
		onSpotlightDown:'previous',
		onSpotlightBlur:'spotlightBlur',
		onSpotlightScrollUp:'next',
		onSpotlightScrollDown:'previous',
		onmousewheel:'mousewheel'
	},

	/**
	* @private
	*/
	events: {
		/**
		* {@link moon.IntegerPicker#onChange}
		*/
		onChange: ''
	},

	/**
	* @private
	*/
	spotlight: true,

	/**
	* Cache scroll bounds so we don't have to run {@link enyo.Scroller#stop} every time we
	* need them.
	*
	* @private
	*/
	scrollBounds: {},

	/**
	* @private
	*/
	components: [
		{name:'nextOverlay', kind: Control, ondown:'downNext', onholdpulse:'next', classes:'moon-scroll-picker-overlay-container next', components:[
			{kind: Control, classes: 'moon-scroll-picker-overlay next'},
			{kind: Control, classes: 'moon-scroll-picker-taparea'}
		]},
		// FIXME: TranslateScrollStrategy doesn't work with the current design of this component so
		// we're forcing TouchScrollStrategy
		{kind: Scroller, strategyKind: TouchScrollStrategy, thumb:false, touch:true, useMouseWheel: false, classes: 'moon-scroll-picker', components:[
			{name: 'repeater', kind: FlyweightRepeater, classes: 'moon-scroll-picker-repeater', ondragstart: 'dragstart', onSetupItem: 'setupItem', noSelect: true, components: [
				{name: 'item', kind: Control, classes: 'moon-scroll-picker-item'}
			]},
			{name: 'buffer', kind: Control, classes: 'moon-scroll-picker-buffer'}
		]},
		{name:'previousOverlay', kind: Control, ondown:'downPrevious', onholdpulse:'previous', classes:'moon-scroll-picker-overlay-container previous', components:[
			{kind: Control, classes: 'moon-scroll-picker-overlay previous'},
			{kind: Control, classes: 'moon-scroll-picker-taparea'}
		]}
	],

	/**
	* Parameter that determines scroll math simulation speed.
	*
	* @private
	*/
	scrollFrame: 3,

	/**
	* Indicates direction of change from user. Necessary to support proper wrapping
	* when `range == 2`.
	*
	* @private
	*/
	direction: 0,

	/**
	* Range of possible values `max - min`.
	*
	* @private
	*/
	range: 0,

	/**
	* @private
	*/
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.verifyValue();
		this.updateOverlays();
	},

	/**
	* @private
	*/
	rendered: function () {
		Control.prototype.rendered.apply(this, arguments);
		this.width = null;
		this.rangeChanged();
		this.minWidthChanged();
		this.scrollToValue();
		this.$.scroller.getStrategy().setFixedTime(false);
		this.$.scroller.getStrategy().setFrame(this.scrollFrame);
	},

	/**
	* Snap to current value on a reflow.
	*
	* @private
	*/
	reflow: function () {
		Control.prototype.reflow.apply(this, arguments);
		this.scrollToValue();
	},

	/**
	* @private
	*/
	getVerifiedValue: function () {
		return this.value >= this.min && this.value <= this.max ? this.value : this.min;
	},

	/**
	* @private
	*/
	verifyValue: function () {
		var animate = this.animate;
		this.animate = false;
		this.set('value', this.getVerifiedValue());
		this.animate = animate;
	},

	/**
	* @private
	*/
	setupItem: function (inSender, inEvent) {
		var index = inEvent.index;
		var content = this.labelForValue(this.indexToValue(index % this.range));
		this.$.item.setContent(content);
	},

	/**
	* Formats passed-in value for display. If [digits]{@link moon.IntegerPicker#digits}
	* is **truthy**, zeros will be prepended to reach that number of digits.
	*
	* @param  {Number} value - Value to format.
	* @return {String}       - Formatted value.
	* @private
	*/
	labelForValue: function(value) {
		if (this.digits) {
			value = (value < 0? '-' : '') + ('00000000000000000000' + Math.abs(value)).slice(-this.digits);
		}

		return value;
	},

	/**
	* @private
	*/
	setupBuffer: function() {
		var bmin = ('' + this.min).length,
			bmax = Math.max(bmin, ('' + this.max).length),
			digits = this.digits + (this.min < 0 ? 1 : 0),
			buffer = Math.max(bmax, digits),
			content = '00000000000000000000'.substring(0, buffer);
		this.$.buffer.setContent(content);
	},

	/**
	* @private
	*/
	digitsChanged: function () {
		this.setupBuffer();
	},

	/**
	* @private
	*/
	rangeChanged: function () {
		this.verifyValue();
		this.range = this.valueToIndex(this.max) - this.valueToIndex(this.min) + 1;
		this.setupBuffer();
	},

	/**
	* Fail-safe design.
	* If out-of-boundary value is assigned, adjust boundary.
	*
	* @private
	*/
	valueChanged: function (old) {
		this.value -= (this.value-this.min)%this.step;
		if (this.value < this.min) {
			this.setMin(this.value);
		} else if (this.value > this.max) {
			this.setMax(this.value);
		}

		this.scrollToValue(old);
		this.updateOverlays();
		this.fireChangeEvent();
	},

	stepChanged: function (old) {
		var step = parseInt(this.step, 10);
		this.step = isNaN(step)? 1 : step;
		this.valueChanged(this.value);
	},

	/**
	* @private
	*/
	disabledChanged: function () {
		this.addRemoveClass('disabled', this.disabled);
	},

	/**
	* @private
	*/
	wrapChanged: function () {
		this.updateOverlays();
	},

	/**
	* Prevent scroller dragging
	*
	* @private
	*/
	dragstart: function (inSender, inEvent) {
		return true;
	},

	/**
	* @private
	*/
	minChanged: function () {
		this.rangeChanged();
	},

	/**
	* @private
	*/
	maxChanged: function () {
		this.rangeChanged();
	},

	/**
	* @private
	*/
	previous: function (inSender, inEvent) {
		if(this.disabled) {
			return;
		}

		this.direction = -1;

		if (this.value - this.step >= this.min) {
			this.setValue(this.value - this.step);
		} else if (this.wrap) {
			this.setValue(this.max);
		} else {
			return;
		}
		this.$.previousOverlay.addClass('selected');
		if (inEvent.originator != this.$.upArrow) {
			this.startJob('hideBottomOverlay', 'hideBottomOverlay', 350);
		}

		this.direction = 0;
		return true;
	},

	/**
	* @private
	*/
	next: function (inSender, inEvent) {
		if(this.disabled) {
			return;
		}

		this.direction = 1;

		if (this.value + this.step <= this.max) {
			this.setValue(this.value + this.step);
		} else if (this.wrap) {
			this.setValue(this.min);
		} else {
			return;
		}
		this.$.nextOverlay.addClass('selected');
		if (inEvent.originator != this.$.downArrow) {
			this.startJob('hideTopOverlay', 'hideTopOverlay', 350);
		}

		this.direction = 0;
		return true;
	},

	/**
	* @private
	*/
	downPrevious: function (inSender, inEvent) {
		inEvent.configureHoldPulse({endHold: 'onLeave', delay: 300});
		this.previous(inSender, inEvent);
	},

	/**
	* @private
	*/
	downNext: function (inSender, inEvent) {
		inEvent.configureHoldPulse({endHold: 'onLeave', delay: 300});
		this.next(inSender, inEvent);
	},

	/**
	* @private
	*/
	updateOverlays: function () {
		this.$.previousOverlay.applyStyle('visibility', (this.wrap || this.value - this.step >= this.min) ? 'visible' : 'hidden');
		this.$.nextOverlay.applyStyle('visibility', (this.wrap || this.value + this.step <= this.max) ? 'visible' : 'hidden');
	},

	/**
	* Renders the repeater.
	*
	* @param {Number} index - Index of row.
	* @param {Number} count - Number of rows to render.
	* @private
	*/
	updateRepeater: function(index, count) {
		this.$.repeater.set('rowOffset', index);
		this.$.repeater.set('count', count || 1);
		this.$.repeater.render();
	},

	/**
	* Scrolls to the node at `index` if it exists.
	*
	* @param  {Number} index    - Index of row.
	* @param  {Boolean} animate - If `true`, scroll is animated.
	* @private
	*/
	scrollToIndex: function(index, animate) {
		var node = this.$.repeater.fetchRowNode(index);
		if (node) {
			if(animate) {
				this.$.scroller.scrollTo(node.offsetLeft, node.offsetTop);
			} else {
				this.$.scroller.setScrollTop(node.offsetTop);
				this.$.scroller.setScrollLeft(node.offsetLeft);
			}
		}
	},

	/**
	* Converts `value` to its index in the repeater.
	*
	* @param  {Number} value - Integer value.
	* @return {Number}       - Repeater index.
	* @private
	*/
	valueToIndex: function(value) {
		return Math.floor((value - this.min) / this.step);
	},

	/**
	* Converts a repeater `index` to its value.
	*
	* @param  {Number} index - Repeater index
	* @return {Number}       - Integer value
	* @private
	*/
	indexToValue: function(index) {
		return index * this.step + this.min;
	},

	/**
	* Sets up the repeater to render the rows between `old` and
	* [value]{@link moon.IntegerPicker#value} and scrolls to reveal the current value. If `old`
	* is specified, the scroll will be animated. If [wrap]{@link moon.IntegerPicker#wrap} is
	* `true`, the scroll will travel the shortest distance to `value`, which may result in
	* wrapping.
	*
	* @param  {Number} [old] - Prior value from which to scroll.
	* @private
	*/
	scrollToValue: function(old) {
		var newIndex = this.valueToIndex(this.value);

		if(this.animate && old !== undefined) {
			var oldIndex = this.valueToIndex(old);
			var delta = newIndex - oldIndex;

			if(this.wrap && Math.abs(delta) >= this.range/2) {

				// when range is 2, we need special logic so scrolling matches the user's action
				// (e.g. tapping the up arrow always scrolls up). If direction (set in next()
				// and previous()) === delta (which will always be +/- 1), the natural rendering
				// is correct even though we're wrapping around the boundary so don't adjust.
				if(!(this.range === 2 && this.direction !== delta)) {
					// if wrapping and wrapping is a shorter distance, adjust the lesser index by the
					// range so the distance is the shortest possible
					if(newIndex > oldIndex) {
						oldIndex += this.range;
					} else {
						newIndex += this.range;
					}
				}
			}

			// rowOffset should be the lesser of the indices and count is the difference + 1
			var index = Math.min(oldIndex, newIndex);
			var count = Math.abs(newIndex - oldIndex) + 1;
			this.updateRepeater(index, count);

			this.scrollToIndex(oldIndex, false);
			this.startJob('valueChanged-Scroller', this.bindSafely('scrollToIndex', newIndex, true), 16);
		} else {
			// if old isn't specified, setup the repeater with only this.value and jump to it
			this.updateRepeater(newIndex);
			this.scrollToIndex(newIndex, false);
		}
	},

	/**
	* @private
	*/
	hideTopOverlay: function () {
		this.$.nextOverlay.removeClass('selected');
	},

	/**
	* @private
	*/
	hideBottomOverlay: function () {
		this.$.previousOverlay.removeClass('selected');
	},

	/**
	* @fires moon.IntegerPicker#onChange
	* @private
	*/
	fireChangeEvent: function () {
		this.doChange({
			name: this.name,
			value: this.value,
			content: this.labelForValue(this.value)
		});
	},

	/**
	* @private
	*/
	resetOverlay: function () {
		this.hideTopOverlay();
		this.hideBottomOverlay();
	},

	/**
	* @fires moon.Scroller#onRequestScrollIntoView
	* @private
	*/
	spotlightFocus: function () {
		this.bubble('onRequestScrollIntoView');
	},

	/**
	* @private
	*/
	spotlightBlur: function () {
		this.hideTopOverlay();
		this.hideBottomOverlay();
	},

	/**
	* Cache scroll bounds in [scrollBounds]{@link moon.IntegerPicker#scrollBounds} so we
	* don't have to call {@link enyo.Scroller#stop} to retrieve them later.
	*
	* @private
	*/
	updateScrollBounds: function () {
		this.scrollBounds = this.$.scroller.getStrategy()._getScrollBounds();
	},

	/**
	* Silently scrolls to the `inValue` y-position without animating.
	*
	* @private
	*/
	setScrollTop: function (inValue) {
		this.$.scroller.setScrollTop(inValue);
	},

	/**
	* Ensures scroll position is in bounds.
	*
	* @private
	*/
	stabilize: function () {
		this.$.scroller.stabilize();
	},

	/**
	* @private
	*/
	mousewheel: function (inSender, inEvent) {
		// Make sure scrollers that container integer pickers don't scroll
		inEvent.preventDefault();
		return true;
	},

	/**
	* @private
	*/
	minWidthChanged: function() {
		this.applyStyle('min-width', dom.unit(this.minWidth));
	},

	/**
	* @method
	* @private
	*/
	showingChangedHandler: function () {
		Control.prototype.showingChangedHandler.apply(this, arguments);

		// Only force a scroll to the item corresponding to the current value if it is not
		// already displayed.
		if (this.showing && !this.$.repeater.fetchRowNode(this.valueToIndex(this.value))) {
			this.scrollToValue();
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Scroller":66,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../layout/lib/FlyweightRepeater":116,"../../../moonstone":119,"../ScrollStrategy":178}],180:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	platform = require('../../../enyo/lib/platform'),
	Scroller = require('../../../enyo/lib/Scroller');

var
	Spotlight = require('../../../spotlight');

var
	ScrollStrategy = require('../ScrollStrategy');

/**
* On touch platforms, revert to using Enyo scroller, which picks an appropriate
* scroll strategy for the given platform.
*
* @private
*/
if (platform.touch) {
	module.exports = Scroller;
} else {
	/**
	* Fires when a control explicitly requests to be scrolled into view. Handled by the 
	* [scroll strategy]{@link enyo.Scroller#strategyKind}.
	*
	* @event enyo.Scroller#onRequestScrollIntoView
	* @type {Object}
	* @property {Boolean} scrollInPointerMode - Whether to allow scrolling in pointer mode.
	* @property {Boolean} scrollFullPage - If defined, overrides the scroller's
	*	[scrollFullPage]{@link moon.Scroller#scrollFullPage} property.
	* @public
	*/

	/**
	* {@link moon.Scroller} extends {@link enyo.Scroller}, adding support for 5-way focus
	* (Spotlight) and pagination buttons.
	*
	* It responds when controls explicitly request to be scrolled into view by emitting the
	* [onRequestScrollIntoView]{@link enyo.Scroller#onRequestScrollIntoView} event. This
	* typically happens when a control handles an `onSpotlightFocused` event, ensuring that
	* 5-way ({@glossary Spotlight}) focused controls remain in view.
	*
	* For more information, see the documentation on
	* [Scrollers]{@linkplain $dev-guide/building-apps/layout/scrollers.html} in the
	* Enyo Developer Guide.
	*
	* @class moon.Scroller
	* @extends enyo.Scroller
	* @ui
	* @public
	*/
	module.exports = kind(
		/** @lends moon.Scroller.prototype */ {

		/**
		* @private
		*/
		name:      'moon.Scroller',

		/**
		* @private
		*/
		kind:      Scroller,

		/**
		* @private
		* @lends moon.Scroller.prototype
		*/
		published: {

			/**
			* If `true`, when scrolling to focused child controls, the scroller will
			* scroll as far as possible, until its edge meets the next item's edge.
			*
			* @type {Boolean}
			* @default false
			* @public
			*/
			scrollFullPage: false,

			/**
			* If `true`, paging controls are focusable (in 5-way mode).  Normally, this
			* is not required, since the scroller will automatically scroll to ensure
			* most focusable items are in view.  It is intended to be used when the
			* scroller contents have no spotlightable controls, such as the case of a
			* scroller with a long body of text.
			*
			* @type {Boolean}
			* @default false
			* @public
			*/
			spotlightPagingControls: false,

			/**
			* If 'true', paging controls are hidden when content fit in scroller
			* even when spotlightPagingControls is true.
			*
			* @type {Boolean}
			* @default false
			* @public
			*/
			hideScrollColumnsWhenFit: false,

			/**
			* Relative parameter used to determine scroll speed.
			*
			* @type {Number}
			* @default 75
			* @public
			*/
			scrollInterval: 75,

			/**
			* The ratio of mousewheel 'delta' units to pixels scrolled. Increase this
			* value to increase the distance scrolled by the scroll wheel. Note that
			* mice/trackpads do not emit the same 'delta' units per 'notch' or flick of
			* the scroll wheel/trackpad; that can vary based on intensity and momentum.
			*
			*
			* @type {Number}
			* @default 2
			* @public
			*/
			scrollWheelMultiplier: 2,

			/**
			* The ratio of the maximum distance scrolled by each scroll wheel event to
			* the height/width of the viewport. Setting a value larger than `1` is not
			* advised, since a single scroll event could move more than one viewport's
			* worth of content (depending on the delta received), resulting in skipped
			* content.
			*
			* @type {Number}
			* @default 0.2
			* @public
			*/
			scrollWheelPageMultiplier: 0.2,

			/**
			* The ratio of the distance scrolled per tap of the paging button to the
			* height/width of the viewport. Setting a value larger than `1` is not
			* advised, since a paging button tap will move more than one viewport's
			* worth of content, resulting in skipped content.
			*
			*
			* @type {Number}
			* @default 0.8
			* @public
			*/
			paginationPageMultiplier: 0.8,

			/**
			* The ratio of continuous-scrolling delta units to pixels scrolled. Increase
			* this value to increase the distance scrolled when the pagination buttons
			* are held.
			*
			* @type {Number}
			* @default 8
			* @public
			*/
			paginationScrollMultiplier: 8,

			/**
			* When `true`, the scroll wheel moves spotlight focus up/down through the
			* scroller when in 5-way mode. (In pointer mode, the scroll wheel always
			* scrolls the viewport without modifying focus position.) When `false`, the
			* scroll wheel works the same in 5-way mode as in pointer mode, where the
			* wheel moves the position of the scroller viewport.
			*
			* @type {Boolean}
			* @default true
			* @public
			*/
			scrollWheelMovesFocus: true
		},

		/**
		* @private
		*/
		handlers: {
			onSpotlightScrollUp:'spotlightWheel',
			onSpotlightScrollDown:'spotlightWheel',
			onSpotlightContainerEnter:'spotlightContainerEnter',
			onSpotlightContainerLeave:'spotlightContainerLeave',
			onenter:'enter',
			onleave:'leave',
			onmove:'move'
		},

		/**
		* If `true`, scroll events are not allowed to propagate.
		*
		* @private
		*/
		preventScrollPropagation: false,

		/**
		* If `true`, measure the size of the scroll columns on initial render.
		* See {@link moon.ScrollStrategy#_measureScrollColumns} for details.
		*
		* @private
		*/
		measureScrollColumns: false,

		/**
		* Default to {@link moon.ScrollStrategy}
		*
		* @private
		*/
		strategyKind: ScrollStrategy,

		/**
		* @private
		*/
		spotlight: 'container',

		/**
		* @private
		*/
		handlePageUpDownKey: false,

		/**
		* Scrolls until the specified [control]{@link enyo.Control} is in view. If
		* `scrollFullPage` is set, scrolls until the edge of `control` is aligned with
		* the edge of the visible scroll area. Optional third parameter indicates
		* whether or not the scroll should be animated. If `setLastFocusedChild` is
		* `true`, scroller will set up `control` to be the spotted child when the
		* scroller is spotted.
		*
		* @param {Object} control - The [control]{@link enyo.Control} to scroll into view.
		* @param {Boolean} [scrollFullPage] - If `true`, scrolls until the edge of `control`
		* is aligned with the edge of the visible scroll area. If `undefined`, the value in
		*	[scrollFullPage]{@link moon.Scroller#scrollFullPage} is used.
		* @param {Boolean} [animate=true] - If `true`, animates the scroll.
		* @param {Boolean} [setLastFocusedChild=false] - If `true`, scroller will set up
		* `control` to be the spotted child when the scroller is spotted.
		* @public
		*/
		scrollToControl: function (control, scrollFullPage, animate, setLastFocusedChild) {
			if (setLastFocusedChild) {
				this.setLastFocusedChild(control);
			}
			this.$.strategy.animateToControl(control, scrollFullPage, animate);
		},

		/**
		* Scrolls to the specified `x` and `y` coordinates. The optional third parameter
		* may be set to `false` to disable animation for the scroll.
		*
		* @param {Number} x - Horizontal position in pixels
		* @param {Number} y - Vertical position in pixels
		* @param {Boolean} [animate=true] - If `true`, animates the scroll.
		* @public
		*/
		scrollTo: function (x, y, animate) {
			this.$.strategy.scrollTo(x, y, animate);
		},

		/**
		* @private
		*/
		bindings: [
			{from: '.scrollInterval',				to:'.$.strategy.interval'},
			{from: '.scrollWheelMultiplier',		to:'.$.strategy.scrollWheelMultiplier'},
			{from: '.scrollWheelPageMultiplier',	to:'.$.strategy.scrollWheelPageMultiplier'},
			{from: '.paginationPageMultiplier',		to:'.$.strategy.paginationPageMultiplier'},
			{from: '.paginationScrollMultiplier',	to:'.$.strategy.paginationScrollMultiplier'},
			{from: '.hideScrollColumnsWhenFit',		to:'.$.strategy.hideScrollColumnsWhenFit'}
		],

		/**
		* @private
		*/
		create: function () {
			Scroller.prototype.create.apply(this, arguments);
			this.spotlightPagingControlsChanged();
			this.scrollWheelMovesFocusChanged();
			this.createChrome([{kind:"enyo.Signals", onkeyup:"keyup"}]);

			this.$.strategy.measureScrollColumns = this.measureScrollColumns;

			// workaround because the bootstrapping code isn't attached to constructors that have
			// finished setup before the hook is declared
			if(Spotlight && this.spotlight === 'container') {
				Spotlight.Container.initContainer(this);
			}
		},

		/**
		* @private
		*/
		setLastFocusedChild: function(control) {
			Spotlight.Container.setLastFocusedChild(this, control);
		},

		/**
		* @private
		*/
		spotlightPagingControlsChanged: function () {
			this.$.strategy.set('spotlightPagingControls', this.spotlightPagingControls);
		},

		/**
		* @private
		*/
		scrollWheelMovesFocusChanged: function () {
			if (!this.scrollWheelMovesFocus) {
				this.setUseMouseWheel(true);
			}
		},

		/**
		* @private
		*/
		spotlightWheel: function (inSender, inEvent) {
			if (this.scrollWheelMovesFocus) {
				if (!Spotlight.getPointerMode()) {
					var curr = Spotlight.getCurrent();
					if (curr && curr.isDescendantOf(this)) {
						var dir = inEvent.type == 'onSpotlightScrollUp' ? 'onSpotlightUp' : 'onSpotlightDown';
						this._spotlightModal = this.spotlightModal;
						this.spotlightModal = true;	// Trap focus inside scroller while wheeling
						Spotlight.Util.dispatchEvent(dir, {type: dir}, curr);
						this.spotlightModal = this._spotlightModal;
						return true;
					}
				}
			}
		},

		/**
		* @private
		*/
		getHandlePageUpDownKey: function () {
			return this.handlePageUpDownKey;
		},

		/**
		* @private
		*/
		setHandlePageUpDownKey: function (param) {
			this.handlePageUpDownKey = param;
		},

		/**
		* @private
		*/
		spotlightContainerEnter: function (inSender, inEvent) {
			this.setHandlePageUpDownKey(true);
		},

		/**
		* @private
		*/
		spotlightContainerLeave: function (inSender, inEvent) {
			this.setHandlePageUpDownKey(false);
		},

		/**
		* @private
		*/
		enter: function (inSender, inEvent) {
			this.setHandlePageUpDownKey(true);
		},

		/**
		* @private
		*/
		leave: function (inSender, inEvent) {
			this.setHandlePageUpDownKey(false);
		},

		/**
		* @private
		*/
		move: function (inSender, inEvent) {
			if (!this.getHandlePageUpDownKey()) {
				this.setHandlePageUpDownKey(true);
			}
		},

		/**
		* @private
		*/
		keyup: function (inSender, inEvent) {
			var KEY_POINTER_PAGE_UP = 33;
			var KEY_POINTER_PAGE_DOWN = 34;

			if (!this.getHandlePageUpDownKey()) {
				return;
			}

			var strategy = this.getStrategy();
			if (inEvent.keyCode === KEY_POINTER_PAGE_UP) {
				strategy.$.pageUpControl.sendPaginateEvent();
			} else if (inEvent.keyCode === KEY_POINTER_PAGE_DOWN) {
				strategy.$.pageDownControl.sendPaginateEvent();
			}
		},

		/**
		* @private
		*/
		previewDomEvent: function (inEvent) {
			if (this.scrollWheelMovesFocus) {
				if (inEvent.type == 'mousewheel') {
					this.setUseMouseWheel(Spotlight.getPointerMode());
				}
			}
		}
	});
}

},{"../../../enyo/lib/Scroller":66,"../../../enyo/lib/kind":96,"../../../enyo/lib/platform":102,"../../../moonstone":119,"../../../spotlight":275,"../ScrollStrategy":178}],272:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	ChannelInfo = require('../../../moonstone/lib/ChannelInfo'),
	Clock = require('../../../moonstone/lib/Clock'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	VideoFullscreenToggleButton = require('../../../moonstone/lib/VideoFullscreenToggleButton'),
	VideoInfoBackground = require('../../../moonstone/lib/VideoInfoBackground'),
	VideoInfoHeader = require('../../../moonstone/lib/VideoInfoHeader'),
	VideoPlayer = require('../../../moonstone/lib/VideoPlayer');

module.exports = kind({
	name: 'moon.sample.VideoPlayerInlineSample',
	classes: 'moon enyo-fit enyo-unselectable moon-video-player-sample',
	fit: true,
	components: [
		{
			name: 'player',
			kind: VideoPlayer,
			src: 'http://media.w3.org/2010/05/bunny/movie.mp4',
			poster: 'assets/video-poster.png',
			inline: true,
			classes: 'moon-8h',
			autoplay: true,
			infoComponents: [
				{kind: VideoInfoBackground, orient: 'left', fit: true, components: [
					{
						kind: ChannelInfo,
						channelNo: '13',
						channelName: 'AMC',
						classes: 'moon-2h',
						components: [
							{content: '3D'},
							{content: 'Live'},
							{content: 'REC 08:22', classes: 'moon-video-player-info-redicon'}
						]
					},
					{
						kind: VideoInfoHeader,
						title: 'Downton Abbey',
						subTitle: 'Mon June 21, 7:00 - 8:00pm',
						subSubTitle: 'R - TV 14, V, L, SC',
						description: 'The series, set in the Youkshire country estate of Downton Abbey, depicts the lives of the aristocratic Crawley famiry and'
					}
				]},
				{kind: VideoInfoBackground, orient: 'right', components: [
					{kind: Clock}
				]}
			],
			components: [
				{kind: VideoFullscreenToggleButton},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'}
			]
		}
	]
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/ChannelInfo":126,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/VideoFullscreenToggleButton":197,"../../../moonstone/lib/VideoInfoBackground":198,"../../../moonstone/lib/VideoInfoHeader":199,"../../../moonstone/lib/VideoPlayer":200}],170:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dispatcher = require('../../../enyo/lib/dispatcher'),
	dom = require('../../../enyo/lib/dom'),
	util = require('../../../enyo/lib/utils'),
	Control = require('../../../enyo/lib/Control'),
	Img = require('../../../enyo/lib/Image'),
	Signals = require('../../../enyo/lib/Signals');

var
	Panels = require('../../../layout/lib/Panels');

var
	Spotlight = require('../../../spotlight');

var
	options = require('../options'),
	BreadcrumbArranger = require('../BreadcrumbArranger'),
	Panel = require('../Panel'),
	StyleAnimator = require('../StyleAnimator'),
	MoonHistory = require('../History'),
	HistorySupport = MoonHistory.HistorySupport;

/**
* `moon.PanelsHandle` is a helper kind for {@link moon.Panels} which implements a spottable
*  handle that the user can interact with to hide and show the `moon.Panels` control.
*
* @class moon.PanelsHandle
* @extends enyo.Control
* @ui
* @public
*/
var PanelsHandle = kind(
	/** @lends moon.PanelsHandle.prototype */ {

	/**
	* @private
	*/
	name: 'moon.PanelsHandle',

	/*
	* @private
	*/
	kind: Control,

	/*
	* @private
	*/
	classes: 'moon-panels-handle',

	/*
	* We override getAbsoluteShowing so that the handle's spottability is not dependent on the
	* showing state of its parent, the {@link moon.Panels} control.
	*
	* @private
	*/
	getAbsoluteShowing: function (ignoreBounds) {
		var bounds = !ignoreBounds ? this.getBounds() : null;

		if (!this.generated || this.destroyed || !this.showing || (bounds &&
			bounds.height === 0 && bounds.width === 0)) {
			return false;
		}

		return true;
	}
});

/**
* {@link moon.Panels} extends {@link enyo.Panels}, adding support for 5-way focus
* (Spotlight) and pre-configured Moonstone panels design patterns. By default,
* controls added to a `moon.Panels` are instances of {@link moon.Panel}.
*
* `moon.Panels` introduces the concept of patterns for panel display. Set
* [pattern]{@link moon.Panels#pattern} to `'activity'` or `'alwaysViewing'`
* to use one of two patterns designed for apps on Smart TV systems.
*
* @class moon.Panels
* @extends enyo.Panels
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.Panels.prototype */ {

	/**
	* @private
	*/
	name: 'moon.Panels',

	/**
	* @private
	*/
	kind : Panels,

	/**
	* @private
	*/
	mixins : [HistorySupport],

	/**
	* @private
	*/
	classes : 'moon-panels',

	/**
	* @private
	*/
	spotlightDecorate : false,

	/**
	* @private
	* @lends moon.Panels.prototype
	*/
	published: {
		/**
		* A convenience property for configuring {@link moon.Panels} according to a
		* particular design pattern.  Valid values are `'none'` (default), `'activity'`,
		* and `'alwaysviewing'`. Note that this property may only be set at creation
		* time, and should not be changed at runtime.
		*
		* The `'alwaysviewing'` pattern uses the {@link moon.BreadcrumbArranger} with
		* semi-transparent panels (depending on the color theme) over the right half
		* of the screen, allowing multiple breadcrumbs to accumulate on the left
		* half of the screen.
		*
		* The `'activity'` pattern  uses the `moon.BreadcrumbArranger` with opaque
		* panels over the full screen and only one breadcrumb showing onscreen.
		*
		* The `'none'` pattern should be used when selecting other arrangers, such as
		* {@link enyo.CarouselArranger} or {@link enyo.CardArranger}.
		*
		* @type {String}
		* @default 'none'
		* @public
		*/
		pattern: 'none',

		/**
		* When [useHandle]{@link moon.Panels#useHandle} is used, it is automatically
		* hidden after this amount of time (in milliseconds).
		*
		* @type {Number}
		* @default 4000
		* @public
		*/
		autoHideTimeout: 4000,

		/**
		* When `true`, a handle is created to allow the user to control the showing
		* state of the panels using animation. When `false`, no handle is created and
		* panels may only be hidden/shown programmatically with no animation.
		* When `'auto'` (the default), `useHandle` is set to `true` if the
		* [pattern]{@link moon.Panels#pattern} is `'alwaysviewing'` and to `false` if
		* the `pattern` is `'activity'`. Note that this property may only be set at
		* creation time, and should not be changed at runtime. This property
		* only has an effect when using the `'activity'` or `'alwaysviewing'` pattern.
		*
		* @type {String|Boolean}
		* @default 'auto'
		* @public
		*/
		useHandle: 'auto',

		/**
		* Dynamically controls whether the handle is showing.
		* When `true` (the default), the handle is shown and panels may be shown by
		* activating the handle and hidden by re-activating the handle or by tapping
		* outside the panel area. When `false`, the handle is hidden and panels may
		* only be shown or hidden programmatically using the
		* [showing]{@link enyo.Control#showing} property or the
		* [show()]{@link enyo.Control#show}/[hide()]{@link enyo.Control#hide} API.
		* This property only has an effect when [useHandle]{@link moon.Panels#useHandle}
		* is `true` (or `'auto'`, resulting in `true`).
		*
		* @type {Boolean}
		* @default true
		* @public
		*/
		handleShowing: true,

		/**
		* When `true`, panels are automatically popped when the user moves back.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		popOnBack: false,

		/**
		* The source of the image used for branding in the lower left region of the Panels
		* (only applies to Panels using the `'activity'` pattern).
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		brandingSrc: ''
	},

	/**
	* @private
	*/
	narrowFit: false,

	/**
	* Hierachical stack.
	* When we call setIndex or pushPanel, new object is pushed to this stack.
	* When we call popPanel or back key handler, lasted object is removed.
	* To save memory, it is initiated when this.allowBackKey is true.
	*
	* @type {Array}
	* @default null
	* @private
	*/
	panelStack: null,

	/**
	* @private
	*/
	handlers: {
		ontap:						'tapped',

		onSpotlightRight:			'spotlightRight',
		onSpotlightLeft:			'spotlightLeft',
		onSpotlightUp:				'spotlightUp',
		onSpotlightDown:			'spotlightDown',
		onSpotlightFocus:			'spotlightFocus',
		onSpotlightContainerLeave:	'onSpotlightPanelLeave',
		onSpotlightContainerEnter:	'onSpotlightPanelEnter',

		onPreTransitionComplete:	'preTransitionComplete',
		onPostTransitionComplete:	'postTransitionComplete'
	},

	/**
	* @private
	*/
	handleTools: [
		{name: 'backgroundScrim', kind: Control, classes: 'moon-panels-background-scrim'},
		{name: 'clientWrapper', kind: Control, classes: 'enyo-fill enyo-arranger moon-panels-client', components: [
			{name: 'scrim', kind: Control, classes: 'moon-panels-panel-scrim', components: [
				{name: 'branding', kind: Img, sizing: 'contain', classes: 'moon-panels-branding'}
			]},
			{name: 'client', kind: Control, tag: null}
		]},
		{name: 'showHideHandle', kind: PanelsHandle, classes: 'hidden', canGenerate: false, ontap: 'handleTap', onSpotlightLeft: 'handleSpotLeft', onSpotlightRight: 'handleSpotRight', onSpotlightFocused: 'handleFocused', onSpotlightBlur: 'handleBlur'},
		{name: 'showHideAnimator', kind: StyleAnimator, onComplete: 'showHideAnimationComplete'}
	],

	/**
	* @private
	*/
	defaultKind: Panel,

	/**
	* When `false`, dragging is disabled.
	*
	* @private
	*/
	draggable: false,

	/**
	* Value may be between `0` and `1`, inclusive.
	*
	* @private
	*/
	panelCoverRatio: 1,

	/**
	* Will be `true` for 'activity' pattern, and `false` for 'alwaysviewing' pattern.
	*
	* @private
	*/
	showFirstBreadcrumb: false,

	/**
	* Default to using `moon.BreadcrumbArranger`.
	*
	* @private
	*/
	arrangerKind: BreadcrumbArranger,

	/**
	* Index of panel set in the middle of transition.
	*
	* @private
	*/
	queuedIndex: null,

	/**
	* Flag for initial transition.
	*
	* @private
	*/
	_initialTransition: true,

	/**
	* Flag for blocking consecutive push/pop/replace panel actions to protect
	* create/render/destroy time.
	*
	* @private
	*/
	isModifyingPanels: false,

	/**
	* Flag to indicate if the Panels are currently transitioning to a new index
	*
	* @private
	*/
	transitioning: false,

	/**
	* Checks the state of panel transitions.
	*
	* @return {Boolean} `true` if a transition between panels is currently in progress;
	* otherwise, `false`.
	* @public
	*/
	inTransition: function () {
		return this.transitioning;
	},

	/**
	* Creates a panel on top of the stack and increments index to select that component.
	*
	* @param {Object} info - The declarative {@glossary kind} definition.
	* @param {Object} moreInfo - Additional properties to be applied (defaults).
	* @return {Object} The instance of the panel that was created on top of the stack.
	* @public
	*/
	pushPanel: function (info, moreInfo) { // added
		if (this.transitioning || this.isModifyingPanels) {return null;}
		this.isModifyingPanels = true;
		var lastIndex = this.getPanels().length - 1,
			oPanel = this.createComponent(info, moreInfo);
		oPanel.render();
		this.reflow();
		oPanel.show();
		oPanel.resize();
		this.setIndex(lastIndex+1);
		this.isModifyingPanels = false;
		return oPanel;
	},

	/**
	* Options for the [moon.Panels.pushPanels()]{@link moon.Panels.pushPanels} method.
	*
	* @typedef {Object} moon.Panels.pushPanels~options
	* @property {Number} targetIndex - The panel index number to immediately switch to. Leaving
	*	this blank or not setting it will perform the default action, which transitions to the
	*	first of the new panels. Setting this to a negative and other "out of bounds" values
	*	work in conjunction with the `wrap: true` property. Negative values count backward from
	*	the end, while indices greater than the total Panels' panel length wrap around and start
	*	counting again from the beginning.
	* @property {Boolean} transition - Whether to transition or jump directly to the next panel.
	* @public
	*/

	/**
	* Creates multiple panels on top of the stack and updates index to select the last one
	* created. Supports an optional `options` object as the third parameter.
	*
	* @param {Object[]} info - The declarative {@glossary kind} definitions.
	* @param {Object} commonInfo - Additional properties to be applied (defaults).
	* @param {Object} options - Additional options for pushPanels.
	* @return {null|Object[]} Array of the panels that were created on top of the stack, or
	*	`null` if panels could not be created.
	* @public
	*/
	pushPanels: function(info, commonInfo, options) { // added
		if (this.transitioning || this.isModifyingPanels) { return null; }
		this.isModifyingPanels = true;

		if (!options) { options = {}; }
		var lastIndex = this.getPanels().length,
			oPanels = this.createComponents(info, commonInfo),
			nPanel;

		for (nPanel = 0; nPanel < oPanels.length; ++nPanel) {
			oPanels[nPanel].render();
		}
		this.reflow();
		if (options.targetIndex || options.targetIndex === 0) {
			lastIndex = options.targetIndex;
		}
		lastIndex = this.clamp(lastIndex);
		this.getPanels()[lastIndex].show();
		for (nPanel = 0; nPanel < oPanels.length; ++nPanel) {
			oPanels[nPanel].resize();
		}

		// If transition was explicitly set to false, since null or undefined indicate "never set" or unset
		if (options.transition === false) {
			this.setIndexDirect(lastIndex);
		} else {
			this.setIndex(lastIndex);
		}

		this.isModifyingPanels = false;
		return oPanels;
	},

	/**
	* Destroys panels whose index is greater than or equal to a specified value.
	*
	* @param {Number} index - Index at which to start destroying panels.
	* @public
	*/
	popPanels: function (index) {
		if (this.transitioning || this.isModifyingPanels) {return;}
		this.isModifyingPanels = true;
		var panels = this.getPanels();
		index = index || panels.length - 1;

		while (panels.length > index && index >= 0) {
			panels[panels.length - 1].destroy();
		}
		this.isModifyingPanels = false;
	},

	/**
	* Destroys specified panel and creates new panel in-place without transition effect.
	*
	* @param {Number} index - Index of panel to destroy.
	* @param {Object} info - The declarative {@glossary kind} definition.
	* @param {Object} moreInfo - Additional properties to be applied (defaults).
	* @public
	*/
	replacePanel: function (index, info, moreInfo) {
		if (this.transitioning || this.isModifyingPanels) {return;}
		this.isModifyingPanels = true;
		var oPanel = null;

		if (this.getPanels().length > index) {
			this.getPanels()[index].destroy();
			if (this.getPanels().length > index) {
				moreInfo = util.mixin({addBefore: this.getPanels()[index]}, moreInfo);
			}
		}
		oPanel = this.createComponent(info, moreInfo);
		oPanel.render();
		this.resize();
		this.isModifyingPanels = false;
	},

	/**
	* Finds and returns the panel index of the passed-in control. Returns `-1` if
	* panel is not found.
	*
	* @param {Object} oControl - A control to look for.
	* @return {Number} Panel index of control, or `-1` if panel is not found.
	* @public
	*/
	getPanelIndex: function (oControl) {
		var oPanel = null;

		while (oControl && oControl.parent) {
			// Parent of a panel can be a client or a panels.
			if (oControl.parent === this.$.client || oControl.parent === this) {
				oPanel = oControl;
				break;
			}
			oControl = oControl.parent;
		}

		if (oPanel) {
			for (var n=0; n<this.getPanels().length; n++) {
				if (this.getPanels()[n] == oPanel) {
					return n;
				}
			}
		}

		return -1;
	},

	/**
	* Returns `true` if the passed-in control is a child panel of this Panels instance.
	*
	* @param {Object} control - A panel control.
	* @return {Boolean} `true` if the specified control is a child panel of this Panels
	* instance.
	* @public
	*/
	isPanel: function (control) {
		for (var n=0; n<this.getPanels().length; n++) {
			if (this.getPanels()[n] == control) {
				return true;
			}
		}
	},

	/**
	* @method
	* @private
	*/
	create: function () {
		Panels.prototype.create.apply(this, arguments);
		this.set('animate', this.animate && options.accelerate, true);

		// we need to ensure our handler has the opportunity to modify the flow during
		// initialization
		this.showingChanged();
		this.brandingSrcChanged();
	},

	/**
	* @private
	*/
	initComponents: function () {
		this.applyPattern();
		Panels.prototype.initComponents.apply(this, arguments);
		this.initializeShowHideHandle();
		this.handleShowingChanged();
		this.allowBackKeyChanged();
	},

	/**
	* @private
	*/
	rendered: function () {
		Panels.prototype.rendered.apply(this, arguments);

		// Direct hide if not showing and using handle
		if (this.useHandle === true) {
			if (this.showing) {
				this._directShow();
			} else {
				this._directHide();
			}
		}
		this.displayBranding();
	},

	/**
	* @private
	*/
	tapped: function (oSender, oEvent) {
		if (oEvent.originator === this.$.showHideHandle || this.pattern === 'none' ||
			this.transitioning === true || this.isModifyingPanels === true) {
			return;
		}

		if (this.shouldHide(oEvent)) {
			if (this.showing && (this.useHandle === true) && this.handleShowing) {
				this.hide();
			}
		} else {
			var n = (oEvent.breadcrumbTap) ? this.getPanelIndex(oEvent.originator) : -1;
			// If tapped on not current panel (breadcrumb), go to that panel
			if (n >= 0 && n !== this.getIndex()) {
				this.setIndex(n);
			}
		}
	},

	/**
	* @private
	*/
	shouldHide: function (oEvent) {
		return (oEvent.originator === this.$.clientWrapper || (oEvent.originator instanceof Panel && this.isPanel(oEvent.originator)));
	},

	/**
	* @private
	*/
	spotlightLeft: function (oSender, oEvent) {
		if (this.toIndex !== null) {
			this.queuedIndex = this.toIndex - 1;
			//queuedIndex could have out boundary value. It will be managed in setIndex()
		}
		var orig = oEvent.originator,
			idx;
		// Don't allow left-movement from a breadcrumb
		if (orig.name === 'breadcrumbBackground') {
			return true;
		}
		if (orig instanceof Panel) {
			idx = this.getPanelIndex(orig);
			if (idx === 0) {
				if (this.showing && (this.useHandle === true) && this.handleShowing) {
					this.hide();
					return true;
				}
			}
			else {
				this.previous();
				return true;
			}
		}
	},

	/**
	* @private
	*/
	spotlightRight: function (oSender, oEvent) {
		if (this.toIndex !== null) {
			this.queuedIndex = this.toIndex + 1;
			//queuedIndex could have out boundary value. It will be managed in setIndex()
		}
		var orig = oEvent.originator,
			idx = this.getPanelIndex(orig),
			next = this.getPanels()[idx + 1];
		if (orig.name === 'breadcrumbBackground') {
			// Upon pressing right from a pointer-focused breadcrumb, just jump
			// to the current panel to keep focus visible
			Spotlight.spot(next);
			return true;
		}
		if (next && orig instanceof Panel) {
			if (this.useHandle === true && this.handleShowing && next.isOffscreen) {
				Spotlight.spot(this.$.showHideHandle);
			}
			else {
				this.next();
			}
			return true;
		}
	},

	/**
	* @private
	*/
	spotlightDown: function (oSender, oEvent) {
		if (oEvent.originator.name === 'breadcrumbBackground') { return true; }
	},

	/**
	* @private
	*/
	spotlightFocus: function (oSender, oEvent) {
		var orig = oEvent.originator;
		var idx = this.getPanelIndex(orig);
		if (this.index !== idx && idx !== -1 && orig.name !== 'breadcrumbBackground') {
			this.setIndex(idx);
		}
	},

	/**
	* Responds to tap on show/hide handle.
	*
	* @private
	*/
	handleTap: function () {
		this.setShowing(!this.showing);
	},

	/**
	* @private
	*/
	handleSpotLeft: function () {
		if (this.showing) {
			Spotlight.spot(this.getActive());
		} else {
			Spotlight.unspot();
		}
		return true;
	},

	/**
	* @private
	*/
	handleSpotRight: function (sender, event) {
		if (this.showing) {
			return true;
		}
	},

	/**
	* @private
	*/
	handleBlur: function (sender, event) {
		if (this.isHandleFocused) {
			this.isHandleFocused = false;
			if (!Spotlight.getPointerMode()) {
				if (!this.showing) {
					this.panelsHiddenAsync();
				}
			}
		}
		this.resetHandleAutoHide();
		if (!this.showing) {
			Signals.send('onPanelsHandleBlurred');
		}
	},

	/**
	* @private
	*/
	panelsHiddenAsync: function () {
		util.asyncMethod(Signals, 'send', 'onPanelsHidden');
	},

	/**
	* @private
	*/
	resetHandleAutoHide: function (sender, event) {
		this.startJob('autoHide', 'stashHandle', this.getAutoHideTimeout());
	},

	/**
	* @private
	*/
	stopHandleAutoHide: function (sender, event) {
		this.stopJob('autoHide');
	},

	/**
	* @private
	*/
	stashHandle: function () {
		this.$.showHideHandle.addRemoveClass('stashed', !this.showing);
	},

	/**
	* @private
	*/
	unstashHandle: function () {
		this.stopHandleAutoHide();
		this.$.showHideHandle.removeClass('stashed');
	},

	/**
	* @private
	*/
	handleFocused: function () {
		this.unstashHandle();
		this.startJob('autoHide', 'handleSpotLeft', this.getAutoHideTimeout());
		this.isHandleFocused = true;
		Signals.send('onPanelsHandleFocused');
	},

	/**
	* @private
	*/
	handleShowingChanged: function () {
		//* show handle only when useHandle is true
		if (this.useHandle !== true) { return; }
		this.$.showHideHandle.addRemoveClass('hidden', !this.handleShowing);
		this.$.showHideHandle.spotlight = this.handleShowing;
	},

	/**
	* Called when focus enters one of the panels. If currently hiding and
	* `this.useHandle` is `true`, shows handle.
	*
	* @private
	*/
	onSpotlightPanelEnter: function () {
		if (!this.showing && (this.useHandle === true) && this.handleShowing ) {
			Spotlight.spot(this.$.showHideHandle);
			return true;
		}
	},

	/**
	* Sets the index of the active panel, possibly transitioning the panel into view.
	*
	* @param {number} index - Index of the panel to make active.
	* @public
	*/
	setIndex: function (index) {
		// Normally this.index cannot be smaller than 0 and larger than panels.length
		// However, if panels uses handle and there is sequential key input during transition
		// then index could have -1. It means that panels will be hidden.
		if (this.toIndex === null || this.useHandle === false) {
			index = this.clamp(index);
		}

		if (index === this.index) {
			return;
		}

		if (this.toIndex !== null) {
			return;
		}

		this.notifyPanels('initPanel');
		this.fromIndex = this.index;
		this.toIndex = index;

		this.queuedIndex = null;
		this._willMove = null;

		// Ensure any VKB is closed when transitioning panels
		this.blurActiveElementIfHiding(index);

		// If panels will move for this index change, kickoff animation. Otherwise skip it.
		if (this.shouldAnimate()) {
			Spotlight.mute(this);
			// if back key feature is enabled and setIndex is not called from back key handler
			if (this.allowBackKey && !MoonHistory.isHandlingBackAction()) {
				this.panelStack.push(this.index);
				this.pushBackHistory();
			}

			this.startTransition();
			this.triggerPreTransitions();
		} else {
			this._setIndex(this.toIndex);
		}
	},

	/**
	* @private
	*/
	blurActiveElementIfHiding: function (index) {
		var activeElement = document.activeElement,
			activeComponent = activeElement ? dispatcher.$[activeElement.id] : null,
			panels = this.getPanels(),
			panel,
			panelInfo;
		if (activeComponent) {
			for (var i = 0; i < panels.length; i++) {
				panel = panels[i];
				if (activeComponent.isDescendantOf(panel)) {
					panelInfo = this.getPanelInfo(i, index);
					if (panelInfo.offscreen) {
						document.activeElement.blur();
					}
					break;
				}
			}
		}
	},

	/**
	* Returns `true` if the panels should animate in the transition from `fromIndex` to
	* `toIndex`.
	*
	* @private
	*/
	shouldAnimate: function () {
		if (this._willMove == null) {
			return (this._willMove = this.animate && this.shouldArrange());
		}
		else {
			return this._willMove;
		}
	},

	/**
	* Returns `true` if any panels will move in the transition from `fromIndex` to `toIndex`.
	*
	* @private
	*/
	shouldArrange: function () {
		return this.layout.shouldArrange ? this.layout.shouldArrange(this.fromIndex, this.toIndex) : true;
	},

	/**
	*
	* @private
	*/
	_setIndex: function (index) {
		var prev = this.get('index');
		this.index = this.clamp(index);
		this.notifyObservers('index', prev, index);
	},

	/**
	* Called when the arranger animation completes.
	*
	* @private
	*/
	animationEnded: function () {
		if (this.animate) {
			this.triggerPostTransitions();
		} else {
			Panels.prototype.animationEnded.apply(this, arguments);
		}

		return true;
	},

	/**
	* @private
	*/
	getPanelInfo: function (inPanelIndex, inActiveIndex) {
		return this.layout.getPanelInfo && this.layout.getPanelInfo(inPanelIndex, inActiveIndex) || {};
	},

	/**
	* @private
	*/
	getTransitionInfo: function (inPanelIndex) {
		var to = (this.toIndex || this.toIndex === 0) ? this.toIndex : this.index;
		var info = this.getPanelInfo(inPanelIndex, to);
		info.from = this.fromIndex;
		info.to = this.toIndex;
		info.index = inPanelIndex;
		info.animate = this.animate;
		return info;
	},

	/**
	* If any panel has a pre-transition, pushes the panel's index to `preTransitionWaitList`.
	*
	* @private
	*/
	triggerPreTransitions: function () {
		var panels = this.getPanels(),
			info;

		this.preTransitionWaitlist = [];

		for(var i = 0, panel; (panel = panels[i]); i++) {
			info = this.getTransitionInfo(i);
			if (panel.preTransition && panel.preTransition(info)) {
				this.preTransitionWaitlist.push(i);
			}
		}

		if (this.preTransitionWaitlist.length === 0) {
			this._setIndex(this.toIndex);
		}
	},

	/**
	* @private
	*/
	preTransitionComplete: function (sender, event) {
		var index = this.getPanels().indexOf(event.originator);

		for (var i = 0; i < this.preTransitionWaitlist.length; i++) {
			if (this.preTransitionWaitlist[i] === index) {
				this.preTransitionWaitlist.splice(i,1);
				break;
			}
		}

		if (this.preTransitionWaitlist.length === 0) {
			this._setIndex(this.toIndex);
		}

		return true;
	},

	/**
	* @private
	*/
	triggerPostTransitions: function () {
		var panels = this.getPanels(),
			info;

		this.postTransitionWaitlist = [];

		for(var i = 0, panel; (panel = panels[i]); i++) {
			info = this.getTransitionInfo(i);
			if (panel.postTransition && panel.postTransition(info)) {
				this.postTransitionWaitlist.push(i);
			}
		}

		if (this.postTransitionWaitlist.length === 0) {
			this.completed();
			return true;
		}
	},

	/**
	* @private
	*/
	postTransitionComplete: function (sender, event) {
		var index = this.getPanels().indexOf(event.originator);

		for (var i = 0; i < this.postTransitionWaitlist.length; i++) {
			if (this.postTransitionWaitlist[i] === index) {
				this.postTransitionWaitlist.splice(i,1);
				break;
			}
		}

		if (this.postTransitionWaitlist.length === 0) {
			this.completed();
		}

		return true;
	},

	/**
	* When index changes, make sure to update the breadcrumbed panel's `spotlight` property
	* (to avoid {@glossary Spotlight} issues).
	*
	* @private
	*/
	indexChanged: function () {
		var activePanel = this.getActive();

		if (activePanel && activePanel.isBreadcrumb) {
			activePanel.removeSpottableBreadcrumbProps();
		}

		Panels.prototype.indexChanged.apply(this, arguments);

		this.displayBranding();
	},

	notifyPanels: function (method) {
		var panels = this.getPanels(),
			panel, info, i;
		for (i = 0; (panel = panels[i]); i++) {
			info = this.getTransitionInfo(i);
			if (panel[method]) {
				panel[method](info);
			}
		}
	},

	/**
	* @private
	*/
	finishTransition: function () {
		var panels = this.getPanels(),
			toIndex = this.toIndex,
			fromIndex = this.fromIndex,
			i, panel, info, popFrom;

		this.notifyPanels('transitionFinished');
		Panels.prototype.finishTransition.apply(this, arguments);

		// Automatically pop off panels that are no longer on screen
		if (this.popOnBack && (toIndex < fromIndex)) {
			popFrom = toIndex + 1;
			for (i = 0; (panel = panels[i]); i++) {
				info = this.getTransitionInfo(i);
				// If a panel is onscreen, don't pop it
				if ((i > toIndex) && !info.offscreen) {
					popFrom++;
				}
			}

			this.popPanels(popFrom);
		}

		// queuedIndex becomes -1 when left key input is occurred
		// during transition from index 1 to 0.
		// We can hide panels if we use handle.
		if (this.queuedIndex === -1 && this.useHandle) {
			this.hide();
		} else if (this.queuedIndex !== null) {
			this.setIndex(this.queuedIndex);
		}

		Spotlight.unmute(this);
		// Spot the active panel
		Spotlight.spot(this.getActive());
	},

	/**
	* Override the default `getShowing()` behavior to avoid setting `this.showing` based on the
	* CSS `display` property.
	*
	* @private
	*/
	getShowing: function () {
		return this.showing;
	},

	/**
	* @private
	*/
	showingChanged: function (inOldValue) {
		if (this.$.backgroundScrim) {
			this.$.backgroundScrim.addRemoveClass('visible', this.showing);
		}
		if (this.useHandle === true) {
			if (this.showing) {
				this.unstashHandle();
				this._show();
				Spotlight.spot(this.getActive());
			}
			else {
				// in this case, our display flag will have been set to none so we need to clear
				// that even though the showing flag will remain false
				this.applyStyle('display', null);
				this.resetHandleAutoHide();
				this._hide();
			}
			this.sendShowingChangedEvent(inOldValue);
		}
		else {
			Panels.prototype.showingChanged.apply(this, arguments);
		}
	},

	/**
	* @private
	*/
	applyPattern: function () {
		switch (this.pattern) {
		case 'alwaysviewing':
			this.applyAlwaysViewingPattern();
			break;
		case 'activity':
			this.applyActivityPattern();
			break;
		default:
			this.useHandle = false;
			break;
		}
	},

	/**
	* @private
	*/
	applyAlwaysViewingPattern: function () {
		this.setArrangerKind(BreadcrumbArranger);
		this.addClass('always-viewing');
		this.panelCoverRatio = 0.5;
		this.useHandle = (this.useHandle === 'auto') ? true : this.useHandle;
		this.createChrome(this.handleTools);
		this.breadcrumbGap = 20;
	},

	/**
	* @private
	*/
	applyActivityPattern: function () {
		this.setArrangerKind(BreadcrumbArranger);
		this.addClass('activity');
		this.showFirstBreadcrumb = true;
		this.useHandle = (this.useHandle === 'auto') ? false : this.useHandle;
		this.createChrome(this.handleTools);
		this.breadcrumbGap = 0;
	},

	/**
	* @private
	*/
	initializeShowHideHandle: function () {
		if (this.useHandle === true) {
			this.$.showHideHandle.canGenerate = true;
			this.$.showHideHandle.spotlight = true;
		}
	},

	/**
	* Shows panels with transition from right.
	*
	* @private
	*/
	_show: function () {
		var init = false;
		if (!this.hasNode()) {
			init = true;
		} else {
			this.$.showHideHandle.addClass('right');
			this.applyShowAnimation();
		}
		Signals.send('onPanelsShown', {initialization: init});
	},

	/**
	* Hides panels with transition to right.
	*
	* @private
	*/
	_hide: function () {
		if (!this.hasNode()) {
			return;
		}
		this.$.showHideHandle.removeClass('right');
		this.applyHideAnimation();
		this.panelsHiddenAsync();
	},

	/**
	* Sets show state without animation.
	*
	* @private
	*/
	_directShow: function () {
		this.$.showHideHandle.addClass('right');
		if (this.handleShowing) {
			this.$.showHideHandle.removeClass('hidden');
		}
		this.applyShowAnimation(true);
	},

	/**
	* Sets hide state without animation.
	*
	* @private
	*/
	_directHide: function () {
		this.$.showHideHandle.addClass('hidden');
		this.$.showHideHandle.removeClass('right');
		this.applyHideAnimation(true);
		this.hideAnimationComplete();
	},

	/**
	* @private
	*/
	applyShowAnimation: function (direct) {
		this.$.clientWrapper.applyStyle('transition', direct ? null : 'transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)');
		this.$.clientWrapper.applyStyle('-webkit-transition', direct ? null : '-webkit-transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)');
		dom.transform(this.$.clientWrapper, {translateX: 0});
	},

	/**
	* @private
	*/
	applyHideAnimation: function (direct) {
		this.$.clientWrapper.applyStyle('transition', direct ? null : 'transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)');
		this.$.clientWrapper.applyStyle('-webkit-transition', direct ? null : '-webkit-transform 0.5s cubic-bezier(0.25, 0.1, 0.25, 1)');
		dom.transform(this.$.clientWrapper, {translateX: '100%'});
	},

	/**
	* @private
	*/
	getOffscreenXPosition: function () {
		return this.$.clientWrapper.getBounds().width;
	},

	/**
	* Hide/show animation complete.
	*
	* @private
	*/
	showHideAnimationComplete: function (sender, event) {
		switch (event.animation.name) {
		case 'show':
			this.showAnimationComplete();
			return true;
		case 'hide':
			this.hideAnimationComplete();
			return true;
		}
	},

	/**
	* @private
	*/
	showAnimationComplete: function () {
		if (this.handleShowing) {
			this.$.showHideHandle.removeClass('hidden');
		}
	},

	/**
	* @private
	*/
	hideAnimationComplete: function () {
		if (this.handleShowing) {
			this.$.showHideHandle.removeClass('hidden');
		}
	},

	/**
	* @private
	*/
	displayBranding: function () {
		if (this.$.branding) {
			if (this.pattern == 'activity' && this.getPanelInfo(0, this.index).breadcrumb) {
				this.$.branding.show();
			} else {
				this.$.branding.hide();
			}
		}
	},

	/**
	* @private
	*/
	brandingSrcChanged: function () {
		if (this.$.branding) {
			this.$.branding.set('src', this.brandingSrc);
		}
	},

	/**
	* @private
	*/
	animateChanged: function () {
		this.addRemoveClass('moon-composite', this.animate);
	},

	/**
	* @private
	*/
	backKeyHandler: function () {
		if (this.panelStack.length) {
			this.setIndex(this.panelStack.pop());
		}
		return true;
	},

	/**
	* @private
	*/
	allowBackKeyChanged: function () {
		if (this.allowBackKey) {
			//initialize stack
			this.panelStack = [];
		} else if(this.panelStack) {
			this.panelStack = null;
		}
	}

});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Image":41,"../../../enyo/lib/Signals":68,"../../../enyo/lib/dispatcher":86,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../layout/lib/Panels":118,"../../../moonstone":119,"../../../spotlight":275,"../BreadcrumbArranger":122,"../History":152,"../Panel":169,"../StyleAnimator":187,"../options":204}],221:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Button = require('../../../moonstone/lib/Button'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton'),
	Dialog = require('../../../moonstone/lib/Dialog');

module.exports = kind({
	name: 'moons.sample.DialogSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Divider, content: 'Dialog'},
		{kind: Button, content: 'Open Dialog', ontap: 'showDialog'},
		{classes: 'moon-1v'},
		{kind: ToggleButton, content: 'Showing', name: 'showingToggle'},
		{kind: ToggleButton, content: 'Animate', name: 'animateToggle'},
		{kind: ToggleButton, content: 'SpotlightModal', ontap: 'buttonToggled'},
		{
			name: 'dialog', 
			kind: Dialog,
			title: 'You\'ve been watching TV for a very long time so let\'s do a quick check-in.',
			subTitle: 'This TV has been active for 10 hours.',
			message: 'Perhaps it is time to take a break and get some fresh air. There is a nice coffee shop around the corner', 
			components: [
				{kind: Button, content: 'Go get a coffee', ontap: 'hideDialog'},
				{kind: Button, content: 'Keep watching TV', ontap: 'addMessage'}
			]
		}
	],
	bindings: [
		{from: '.$.showingToggle.value', to: '.$.dialog.showing', oneWay:false},
		{from: '.$.dialog.animate', to: '.$.animateToggle.value', oneWay:false}
	],
	buttonToggled: function(sender, event) {
		this.$.dialog.setSpotlightModal(sender.getActive());
		this.$.dialog.setAutoDismiss(!sender.getActive());
	},
	showDialog: function(sender) {
		this.$.dialog.show();
	},
	hideDialog: function(sender, event) {
		this.$.dialog.hide();
	},
	addMessage: function() {
		this.$.dialog.setMessage(this.$.dialog.getMessage() + '<br> No, seriously, you should probably take a break.');
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Dialog":137,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ToggleButton":191}],273:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	ChannelInfo = require('../../../moonstone/lib/ChannelInfo'),
	Clock = require('../../../moonstone/lib/Clock'),
	ContextualPopup = require('../../../moonstone/lib/ContextualPopup'),
	ContextualPopupDecorator = require('../../../moonstone/lib/ContextualPopupDecorator'),
	Dialog = require('../../../moonstone/lib/Dialog'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Item = require('../../../moonstone/lib/Item'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator'),
	VideoInfoBackground = require('../../../moonstone/lib/VideoInfoBackground'),
	VideoInfoHeader = require('../../../moonstone/lib/VideoInfoHeader'),
	VideoPlayer = require('../../../moonstone/lib/VideoPlayer');

module.exports = kind({
	name: 'moon.sample.VideoPlayerSample',
	classes: 'moon enyo-fit enyo-unselectable moon-video-player-sample',
	fit: true,
	components: [
		{
			name: 'player',
			kind: VideoPlayer,
			sources: [
				{src: 'http://media.w3.org/2010/05/bunny/movie.mp4', type: 'video/mp4'},
				{src: "http://media.w3.org/2010/05/bunny/movie.ogv", type: "video/ogg"},
				{src: "http://media.w3.org/2010/05/sintel/trailer.webm", type: "video/webm"}
			],
			poster: 'assets/video-poster.png',
			autoplay: true,
			onPlaybackControlsTapped: 'controlsTapped',
			infoComponents: [
				{kind: VideoInfoBackground, orient: 'left', background: true, fit: true, components: [
					{
						kind: ChannelInfo,
						channelNo: '13',
						channelName: 'AMC',
						classes: 'moon-2h',
						components: [
							{content: '3D'},
							{content: 'Live'},
							{content: 'REC 08:22', classes: 'moon-video-player-info-redicon '}
						]
					},
					{
						kind: VideoInfoHeader,
						title: 'Downton Abbey - Extra Title',
						subTitle: 'Mon June 21, 7:00 - 8:00pm',
						subSubTitle: 'R - TV 14, V, L, SC',
						description: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
						components: [
							{content: 'Icon 1', classes: 'moon-video-player-info-icon'},
							{content: 'Icon 2', classes: 'moon-video-player-info-icon'},
							{content: 'Icon 3', classes: 'moon-video-player-info-icon'}
						]
					}
				]},
				{kind: VideoInfoBackground, orient: 'right', background: true, components: [
					{kind: Clock}
				]}
			],
			components: [
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: ToggleButton, name: 'controlsToggleButton', content: 'Controls'},
				{kind: Button, content: 'Unload', ontap: 'unload'},
				{kind: Button, content: 'Reload', ontap: 'load'},
				{kind: ToggleButton, content: 'FF/Rewind', name: 'ffrewToggleButton'},
				{kind: ContextualPopupDecorator, components: [
					{kind: TooltipDecorator, components: [
						{kind: Button, content: 'Popup'},
						{kind: Tooltip, floating: true, content: 'I\'m a tooltip for a button.'}
					]},
					{
						kind: ContextualPopup,
						classes: 'moon-3h moon-6v',
						components: [
							{kind: Item, content: 'Item 1'},
							{kind: Item, content: 'Item 2'},
							{kind: Item, content: 'Item 3'}
						]
					}
				]},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
				{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'}
			]
		},
		{kind: Dialog, name: 'tapDialog', title: 'The controls were tapped.', message: 'Press OK to dismiss', components: [
			{kind: Button, content: 'OK', ontap: 'dismissTapDialog'}
		]}
	],
	bindings: [
		{from: '.$.player.disablePlaybackControls', to: '.$.controlsToggleButton.value', oneWay:false},
		{from: '.$.player.showFFRewindControls', to: '.$.ffrewToggleButton.value', oneWay:false}
	],
	controlsTapped: function () {
		this.$.tapDialog.show();
	},
	dismissTapDialog: function () {
		this.$.tapDialog.hide();
	},
	unload: function () {
		this.$.player.unload();
	},
	load: function () {
		this.$.player.unload();
		// We can set source by sources array
		this.sources = [
			{src: 'http://media.w3.org/2010/05/bunny/movie.mp4', type: 'video/mp4'},
			{src: "http://media.w3.org/2010/05/bunny/movie.ogv", type: "video/ogg"},
			{src: "http://media.w3.org/2010/05/sintel/trailer.webm", type: "video/webm"}
		];
		this.$.player.setSources(this.sources);
	}
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/ChannelInfo":126,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/ContextualPopup":130,"../../../moonstone/lib/ContextualPopupDecorator":132,"../../../moonstone/lib/Dialog":137,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/ToggleButton":191,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195,"../../../moonstone/lib/VideoInfoBackground":198,"../../../moonstone/lib/VideoInfoHeader":199,"../../../moonstone/lib/VideoPlayer":200}],141:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	DataRepeater = require('../../../enyo/lib/DataRepeater');

var
	ExpandablePicker = require('../ExpandablePicker');

/**
* {@link moon.ExpandableDataPicker}, which extends {@link moon.ExpandablePicker}, is
* a data-driven drop-down picker menu that solicits a choice from the user. The picker's child
* components, which are instances of {@link moon.CheckboxItem} by default, provide
* the options for the picker. They child controls are generated from the picker's
* [collection]{@link moon.ExpandableDataPicker#collection}.
* 
* ```
* {name: 'picker', kind: 'moon.ExpandableDataPicker', content: 'Data Picker', components: [
* 	{bindings: [
* 		{from: '.model.label', to: '.content'}
* 	]}
* ]}
* ```
*
* @class moon.ExpandableDataPicker
* @extends moon.ExpandablePicker
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ExpandableDataPicker.prototype */ {
	
	/**
	* @private
	*/
	name: 'moon.ExpandableDataPicker',
	
	/**
	* @private
	*/
	kind: ExpandablePicker,
	
	/**
	* @lends moon.ExpandableDataPicker.prototype
	* @private
	*/
	published: {
		/**
		* Collection of models to render as picker items
		*
		* @type {enyo.Collection}
		* @default null
		* @public
		*/
		collection: null
	},
	
	/**
	* @private
	*/
	collectionChanged: function () {
		this.$.list.set('collection', this.collection);
	},
	
	/**
	* @method
	* @private
	*/
	create: function () {
		ExpandablePicker.prototype.create.apply(this, arguments);
		this.collectionChanged();
	},
	
	/**
	* @method
	* @private
	*/
	initComponents: function () {
		var comps = this.components || this.kindComponents;
		this.components = null;

		ExpandablePicker.prototype.initComponents.apply(this, arguments);

		var list = this.getListComponent(comps);
		this.createComponent(list);
	},
	
	/**
	* Creates the configuration for the {@link enyo.DataRepeater} that will generate the picker
	* items
	*
	* @param {Object[]} comps 	- Component configurations that will be each picker item
	* @return {Object} 			- List component configuration
	* @protected
	*/
	getListComponent: function (comps) {
		var list = {
			name: 'list',
			kind: DataRepeater,
			components: comps,
			owner: this
		};

		// could use defaultProps on the repeater but they'll also get added to the repeater's
		// container which may not be desirable
		if(comps.length === 1 && !comps[0].kind) {
			comps[0].kind = this.defaultKind;
		}

		return list;
	},
	
	/**
	* @private
	*/
	getCheckboxControls: function () {
		return this.$.list.getClientControls();
	}
});
},{"../../../enyo/lib/DataRepeater":31,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../ExpandablePicker":146}],175:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	RadioItem = require('../RadioItem');

/**
* {@link moon.RadioItemGroup} is a container in which a group of {@link moon.RadioItem}
* objects are laid out horizontally. Within a group, only one item may be active at a
* time; tapping on an item will deactivate any previously-tapped item.
*
* ```
* {kind: 'moon.RadioItemGroup', onActivate: 'buttonActivated', components: [
*	{content: 'Lions', selected: true},
*	{content: 'Tigers'},
*	{content: 'Bears'}
* ]}
* ```
*
* @class moon.RadioItemGroup
* @extends enyo.Group
* @ui
* @public
*/
module.exports = kind(
	/** @lends  moon.RadioItemGroup.prototype */ {

	/**
	* @private
	*/
	name: 'moon.RadioItemGroup',

	/**
	* @private
	*/
	kind: Group,

	/**
	* @private
	*/
	classes: 'moon-radio-item-group',

	/**
	* @private
	*/
	defaultKind: RadioItem
});
},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../RadioItem":174}],135:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind');

var
	ilib = require('../../../enyo-ilib');

var
	DateTimePickerBase = require('../DateTimePickerBase'),
	$L = require('../i18n'),
	IntegerPicker = require('../IntegerPicker');

/**
* {@link moon.DatePicker} is a control used to allow the selection of (or simply
* display) a day, month, and year.
*
* ```
* {
* 	kind: 'moon.DatePicker',
* 	noneText: 'Pick a Date',
* 	content: 'Date',
* 	onChange: 'changed'
* }
* ```
*
* Set the [value]{@link moon.DatePicker#value} property to a standard JavaScript
* {@glossary Date} object to initialize the picker, or to change it programmatically
* at runtime.
*
* @class moon.DatePicker
* @extends moon.DateTimePickerBase
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.DatePicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.DatePicker',

	/**
	* @private
	*/
	kind: DateTimePickerBase,

	/**
	* @private
	* @lends moon.DatePicker.prototype
	*/
	published: {

		/**
		* Optional minimum year value. Must be specified using the Gregorian
		* calendar, regardless of the calendar type used by the specified locale.
		*
		* @type {Number}
		* @default 1900
		* @public
		*/
		minYear: 1900,

		/**
		* Optional maximum year value. Must be specified using the Gregorian
		* calendar, regardless of the calendar type used by the specified locale.
		*
		* @type {Number}
		* @default 2099
		* @public
		*/
		maxYear: 2099,

		/**
		* Optional label for day.
		*
		* @type {String}
		* @default 'day'
		* @public
		*/
		dayText: $L('day'),			// i18n 'DAY' label in moon.DatePicker widget

		/**
		* Optional label for month.
		*
		* @type {String}
		* @default 'month'
		* @public
		*/
		monthText: $L('month'),		// i18n 'MONTH' label in moon.DatePicker widget

		/**
		* Optional label for year.
		*
		* @type {String}
		* @default 'year'
		* @public
		*/
		yearText: $L('year')			// i18n 'YEAR' label in Moon.DatePicker widget
	},

	/**
	* @private
	*/
	iLibFormatType: 'date',

	/**
	* @private
	*/
	defaultOrdering: 'Mdy',

	/**
	* @private
	*/
	initILib: function () {
		DateTimePickerBase.prototype.initILib.apply(this, arguments);
		if (ilib && this.value) {
			this.localeValue = ilib.Date.newInstance({unixtime: this.value.getTime(), timezone: "local"});
		}
	},

	/**
	 * When [iLib]{@glossary ilib} is supported, calculates the minimum year in the
	 * current calendar. Otherwise, returns the value of the published property
	 * [minYear]{@link moon.DatePicker#minYear}.
	 *
	 * @private
	 */
	getMinYear: function() {
		if (ilib) {
			var greg = ilib.Date.newInstance({
				type: "gregorian",
				year: this.minYear,
				month: 1,
				day: 1,
				timezone: 'local'
			});
			var localCalendarDate = ilib.Date.newInstance({
				julianday: greg.getJulianDay(),
				timezone: "local"
			});
			return localCalendarDate.getYears();
		} else {
			return this.minYear;
		}
	},

	/**
	 * When [iLib]{@glossary ilib} is supported, calculates the maximum year in the
	 * current calendar. Otherwise, returns the value of the published property
	 * [maxYear]{@link moon.DatePicker#maxYear}.
	 *
	 * @private
	 */
	getMaxYear: function() {
		if (ilib) {
			var greg = ilib.Date.newInstance({
				type: "gregorian",
				year: this.maxYear,
				month: 1,
				day: 1,
				timezone: 'local'
			});
			var localCalendarDate = ilib.Date.newInstance({
				julianday: greg.getJulianDay(),
				timezone: "local"
			});
			return localCalendarDate.getYears();
		} else {
			return this.maxYear;
		}
	},


	/**
	* @private
	*/
	setupPickers: function (ordering) {
		var orderingArr = ordering.split('');
		var doneArr = [];
		var o, f, l, digits, values;
		for(f = 0, l = orderingArr.length; f < l; f++) {
			o = orderingArr[f];
			if (doneArr.indexOf(o) < 0) {
				doneArr.push(o);
			}
		}

		values = this.calcPickerValues();
		this.silence();

		for(f = 0, l = doneArr.length; f < l; f++) {
			o = doneArr[f];

			switch (o) {
			case 'd':
				digits = (ordering.indexOf('dd') > -1) ? 2 : null;
				this.createComponent(
					{classes: 'moon-date-picker-wrap', components:[
						{kind: IntegerPicker, name:'day', classes:'moon-date-picker-field', wrap:true, digits:digits, min:1,
						max:this.monthLength(values.fullYear, values.month), value: values.date, onChange: 'pickerChanged'},
						{name: 'dayLabel', content: this.dayText, classes: 'moon-date-picker-label moon-divider-text'}
					]});
				break;
			case 'M':
				digits = (ordering.indexOf('MM') > -1) ? 2 : null;
				this.createComponent(
					{classes: 'moon-date-picker-wrap', components:[
						{kind: IntegerPicker, name:'month', classes:'moon-date-picker-field', wrap:true, min:1, max:values.maxMonths, value:values.month, onChange: 'pickerChanged'},
						{name: 'monthLabel', content: this.monthText, classes: 'moon-date-picker-label moon-divider-text'}
					]});
				break;
			case 'y':
				this.createComponent(
					{classes: 'moon-date-picker-wrap year', components:[
						{kind: IntegerPicker, name:'year', classes:'moon-date-picker-field year', value:values.fullYear, min:this.getMinYear(), max:this.getMaxYear(), onChange: 'pickerChanged'},
						{name: 'yearLabel', content: this.yearText, classes: 'moon-date-picker-label moon-divider-text'}
					]});
				break;
			default:
				break;
			}
		}

		this.unsilence();
		DateTimePickerBase.prototype.setupPickers.apply(this, arguments);
	},

	/**
	* @private
	*/
	formatValue: function () {
		if (!this.value) {
			return (this.noneText);
		}
		if (this._tf) {
			return this._tf.format(this.value);
		} else {
			return this.getWeekDay()[this.value.getDay()] + ' ' + this.getMonthName()[this.value.getMonth()] + ' ' + this.value.getDate() + ' ' + this.value.getFullYear();
		}
	},

	/**
	* @private
	*/
	pickerChanged: function (inSender, inEvent) {
		if(this.syncingPickers) return true;

		var day = this.$.day.getValue(),
			month = this.$.month.getValue(),
			year = this.$.year.getValue(),
			maxDays;
		var valueHours = this.value ? this.value.getHours() : 0;
		var valueMinutes = this.value ? this.value.getMinutes() : 0;
		var valueSeconds = this.value ? this.value.getSeconds() : 0;
		var valueMilliseconds = this.value ? this.value.getMilliseconds() : 0;

		if (ilib) {
			maxDays = this.monthLength(year, month);
			this.localeValue = ilib.Date.newInstance({
				day: (day <= maxDays) ? day : maxDays,
				month: month,
				year: year,
				hour: valueHours,
				minute: valueMinutes,
				second: valueSeconds,
				millisecond: valueMilliseconds
			});
			this.setValue(this.localeValue.getJSDate());
		} else {
			maxDays = this.monthLength(year, month);
			this.setValue(new Date(year, month-1, (day <= maxDays) ? day : maxDays,
				valueHours,
				valueMinutes,
				valueSeconds,
				valueMilliseconds));
		}

		return true;
	},

	/**
	* @private
	*/
	setChildPickers: function (inOld) {
		if (this.value && ilib) {
			this.localeValue = ilib.Date.newInstance({unixtime: this.value.getTime(), timezone: "local"});
		}

		if (this.localeValue || this.value) {
			var values = this.calcPickerValues();

			this.$.year.set('value', values.fullYear);
			this.$.month.set('value', values.month);
			this.$.day.set('value', values.date);
			this.$.month.set('max', values.maxMonths);
			this.$.day.set('max', this.monthLength(values.fullYear, values.month));
			this.$.currentValue.setContent(this.formatValue());
		}
	},

	/**
	* @private
	*/
	calcPickerValues: function () {
		var values = {};
		if (ilib) {
			if (this.localeValue) {
				values.fullYear = this.localeValue.getYears();
				values.month = this.localeValue.getMonths();
				values.date = this.localeValue.getDays();
			}
			values.maxMonths = this._tf.cal.getNumMonths(values.fullYear);
		} else {
			if (this.value) {
				values.fullYear = this.value.getFullYear();
				values.month = this.value.getMonth()+1;
				values.date = this.value.getDate();
			}
			values.maxMonths = 12;
		}
		return values;
	},

	/**
	* @private
	*/
	getMonthName: function () {
		// Only used when ilib is not loaded
		return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	},

	/**
	* @private
	*/
	getWeekDay: function() {
		// Only used when ilib is not loaded
		return ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	},

	/**
	* Returns number of days in a particular month/year.
	*
	* @private
	*/
	monthLength: function (inYear, inMonth) {
		if (ilib) {
			return this._tf.cal.getMonLength(inMonth, inYear);
		} else {
			return 32 - new Date(inYear, inMonth - 1, 32).getDate();
		}
	},

	/**
	* @private
	*/
	yearTextChanged: function (inOldvalue, inNewValue) {
		this.$.yearLabel.setContent(inNewValue);
	},

	/**
	* @private
	*/
	monthTextChanged: function (inOldvalue, inNewValue) {
		this.$.monthLabel.setContent(inNewValue);
	},

	/**
	* @private
	*/
	dayTextChanged: function (inOldvalue, inNewValue) {
		this.$.dayLabel.setContent(inNewValue);
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../DateTimePickerBase":136,"../IntegerPicker":161,"../i18n":203}],183:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom');

var
	IntegerPicker = require('../IntegerPicker');

/**
* Fires when the currently selected item changes.
*
* @event moon.SimpleIntegerPicker#onChange
* @type {Object}
* @property {Number} value - The value of the currently selected item.
* @property {String} content - The content of the currently selected item.
* @public
*/

/**
* Fires in response to Return keypress while the picker has focus in
* {@glossary Spotlight} 5-way mode.
*
* @event moon.SimpleIntegerPicker#onSelect
* @type {Object}
* @property {Number} value - The value of the currently selected item.
* @property {String} content - The content of the currently selected item.
* @public
*/

/**
* Fires when the picker is rebuilt, allowing other controls the opportunity to reflow
* the picker as necessary (e.g., a child of a {@link moon.ExpandableIntegerPicker} may
* need to be reflowed when the picker is opened, as it may not be currently visible).
* No event-specific data is sent with this event.
*
* @event moon.SimpleIntegerPicker#onRebuilt
* @type {Object}
* @public
*/

/**
* {@link moon.SimpleIntegerPicker} is a [control]{@link enyo.Control} that prompts the
* user to make a selection from a range of integer-based options.
*
* The picker may be changed programmatically by calling
* [previous()]{@link moon.IntegerPicker#previous} or
* [next()]{@link moon.IntegerPicker#next}, or by modifying the published property
* [value]{@link moon.IntegerPicker#value}.
*
* @class moon.SimpleIntegerPicker
* @extends enyo.Control
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.SimpleIntegerPicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.SimpleIntegerPicker',

	/**
	* @private
	*/
	kind: IntegerPicker,

	/**
	* @private
	*/
	classes: 'moon-simple-integer-picker',

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	events: {
		onSelect: ''
	},

	/**
	* @private
	*/
	handlers: {
		onSpotlightUp: null,
		onSpotlightDown: null,
		onSpotlightRight: 'next',
		onSpotlightLeft: 'previous',
		onSpotlightSelect: 'fireSelectEvent'
	},

	/**
	* @lends moon.SimpleIntegerPicker.prototype
	* @private
	* @lends moon.SimpleIntegerPicker.prototype
	*/
	published: {

		/**
		* Unit label to be appended to the value for display.
		*
		* @type {String}
		* @default 'sec'
		* @public
		*/
		unit: 'sec'
	},

	/**
	* Number of pixels added to the width of each picker item as padding. Note that this
	* is not a CSS padding value.
	*
	* @type {Number}
	* @default 60
	* @public
	*/
	itemPadding: 60,

	/**
	* Appends unit to content, forming label for display.
	*
	* @see moon.IntegerPicker.labelForValue
	* @private
	* @method
	*/
	labelForValue: function (value) {
		var content = IntegerPicker.prototype.labelForValue.apply(this, arguments);
		return this.unit? content + ' ' + this.unit : content;
	},

	/**
	* Calculates width of the picker when the first item is rendered.
	*
	* @see moon.IntegerPicker.updateRepeater
	* @private
	* @method
	*/
	updateRepeater: function () {
		IntegerPicker.prototype.updateRepeater.apply(this, arguments);

		if(!this.width) {
			var ib;
			this.$.repeater.performOnRow(this.$.repeater.rowOffset, function() {
				// have to reset to natural width before getting bounds
				this.$.item.setStyle('width: auto');
				ib = this.$.item.getBounds();
			}, this);

			this.width = ib.width + this.itemPadding;
			this.applyStyle('width', dom.unit(this.width, 'rem'));
			this.$.item.setStyle('width: ' + dom.unit(this.width, 'rem'));
		}
	},

	/**
	* @fires moon.SimpleIntegerPicker#onSelect
	* @private
	*/
	fireSelectEvent: function () {
		if (this.hasNode()) {
			this.doSelect({
				content: this.labelForValue(this.value),
				value: this.value
			});
		}
	},

	/**
	* Forces recalculation of the width of the picker.
	*
	* @see enyo.UiComponent.reflow
	* @private
	* @method
	*/
	reflow: function () {
		this.width = 0;
		IntegerPicker.prototype.reflow.apply(this, arguments);
	}
});
},{"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../IntegerPicker":161}],190:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	platform = require('../../../enyo/lib/platform'),
	Control = require('../../../enyo/lib/Control');

var
	ilib = require('../../../enyo-ilib');

var
	DateTimePickerBase = require('../DateTimePickerBase'),
	$L = require('../i18n'),
	IntegerPicker = require('../IntegerPicker');

/**
* {@link moon.MeridiemPicker} is a helper kind used by {@link moon.TimePicker}.
* It is not intended for use in other contexts.
*
* @class moon.MeridiemPicker
* @extends moon.IntegerPicker
* @ui
* @protected
*/
var MeridiemPicker = kind(
	/** @lends  moon.MeridiemPicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.MeridiemPicker',

	/**
	* @private
	*/
	kind: IntegerPicker,

	/**
	* @private
	*/
	classes: 'moon-date-picker-month',

	/**
	* @private
	*/
	min: 0,

	/**
	* @private
	*/
	max: 1,

	/**
	* @private
	*/
	value: null,

	/**
	* @private
	*/
	wrap: true,

	/**
	* @private
	* @lends moon.MeridiemPicker.prototype
	*/
	published: {
		/**
		* The meridiem text to display if [meridiemEnable]{@link moon.TimePicker#meridiemEnable}
		* is `true`. The first item is used if the `hour` is less than `11`; otherwise, the
		* second is used.
		*
		* @type {String[]}
		* @default ['AM','PM']
		* @public
		*/
		meridiems: ['AM','PM']
	},

	/**
	* @private
	*/
	valueChanged: function () {
		IntegerPicker.prototype.valueChanged.apply(this, arguments);		
		this.updateOverlays();
	},

	/**
	* @private
	*/
	setupItem: function (inSender, inEvent) {
		var index = inEvent.index % this.range;
		this.$.item.setContent(this.meridiems[index]);
	}
});

/**
* {@link moon.HourMinutePickerBase} is a helper kind used by {@link moon.TimePicker}. 
*  It is not intended for use in other contexts.
*
* @class moon.MinutePicker
* @extends moon.IntegerPicker
* @ui
* @protected
*/
var HourMinutePickerBase = kind(
	/** @lends moon.HourMinutePickerBase.prototype */ {

	/**
	* @private
	*/
	name: 'moon.HourMinutePickerBase',

	/**
	* @private
	*/
	kind: IntegerPicker,

	/**
	* @private
	*/
	classes: 'moon-date-picker-field',

	/**
	* @private
	*/
	formatter: null,

	/**
	* @private
	*/
	wrap: true,

	/**
	* @private
	*/
	create: function () {
		IntegerPicker.prototype.create.apply(this, arguments);
		// Create ilib Date object used for formatting hours
		if (ilib) {
			this.date = ilib.Date.newInstance();
		}
	},

	/**
	* @private
	*/
	setupItem: function (inSender, inEvent) {
		var value = this.format(inEvent.index % this.range);
		this.$.item.setContent(value);
	}
});

/**
* {@link moon.MinutePicker} is a helper kind used by {@link moon.TimePicker}. 
*  It is not intended for use in other contexts.
*
* @class moon.MinutePicker
* @extends moon.HourMinutePickerBase
* @ui
* @protected
*/
var MinutePicker = kind(
	/** @lends moon.MinutePicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.MinutePicker',
	/**
	* @private
	*/
	kind: HourMinutePickerBase,

	/**
	* @private
	*/
	min: 0,

	/**
	* @private
	*/
	max: 59,

	/**
	 * Formats the minute at `index` for the current locale
	 *
	 * @param  {Number} index - Minute between 0 and 59
	 * @return {String}       - Formatted minute
	 * @private
	 */
	format: function (index) {
		var minute;

		if (this.date) { // ilib enabled
			this.date.minute = index;
			minute = this.formatter.format(this.date);
		} else {	// Have TimePicker format the minutes
			minute = this.formatter.formatMinute(index);
		}

		return minute;
	}
});

/**
* {@link moon.HourPicker} is a helper kind used by {@link moon.TimePicker}. It is
*  not intended for use in other contexts.
*
* @class moon.HourPicker
* @extends moon.HourMinutePickerBase
* @ui
* @protected
*/
var HourPicker = kind(
	/** @lends moon.HourPicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.HourPicker',

	/**
	* @private
	*/
	kind: HourMinutePickerBase,

	/**
	* @private
	*/
	min: 0,

	/**
	* @private
	*/
	max: 23,


	/**
	 * Formats the hour at `index` for the current locale
	 *
	 * @param  {Number} index - Hour between 0 and 24
	 * @return {String}       - Formatted hour
	 * @private
	 */
	format: function (index) {
		var hour;

		if (this.date) { // ilib enabled
			this.date.hour = index;
			hour = this.formatter.format(this.date);
		} else {	// Have TimePicker format the hours
			hour = this.formatter.formatHour(index);
		}

		return hour;
	},

	/**
	 * If the formatted new and old values are the same, skip animating by not passing
	 * the old value to `IntegerPicker.scrollToValue`.
	 *
	 * If the hour is changed by more than 12 but the locale is using 12 hour formatting, this
	 * will not prevent a big scroll through all intermediate values (e.g. from 3pm to 2am) even
	 * though it only has to scroll 1 index. This can be seen most easily by selecting a time
	 * between 2 and 3 pm on day when DST springs forward and then changing the meridiem to AM.
	 * 
	 * @see moon.IntegerPicker.scrollToValue
	 * @private
	 */
	scrollToValue: function(old) {
		// try to avoid the format calls if the old and current values
		// don't mod to the same value
		var maybeSame = old !== undefined && old%12 === this.value%12;
		if(maybeSame && this.format(old) === this.format(this.value)) {
			HourMinutePickerBase.prototype.scrollToValue.call(this);
		} else {
			HourMinutePickerBase.prototype.scrollToValue.apply(this, arguments);
		}
	}
});
/**
* {@link moon.TimePicker} is a [control]{@link enyo.Control} used to allow the
* selection of (or to simply display) a time expressed in hours and minutes, with an
* optional meridiem indicator ('am' or 'pm').
*
* ```
* {kind: 'moon.TimePicker', content: 'Time', meridiemEnable: true, onChange: 'changed'}
* ```
* Set the [value]{@link moon.TimePicker#value} property to a standard JavaScript
* {@glossary Date} object to initialize the picker, or to change it programmatically at
* runtime.
*
* @class moon.TimePicker
* @extends moon.DateTimePickerBase
* @ui
* @public
*/
var TimePicker = module.exports = kind(
	/** @lends moon.TimePicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.TimePicker',

	/**
	* @private
	*/
	kind: DateTimePickerBase,

	/**
	* @private
	* @lends moon.TimePicker.prototype
	*/
	published: {

		/**
		* When `true`, the picker will use a 12-hour clock. (When [iLib]{@glossary ilib} is loaded,
		* this value will be ignored and the current locale's rules will determine whether a
		* 12-hour or 24-hour clock is used.)
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		meridiemEnable: false,

		/**
		* Optional label for hour.
		*
		* @type {String}
		* @default 'moon.$L('hour')'
		* @public
		*/
		hourText: $L('hour'),			// i18n 'HOUR' label in moon.TimePicker widget

		/**
		* Optional label for minute.
		*
		* @type {String}
		* @default 'moon.$L('minute')'
		* @public
		*/
		minuteText: $L('minute'),		// i18n 'MINUTE' label in moon.TimePicker widget

		/**
		* Optional label for meridiem.
		*
		* @type {String}
		* @default 'moon.$L('meridiem')'
		* @public
		*/

		meridiemText: $L('meridiem'),	// i18n 'MERIDIEM' label in moon.TimePicker widget
		/**
		* When `true`, midnight (and noon, if `meridiemEnable: true`) will be represented as `0`
		* instead of `24` (and `12`). (When [iLib]{@glossary ilib} is loaded, this value will be
		* ignored and the current locale's rules will determine whether `0` is used.)
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		hoursStartAtZero: false,

		/**
		* When `true`, hours will be zero-padded. (When [iLib]{@glosary ilib} is loaded, this
		* value will be ignored and the current locale's rules will determine whether
		* zero-padding is used.)
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		hoursZeroPadded: false
	},

	/**
	* @private
	*/
	observers: {
		refresh: ['hoursStartAtZero', 'meridiemEnable', 'hoursZeroPadded']
	},

	/**
	* @private
	*/
	iLibFormatType  : 'time',

	/**
	* @private
	*/
	defaultOrdering : 'hma',


	/**
	* @private
	*/
	initILib: function () {
		DateTimePickerBase.prototype.initILib.apply(this, arguments);

		// Set picker format 12 vs 24 hour clock
		var li = new ilib.LocaleInfo(this.locale || undefined);
		var clockPref = li.getClock();
		this.meridiemEnable = (clockPref == '12');

		var fmtParams = {
			type: 'time',
			time: 'h',
			clock: clockPref !== 'locale' ? clockPref : undefined,
			useNative: false,
			timezone: 'local'
		};
		if (this.locale) {
			fmtParams.locale = this.locale;
		}
		this.hourFormatter = new ilib.DateFmt(fmtParams);

		fmtParams.time = 'm';
		this.minuteFormatter = new ilib.DateFmt(fmtParams);

		// Get localized meridiem values
		if (this.meridiemEnable) {
			fmtParams = {
				template: 'a',
				clock: clockPref !== 'locale' ? clockPref : undefined,
				useNative: false,
				timezone: 'local'
			};
			if (this.locale) {
				fmtParams.locale = this.locale;
			}
			var merFormatter = new ilib.DateFmt(fmtParams);
			var am = ilib.Date.newInstance({hour:10});
			var pm = ilib.Date.newInstance({hour:14});
			this.meridiems = [merFormatter.format(am), merFormatter.format(pm)];
		}
	},

	/**
	* @private
	*/
	setupPickers: function (ordering) {
		var orderingArr = ordering.toLowerCase().split('');
		var doneArr = [];
		var o,f,l;
		for(f = 0, l = orderingArr.length; f < l; f++) {
			o = orderingArr[f];
			if (doneArr.indexOf(o) < 0) {
				doneArr.push(o);
			}
		}

		for(f = 0, l = doneArr.length; f < l; f++) {
			o = doneArr[f];
			var valueHours = this.value ? this.value.getHours() : 0;
			var valueMinutes = this.value ? this.value.getMinutes() : 0;

			switch (o){
			case 'h':
			case 'k':
				this.wrapComponent(
					{name: 'timeWrapper', kind: Control, classes: 'moon-time-picker-wrap'},
					{kind: Control, classes: 'moon-date-picker-wrap', components:[
						{name: 'hour', kind: HourPicker, formatter: this.hourFormatter || this, value: valueHours, onChange: 'hourPickerChanged'},
						{name: 'hourLabel', kind: Control, content: this.hourText, classes: 'moon-date-picker-label moon-divider-text'}
					]},
					this
				);
				break;
			case 'm':
				this.wrapComponent(
					{name: 'timeWrapper', kind: Control, classes: 'moon-time-picker-wrap'},
					{classes: 'moon-date-picker-wrap', components:[
						{name: 'minute', kind: MinutePicker, formatter: this.minuteFormatter || this, value: valueMinutes, onChange: 'minutePickerChanged'},
						{name: 'minuteLabel', content: this.minuteText, classes: 'moon-date-picker-label moon-divider-text'}
					]},
					this
				);
				break;
			case 'a':
				if (this.meridiemEnable === true) {
					this.createComponent(
						{kind: Control, classes: 'moon-date-picker-wrap', components:[
							{name: 'meridiem', kind: MeridiemPicker, classes: 'moon-date-picker-field', value: valueHours > 12 ? 1 : 0, meridiems: this.meridiems || ['am','pm'], onChange: 'meridiemPickerChanged'},
							{name: 'meridiemLabel', kind: Control, content: this.meridiemText, classes: 'moon-date-picker-label moon-divider-text'}
						]}
					);
				}
				break;
			default:
				break;
			}

		}

		DateTimePickerBase.prototype.setupPickers.apply(this, arguments);
	},

	/**
	* @private
	*/
	wrapComponent: function (wrapperProps, compProps, owner) {
		var wrapper = this.$[wrapperProps.name];
		if (!wrapper) {
			wrapper = this.createComponent(wrapperProps);
		}
		wrapper.createComponent(compProps, {owner: owner});
	},

	/**
	* @private
	*/
	formatValue: function () {
		if (!this.value) {
			return (this.noneText);
		}
		var dateStr = '';
		if (this._tf) {
			dateStr = this._tf.format(ilib.Date.newInstance({unixtime: this.value.getTime(), timezone:'Etc/UTC'}));
		}
		else {
			dateStr += this.formatHour(this.value.getHours());
			dateStr += ':' + ('00' + this.value.getMinutes()).slice(-2) + ' ';
			dateStr += this.meridiemEnable ? this.$.meridiem.getMeridiems()[this.$.meridiem.getValue()] : '';
		}
		return dateStr;
	},

	/**
	* @private
	*/
	formatHour: function (hour) {
		if (this.meridiemEnable) {
			if (hour > 12) {
				hour -= 12;
			}
			if (this.hoursStartAtZero) {
				if (hour == 12) {
					hour = 0;
				}
			} else {
				hour = hour || 12;
			}
		} else {
			if (!this.hoursStartAtZero) {
				hour = hour || 24;
			}
		}
		if (this.hoursZeroPadded) {
			hour = ('0' + hour).slice(-2);
		}
		return hour;
	},

	/**
	* @private
	*/
	formatMinute: function (minute) {
		return minute;
	},

	/**
	* @private
	*/
	hourPickerChanged: function (sender, event) {
		if(this.syncingPickers) return true;

		var hour = event.value;

		if (this.value) {
			this.updateHours(hour);
		}

		return true;
	},

	/**
	* @private
	*/
	minutePickerChanged: function (sender, event) {
		if(this.syncingPickers) return true;

		var minutes = event.value;

		if (this.value) {
			this.value.setMinutes(minutes);
			this.set('value', this.value, {force: true});
		}

		return true;
	},

	/**
	* @private
	*/
	meridiemPickerChanged: function (sender, event) {
		if(this.syncingPickers) return true;

		var hour = this.$.hour.get('value'),
			value = event.value;

		if (this.value) {
			// value is 0 for am, 1 for pm
			// reset the hour to < 12 and then add 12 if it's pm
			hour = hour%12 + value*12;
			this.updateHours(hour);
		}

		return true;
	},

	/**
	* webOS TVs which rounds down when setting the hour to the skipped hour of DST
	* whereas other implementations round up. 
	*
	* @private
	*/
	dstOffset: platform.webos? 3600000 : -3600000,

	/**
	* @private
	*/
	updateHours: function (hour) {
		var valueTime = this.value.getTime();

		this.value.setHours(hour);

		// in the rare case that the value didn't change because it was snapped back to the
		// same value due to DST rules, push it back another hour.
		if (valueTime == this.value.getTime()) {
			this.value = new Date(valueTime + this.dstOffset);
		}

		this.set('value', this.value, {force: true});
	},

	/**
	* @private
	*/
	setChildPickers: function (inOld) {
		if (this.value) {
			var hour = this.value.getHours();
			this.$.hour.setValue(hour);
			this.$.minute.setValue(this.value.getMinutes());
			if (this.meridiemEnable === true) {
				this.$.meridiem.setValue(hour > 11 ? 1 : 0);
			}
		}
		this.$.currentValue.setContent(this.formatValue());
	},

	/**
	* @private
	*/
	hourTextChanged: function (inOldvalue, inNewValue) {
		this.$.hourLabel.setContent(inNewValue);
	},

	/**
	* @private
	*/
	minuteTextChanged: function (inOldvalue, inNewValue) {
		this.$.minuteLabel.setContent(inNewValue);
	},

	/**
	* @private
	*/
	meridiemTextChanged: function (inOldvalue, inNewValue) {
		this.$.meridiemLabel.setContent(inNewValue);
	}
});

TimePicker.HourPicker = HourPicker;
TimePicker.MinutePicker = MinutePicker;
TimePicker.MeridiemPicker = MeridiemPicker;
},{"../../../enyo-ilib":8,"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/platform":102,"../../../moonstone":119,"../DateTimePickerBase":136,"../IntegerPicker":161,"../i18n":203}],134:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	util = require('../../../enyo/lib/utils'),
	DataList = require('../../../enyo/lib/DataList');

var
	Spotlight = require('../../../spotlight');

var
	Scroller = require('../Scroller');

/**
* {@link moon.DataListSpotlightSupport} is a {@glossary mixin} that provides
* {@glossary Spotlight} handling code for use by {@link moon.DataList} and
* {@link moon.DataGridList}. Since both of these [kinds]{@glossary kind} inherit
* from their respective Enyo counterparts, this mixin provides the common add-on
* code needed for proper spotlight handling.
*
* @mixin moon.DataListSpotlightSupport
* @private
*/
var SpotlightSupport = {

	/**
	* @private
	* @lends moon.DataListSpotlightSupport.prototype
	*/
	published: {
		/**
		* The index of the item to focus at render time, or `-1` for no focused item.
		*
		* @type {Number}
		* @default -1
		* @public
		*/
		initialFocusIndex: -1
	},

	/**
	* @private
	*/
	handlers: {
		onSpotlightUp    : '_spotlightPrev',
		onSpotlightLeft  : '_spotlightPrev',
		onSpotlightDown  : '_spotlightNext',
		onSpotlightRight : '_spotlightNext'
	},

	/**
	* @private
	*/
	focusOnIndex: function (inIndex, inSubChild) {
		var c = this.collection,
			child,
			subChild;
		if (c && c.length && this.hasRendered) {  // Give focus if list is rendered
			inIndex = inIndex < 0 ? 0 : (inIndex >= c.length ? c.length - 1 : inIndex);
			child = this.childForIndex(inIndex);
			if (!child) {
				this.scrollToIndex(inIndex);
				child = this.childForIndex(inIndex);
			}
			subChild = inSubChild ? Spotlight.getChildren(child)[inSubChild] : child;
			Spotlight.spot(subChild);
		} else {
			this._indexToFocus = inIndex;
			this._subChildToFocus = inSubChild;
		}
	},

	/**
	* @private
	*/
	getFocusedIndex: function () {
		var focusedChild = this.getFocusedChild();
		return focusedChild ? this.getIndexFromChild(focusedChild) : -1;
	},

	/**
	* @private
	*/
	getFocusedChild: function () {
		var current = Spotlight.getCurrent();
		return (current && current.isDescendantOf(this.$.active)) ? current : null;
	},

	/**
	* @private
	*/
	_indexToFocus: -1,

	/**
	* @private
	*/
	_subChildToFocus: null,

	/**
	* @private
	*/
	didRender: function () {
		// Lists are set to spotlight:true by default, which allows them to receive focus before
		// children are rendered; once rendred, it becomes spotlight:false, and the code below
		// ensures spotlight is transferred inside the list once rendering is complete
		this.spotlight = false;
		// If there is a queued index to focus (or an initialFocusIndex), focus that item now that
		// the list is rendered
		var index = (this._indexToFocus > -1) ? this._indexToFocus : this.initialFocusIndex;
		if (index > -1) {
			this.focusOnIndex(index);
			this._indexToFocus = -1;
		} else {
			// Otherwise, check if the list was focused and if so, transfer focus to the first
			// spottable child inside
			if (Spotlight.getCurrent() == this) {
				Spotlight.spot(this);
			}
		}
	},

	/**
	* @private
	* @method
	*/
	didScroll: kind.inherit(function (sup) {
		return function () {
			// When scrolling in pointer mode, we unspot the last focused child, to prevent it from
			// looping as new pages come up
			var spot;
			if (Spotlight.getPointerMode() &&
				((spot = Spotlight.getCurrent()) && (spot === this || spot.isDescendantOf(this.$.active)))) {
				Spotlight.unspot();
				this._unspotSinceSpot = true;
			}
			return sup.apply(this, arguments);
		};
	}),

	/**
	* @private
	*/
	_spotlightNext: function (inSender, inEvent) {
		return this._spotlightSelect(inEvent, 1);
	},

	/**
	* @private
	*/
	_spotlightPrev: function (inSender, inEvent) {
		return this._spotlightSelect(inEvent, -1);
	},

	/**
	* Spots the next/previous control. Handles the case where this control may not be
	* generated yet; otherwise, the default behavior occurs and is handled by Spotlight.
	*
	* @private
	*/
	_spotlightSelect: function (inEvent, inDirection) {
		var pages = this.delegate.pagesByPosition(this),
			spottableControl;

		// If there are no spottable items generated in the current pages, generate the subsequent page(s)
		// based on the current direction
		if (!this.getNextSpottableChild(inDirection)) {
			// Find the next spottable control in the appropriate direction
			if (inDirection === 1) {
				spottableControl = this.findSpottableControl(inDirection, pages.firstPage, pages.lastPage.index + 1);
			} else if (inDirection === -1) {
				spottableControl = this.findSpottableControl(inDirection, pages.lastPage, pages.firstPage.index - 1);
			}

			if (spottableControl) {
				// Explicitly handle spotting of the control we found
				Spotlight.spot(spottableControl);
				return true;
			}
		} else if (this.needToAdjustPages) {
			// Sometimes after models added, page adjustment might be required.
			var pagesForIndex = this.delegate.pageForIndex(this, inEvent.index),
				pageCount = this.delegate.pageCount(this),
				lastPageIndex = pages.lastPage.index;
		
			// If current selected index is lastPage and there is no page
			// then lower bound of scrollThreshold is undefined because it is useless
			// However after models are added then more pages could be generated
			// We need to check whether current list's position passes scrollThreshold or not.
			if (pagesForIndex === lastPageIndex && pageCount -1 !== lastPageIndex) {
				this.didScroll(this, {scrollBounds: {left: null, top: null, xDir: 1, yDir: 1}});
				this.needToAdjustPages = false;
			}
		}
	},

	/**
	* Finds the next/previous spottable control, the page to generate the next
	* page worth of controls in, and the index of the next page to generate.
	*
	* @private
	*/
	findSpottableControl: function (inDirection, inPage, inPageIndex) {
		if ((inPageIndex > this.delegate.pageCount(this) - 1) || inPageIndex < 0) {
			return null;
		}
		this.delegate.generatePage(this, inPage, inPageIndex);
		this.delegate.adjustPagePositions(this);
		this.delegate.adjustBuffer(this);

		var pages = this.delegate.pagesByPosition(this),
			control = this.getNextSpottableChild(inDirection);

		if (!control) {
			if (inDirection === 1) {
				return this.findSpottableControl(inDirection, inPage === pages.firstPage ? pages.lastPage : pages.firstPage, inPageIndex + 1);
			} else if (inDirection === -1) {
				return this.findSpottableControl(inDirection, inPage === pages.firstPage ? pages.lastPage : pages.firstPage, inPageIndex - 1);
			}
		}
		return control;
	},

	/**
	* @private
	*/
	previewDomEvent: function (inEvent) {
		// When spotlight is being applied back to the list after being unspotted, check that the child being
		// focused is visible and if not, spot the first visible child that is
		if ((inEvent.type == 'onSpotlightFocus') && this._unspotSinceSpot) {
			if (Spotlight.getPointerMode()) {
				this._unspotSinceSpot = false;
			} else {
				var target = inEvent.originator;
				if (target != this) {
					// Calculate the target bounds, relative to the scrollBounds
					var tb = target.getBounds();
					var p = target.isDescendantOf(this.$.page1) ? this.$.page1 : this.$.page2;
					var pb = p.getBounds();
					// Need to add page offset to target bounds
					tb.top += pb.top;
					tb.left += pb.left;
					var sb = this.$.scroller.getScrollBounds();
					// Check if target is inside the current scrollBounds
					if ((tb.top < sb.top) ||
						(tb.left < sb.left) ||
						((tb.top + tb.height) > (sb.top + sb.clientHeight)) ||
						((tb.left + tb.width) > (sb.left + sb.clientWidth))) {
						// Not in view, so find and spot the first visible child
						var vc = this.getFirstVisibleChild(sb);
						if (vc) {
							this._unspotSinceSpot = false;
							Spotlight.spot(vc);
						}
						return true;
					} else {
						this._unspotSinceSpot = false;
					}
				}
			}
		}
	},

	/**
	* @private
	*/
	getFirstVisibleChild: function (inScrollBounds) {
		// Loop through the pages in top-down order
		var pages = (this.$.page1.index < this.$.page2.index) ?
			[this.$.page1, this.$.page2] :
			[this.$.page2, this.$.page1],
			pageIdx,
			page,
			pb,
			i,
			c,
			cb;

		for (pageIdx = 0; pageIdx < pages.length; pageIdx++) {
			page = pages[pageIdx];
			pb = page.getBounds();
			// Loop through children in each page top-down
			for (i=0; i<page.children.length; i++) {
				c = page.children[i];
				cb = c.getBounds();
				// Need to add page offset to target bounds
				cb.top += pb.top;
				cb.left += pb.left;
				// Return the first spottable child whose top/left are inside the viewport
				if ((cb.top >= inScrollBounds.top) && ((this.rtl ? (inScrollBounds.width - (cb.left + cb.width)) : cb.left) >= inScrollBounds.left)) {
					if (Spotlight.isSpottable(c)) {
						return c;
					}
					c = Spotlight.getFirstChild(c);
					if (c) {
						return c;
					}
				}
			}
		}

		return null;
	},

	/**
	* Retrieves the next/previous spottable child from the generated controls,
	* starting from the given index.
	*
	* @private
	*/
	getNextSpottableChild: function (inDirection, inFocusedIndex) {
		var i,
			page,
			pageIndex,
			control,
			controlIndex,
			focusedIndex = this.getFocusedIndex(),
			pages = (inDirection === 1 && this.$.page1.index < this.$.page2.index || inDirection === -1 && this.$.page1.index > this.$.page2.index)
				? [this.$.page1, this.$.page2] : [this.$.page2, this.$.page1];

		// Explore the controls in the current pages
		for (pageIndex = 0; pageIndex < pages.length; pageIndex++) {
			page = pages[pageIndex];
			if (inDirection === 1) {
				// Loop through children in each page top-down
				for (i = 0; i < page.children.length; i++) {
					control = page.children[i];
					controlIndex = this.getIndexFromChild(control);
					// If we have already passed our current item or no item is selected, we can return the next spottable control
					if (controlIndex > focusedIndex || focusedIndex < 0) {
						if (Spotlight.isSpottable(control, false)) {
							return control;
						}
						control = Spotlight.getFirstChild(control);
						if (control) {
							return control;
						}
					}
				}
			} else if (inDirection === -1) {
				// Loop through children in each page bottom-up
				for (i = page.children.length - 1; i >= 0; i--) {
					control = page.children[i];
					controlIndex = this.getIndexFromChild(control);
					// If we have already passed our current item or no item is selected, we can return the next spottable control
					if (controlIndex < focusedIndex || focusedIndex < 0) {
						if (Spotlight.isSpottable(control, false)) {
							return control;
						}
						control = Spotlight.getFirstChild(control);
						if (control) {
							return control;
						}
					}
				}
			}
		}
		return null;
	},

	/**
	* @private
	*/
	getItemFromChild: function (oControl) {
		while (oControl) {
			if (oControl.index !== undefined) {
				return oControl;
			}
			oControl = oControl.parent;
		}
		return null;
	},

	/**
	* @private
	*/
	getIndexFromChild: function (oControl) {
		var item = this.getItemFromChild(oControl);
		return item ? item.index : -1;
	},

	/**
	* @private
	*/
	unspotAndRememberFocus: function () {
		var current = this.getFocusedChild(),
			focusedItem;
		if (current) {
			focusedItem = this.getItemFromChild(current);
			this._indexToFocus = focusedItem.index;
			this._subChildToFocus = focusedItem === current ? null : Spotlight.getChildren(focusedItem).indexOf(current);
			Spotlight.unspot();
		}
	},

	/**
	* @private
	*/
	restoreFocus: function () {
		var index = this._indexToFocus,
			subChild = this._subChildToFocus,
			c = this.collection;
		if (c && c.length && (index > -1)) {
			this.focusOnIndex(index, subChild);
			this._indexToFocus = -1;
			this._subChildToFocus = null;
		}
	},

	/**
	* @method
	* @private
	*/
	didResize: kind.inherit(function (sup) {
		return function (sender, event) {
			this.unspotAndRememberFocus();
			sup.apply(this, arguments);
			this.restoreFocus();
		};
	}),

	/**
	* @method
	* @private
	*/
	modelsAdded: kind.inherit(function (sup) {
		return function (c, e, props) {
			this.unspotAndRememberFocus();
			sup.apply(this, arguments);
			this.restoreFocus();
			// For specific case, page adjusting is required after models added
			this.needToAdjustPages = true;
		};
	}),

	/**
	* @method
	* @private
	*/
	modelsRemoved: kind.inherit(function (sup) {
		return function (c, e, props) {
			this.unspotAndRememberFocus();
			sup.apply(this, arguments);
			this.restoreFocus();
		};
	})
};

/**
* {@link moon.DataList} is an {@link enyo.DataList} with Moonstone styling
* applied.  It uses {@link moon.Scroller} as its default scroller.
*
* @class moon.DataList
* @extends enyo.DataList
* @mixes moon.DataListSpotlightSupport
* @ui
* @public
*/
var MoonDataList = module.exports = kind(
	/** @lends moon.DataList.prototype */ {

	/**
	* @private
	*/
	name: 'moon.DataList',

	/**
	* @private
	*/
	kind: DataList,

	/**
	* @private
	*/
	mixins: [SpotlightSupport],

	/**
	* @private
	*/
	noDefer: true,

	/**
	* @private
	*/
	allowTransitions: false,

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	scrollerOptions: { kind: Scroller, horizontal: 'hidden' }
});

MoonDataList.SpotlightSupport = SpotlightSupport;

/**
* Overload the delegate strategy to incorporate measurements for our scrollers
* when they are visible.
*
* @private
*/
MoonDataList.delegates.vertical   = util.clone(DataList.delegates.vertical);
MoonDataList.delegates.horizontal = util.clone(DataList.delegates.horizontal);
var exts = {
	/**
	* Overriding refresh() to stop scroller and stop scrolling.
	*
	* @method
	* @private
	*/
	refresh: kind.inherit(function (sup) {
		return function (list) {
			sup.apply(this, arguments);
			list.$.scroller.stop();
		};
	}),

	/**	Overriding scrollToControl() to specify Moonstone-specific scroller options.
	* No need to call the super method, so we don't wrap in enyo.inherit().
	*
	* @method
	* @private
	*/
	scrollToControl: function(list, control) {
		list.$.scroller.scrollToControl(control, false, false, true);
	},

	/**
	* Overriding scrollTo() to specify Moonstone-specific scroller options.
	* No need to call the super method, so we don't wrap in enyo.inherit().
	*
	* @method
	* @private
	*/
	scrollTo: function(list, x, y) {
		list.$.scroller.scrollTo(x, y, false);
	}
};
kind.extendMethods(MoonDataList.delegates.vertical, exts, true);
kind.extendMethods(MoonDataList.delegates.horizontal, exts, true);

},{"../../../enyo/lib/DataList":30,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275,"../Scroller":180}],165:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	ri = require('../../../enyo/lib/resolution'),
	dispatcher = require('../../../enyo/lib/dispatcher'),
	Control = require('../../../enyo/lib/Control'),
	GroupItem = require('../../../enyo/lib/GroupItem');

var
	FittableLayout = require('../../../layout/lib/FittableLayout'),
	FittableRowsLayout = FittableLayout.Rows;

var
	Spotlight = require('../../../spotlight');

var
	Scroller = require('../Scroller'),
	IconButton = require('../IconButton'),
	MoonHistory = require('../History'),
	HistorySupport = MoonHistory.HistorySupport;

/**
* An internally-used support mixin added to a {@link moon.ListActions} menu that decorates
* `activate` events with the menu's `action` property.
*
* @mixin moon.ListActionActivationSupport
* @protected
*/
var ListActionActivationSupport = {

	/**
	* @private
	*/
	name: 'ListActionActivationSupport',

	/**
	* @private
	*/
	handlers: {
		onActivate: 'activate'
	},

	/**
	* @private
	*/
	activate: function(sender, e) {
		e.action = this.action;
	}
};


/**
* Fires when the [ListActionsDrawer]{@link moon.ListActionsDrawer} has completed any
* setup and/or preparation work, e.g., when animating or initial setup. No event-specific
* information is sent with this event.
*
* @event moon.ListActionsDrawer#onComplete
* @type {Object}
* @public
*/

/**
* {@link moon.ListActionsDrawer} is a [control]{@link enyo.Control} used by
* {@link moon.ListActions} to house a menu of selectable options.
*
* @class moon.ListActionsDrawer
* @extends enyo.Control
* @ui
* @public
*/
var ListActionsDrawer = kind(
	/** @lends moon.ListActionsDrawer */ {

	/**
	* @private
	*/
	name: 'moon.ListActionsDrawer',

	/**
	* @private
	*/
	kind: Control,

	/**
	* @private
	* @lends moon.ListActionsDrawer.prototype
	*/
	published: {

		/**
		* If `true`, the drawer will be in its opened state; otherwise, it will be closed.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		open: false
	},

	/**
	* @private
	*/
	classes: 'moon-list-actions-drawer',

	/**
	* @private
	*/
	components: [
		{name: 'client', kind: Control, classes: 'moon-list-actions-drawer-client moon-neutral', ontransitionend: 'handleTransitionEnd'}
	],

	/**
	* @private
	*/
	events: {
		onComplete: ''
	},

	/**
	* @fires moon.ListActionsDrawer#onComplete
	* @private
	*/
	rendered: function() {
		Control.prototype.rendered.apply(this, arguments);
		// Temporarily disable animation
		this.applyAnimatedMode(false);
		// Set the state of the drawer
		this.openChanged();
		// Re-enable animation
		this.applyAnimatedMode(true);
		// Let any watchers know we've finished our preparation
		this.doComplete({rendered: true});
	},

	/**
	* @fires moon.ListActionsDrawer#onComplete
	* @private
	*/
	handleTransitionEnd: function(sender, e) {
		if (e.originator === this.$.client) {
			this.doComplete();
			return true;
		}
	},

	/**
	* We override `getBubbleTarget()` here so that events emanating from a
	* [ListActionsDrawer]{@link moon.ListActionsDrawer} instance will bubble to the owner
	* of the associated [ListActions]{@link moon.ListActions} instance, as expected. This
	* is necessary because events normally bubble to a control's DOM parent, but we have
	* sneakily arranged for the DOM parent of a `ListActionsDrawer` instance to be not the
	* `ListActions` instance, but the containing [Header]{@link moon.Header} instance.
	*
	* @private
	*/
	getBubbleTarget: function() {
		return this.owner;
	},

	/**
	* @private
	*/
	openChanged: function() {
		// Skip animation before render time
		if (!this.$.client.hasNode()) { return; }
		this.$.client.addRemoveClass('open', this.open);
	},

	/**
	* @private
	*/
	applyAnimatedMode: function(shouldAnimate) {
		this.$.client.addRemoveClass('animated', shouldAnimate);
	}
});

/**
* Fires when the drawer open animation begins. No event-specific data is sent with this event.
*
* @event moon.ListActions#onShow
* @type {Object}
* @public
*/

/**
* Fires when the drawer open animation ends. No event-specific data is sent with this event.
*
* @event moon.ListActions#onShown
* @type {Object}
* @public
*/

/**
* Fires when the drawer close animation begins. No event-specific data is sent with this event.
*
* @event moon.ListActions#onHide
* @type {Object}
* @public
*/

/**
* Fires when the drawer close animation ends. No event-specific data is sent with this event.
*
* @event moon.ListActions#onHidden
* @type {Object}
* @public
*/

/**
* Used internally by [ListActions]{@link moon.ListActions} to ask
* {@link moon.Header} to add fitting components to itself. Not intended for use
* by end-developers.
*
* @event moon.ListActions#onRequestCreateListActions
* @type {Object}
* @property {Object} components - The drawer components to be created.
* @private
*/

/**
* Fires when when the [open]{@link moon.ListActions#open} state of the drawer has changed.
*
* @event moon.ListActions#onListActionOpenChanged
* @type {Object}
* @property {Boolean} open - `true` if the drawer is open; otherwise, `false`.
* @public
*/

/**
* {@link moon.ListActions} is a [control]{@link enyo.Control} designed to live within a
* {@link moon.Header}. It is used to perform actions on an associated list of items. A
* ListActions [object]{@glossary Object} combines an activating control with a drawer
* containing a user-defined menu of selectable options for acting on items in the list.
* When a menu item is selected, an action--such as filtering, sorting, moving, or
* deleting--may be invoked in the application by handling change events from the selected
* items.
*
* @class moon.ListActions
* @extends enyo.GroupItem
* @ui
* @public
*/
var ListActions = module.exports = kind(
	/** @lends moon.ListActions.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ListActions',

	/**
	* @private
	*/
	classes: 'moon-list-actions',

	/**
	* @private
	*/
	kind: GroupItem,

	/**
	* @private
	*/
	mixins : [HistorySupport],

	/**
	* @private
	* @lends moon.ListActions.prototype
	*/
	published: {

		/**
		* If `true`, the drawer is expanded, showing this item's contents.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		open: false,

		/**
		* If `true`, the drawer will automatically close when the user selects a menu item.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		autoCollapse: false,

		/**
		* A block of one or more controls to be displayed inside the list actions menu. By
		* default, each top-level [ListActions]{@link moon.ListActions} will have a
		* [defaultKind]{@link enyo.Control#defaultKind} of
		* [FittableRows]{@link enyo.FittableRows}, and should typically contain a
		* {@link moon.Divider} identifying the category and a {@link moon.Scroller} with
		* `fit: true` set on it, containing instances of {@link moon.CheckboxItem},
		* {@link moon.ToggleItem}, or {@link moon.SelectableItem} for setting options for
		* the underlying [panel]{@link moon.Panel}. Alternatively, a {@link moon.DataList}
		* may be used as the `fit: true` control for populating a data-bound list of options
		* (see below for limitations on using a `moon.DataList`).
		*
		* More than one option group may be added to the `listActions` block, in which options
		* are laid out horizontally by default, with the height of each `FittableRows` being
		* constrained to the height of the parent [Header]{@link moon.Header}. However, a
		* minimum width (300px) is enforced for each group, and if there are more groups than
		* will fit in the available horizontal space, all controls will instead be stacked
		* vertically. In this case, an outer scroller is enabled; the outer scroller scrolls
		* all groups vertically, and the `FittableRows` are reset to natural size based on
		* their content, effectively disabling any scrollers contained within, to prevent
		* nested scrolling.
		*
		* Note that the vertical stacking capability poses a limitation on using
		* `moon.DataList`. Since `moon.DataList` must always be allowed to scroll, it is
		* not suitable for use in a stacked scenario in which only one outer scroller is
		* used. As such, it cannot be used within a `ListActions` that may need to stack
		* vertically.
		*
		* Each group should have a string value set for the `action` property, as this will
		* be passed in all events that bubble from the `ListActions`, to allow the user to
		* identify which category changed.
		*
		* @type {Object[]}
		* @default null
		* @public
		*/
		listActions: null,

		/**
		* Source URL for icon image.
		*
		* @type {String|moon.ri.selectSrc~src}
		* @default ''
		* @public
		*/
		iconSrc: '',

		/**
		* Icon name to be used by the activator button (as in {@link moon.Icon} and
		* {@link moon.IconButton}).
		*
		* @type {String}
		* @default ''
		* @public
		*/
		icon: '',

		/**
		* By default, list action menus are 300px wide. Set this to `true` to instead have
		* the menus be proportionally sized within the available space. Note that a minimum
		* width of 300px is still respected; if all menus don't fit horizontally, they will
		* be stacked vertically.
		*
		* @type {Boolean}
		* @default false
		* @public
		*/
		proportionalWidth: false
	},

	/**
	* @private
	*/
	events: {
		onShow: '',
		onShown: '',
		onHide: '',
		onHidden: '',
		onRequestCreateListActions: '',
		onListActionOpenChanged: ''
	},

	/**
	* @private
	*/
	components:[
		{name:'activator', kind: IconButton, classes: 'moon-list-actions-activator', ontap: 'expandContract'}
	],

	/**
	* @private
	*/
	drawerComponents: [
		{name: 'drawer', spotlightDisabled: true, kind: ListActionsDrawer, classes: 'list-actions-drawer', onComplete: 'drawerAnimationEnd', open: false, spotlight: 'container', spotlightModal:true, components: [
			{name: 'closeButton', kind: IconButton, icon: 'closex', classes: 'moon-popup-close moon-list-actions-close moon-neutral', ontap: 'expandContract', defaultSpotlightDown:'listActions'},
			{name: 'listActionsClientContainer', kind: Control, classes: 'enyo-fit moon-list-actions-client-container moon-neutral', components: [
				{name: 'listActions', kind: Scroller, classes: 'enyo-fit moon-list-actions-scroller', horizontal:'hidden', vertical:'hidden', onActivate: 'optionSelected', defaultSpotlightUp:'closeButton'}
			]}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: 'open', to: '$.drawer.open'},
		{from: 'iconSrc', to: '$.activator.src'},
		{from: 'icon', to: '$.activator.icon'},
		{from: 'disabled', to: '$.activator.disabled', oneWay: false}
	],

	/**
	* @fires moon.ListActions#onRequestCreateListActions
	* @private
	*/
	create: function() {
		GroupItem.prototype.create.apply(this, arguments);
		this.doRequestCreateListActions({components: this.drawerComponents});
		if (!this.$.drawer) {
			throw 'moon.ListActions must be created as a child of moon.Header';
		}
		this.disabledChanged();
		this.listActionsChanged();
		this.drawerNeedsResize = true;
	},

	/**
	* @private
	*/
	rendered: function() {
		GroupItem.prototype.rendered.apply(this, arguments);
		if (this.open) {
			// Perform post-open work
			this.drawerOpened(true);
			// Update stacking
			this.resizeDrawer();
		}
	},

	/**
	* @private
	*/
	destroy: function() {
		dispatcher.release(this.$.drawer);
		GroupItem.prototype.destroy.apply(this, arguments);
	},

	/**
	* @private
	*/
	disabledChanged: function() {
		this.addRemoveClass('disabled', this.disabled);
	},

	/**
	* @private
	*/
	listActionsChanged: function() {
		var owner = this.hasOwnProperty('listActions') ? this.getInstanceOwner() : this;
		this.listActions = this.listActions || [];
		this.renderListActionComponents(owner);
	},

	/**
	* @private
	*/
	renderListActionComponents: function(owner) {
		this.noAutoCollapse = true;
		this.createListActionComponents(owner);
		this.noAutoCollapse = false;
	},

	/**
	* @private
	*/
	createListActionComponents: function(owner) {
		var listAction, i;

		this.listActionComponents = [];
		for (i = 0; (listAction = this.listActions[i]); i++) {
			this.listActionComponents.push(this.createListActionComponent(listAction, owner));
		}

		// Increase width to 100% if there is only one list action
		if (this.proportionalWidth) {
			this.$.drawer.addClass('proportional-width');
			var w = 100 / this.listActionComponents.length;
			for (i=0; i<this.listActionComponents.length; i++) {
				this.listActionComponents[i].applyStyle('width', w + '%');
			}
		}

		if (this.hasNode()) {
			this.$.listActions.render();
		}
	},

	/**
	* Creates a new list action component based on `listAction`.
	*
	* @private
	*/
	createListActionComponent: function(listAction, owner) {
		var listActionComponent;

		listAction.mixins = this.addListActionMixin(listAction);
		listActionComponent = this.$.listActions.createComponent(listAction, {owner: owner, layoutKind: FittableRowsLayout});
		listActionComponent.addClass('moon-list-actions-menu');

		return listActionComponent;
	},

	/**
	* Adds a mixin to each list action menu that decorates `activate` events with the menu's
	* `action` property.
	*
	* @private
	*/
	addListActionMixin: function(listAction) {
		var mixins = listAction.mixins || [];
		if (mixins.indexOf(ListActionActivationSupport) === -1) {
			mixins.push(ListActionActivationSupport);
		}
		return mixins;
	},

	/**
	* Toggles value of `this.open`.
	*
	* @private
	*/
	expandContract: function(sender, e) {
		if (this.disabled) {
			return true;
		}
		var open = !this.getOpen();
		if (open) {
			this.doShow();
		} else {
			this.doHide();
		}
		this.setOpen(open);
	},

	/**
	* @private
	*/
	beforeOpenDrawer: function(standardHeight, type) {
		this.standardHeight = standardHeight;
		if (type !== 'large') {
			this.set('stacked', false);
		}
	},

	//TODO: Remove the onListActionOpenChanged event. It will be deprecated in favor of the onShow/onHide events
	// once we communicate to SmartShare (the only app we could find that's handling this event).
	/**
	* @fires moon.ListActions#onListActionOpenChanged
	* @private
	*/
	openChanged: function(){
		this.$.drawer.set('spotlightDisabled', !this.getOpen());
		this.setActive(this.getOpen());
		this.doListActionOpenChanged({open: this.open});
		// If opened, show drawer and resize it if needed
		if(this.open){
			if (this.drawerNeedsResize) {
				this.resizeDrawer();
				this.drawerNeedsResize = false;
			}
			// Capture onSpotlightFocus happening outside the drawer, so that we can prevent focus
			// from landing in the header beneath the drawer
			dispatcher.capture(this.$.drawer, {onSpotlightFocus: 'capturedSpotlightFocus'}, this);

			if (this.allowBackKey) {
				this.pushBackHistory();
			}
		} else {
			dispatcher.release(this.$.drawer);
		}
	},

	/**
	* @fires moon.TooltipDecorator#onRequestMuteTooltip
	* @fires moon.TooltipDecorator#onRequestUnmuteTooltip
	* @private
	*/
	drawerAnimationEnd: function(sender, event) {
		var rendered = event && event.rendered;

		//on closed, hide drawer and spot _this.$.activator_
		if (!this.getOpen()) {
			this.drawerClosed(rendered);
		}
		//on open, move top and spot _this.$.closeButton_
		else {
			this.drawerOpened(rendered);
		}
		return true;
	},

	/**
	* @private
	*/
	drawerClosed: function (rendered) {
		if (this.generated && !rendered) {
			Spotlight.spot(this.$.activator);
		}
		this.bubble('onRequestUnmuteTooltip');

		if (!rendered) this.doHidden();
	},

	/**
	* @private
	*/
	drawerOpened: function (rendered) {
		if (this.resetScroller) {
			this.$.listActions.scrollTo(0, 0);
			this.resetScroller = false;
		}
		if (this.generated && !rendered) {
			Spotlight.spot(this.$.closeButton);
		}
		this.bubble('onRequestMuteTooltip');

		this.doShown();
	},

	/**
	* @private
	*/
	updateStacking: function() {
		if (this.$.drawer.hasNode()) {
			this.set('stacked', this.shouldStack());
		}
	},

	/**
	* @private
	*/
	shouldStack: function() {
		// Assumption: min-width of all listActionsComponents set to 300px in CSS
		return this.$.listActions.getBounds().width < (300 * this.listActionComponents.length);
	},

	/**
	* @private
	*/
	stackedChanged: function() {
		if (this.stacked) {
			this.$.drawer.addClass('stacked');
			this.stackMeUp();
			// When stacked, always have vertical scroller
			this.$.listActions.setVertical('scroll');
		}
		else {
			this.$.drawer.removeClass('stacked');
			this.unStackMeUp();
			this.$.listActions.setVertical('hidden');
		}
		this.resetScroller = true;
		this.$.listActions.resize();
	},

	/**
	* @private
	*/
	stackMeUp: function() {
		var optionGroup, i;

		for (i = 0; (optionGroup = this.listActionComponents[i]); i++) {
			// Stacked contols get natural height (which prevents scrolling), such that they stack
			// within outer scroller which is allowed to scroll all controls; this is a problem for
			// DataLists, which require an explicit height, making them unsuitable for use in
			// stacked ListActions
			optionGroup.applyStyle('height', 'none');
		}
	},

	/**
	* @private
	*/
	unStackMeUp: function() {
		var containerHeight, optionGroup, i;
		if (this.standardHeight) {
			this.$.drawer.applyStyle('height', dom.unit( ri.scale(this.standardHeight), 'rem'));
		}
		containerHeight = this.getContainerBounds().height;

		for (i = 0; (optionGroup = this.listActionComponents[i]); i++) {
			optionGroup.applyStyle('height', dom.unit(containerHeight, 'rem'));
		}
	},

	/**
	* @private
	*/
	handleResize: function() {
		this.resetCachedValues();

		// If drawer is collapsed, resize it the next time it is opened
		if (this.getOpen()) {
			this.resizeDrawer();
		} else {
			this.drawerNeedsResize = true;
		}
	},

	/**
	* @private
	*/
	resizeDrawer: function() {
		this.updateStacking();
	},

	/**
	* @private
	*/
	optionSelected: function(sender, e) {
		this.startJob('expandContractJob', 'expandContractJob', 300);
	},

	expandContractJob: function(sender, e) {
		if (this.getOpen() && this.autoCollapse && !this.noAutoCollapse) {
			this.expandContract();
		}
	},

	/**
	* @private
	*/
	getContainerBounds: function() {
		this.containerBounds = this.containerBounds || this.$.listActions.getBounds();
		return this.containerBounds;
	},

	/**
	* @private
	*/
	resetCachedValues: function() {
		this.headerBounds = null;
		this.clientBounds = null;
		this.containerBounds = null;
	},

	/**
	* @private
	*/
	capturedSpotlightFocus: function(sender, e) {
		// We need to prevent header children below the drawer from being focused
		if (e.originator.isDescendantOf(this.$.drawer.parent) &&
			!e.originator.isDescendantOf(this.$.drawer)) {
			Spotlight.spot(this.$.drawer);
			return true;
		}
	},

	/**
	* @private
	*/
	backKeyHandler: function () {
		if (this.open) {
			this.setOpen(false);
		}
		return true;
	}
});

ListActions.ListActionActivationSupport = ListActionActivationSupport;
ListActions.ListActionsDrawer = ListActionsDrawer;
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/GroupItem":38,"../../../enyo/lib/dispatcher":86,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/resolution":104,"../../../layout/lib/FittableLayout":114,"../../../moonstone":119,"../../../spotlight":275,"../History":152,"../IconButton":154,"../Scroller":180}],206:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	Divider = require('../../../moonstone/lib/Divider'),
	Accordion = require('../../../moonstone/lib/Accordion'),
	SelectableItem = require('../../../moonstone/lib/SelectableItem');

module.exports = kind({
	name: 'moon.sample.AccordionSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, classes: 'enyo-fill moon-8h', components: [
			{kind: Divider, content: 'Not In Group'},
			{components: [
				{kind: Accordion, content: 'This is an accordion', components: [
					{content: 'Item One'},
					{content: 'Item Two'}
				]},
				{kind: Accordion, content: 'Pre-expanded accordion', open:true, components: [
					{content: 'Item Three'},
					{content: 'Item Four'}
				]},
				{kind: Accordion, content: 'This is an lonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnng title accordion', components: [
					{content: 'Looooooooooooooooooooooooooooooooooooong Item One'},
					{content: 'Loooooooooooooooooooooooooooooong Item Two'}
				]},
				{kind: Accordion, content: 'Disabled accordion', disabled: true, components: [
					{content: 'Item One'},
					{content: 'Item Two'}
				]}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'In Group'},
			{kind: Group, highlander:true, components: [
				{kind: Accordion, content: 'This is a grouped accordion', components: [
					{content: 'Item One'},
					{content: 'Item Two'}
				]},
				{kind: Accordion, open:true, content: 'This is another grouped accordion', components: [
					{content: 'Item Three'},
					{content: 'Item Four'}
				]},
				{kind: Accordion, content: 'This is another grouped accordion', components: [
					{content: 'Item Five'},
					{content: 'Item Six'}
				]},
				{kind: Accordion, content: 'This is another lonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnng title accordion', components: [
					{content: 'Looooooooooooooooooooooooooooooooooooong Item Three'},
					{content: 'Loooooooooooooooooooooooooooooong Item Four'}
				]}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'In Group using Grouped Selectable Items'},
			{kind: Group, groupName: 'menuItems', components: [
				{kind: Group, groupName: 'accordions', highlander:true, components: [
					{kind: Accordion, groupName: 'accordions', content: 'This is a grouped accordion', defaultKind: SelectableItem, components: [
						{content: 'Item One', groupName: 'menuItems'},
						{content: 'Item Two', groupName: 'menuItems'}
					]},
					{kind: Accordion, groupName: 'accordions', open:true, content: 'This is another grouped accordion', defaultKind: SelectableItem, components: [
						{content: 'Item Three', groupName: 'menuItems'},
						{content: 'Item Four', groupName: 'menuItems'}
					]},
					{kind: Accordion, groupName: 'accordions', content: 'This is another grouped accordion', defaultKind: SelectableItem, components: [
						{content: 'Item Five', groupName: 'menuItems'},
						{content: 'Item Six', groupName: 'menuItems'}
					]},
					{kind: Accordion, groupName: 'accordions', content: 'This is another lonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnng title accordion', defaultKind: SelectableItem, components: [
						{content: 'Looooooooooooooooooooooooooooooooooooong Item Three', groupName: 'menuItems'},
						{content: 'Loooooooooooooooooooooooooooooong Item Four', groupName: 'menuItems'}
					]}
				]}
			]}
		]}
	]
});
},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Accordion":120,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SelectableItem":181}],212:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.BodyLargeTextSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{kind: Divider, content: 'Options'},
			{kind: ToggleButton, small: true, content: 'Large Body Text', ontap: 'largeTapped'},

			{kind: Divider, content: 'BodyText', style: 'margin-top: 1rem'},
			{kind: BodyText, content: 'Pixar genius reigns in this funny romantic comedy, which stars a robot who says absolutely nothing for a full 25 minutes yet somehow completely transfixes and endears himself to the audience within the first few minutes of the film. As the last robot left on earth, Wall-E (voiced by Ben Burtt) is one small robot--with a big, big heart--who holds the future of earth and mankind squarely in the palm of his metal hand. He\'s outlasted all the \'Waste Allocation Load Lifter Earth-Class\' robots that were assigned some 700 years ago to clean up the environmental mess that man made of earth while man vacationed aboard the <a href=\'\'>luxury spaceship Axiom</a>.'},
			{kind: BodyText, content: 'Pixar genius reigns in this funny romantic comedy, which stars a robot who says absolutely nothing for a full 25 minutes yet somehow completely transfixes and endears himself to the audience within the first few minutes of the film. As the last robot left on earth, Wall-E (voiced by Ben Burtt) is one small robot--with a big, big heart--who holds the future of earth and mankind squarely in the palm of his metal hand. He\'s outlasted all the \'Waste Allocation Load Lifter Earth-Class\' robots that were assigned some 700 years ago to clean up the environmental mess that man made of earth while man vacationed aboard the luxury spaceship Axiom.'},
			{kind: BodyText, centered: true, content: 'Pixar genius reigns in this funny romantic comedy, which stars a robot who says absolutely nothing for a full 25 minutes yet somehow completely transfixes and endears himself to the audience within the first few minutes of the film. As the last robot left on earth, Wall-E (voiced by Ben Burtt) is one small robot--with a big, big heart--who holds the future of earth and mankind squarely in the palm of his metal hand. He\'s outlasted all the \'Waste Allocation Load Lifter Earth-Class\' robots that were assigned some 700 years ago to clean up the environmental mess that man made of earth while man vacationed aboard the luxury spaceship Axiom.'},
			{kind: BodyText, content: '×××× ×¤××§×¡××¨ ×©××× ××§××××× ××¨××× ×××ª ×××¦×××§ ×××, ×©×××× ×¨×××× ×©××××¨ ×××¨ ×××¦× ×××¨ ××¢×©×¨×× ××××© ××§××ª ××××× ×¢×××× ××ª×××¨×ª ××××©×× ××××××× ×××¨×ª×§ ××ª ×¢×¦×× ××§×× ×××× ××¡×¨×× ××§××ª ××¨××©×× ××ª. ××× ××¨×××× ××××¨×× ×©× ××ª×¨ ×¢× ×¤× × ××××¨ ×××¨×¥, ×××-E (×§××× ×©× ×× ×××¨×) ××× ×¨×××× ×§×× ××× - ×¢× ×× ××××, ×××× - ×× ×××××§ ××ª ×¢×ª××× ×©× ××××¨ ×××¨×¥ ×××× ××©××ª ××©×¨ ×××£ ×× ×××ª××ª ×©××. ××× ×©×¨× ××ª ×× \'××¢× ×××§×¦×× ×¤×¡×××ª ××¨×× ××××¨ ×××¨×¥ ××××ª×\' ××¨×××××× ×©××××§× ××¤× × ××©××¢ ××× ×©× ×× ××× ×× ×§××ª ××ª ××××× ××¡××××ª× ×©××× ×¢×©×× ××××× ××××× ××× × ×¤×© ×¢× ×¡××¤×× × ×©× ×××××ª ××§×¡××××ª ×××§×¨×.'},
			{kind: BodyText, content: 'Ø¨ÙÙØ³Ø§Ø± Ø¹Ø¨ÙØ±ÙØ© ÙØ³ÙØ¯ ÙÙ ÙØ°Ù Ø§ÙÙÙÙÙØ¯ÙØ§ ââØ§ÙØ±ÙÙØ§ÙØ³ÙØ© ÙØ¶Ø­ÙØ Ø§ÙØªÙ Ø§ÙÙØ¬ÙÙ Ø§ÙØ±ÙØ¨ÙØª Ø§ÙØ°Ù ÙÙÙÙ Ø´ÙØ¦Ø§ Ø¹ÙÙ Ø§ÙØ¥Ø·ÙØ§Ù ÙÙØ­ØµÙÙ Ø¹ÙÙ ÙØ§ÙÙ Ø®ÙØ³Ø© ÙØ¹Ø´Ø±ÙÙ Ø¯ÙÙÙØ© Ø¨Ø¹Ø¯ ØªÙÙÙ Ø¨Ø·Ø±ÙÙØ© Ø£Ù Ø¨Ø£Ø®Ø±Ù ØªÙØ§ÙØ§ ÙÙØ³Ø­Ø± ÙÙØ³Ù ÙÙØ¬ÙÙÙØ± ÙÙ ØºØ¶ÙÙ Ø§ÙØ¯ÙØ§Ø¦Ù Ø§ÙÙÙÙÙØ© Ø§ÙØ£ÙÙÙ ÙÙ Ø§ÙÙÙÙÙ. Ø¹ÙØ¯ÙØ§ Ø®Ø±Ø¬ Ø§ÙØ±ÙØ¨ÙØª Ø§ÙÙØ§Ø¶Ù Ø¹ÙÙ ÙØ¬Ù Ø§ÙØ£Ø±Ø¶Ø Ø§ÙØ­Ø§Ø¦Ø·-E (Ø§ÙØªÙ Ø¹Ø¨Ø± Ø¹ÙÙØ§ Ø¨Ù Ø¨ÙØ±Øª) ÙÙ Ø±ÙØ¨ÙØª ØµØºÙØ± ÙØ§Ø­Ø¯ - ÙØ¹ ÙØ¨ÙØ±Ø Ø§ÙÙÙØ¨ Ø§ÙÙØ¨ÙØ± - Ø§ÙØ°Ù ÙØ®Ø¨Ø¦Ù Ø§ÙÙØ³ØªÙØ¨Ù ÙÙ Ø§ÙØ£Ø±Ø¶ ÙØ§ÙØ¬ÙØ³ Ø§ÙØ¨Ø´Ø±Ù Ø¨Ø´ÙÙ ÙØ¨Ø§Ø´Ø± ÙÙ ÙÙ ÙØ¯Ù Ø§ÙÙØ¹Ø¯ÙÙØ©. Ø§ÙÙ ØªØºÙØ¨ Ø¬ÙÙØ¹ \'ØªØ­ÙÙÙ Ø§ÙÙÙØ§ÙØ§Øª ØªØ®ØµÙØµ ÙÙØ±Ø¨Ø§Ø¦ÙØ© Ø§ÙØ¯Ø±Ø¬Ø© Ø§ÙØ£Ø±Ø¶ Ø§ÙØ±ÙØ¨ÙØªØ§Øª Ø§ÙØªÙ ØªÙ ØªØ¹ÙÙÙÙØ§ ÙØ¨Ù Ø¨Ø¹Ø¶ Ø³Ø¨Ø¹ÙØ§Ø¦Ø© Ø³ÙÙØ§Øª ÙØªÙØ¸ÙÙ Ø§ÙÙÙØ¶Ù Ø§ÙØ¨ÙØ¦ÙØ© Ø§ÙØªÙ ÙÙ ØµÙØ¹ Ø§ÙØ¥ÙØ³Ø§Ù ÙÙ Ø§ÙØ£Ø±Ø¶ ÙÙ Ø­ÙÙ Ø§Ø¬Ø§Ø²ØªÙØ§ Ø±Ø¬Ù Ø¹ÙÙ ÙØªÙ Ø³ÙÙÙØ© Ø§ÙÙØ¶Ø§Ø¡ Ø§ÙØ³ÙÙÙ Ø§ÙÙØ§Ø®Ø±Ø©.'}
		]}
	],
	largeTapped: function (sender, event) {
		var enabled = sender.value;
		this.$.scroller.getClientControls().forEach(function (control) {
			if (control.kind === BodyText) {
				control.addRemoveClass('moon-body-large-text', enabled);
			}
		});
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],213:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	Divider = require('../../../moonstone/lib/Divider'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	Button = require('../../../moonstone/lib/Button'),
	CaptionDecorator = require('../../../moonstone/lib/CaptionDecorator'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem'),
	BodyText = require('../../../moonstone/lib/BodyText');

module.exports = kind({
	name: 'moon.sample.ButtonSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit moon-button-sample',
	components: [
		{kind: Scroller, fit: true, components: [
			{kind: Control, classes: 'moon-button-sample-wrapper', components: [

				{kind: Divider, content: 'Buttons:'},
				{kind: TooltipDecorator, components: [
					{name: 'aButton', kind: Button, minWidth: false, content: 'A', ontap: 'buttonTapped'},
					{kind: Tooltip, content: 'minWidth: false'}
				]},
				{kind: TooltipDecorator, components: [
					{name: 'bButton', kind: Button, content: 'B', ontap: 'buttonTapped'},
					{kind: Tooltip, content: 'minWidth: true'}
				]},
				{name: 'button', kind: Button, content: 'Button', uppercase : false, ontap: 'buttonTapped'},
				{name: 'disabledButton', kind: Button, disabled: true, content: 'Disabled Button', ontap: 'buttonTapped'},
				{name: 'longButton', kind: Button, content: 'Looooooooooooooooong Button', ontap: 'buttonTapped'},
				{name: 'spacesButton', kind: Button, content: 'Button   with   extra   spaces', ontap: 'buttonTapped'},
				{kind: Control, tag: 'br'},
				{kind: Control, tag: 'br'},

				{kind: Divider, content: 'Small Buttons:'},
				{name: 'smallAButton', kind: Button, small: true, minWidth: false, content: 'A', ontap: 'buttonTapped'},
				{name: 'smallBButton', kind: Button, small: true, content: 'B', ontap: 'buttonTapped'},
				{name: 'smallButton', kind: Button, small: true, content: 'Button', ontap: 'buttonTapped'},
				{name: 'smallDisabledButton', kind: Button, small: true, disabled: true, content: 'Disabled Button', ontap: 'buttonTapped'},
				{name: 'smallLongButton', kind: Button, small: true, content: 'Loooooooooooooooooooooooong Button', ontap: 'buttonTapped'},
				{name: 'smallSpacesButton', kind: Button, small:true, content: 'Button   with   extra   spaces', ontap: 'buttonTapped'},
				{kind: ToggleItem, classes: 'tap-area-toggle-container', content: 'Show Tap Area', onActivate: 'showSmallButtonTapArea'},
				{kind: Control, tag: 'br'},
				{kind: Control, tag: 'br'},

				{kind: Divider, content: 'Captioned Buttons:'},
				{kind: CaptionDecorator, side: 'top', content: 'Pow', components: [
					{name: 'captionedAButton', kind: Button, content: 'A', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'right', content: 'Boom', components: [
					{name: 'captionedBButton', kind: Button, content: 'B', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'bottom', content: 'Crash', components: [
					{name: 'captionedCButton', kind: Button, content: 'C', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'left', content: 'Bang', components: [
					{name: 'captionedDButton', kind: Button, content: 'D', ontap: 'buttonTapped'}
				]},
				{kind: Control, tag: 'br'},
				{kind: Control, tag: 'br'},

				{kind: Divider, content: 'Captioned Buttons with showOnFocus option:'},
				{kind: CaptionDecorator, side: 'top', showOnFocus: true, content: 'Pow', components: [
					{name: 'showOnFocusCaptionTopButton', kind: Button, content: 'Top', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'bottom', showOnFocus: true, content: 'Crash', components: [
					{name: 'showOnFocusCaptionBottomButton', kind: Button, content: 'Bottom', ontap: 'buttonTapped'}
				]},
				{style: 'display:inline-block;', classes: 'moon-2h'},
				{kind: CaptionDecorator, side: 'left', showOnFocus: true, content: 'Bang', components: [
					{name: 'showOnFocusCaptionLeftButton', kind: Button, content: 'Left', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'right', showOnFocus: true, content: 'Boom', components: [
					{name: 'showOnFocusCaptionRightButton', kind: Button, content: 'Right', ontap: 'buttonTapped'}
				]},
				{kind: Control, tag: 'br'},
				{kind: Control, tag: 'br'},

				{kind: Divider, content: 'Grouped Buttons:'},
				{kind: Group, classes: 'moon-button-sample-group', components: [
					{name: 'appleButton', kind: Button, content: 'Apple', ontap: 'buttonTapped'},
					{name: 'bananaButton', kind: Button, content: 'Banana', ontap: 'buttonTapped'},
					{name: 'saskatoonberryButton', kind: Button, content: 'Saskatoonberry', ontap: 'buttonTapped'}
				]},

				{kind: 'moon.Divider', content: 'Hidden Buttons:'},
				{name: 'hiddenButton', kind: Button, content: 'Hidden Button', renderOnShow: true, ontap: 'buttonTapped'},
				{name: 'showButton', kind: Button, content: 'Show Hidden Button', ontap: 'showButtonTapped'}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', allowHtml: true, content: 'No button pressed yet.'}
	],
	buttonTapped: function(inSender, inEvent) {
		this.$.result.setContent('&quot;' + inSender.name + '&quot; pressed.');
	},
	showButtonTapped: function () {
		this.$.hiddenButton.show();
	},
	showSmallButtonTapArea: function(inSender, inEvent) {
		if (inEvent.checked) {
			this.$.smallAButton.addClass('visible-tap-area');
			this.$.smallBButton.addClass('visible-tap-area');
			this.$.smallButton.addClass('visible-tap-area');
			this.$.smallDisabledButton.addClass('visible-tap-area');
			this.$.smallLongButton.addClass('visible-tap-area');
			this.$.smallSpacesButton.addClass('visible-tap-area');
		} else {
			this.$.smallAButton.removeClass('visible-tap-area');
			this.$.smallBButton.removeClass('visible-tap-area');
			this.$.smallButton.removeClass('visible-tap-area');
			this.$.smallDisabledButton.removeClass('visible-tap-area');
			this.$.smallLongButton.removeClass('visible-tap-area');
			this.$.smallSpacesButton.removeClass('visible-tap-area');
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CaptionDecorator":125,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleItem":192,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195}],215:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	Divider = require('../../../moonstone/lib/Divider'),
	BodyText = require('../../../moonstone/lib/BodyText');

module.exports = kind({
	name: 'smoon.sample.CheckboxItemSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-hspacing', controlClasses: 'moon-5h', components: [
				{components: [
					{kind: Divider, content: 'Checkbox Items'},
					{kind: CheckboxItem, content: 'Option 1', checked: true, onchange: 'itemChanged'},
					{kind: CheckboxItem, content: 'Option 2', onchange: 'itemChanged'},
					{kind: CheckboxItem, disabled: true, content: 'Disabled', onchange: 'itemChanged'},
					{kind: CheckboxItem, content: 'Option 4', checked: true, onchange: 'itemChanged'},
					{kind: CheckboxItem, content: 'This is a verrry long option 5 with a custom checkmark', icon: '', src: 'assets/icon-button-enyo-logo.png', onchange: 'itemChanged'}
				]},
				{components: [
					{kind: Divider, content: 'Right-Handed Checkbox Items'},
					{kind: CheckboxItem, content: 'Option 1', checked: true, checkboxOnRight: true, onchange: 'itemChanged'},
					{kind: CheckboxItem, content: 'Option 2', checkboxOnRight: true, onchange: 'itemChanged'},
					{kind: CheckboxItem, disabled: true, content: 'Disabled', checkboxOnRight: true, onchange: 'itemChanged'},
					{kind: CheckboxItem, content: 'Option 4', checked: true, checkboxOnRight: true, onchange: 'itemChanged'},
					{kind: CheckboxItem, content: 'This is a verrry long option 5', checkboxOnRight: true, onchange: 'itemChanged'}
				]},
				{components: [
					{kind: Divider, content: 'Checkbox Item Group'},
					{kind: Group, onActivate: 'groupChanged', components: [
						{kind: CheckboxItem, content: 'Group Option 1'},
						{kind: CheckboxItem, content: 'Group Option 2', checked: true},
						{kind: CheckboxItem, disabled: true, content: 'Disabled'},
						{kind: CheckboxItem, content: 'Group Option 4'},
						{kind: CheckboxItem, content: 'Group Option 5'}
					]}
				]}
			]}
		]},
		{components: [
			{kind: Divider, content: 'Result'},
			{kind: BodyText, name: 'result', content: 'Nothing selected'}
		]}
	],
	itemChanged: function(inSender, inEvent) {
		this.$.result.setContent(inSender.getContent() + ' was ' + (inSender.getChecked() ? ' selected.' : 'deselected.'));
	},
	groupChanged: function(inSender, inEvent) {
		if (inEvent.toggledControl.getChecked()) {
			var selected = inEvent.toggledControl.getContent();
			this.$.result.setContent(selected + ' was selected.');
		}
	}
});
},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180}],216:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	hooks = require('../../../enyo/lib/hooks'),
	updateLocale = hooks.updateLocale;

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	ilib = require('../../../enyo-ilib');

var
	$L = require('../../../moonstone/lib/i18n'),
	Button = require('../../../moonstone/lib/Button'),
	Clock = require('../../../moonstone/lib/Clock'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ClockSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Clock, name: 'clock'},
		{classes: 'moon-1v'},
		{classes: 'moon-hspacing', components: [
			{kind: InputDecorator, components: [
				{kind: Input, name: 'input', value: 'Jan 01 2013 11:22:59'}
			]},
			{kind: Button, small:true, content: 'Set Time', ontap: 'setTime'},
			{kind: Button, small:true, content: 'Set Static Time', ontap: 'setStaticTime'},
			{kind: Button, small:true, content: 'Reset to Current', ontap: 'resetTime'}
		]},
		{classes: 'moon-1v'},
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-5h', components: [
				{name: 'localePicker', kind: ExpandablePicker, noneText: $L('No Locale Selected'), content: 'Choose Locale', onChange: 'setLocale', components: [
					{content: 'Use Default Locale', active: true},
					{content: 'en-US'},
					{content: 'ko-KR'},
					{content: 'zh-TW'},
					{content: 'fa-IR'},
					{content: 'th-TH'},	//Thailand
					{content: 'en-CA'},
					{content: 'en-IE'},
					{content: 'en-GB'},
					{content: 'en-MX'},
					{content: 'de-DE'},
					{content: 'fr-FR'},
					{content: 'fr-CA'},
					{content: 'it-IT'},
					{content: 'es-ES'},
					{content: 'es-MX'},
					{content: 'es-US'}
				]}
			]}
		]}
	],
	create: function(){
		this.inherited(arguments);
		if (!ilib) {
			this.$.localePicker.hide();
			this.log('iLib not present -- hiding locale picker');
		}
	},
	setLocale: function(inSender, inEvent){
		var locale = inEvent.selected.content,
			val = (locale == 'Use Default Locale') ? null : locale;
		updateLocale(locale);
		this.$.clock.setLocale(val);
		return true;
	},
	setTime: function() {
		this.$.clock.setDate(new Date(this.$.input.getValue()));
	},
	setStaticTime: function() {
		var d = this.$.input.getValue() ? new Date(this.$.input.getValue()) : new Date();
		// We increment the JS month value so that it is 1-based
		this.$.clock.setDate({year: d.getFullYear(), month: d.getMonth()+1, day: d.getDate(), hour: d.getHours(), min: d.getMinutes(), sec: d.getSeconds()});
	},
	resetTime: function() {
		this.$.clock.setDate(null);
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/hooks":92,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/i18n":203}],226:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	ExpandableInput = require('../../../moonstone/lib/ExpandableInput'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ExpandableInputSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, horizontal: 'hidden', fit: true, components: [
			{classes:'moon-5h', components: [
				{kind: ExpandableInput, oninput:'inputChanging', onChange:'inputChanged', content: 'Input', noneText: 'No Input'},
				{kind: ExpandableInput, oninput:'inputChanging', onChange:'inputChanged', content: 'Input with Placeholder', noneText: 'No Input', placeholder: 'Placeholder'},
				{kind: ExpandableInput, oninput:'inputChanging', onChange:'inputChanged', content: 'Input with Value', noneText: 'No Input', placeholder: 'Placeholder', value: 'Initial value'},
				{kind: ExpandableInput, oninput:'inputChanging', onChange:'inputChanged', content: 'Disabled Input', noneText: 'No Input', disabled: true, value: 'I am disabled.'},
				{kind: ExpandableInput, oninput:'inputChanging', onChange:'inputChanged', content: 'Input with loooooooooooooooong text truncation', noneText: 'No Input with loooooooooooooooooong text truncation'},
				{kind: ExpandableInput, oninput:'inputChanging', onChange:'inputChanged', content: 'Input with no value or noneText'}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'console', content: 'Input:', allowHtml: true}
	],
	inputChanging: function(inSender, inEvent) {
		this.$.console.setContent('<em>'+inSender.getContent() + '</em> changing: \'' + inEvent.originator.getValue() + '\'');
	},
	inputChanged: function(inSender, inEvent) {
		this.$.console.setContent('<em>'+inSender.getContent() + '</em> changed to: \'' + inSender.getValue() + '\'');
	}
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandableInput":142,"../../../moonstone/lib/Scroller":180}],227:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	ExpandableListItem = require('../../../moonstone/lib/ExpandableListItem'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ExpandableListItemSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	handlers: {
		onActivate: 'activateHandler'
	},
	components: [
		{kind: Scroller, horizontal: 'hidden', fit: true, components: [
			{classes: 'moon-5h', components: [
				{kind: ExpandableListItem, content: 'Expandable ListItem', components: [
					{content: 'Item 1'},
					{content: 'Item 2'},
					{content: 'Item 3'}
				]},
				{kind: ExpandableListItem, disabled:true, content: 'Disabled ListItem', components: [
					{content: 'Item 1'},
					{content: 'Item 2'},
					{content: 'Item 3'}
				]},
				{kind: ExpandableListItem, content: 'Pre-expanded ListItem', open: true, components: [
					{content: 'Item 1'},
					{content: 'Item 2'},
					{content: 'Item 3'}
				]},
				{kind: ExpandableListItem, content: 'Bottom-locking', lockBottom: true, open: true, components: [
					{content: 'Item 1'},
					{content: 'Item 2'},
					{content: 'Item 3'}
				]},
				{kind: ExpandableListItem, content: 'Auto-collapsing', autoCollapse: true, components: [
					{content: 'Item 1'},
					{content: 'Item 2'},
					{content: 'Item 3'}
				]},
				{kind: Group, highlander: true, components: [
					{kind: ExpandableListItem,  open: true,
						content: 'This is a grouped ExpandableListItem', components: [
							{content: 'Item One'},
							{content: 'Item Two'}
						]
					},
					{kind: ExpandableListItem,
						content: 'This is another grouped ExpandableListItem', components: [
							{content: 'Item Three'},
							{content: 'Item Four'}
						]
					},
					{kind: ExpandableListItem,
						content: 'This is yet another grouped ExpandableListItem', components: [
							{content: 'Item Five'},
							{content: 'Item Six'}
						]
					}
				]}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'console', content: 'Event'}
	],
	activateHandler: function(sender, event) {
		if (this.generated && event.originator instanceof ExpandableListItem) {
			this.$.console.setContent(event.originator.getContent() + ' is now ' + (event.originator.getActive() ? 'open' : 'closed'));
		}
	}
});

},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandableListItem":145,"../../../moonstone/lib/Scroller":180}],229:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	ExpandableText = require('../../../moonstone/lib/ExpandableText'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ExpandableTextSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true,  components: [
			{kind: Divider, content: '#1: Basic, No Expansion Needed'},
			{kind: ExpandableText, onExpandCollapse: 'collapsedChanged', content: 'Pixar genius reigns in this funny romantic comedy.'},
			{tag: 'br'},
			
			{kind: Divider, content: '#2: Basic'},
			{kind: ExpandableText, onExpandCollapse: 'collapsedChanged', content: 'Pixar genius reigns in this funny romantic comedy, which stars a robot who says absolutely nothing for a full 25 minutes yet somehow completely transfixes and endears himself to the audience within the first few minutes of the film. As the last robot left on earth, Wall-E (voiced by Ben Burtt) is one small robot--with a big, big heart--who holds the future of earth and mankind squarely in the palm of his metal hand. He\'s outlasted all the \'Waste Allocation Load Lifter Earth-Class\' robots that were assigned some 700 years ago to clean up the environmental mess that man made of earth while man vacationed aboard the luxury spaceship Axiom.'},
			{tag: 'br'},
			
			{kind: Divider, content: '#3: Collapsed: false'},
			{kind: ExpandableText, onExpandCollapse: 'collapsedChanged', collapsed: false, content: 'Pixar genius reigns in this funny romantic comedy, which stars a robot who says absolutely nothing for a full 25 minutes yet somehow completely transfixes and endears himself to the audience within the first few minutes of the film. As the last robot left on earth, Wall-E (voiced by Ben Burtt) is one small robot--with a big, big heart--who holds the future of earth and mankind squarely in the palm of his metal hand. He\'s outlasted all the \'Waste Allocation Load Lifter Earth-Class\' robots that were assigned some 700 years ago to clean up the environmental mess that man made of earth while man vacationed aboard the luxury spaceship Axiom.'},
			{tag: 'br'},
			
			{kind: Divider, content: '#4: MaxLines: 1'},
			{kind: ExpandableText, onExpandCollapse: 'collapsedChanged', maxLines: 1, content: 'Pixar genius reigns in this funny romantic comedy, which stars a robot who says absolutely nothing for a full 25 minutes yet somehow completely transfixes and endears himself to the audience within the first few minutes of the film. As the last robot left on earth, Wall-E (voiced by Ben Burtt) is one small robot--with a big, big heart--who holds the future of earth and mankind squarely in the palm of his metal hand. He\'s outlasted all the \'Waste Allocation Load Lifter Earth-Class\' robots that were assigned some 700 years ago to clean up the environmental mess that man made of earth while man vacationed aboard the luxury spaceship Axiom.'}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'console', content: 'No change yet'}
	],
	collapsedChanged: function(inSender, inEvent) {
		this.$.console.setContent(inSender.name + (inSender.collapsed ? ' Collapsed' : ' Expanded'));
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandableText":147,"../../../moonstone/lib/Scroller":180}],230:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Table = require('../../../enyo/lib/Table');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	Divider = require('../../../moonstone/lib/Divider');

module.exports = kind({
	name: 'moon.sample.FontSample',
	kind: Scroller,
	classes: 'moon enyo-unselectable enyo-fit moon-font-sample',
	components: [
		{kind: Divider, content: 'Latin Font'},
		{kind: Table, components: [
			{classes: 'moon-header-text', components: [
				{content: 'HEADER'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼Ií©XëED'}
			]},
			{classes: 'moon-large-text', components: [
				{content: 'Large Text'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-sub-header-text', components: [
				{content: 'Sub-header'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-large-button-text', components: [
				{content: 'LARGE BUTTON'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼Ií©XëED'}
			]},
			{classes: 'moon-small-button-text', components: [
				{content: 'SMALL BUTTON'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼Ií©XëED'}
			]},
			{classes: 'moon-body-text', components: [
				{content: 'Body Text'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-divider-text', components: [
				{content: 'Divider'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-superscript', components: [
				{content: 'Superscript'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-pre-text', components: [
				{content: 'Pre Text'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]}
		]},
		{tag: 'br'},
		{kind: Divider, content: 'Non-latin Font'},
		{kind: Table, classes: 'enyo-locale-non-latin', components: [
			{classes: 'moon-header-text', components: [
				{content: 'HEADER'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼Ií©XëED'}
			]},
			{classes: 'moon-large-text', components: [
				{content: 'Large Text'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-sub-header-text', components: [
				{content: 'Sub-header'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-large-button-text', components: [
				{content: 'LARGE BUTTON'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼Ií©XëED'}
			]},
			{classes: 'moon-small-button-text', components: [
				{content: 'SMALL BUTTON'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼Ií©XëED'}
			]},
			{classes: 'moon-body-text', components: [
				{content: 'Body Text'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-divider-text', components: [
				{content: 'Divider'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-superscript', components: [
				{content: 'Superscript'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]},
			{classes: 'moon-pre-text', components: [
				{content: 'Pre Text'},
				{content: 'íë ë¹ì '},
				{content: 'Mí¼ií©xëed'}
			]}
		]}
	]
});

// moon-header-text
// moon-superscript
// moon-pre-text
// moon-large-text
// moon-sub-header-text
// moon-divider-text
// moon-body-text
// moon-large-button-text
// moon-small-button-text

},{"../../../enyo/lib/Table":73,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180}],231:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	FormCheckbox = require('../../../moonstone/lib/FormCheckbox'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.FormCheckboxSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-hspacing', controlClasses: 'moon-5h', components: [
				{components: [
					{kind: Divider, content: 'FormCheckbox Items (Default)'},
					{kind: FormCheckbox, content: 'Option 1', checked: true, onchange: 'itemChanged'},
					{kind: FormCheckbox, content: 'Option 2', onchange: 'itemChanged'},
					{kind: FormCheckbox, disabled: true, content: 'Disabled', onchange: 'itemChanged'},
					{kind: FormCheckbox, content: 'Option 4', checked: true, onchange: 'itemChanged'},
					{kind: FormCheckbox, content: 'This is a verrry long option 5', onchange: 'itemChanged'}
				]},
				{components: [
					{kind: Divider, content: 'FormCheckbox Item (Group)'},
					{kind: Group, onActivate: 'groupChanged', components: [
						{kind: FormCheckbox, content: 'Group Option 1'},
						{kind: FormCheckbox, content: 'Group Option 2', checked: true},
						{kind: FormCheckbox, disabled: true, content: 'Disabled'},
						{kind: FormCheckbox, content: 'Group Option 4'},
						{kind: FormCheckbox, content: 'Group Option 5'}
					]}
				]}
			]}
		]},
		{components: [
			{kind: Divider, content: 'Result'},
			{kind: BodyText, name: 'result', content: 'Nothing selected'}
		]}
	],
	itemChanged: function(inSender, inEvent) {
		this.$.result.setContent(inSender.getContent() + ' was ' + (inSender.getChecked() ? ' selected.' : 'deselected.'));
	},
	groupChanged: function(inSender, inEvent) {
		if (inEvent.toggledControl.getChecked()) {
			var selected = inEvent.toggledControl.getContent();
			this.$.result.setContent(selected + ' was selected.');
		}
	}
});
},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/FormCheckbox":148,"../../../moonstone/lib/Scroller":180}],233:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Button = require('../../../moonstone/lib/Button'),
	Header = require('../../../moonstone/lib/Header'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.HeaderSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit moon-header-sample',
	components: [
		{kind: Scroller, fit:true, components: [
			{kind: Header, name: 'largeHeader', content: 'Large Header', titleAbove: '02', titleBelow: 'Sub Header', subTitleBelow: 'Sub-sub Header', components: [
				{kind: Button, small: true, content: 'Description', ontap: 'describeLarge'},
				{kind: Button, small: true, content: 'How to use', ontap: 'howToUseLarge'}
			]},
			{classes: 'moon-1v'},
			{kind: Header, name: 'mediumHeader', content: 'Medium Header', type: 'medium', titleAbove: '03', titleBelow: 'Sub Header', subTitleBelow: '', components: [
				{kind: Button, small: true, content: 'Description', ontap: 'describeMedium'},
				{kind: Button, small: true, content: 'How to use', ontap: 'howToUseMedium'}
			]},
			{classes: 'moon-1v'},
			{kind: Header, name: 'smallHeader', content: 'Small Header', type: 'small', titleAbove: '04', subTitle: 'Sub Title', titleBelow: 'Sub Header', subTitleBelow: 'Sub-sub Header', components: [
				{kind: Button, content: 'Description', ontap: 'describeSmall'},
				{kind: Button, small: true, content: 'How to use', ontap: 'howToUseSmall'},
				{kind: Button, small: true, content: 'RTL content', ontap: 'rtlSmall'}
			]},
			{classes: 'moon-1v'},
			{kind: Header, content: 'Varied Alignment', titleAbove: '02', titleBelow: 'Panel actions can be positioned on left or right', components: [
				{kind: Button, small:true, content: 'Left', classes: 'moon-header-left'},
				{kind: Button, small:true, content: 'aligned', classes: 'moon-header-left'},
				{kind: Button, small:true, content: 'Right'},
				{kind: Button, small:true, content: 'Aligned'}
			]},
			{classes: 'moon-1v'},
			{kind: Header, name: 'switchHeader', content: 'Static Title', placeholder: 'Type Here', titleAbove: '03', titleBelow: 'Header title can be changed to an input', subTitleBelow: 'Press \'Switch Mode\' button, which sets `inputMode:true`.', components: [
				{kind: Button, small:true, content: 'Switch Mode', ontap: 'switchMode', header: 'switchHeader'}
			]},
			{kind: Header, name: 'inputHeaderDismiss', inputMode: true, dismissOnEnter: true, content: 'Input-style Header', placeholder: 'Dismiss on Enter', titleAbove: '03', titleBelow: 'InputHeader blurs-focus when pressing Enter.', subTitleBelow: '', onchange: 'handleChange'},
			{classes: 'moon-1v'},
			{kind: Header, name: 'imageHeader', content: 'Header with Image', subTitle: 'Sub title can be seen only in small header. And can flow with title when marquee starts.', titleAbove: '02', titleBelow: 'Sub Header', subTitleBelow: 'Sub-sub Header', fullBleedBackground: false, backgroundSrc: 'http://lorempixel.com/g/1920/360/abstract/2/', components: [
				{kind: ToggleButton, small: true, toggleOnLabel: 'Full Bleed: true', toggleOffLabel: 'Full Bleed: false', ontap: 'handleToggle', classes: 'moon-header-left'},
				{kind: Button, small: true, content: 'large', ontap: 'resizeImageHeader'},
				{kind: Button, small: true, content: 'medium', ontap: 'resizeImageHeader'},
				{kind: Button, small: true, content: 'small', ontap: 'resizeImageHeader'}
			]},
			{classes: 'moon-1v'},
			{kind: Header, name: 'marqueeHeader', content: 'Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>', allowHtml:true, titleAbove: '02', titleBelow: 'Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span> Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>   Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>   Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>', subTitleBelow: 'Titles will truncate/marquee', components: [
				{kind: Button, small:true, content: 'Switch Mode', ontap: 'switchMode', header: 'marqueeHeader'}
			]},
			{classes: 'moon-1v'},
			{kind: Header, name: 'marqueeHeaderSmall', small:true, content: 'Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>', allowHtml:true, titleAbove: '02', titleBelow: 'Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span> Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>   Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>   Header   í¤ë    ããã    ylÃ¤tunniste    ×××ª×¨×ª    Ø±Ø£Ø³    Kopfzeile  áº« áºª Ú¯ Å® <span style=\'text-transform:none\'>j p q g</span>', subTitleBelow: 'Titles will truncate/marquee', components: [
				{kind: Button, small:true, content: 'Switch Mode', ontap: 'switchMode', header: 'marqueeHeaderSmall'}
			]}
		]}
	],
	describeLarge: function (sender, event) {
		this.$.largeHeader.setTitleBelow('This is the default header.');
	},
	howToUseLarge: function (sender, event) {
		this.$.largeHeader.setSubTitleBelow('Large (default) header will be used if you don\'t specify the `type` property.');
	},
	describeMedium: function (sender, event) {
		this.$.mediumHeader.setTitleBelow('Medium header flattens the button area and the titleBelow areas together for a more compact header.');
	},
	howToUseMedium: function (sender, event) {
		this.$.mediumHeader.setSubTitleBelow('Set `type` property to \'medium\' to use the medium header and long very subTitleBelow.');
	},
	describeSmall: function (sender, event) {
		this.$.smallHeader.setTitle('Small header flattens the buttons down to the title area, uses a smaller title font, and has no `titleBelow`.');
	},
	howToUseSmall: function (sender, event) {
		this.$.smallHeader.setTitle('Set `type` property to \'small\' to use the small header.');
	},
	rtlSmall: function (sender, event) {
		this.$.smallHeader.set('title', '×××ª×¨×ª Small Header');
		this.$.smallHeader.set('titleBelow', '××ª×××××ª ××××');
	},
	handleToggle: function (sender, event) {
		this.$.imageHeader.setFullBleedBackground(sender.value);
	},
	resizeImageHeader: function (sender, event) {
		this.$.imageHeader.setType(sender.content);
	},
	switchMode: function (sender, event) {
		var header = this.$[sender.header];
		header.setInputMode(!header.getInputMode());
	},
	handleChange: function (sender, event) {
		this.$.inputHeaderDismiss.set('subTitleBelow', 'Changed: ' + sender.getValue());
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Header":150,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],236:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.IconButtonSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{fit:true, components: [
				{kind: Divider, content: 'Font-based Icon Buttons: '},
				{kind: IconButton, icon: 'drawer', small: false, ontap: 'buttonTapped'},
				{kind: IconButton, icon: 'search', small: false, ontap: 'buttonTapped'},
				{kind: IconButton, icon: 'drawer', ontap: 'buttonTapped'},
				{kind: IconButton, icon: 'search', ontap: 'buttonTapped'},
				{classes: 'moon-1v'},
				{kind: Divider, content: 'Image Asset Icon (Raster Image) Buttons: '},
				{kind: IconButton, src: 'assets/icon-list.png', small: false, ontap: 'buttonTapped'},
				{kind: IconButton, src: 'assets/icon-album.png', small: false, ontap: 'buttonTapped'},
				{kind: IconButton, src: 'assets/icon-list.png', ontap: 'buttonTapped'},
				{kind: IconButton, src: 'assets/icon-album.png', ontap: 'buttonTapped'},
				{classes: 'moon-1v'},
				{kind: 'moon.Divider', content: 'Image Asset Icons (Vector Image) Buttons:'},
				{kind: 'moon.IconButton', src: 'assets/magnify.svg', small: false, ontap: 'buttonTapped'},
				{kind: 'moon.IconButton', src: 'assets/trash.svg', small: false, ontap: 'buttonTapped'},
				{kind: 'moon.IconButton', src: 'assets/magnify.svg', ontap: 'buttonTapped'},
				{kind: 'moon.IconButton', src: 'assets/trash.svg', ontap: 'buttonTapped'},
				{classes:'moon-1v'},
				{kind: Divider, content: 'Disabled Icon Buttons: '},
				{kind: IconButton, icon: 'drawer', small: false, ontap: 'buttonTapped', disabled: true},
				{kind: IconButton, icon: 'search', ontap: 'buttonTapped', disabled: true},
				{kind: IconButton, src: 'assets/icon-list.png', small: false, ontap: 'buttonTapped', disabled: true},
				{kind: IconButton, src: 'assets/icon-album.png', ontap: 'buttonTapped', disabled: true},
				{classes: 'moon-1v'},
				{kind: Divider, content: 'Grouped Icon Buttons: '},
				{kind: Group, components: [
					{kind: IconButton, icon: 'drawer', active: true, ontap: 'buttonTapped'},
					{kind: IconButton, icon: 'search', ontap: 'buttonTapped'},
					{kind: IconButton, src: 'assets/icon-list.png', ontap: 'buttonTapped'},
					{kind: IconButton, src: 'assets/icon-album.png', ontap: 'buttonTapped'}
				]}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'console', content: 'No changes yet'}
	],
	buttonTapped: function (sender, event) {
		this.$.console.setContent(sender.name + ' tapped.');
	}
});

},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Scroller":180}],237:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	Icon = require('../../../moonstone/lib/Icon'),
	Item = require('../../../moonstone/lib/Item'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.IconSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit:true, components: [
			{kind: Divider, content: 'Moonstone Font-based Icons:'},
			{kind: Icon, icon: 'arrowlargeup', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowlargedown', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowlargeleft', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowlargeright', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmallup', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmalldown', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmallleft', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmallright', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'closex', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'check', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'search', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'drawer', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'exitfullscreen', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'fullscreen', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'circle', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'stop', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'play', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pause', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'forward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'backward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'skipforward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'skipbackward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pauseforward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pausebackward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pausejumpforward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pausejumpbackward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'jumpforward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'jumpbackward', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowshrink', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowextend', small: false, ontap: 'buttonTapped'},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Small Moonstone Font-based Icons:'},
			{kind: Icon, icon: 'arrowlargeup', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowlargedown', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowlargeleft', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowlargeright', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmallup', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmalldown', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmallleft', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowsmallright', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'closex', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'check', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'search', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'drawer', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'exitfullscreen', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'fullscreen', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'circle', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'stop', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'play', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pause', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'forward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'backward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'skipforward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'skipbackward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pauseforward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pausebackward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pausejumpforward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'pausejumpbackward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'jumpforward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'jumpbackward', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowshrink', ontap: 'buttonTapped'},
			{kind: Icon, icon: 'arrowextend', ontap: 'buttonTapped'},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Examples of LG (Dingbat) Icons:'},
			{kind: Icon, icon: '&#42276;', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42381;', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42391;', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42322;', small: false, ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42276;', ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42381;', ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42391;', ontap: 'buttonTapped'},
			{kind: Icon, icon: '&#42322;', ontap: 'buttonTapped'},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Image Asset Icons (Raster Image) Buttons:'},
			{kind: Icon, src: 'assets/icon-list.png', ontap: 'buttonTapped'},
			{kind: Icon, src: 'assets/icon-album.png', ontap: 'buttonTapped'},
			{classes: 'moon-1v'},
			{kind: "moon.Divider", content: "Image Asset Icons (Vector Image) Buttons:"},
			{kind: "moon.Icon", src: "assets/magnify.svg", small: false, ontap: "buttonTapped"},
			{kind: "moon.Icon", src: "assets/trash.svg", small: false, ontap: "buttonTapped"},
			{kind: "moon.Icon", src: "assets/magnify.svg", ontap: "buttonTapped"},
			{kind: "moon.Icon", src: "assets/trash.svg", ontap: "buttonTapped"},
			{classes:"moon-1v"},
			{kind: Divider, content: 'Disabled Icons:'},
			{kind: Icon, icon: 'search', ontap: 'buttonTapped', disabled: true},
			{kind: Icon, icon: '&#42276;', ontap: 'buttonTapped', disabled: true},
			{kind: Icon, src: 'assets/icon-list.png', ontap: 'buttonTapped', disabled: true},
			{kind: Icon, src: 'assets/icon-album.png', ontap: 'buttonTapped', disabled: true},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Icons inside a spottable Item:'},
			{kind: Item, classes: 'moon-hspacing', ontap: 'buttonTapped', components: [
				{content: 'Selectable Item'},
				{kind: Icon, icon: '&#42276;', ontap: 'buttonTapped'},
				{kind: Icon, src: 'assets/icon-list.png', ontap: 'buttonTapped'}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'console', content: 'No changes yet'}
	],
	buttonTapped: function (sender, event) {
		this.$.console.setContent(sender.name + ' tapped.');
	}
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Icon":153,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Scroller":180}],238:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Icon = require('../../../moonstone/lib/Icon'),
	Img = require('../../../moonstone/lib/Image'),
	Item = require('../../../moonstone/lib/Item'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ImageBadgeSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit image-badge-sample',
	components: [
		{kind: Scroller, fit: true, components: [
			{kind: Divider, content: 'Image Badges:'},
			{kind: Img, src: 'http://placehold.it/342x360&text=Image+One', alt: 'Image One', components: [
				{kind: Icon, icon: 'skipbackward'},
				{kind: Icon, icon: 'play'},
				{kind: Icon, icon: 'skipforward'},
				{kind: Icon, icon: 'search', classes: 'float-right'}
			]},
			{kind: Img, src: {
				'hd' : 'http://placehold.it/228x240&text=Image+Two',
				'fhd': 'http://placehold.it/342x360&text=Image+Two'
			}, alt: 'Image Two', components: [
				{kind: Icon, icon: 'check'},
				{kind: Icon, icon: 'closex'},
				{kind: Icon, icon: 'drawer', classes: 'float-right'}
			]},
			{kind: Img, src: {
				'hd' : 'http://placehold.it/120x160&text=Image+Three',
				'fhd': 'http://placehold.it/180x240&text=Image+Three'
			}, alt: 'Image Three', components: [
				{kind: Icon, icon: 'closex'}
			]},
			
			{kind: Divider, classes: 'image-badge-sample-divider', content: 'Image Badges - Show on Spotlight:'},
			{kind: Item, components: [
				{kind: Img, src: 'http://placehold.it/342x360&text=Image+One', alt: 'Image One', showBadgesOnSpotlight: true, components: [
					{kind: Icon, icon: 'skipbackward'},
					{kind: Icon, icon: 'play'},
					{kind: Icon, icon: 'skipforward'},
					{kind: Icon, icon: 'search', classes: 'float-right'}
				]}
			]},
			{kind: Item, components: [
				{kind: Img, src: {
					'hd' : 'http://placehold.it/228x240&text=Image+Two',
					'fhd': 'http://placehold.it/342x360&text=Image+Two'
				}, alt: 'Image Two', showBadgesOnSpotlight: true, components: [
					{kind: Icon, icon: 'check'},
					{kind: Icon, icon: 'closex'},
					{kind: Icon, icon: 'drawer', classes: 'float-right'}
				]}
			]},
			{kind: Item, components: [
				{kind: Img, src: {
					'hd' : 'http://placehold.it/120x160&text=Image+Three',
					'fhd': 'http://placehold.it/180x240&text=Image+Three'
				}, alt: 'Image Three', showBadgesOnSpotlight: true, components: [
					{kind: Icon, icon: 'closex'}
				]}
			]}
		]}
	]
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Icon":153,"../../../moonstone/lib/Image":155,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Scroller":180}],239:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Img = require('../../../enyo/lib/Image');

var
	Divider = require('../../../moonstone/lib/Divider'),
	ImageItem = require('../../../moonstone/lib/ImageItem'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ImageItemSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, classes: 'enyo-fill', components: [
			{
				components: [
					{kind: Divider, content: 'Left-aligned', spotlight: true},
					{
						components: [
							{
								kind: ImageItem,
								source: Img.placeholder,
								label: 'Breaking Bad',
								text: 'A struggling high school chemistry teacher who is diagnosed with inoperable lung cancer turns to a life of crime, producing and selling methamphetamine with a former student'
							},
							{
								kind: ImageItem,
								source: Img.placeholder,
								label: 'South Park',
								text: 'Follows the misadventures of four irreverent grade schoolers in the quiet, dysfunctional town of South Park, Colorado.'
							},
							{
								kind: ImageItem,
								source: Img.placeholder,
								label: 'Paulie',
								text: 'Life from a parrot\'s point of view.'
							}
						]
					}
				]
			},
			{tag: 'br'},
			{
				components: [
					{kind: Divider, content: 'Right-aligned'},
					{
						components: [
							{
								kind: ImageItem,
								source: Img.placeholder,
								label: 'Breaking Bad',
								imageAlignRight: true,
								text: 'A struggling high school chemistry teacher who is diagnosed with inoperable lung cancer turns to a life of crime, producing and selling methamphetamine with a former student'
							},
							{
								kind: ImageItem,
								source: Img.placeholder,
								label: 'South Park',
								imageAlignRight: true,
								text: 'Follows the misadventures of four irreverent grade schoolers in the quiet, dysfunctional town of South Park, Colorado.'
							},
							{
								kind: ImageItem,
								source: Img.placeholder,
								label: 'Paulie',
								imageAlignRight: true,
								text: 'Life from a parrot\'s point of view.'
							}
						]
					}
				]
			}
		]}
	]
});
},{"../../../enyo/lib/Image":41,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ImageItem":157,"../../../moonstone/lib/Scroller":180}],242:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	Icon = require('../../../moonstone/lib/Icon'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	RichText = require('../../../moonstone/lib/RichText'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	TextArea = require('../../../moonstone/lib/TextArea');

module.exports = kind({
	name: 'moon.sample.InputSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit moon-input-sample',
	components: [
		{kind: Divider, content: 'Inputs'},
		{kind: Scroller, horizontal: 'hidden', fit: true, components: [
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'JUST TYPE', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Search term', oninput: 'handleInput', onchange: 'handleChange'},
				{kind: Icon, icon: 'search'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, type: 'password', placeholder: 'Enter password', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, type: 'number', placeholder: 'Enter number', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Placeholder for initial value', value: 'This is the initial value', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Placeholder for value with ellipsis', value: 'This is the initial value that is of a certain length to display an ellipsis.', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Dismiss on Enter', dismissOnEnter:true, oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, disabled: true, components: [
				{kind: Input, disabled: true, placeholder: 'Disabled input'}
			]},

			{kind: Divider, content: 'TextAreas'},
			{kind: InputDecorator, components: [
				{kind: TextArea, placeholder: 'Enter text here', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: TextArea, placeholder: 'JUST TYPE', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, disabled: true, components: [
				{kind: TextArea, disabled: true, placeholder: 'Deactivated TextArea', oninput: 'handleInput', onchange: 'handleChange'}
			]},

			{kind: Divider, content: 'RichTexts'},
			{kind: InputDecorator, components: [
				{kind: RichText, oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: RichText, style: 'width: 240px;', oninput: 'handleInput', onchange: 'handleChange'},
				{kind: Icon, icon: 'search'}
			]},
			{kind: InputDecorator, disabled: true, components: [
				{kind: RichText, disabled: true, style: 'width: 240px;'}
			]}
		]},
		{kind: Divider, content: 'Result', classes: 'moon-input-sample-result'},
		{kind: BodyText, name: 'console', allowHtml: false, content: 'Input: '},
		{kind: Divider, content: 'Bottom-aligned inputs', classes: 'moon-input-sample-result'},
		{components: [
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Bottom', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Aligned', oninput: 'handleInput', onchange: 'handleChange'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, placeholder: 'Inputs', oninput: 'handleInput', onchange: 'handleChange'}
			]}
		]}
	],
	handleInput: function (sender, event) {
		this.$.console.setContent('Input: ' + sender.getValue());
	},
	handleChange: function (sender, event) {
		this.$.console.setContent('Changed: ' + sender.getValue());
	}
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Icon":153,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/RichText":176,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/TextArea":189}],243:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	FormCheckbox = require('../../../moonstone/lib/FormCheckbox'),
	IntegerPicker = require('../../../moonstone/lib/IntegerPicker'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.IntegerPickerSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{kind: Divider, content: 'Integer Picker'},
			{name: 'picker', kind: IntegerPicker, value: 2013, min: 1900, max: 2100, minWidth: 84, onChange: 'changed'},

			{kind: Divider, content: 'Options'},
			{kind: FormCheckbox, content: 'Animate', checked: true, prop: 'animate', onchange: 'checked'},
			{kind: FormCheckbox, content: 'Wrap', prop: 'wrap', onchange: 'checked'},
			{kind: FormCheckbox, content: 'Padding (5 digits)', onchange: 'paddingChecked'},
			{kind: FormCheckbox, content: 'Disabled', prop: 'disabled', onchange: 'checked'}			
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'value', content: 'No change yet'}
	],
	changed: function (sender, event) {
		if (this.$.value) {
			this.$.value.setContent(event.name + ' changed to ' + event.value);
		}
	},
	checked: function (sender, event) {
		this.$.picker.set(sender.prop, sender.checked);
	},
	paddingChecked: function (sender, event) {
		this.$.picker.set('digits', sender.checked? 5 : null);
		this.$.picker.render();
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/FormCheckbox":148,"../../../moonstone/lib/IntegerPicker":161,"../../../moonstone/lib/Scroller":180}],244:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Icon = require('../../../moonstone/lib/Icon'),
	Item = require('../../../moonstone/lib/Item'),
	ItemOverlay = require('../../../moonstone/lib/ItemOverlay'),
	ItemOverlaySupport = ItemOverlay.ItemOverlaySupport,
	Marquee = require('../../../moonstone/lib/Marquee'),
	MarqueeText = Marquee.Text,
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ItemOverlaySample',
	classes: 'moon enyo-unselectable enyo-fit moon-item-overlay-sample-wrapper',
	components: [
		{kind: Scroller, classes: 'enyo-fill moon-7h', components: [
			{kind: Divider, content: 'Simple ItemOverlay Sample'},
			{components: [
				{kind: Item, mixins: [ItemOverlaySupport], beginningComponents: [
						{kind: Icon, icon: 'search', small: true}
					], components: [
						{kind: MarqueeText, content: 'Item with icon on the left side'}
					]
				},
				{kind: Item, mixins: [ItemOverlaySupport], endingComponents: [
						{kind: Icon, icon: 'check', small: true}
					], components: [
						{kind: MarqueeText, content: 'Item with icon on the right side'}
					]
				}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'ItemOverlay with multiple icons Sample'},
			{components: [
				{kind: Item, mixins: [ItemOverlaySupport], beginningComponents: [
						{kind: Icon, icon: 'arrowlargeup', small: true},
						{kind: Icon, icon: 'arrowlargedown', small: true},
						{kind: Icon, icon: 'arrowlargeleft', small: true},
						{kind: Icon, icon: 'arrowlargeright', small: true}
					], components: [
						{kind: MarqueeText, content: 'Multiple Icons can be used'}
					]
				},
				{kind: Item, mixins: [ItemOverlaySupport], endingComponents: [
						{kind: Icon, icon: 'arrowlargeup', small: true},
						{kind: Icon, icon: 'arrowlargedown', small: true},
						{kind: Icon, icon: 'arrowlargeleft', small: true},
						{kind: Icon, icon: 'arrowlargeright', small: true}
					], components: [
						{kind: MarqueeText, content: 'Multiple Icons can be used'}
					]
				},
				{kind: Item, mixins: [ItemOverlaySupport], beginningComponents: [
						{kind: Icon, icon: 'arrowextend', small: true}
					], endingComponents: [
						{kind: Icon, icon: 'arrowshrink', small: true}
					], components: [
						{kind: MarqueeText, content: 'Use left and right overlay at the same time'}
					]
				}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'ItemOverlay Auto Hide Sample'},
			{components: [
				{kind: Item, mixins: [ItemOverlaySupport], autoHideBeginning: true, beginningComponents: [
						{kind: Icon, src: 'assets/icon-list.png', small: true}
					], components: [
						{kind: MarqueeText, content: 'These text are flow when item is getting focused'}
					]
				},
				{kind: Item, mixins: [ItemOverlaySupport], autoHideEnding: true, endingComponents: [
						{kind: Icon, src: 'assets/icon-album.png', small: true}
					], components: [
						{kind: MarqueeText, content: 'These text are flow when item is getting focused'}
					]
				}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Combine both autoHide true and false'},
			{components: [
				{kind: Item, mixins: [ItemOverlaySupport], autoHideEnding: true, beginningComponents: [
						{kind: Icon, icon: 'search', small: true}
					], endingComponents: [
						{kind: Icon, icon: 'backward', small: true},
						{kind: Icon, icon: 'play', small: true},
						{kind: Icon, icon: 'forward', small: true}
					], components: [
						{kind: MarqueeText, content: 'Both static and autoHiding ItemOverlays'}
					]
				}
			]}
		]}
	]
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Icon":153,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/ItemOverlay":163,"../../../moonstone/lib/Marquee":166,"../../../moonstone/lib/Scroller":180}],245:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	Icon = require('../../../moonstone/lib/Icon'),
	Img = require('../../../moonstone/lib/Image'),
	Item = require('../../../moonstone/lib/Item'),
	Marquee = require('../../../moonstone/lib/Marquee'),
	MarqueeText = Marquee.Text,
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ItemSample',
	classes: 'moon enyo-unselectable enyo-fit moon-item-sample-wrapper',
	components: [
		{kind: Scroller, classes: 'enyo-fill moon-7h', components: [
			{kind: Divider, content: 'Simple Item Samples'},
			{components: [
				{kind: Item, content: 'Item 1'},
				{kind: Item, content: 'Item 2 (Disabled)', disabled:true},
				{kind: Item, content: 'Item 3 (Disabled) with really long marqueed text', disabled:true},
				{kind: Item, content: 'Item 4'},
				{kind: Item, content: 'Item with very long text that should truncate'},
				{kind: Item, content: 'Item   with   extra   spaces   that   should   truncate'}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Complex Item Samples'},
			{components: [
				{kind: Item, components: [
					{kind: Icon, icon: 'drawer'},
					{tag: 'span', content: 'Item with components'}
				]},
				{kind: Item, components: [
					{kind: MarqueeText, content: 'Item with more complex components'},
					{kind: Img, src: {
						'hd' : 'http://placehold.it/288x60&text=Image+One',
						'fhd': 'http://placehold.it/432x90&text=Image+One'
					}, alt: 'Image One'},
					{kind: Img, src: {
						'hd' : 'http://placehold.it/288x60&text=Image+Two',
						'fhd': 'http://placehold.it/432x90&text=Image+Two'
					}, alt: 'Img Two'}
				]},
				{kind: Item, components: [
					{kind: MarqueeText, content: 'Item with more complex components'},
					{kind: Img, src: {
						'hd' : 'http://placehold.it/100x100&text=Image+Three',
						'fhd': 'http://placehold.it/150x150&text=Image+Three'
					}, style: 'float: left; margin: 10px 10px 10px 0', alt: 'Image Two'},
					{kind: BodyText, style: 'margin: 10px 0', content: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.'}
				]},
				{kind: Item, components: [
					{kind: MarqueeText, content: 'Item with more complex components'},
					{kind: Img, src: {
						'hd' : 'http://placehold.it/100x100&text=Image+Four',
						'fhd': 'http://placehold.it/150x150&text=Image+Four'
					}, style: 'float: right; margin: 10px 0px 10px 10px', alt: 'Image Two'},
					{kind: BodyText, style: 'margin: 10px 0', content: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.'}
				]}
			]}
		]}
	]
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Icon":153,"../../../moonstone/lib/Image":155,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Marquee":166,"../../../moonstone/lib/Scroller":180}],246:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	LabeledTextItem = require('../../../moonstone/lib/LabeledTextItem');

module.exports = kind({
	name: 'moon.sample.LabeledTextItemSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, classes: 'enyo-fill', components: [
			{
				kind: LabeledTextItem,
				label: 'Breaking Bad',
				text: 'A struggling high school chemistry teacher who is diagnosed with inoperable lung cancer turns to a life of crime, producing and selling methamphetamine with a former student'
			},
			{
				kind: LabeledTextItem,
				label: 'South Park',
				text: 'Follows the misadventures of four irreverent grade schoolers in the quiet, dysfunctional town of South Park, Colorado.'
			},
			{
				kind: LabeledTextItem,
				label: 'Paulie',
				text: 'Life from a parrot\'s point of view.'
			}
		]}
	]
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/LabeledTextItem":164,"../../../moonstone/lib/Scroller":180}],248:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Button = require('../../../moonstone/lib/Button'),
	Divider = require('../../../moonstone/lib/Divider'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Marquee = require('../../../moonstone/lib/Marquee'),
	MarqueeDecorator = Marquee.Decorator,
	MarqueeItem = Marquee.Item,
	MarqueeSupport = Marquee.Support,
	MarqueeText = Marquee.Text,
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.MarqueeSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit moon-marquee-sample',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-marquee-sample-wrapper', components: [

				{kind: Divider, content: 'Marquee on start:'},
				{kind: MarqueeDecorator, marqueeOnRender: true, components: [
					{name: 'marqueeStartOnRender1', kind: MarqueeText, classes: 'moon-marquee-start-on-render', content: 'This is first long text for marquee test which is starting marquee on page render'},
					{name: 'marqueeStartOnRender2', kind: MarqueeText, classes: 'moon-marquee-start-on-render', content: 'This is second long text for marquee test which is syncronized with first marquee text'}
				]},
				{name: 'marqueeStartOnRender3', marqueeOnRender: true, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is third long text for marquee test which is not syncronized with first and second marquee text'},
				{tag: 'br'},

				{kind: Divider, content: 'Marquee on focus:'},
				{kind: MarqueeDecorator, marqueeOnSpotlight: true, components: [
					{name: 'marqueeStartOnFocus1', kind: MarqueeText, spotlight: true, classes: 'moon-marquee-start-on-focus', content: 'This is first long text for marquee test which is starting marquee on focus'},
					{name: 'marqueeStartOnFocus2', kind: MarqueeText, spotlight: true, classes: 'moon-marquee-start-on-focus', content: 'This is second long text for marquee test which is syncronized with first marquee text'}
				]},
				{name: 'marqueeStartOnFocus3', marqueeOnSpotlight: true, mixins: [MarqueeSupport, MarqueeItem], spotlight: true, classes: 'moon-marquee-start-on-focus', content: 'This is third long text for marquee test which is not syncronized with first and second marquee text'},
				{tag: 'br'},

				{kind: Divider, content: 'Marquee on Hover:'},
				{kind: MarqueeDecorator, marqueeOnHover: true, marqueeOnSpotlight: false, components: [
					{name: 'marqueeStartOnHover1', kind: MarqueeText, classes: 'moon-marquee-start-on-hover', content: 'This is first long text for marquee test which is starting marquee on mouse hover'},
					{name: 'marqueeStartOnHover2', kind: MarqueeText, classes: 'moon-marquee-start-on-hover', content: 'This is second long text for marquee test which is syncronized with first marquee text'}
				]},
				{name: 'marqueeStartOnHover3', marqueeOnHover: true, marqueeOnSpotlight: false, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-hover', content: 'This is third long text for marquee test which is not syncronized with first and second marquee text'},
				{tag: 'br'},


				{kind: Divider, content: 'Marquee on content changed:'},
				{kind: InputDecorator, components: [
					{kind: Input, placeholder: 'JUST TYPE', oninput: 'contentChange'}

				]},
				{kind: Button, content: 'Start marquee', ontap: 'start'},
				{kind: Button, content: 'Stop marquee', ontap: 'stop'},	
				{name: 'marqueeContent1', marqueeOnRender: true, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for marquee content change test for separate marquee case'},
				{name: 'marqueeContent2', marqueeOnRender: true, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', centered: true, content: 'Centered text for separate marquee case'},
				{name: 'marqueeContainer1', mixins: [MarqueeSupport], marqueeOnRender: true, components: [
					{name: 'marqueeContent3', mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for marquee content change test for syncronized case'},
					{name: 'marqueeContent4', mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is short text for marquee'},
					{name: 'marqueeContent5', mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', centered: true, content: 'This is centered text for marquee'}
				]},
				{tag: 'br'},

				{kind: Divider, content: 'Marquee speed:'},
				{name: 'marqueeSpeed', marqueeOnRender: true, marqueeSpeed: 180, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for fast marquee speed test which is twice faster then normal marquee'},
				{tag: 'br'},

				{kind: Divider, content: 'Marquee pause:'},
				{name: 'marqueePause1', marqueeOnRender: true, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for marquee which has 1000ms pause time'},
				{name: 'marqueePause2', marqueeOnRender: true, marqueePause: 2000, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for marquee which has 2000ms pause time'},
				{tag: 'br'},

				{kind: Divider, content: 'Disabled marquee:'},
				{name: 'marqueeDisabled', marqueeOnRender: true, disabled: true, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for disabled marquee test which is having disabled property'},
				{tag: 'br'},

				{kind: Divider, content: 'Disabled Wrap Instead Of Marquee:'},
				{name: 'marqueeDisabledWrap', wrapInsteadOfMarquee: true, disabled: true, mixins: [MarqueeSupport, MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'This is long text for disabled text which wraps because wrapInsteadOfMarquee is set to true'},
				{tag: 'br'},

				{kind: Divider, content: 'LTR Languages:'},
				{mixins: [MarqueeSupport], marqueeOnRender: true, components: [
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'The quick brown fox jumped over the lazy dog.  The bean bird flies at sundown.'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'Î Î³ÏÎ®Î³Î¿ÏÎ· ÎºÎ±ÏÎ­ Î±Î»ÎµÏÎ¿Ï ÏÎ®Î´Î·Î¾Îµ ÏÎ¬Î½Ï Î±ÏÏ ÏÎ¿ Î¼ÎµÏÎ·Î¼Î­ÏÎ¹. Î¤Î¿ ÏÎ¿ÏÎ»Î¯ ÏÎµÏÎ¬ ÏÎµ ÏÎ±ÏÎ¿Î»Î¹ÏÎ½ Î´ÏÏÎ· ÏÎ¿Ï Î·Î»Î¯Î¿Ï.'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'à¨¤à©à¨°à©°à¨¤ à¨­à©à¨°à¨¾ Fox à¨à¨²à¨¸à© à¨à©à©±à¨¤à© à¨¨à©à©° à¨µà©±à¨§ à¨à¨. à¨¬à©à¨¨ à¨ªà©°à¨à© à¨¸à©à¨°à¨ à¨¡à©à©±à¨¬à¨£ \'à¨¤à© à¨à¨¡à¨¾à¨£ à¨­à¨°à¨¦à© à¨¹à©.'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'éãè¶è²ã®ã­ããã¯ãæ ãèã®ç¬ãé£ã³è¶ãããè±ã®é³¥ã¯æ¥æ²¡ã§é£ã¶ã'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'é£åªææ·çæ£è²çç¸è·è¿é£åªæçãè±é¸é£æ¥è½ã'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'ë¹ ë¥¸ ê°ì ì¬ì°ê° ê²ì¼ë¥¸ ê°ë¥¼ ë°ì´ ëìë¤.ì½© ì¡°ë¥ ì¼ëª°ì íë¦¬.'}
				]},
				{tag: 'br'},

				{kind: Divider, content: 'RTL Languages:'},
				{mixins: [MarqueeSupport], marqueeOnRender: true, components: [
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: '×©××¢× ×××× ×××¨×× ×§×¤×¥ ××¢× ×××× ××¢×¦××.×¦××¤××¨ ×¢×¤× ××©×¢××¢××ª ×¢× ×©×§××¢×.'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'ÙÙØ² Ø§ÙØ«Ø¹ÙØ¨ Ø§ÙØ¨ÙÙ Ø§ÙØ³Ø±ÙØ¹ ÙÙÙ Ø§ÙÙÙØ¨ Ø§ÙÙØ³ÙÙ. Ø§ÙØ·ÙÙØ± ØªØ·ÙØ± ÙÙ Ø§ÙÙÙÙ Ø¹ÙØ¯ ØºØ±ÙØ¨ Ø§ÙØ´ÙØ³.'},
					{marqueeOnRender: true, mixins: [MarqueeItem], classes: 'moon-marquee-start-on-render', content: 'ÙÙØ±Û Ø¨Ú¾ÙØ±Û ÙÙÙÚÛ Ø³Ø³Øª Ú©ØªÛ Ù¾Ø± ÚÚ¾ÙØ§ÙÚ¯ ÙÚ¯Ø§. Ø¨ÛÙ Ù¾Ø±ÙØ¯ÙÚº Ø³ÙØ±ÛØ§Ø³Øª ÙÛÚº Ù¾Ø±ÙØ§Ø².'}
				]}
			]}
		]}
	],
	contentChange: function (sender, event) {
		this.$.marqueeContent1.setContent(sender.getValue());
		this.$.marqueeContent2.setContent(sender.getValue());
		this.$.marqueeContent3.setContent(sender.getValue());
	},
	start: function (sender, event) {
		this.$.marqueeContent1.startMarquee();
		this.$.marqueeContent2.startMarquee();
		this.$.marqueeContainer1.startMarquee();
	},
	stop: function (sender, event) {
		this.$.marqueeContent1.stopMarquee();
		this.$.marqueeContent2.stopMarquee();
		this.$.marqueeContainer1.stopMarquee();	
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Marquee":166,"../../../moonstone/lib/Scroller":180}],249:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Repeater = require('../../../enyo/lib/Repeater');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	ImageItem = require('../../../moonstone/lib/ImageItem'),
	ObjectActionDecorator = require('../../../moonstone/lib/ObjectActionDecorator'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ObjectActionHorizontalTypeSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	handlers: {
		ontap: 'ontap'
	},
	components: [
		{kind: Divider, content: 'Object Action: horizontal Type Sample'},
		{kind: Scroller, fit: true, components: [
			{kind: Repeater, count:20, onSetupItem: 'setupItem', components: [
				{kind: ObjectActionDecorator, orientation: 'horizontal', components: [
					{kind: ImageItem, source: 'assets/default-music.png'}
				], actionComponents: [
					{kind: IconButton, name: 'Icon1'},
					{kind: IconButton, name: 'Icon2'},
					{kind: IconButton, name: 'Icon3'}
				]}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', content: 'No item tapped yet.'}
	],
	setupItem: function (sender, event) {
		event.item.$.imageItem.setSource('http://placehold.it/200x300/' + Math.floor(Math.random()*0x1000000).toString(16) + '/ffffff&text=Image ' + event.index);
		event.item.$.imageItem.setText('Item ' + event.index + ': Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.');
	},
	ontap: function (sender, event) {
		this.$.result.setContent(event.originator.name + ' tapped.');
	}
});



},{"../../../enyo/lib/Repeater":58,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/ImageItem":157,"../../../moonstone/lib/ObjectActionDecorator":167,"../../../moonstone/lib/Scroller":180}],250:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils'),
	Repeater = require('../../../enyo/lib/Repeater');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	Item = require('../../../moonstone/lib/Item'),
	Button = require('../../../moonstone/lib/Button'),
	ObjectActionDecorator = require('../../../moonstone/lib/ObjectActionDecorator'),
	BodyText = require('../../../moonstone/lib/BodyText');

module.exports = kind({
	name: 'moon.sample.ObjectActionVerticalTypeSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	handlers: {
		ontap: 'ontap'
	},
	components: [
		{kind: Divider, content: 'Object Action: vertical Type Sample'},
		{kind: Scroller, fit: true, components: [
			{kind: Repeater, count: 20, classes: 'moon-hspacing', onSetupItem: 'setupItem', components: [
				{
					kind: ObjectActionDecorator,
					orientation: 'vertical',
					components: [
						{kind: Item, components: [
							{name: 'image', kind: 'enyo.Image'}
						]}
					],
					actionComponents: [
						{kind: Button, name: 'Play', small: true, content: 'PLAY'},
						{kind: Button, name: 'Favorite', small: true, content: 'FAVORITE'},
						{kind: Button, name: 'Share', small: true, content: 'SHARE'}
					]
				}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', content: 'No item tapped yet.'}
	],
	setupItem: function (sender, event) {
		var imageUrl = 'http://placehold.it/%./' + Math.floor(Math.random()*0x1000000).toString(16) + '/ffffff&text=Image ' + event.index;
		event.item.$.image.setSrc({
			'hd' : utils.format(imageUrl, '132x132'),
			'fhd': utils.format(imageUrl, '198x198')
		});
	},
	ontap: function (sender, event) {
		this.$.result.setContent(event.originator.name + ' tapped.');
	}
});



},{"../../../enyo/lib/Repeater":58,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/ObjectActionDecorator":167,"../../../moonstone/lib/Scroller":180}],258:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.Scroller2dSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components:[
		{
			kind: Scroller,
			classes: 'moon-scroller-sample-2d-scroller enyo-fill',
			components: [
				{style: 'width: 2300px; height: 1300px;', components: [
					{kind: Button, content: 'Button 1'},
					{kind: Button, content: 'Button 2'},
					{kind: Button, content: 'Button 3'},
					{kind: Button, content: 'Button 4'},
					{kind: Button, content: 'Button 5'},
					{kind: Button, content: 'Button 6'},
					{kind: Button, content: 'Button 7'},
					{kind: Button, content: 'Button 8'},
					{kind: Button, content: 'Button 9'},
					{kind: Button, content: 'Button 10'},
					{kind: Button, content: 'Button 11'},
					{kind: Button, content: 'Button 12'}
				]}
			]
		}
	]
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Scroller":180}],259:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Img = require('../../../enyo/lib/Image'),
	Repeater = require('../../../enyo/lib/Repeater');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Item = require('../../../moonstone/lib/Item'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ScrollerHorizontalSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Divider, content: 'Horizontal Scroller'},
		{kind: Scroller, vertical: 'hidden', spotlight: 'container', style: 'white-space: nowrap;', components: [
			{kind: Repeater, count: '50', components: [
				{kind: Item, classes: 'moon-scroller-sample-item enyo', style: 'display:inline-block;', components: [
					{kind: Img, src: 'images/enyo-icon.png'}
				]}
			]}
		]}
	]
});

},{"../../../enyo/lib/Image":41,"../../../enyo/lib/Repeater":58,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Scroller":180}],260:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableColumns = require('../../../layout/lib/FittableColumns');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Button = require('../../../moonstone/lib/Button'),
	Divider = require('../../../moonstone/lib/Divider'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Panel = require('../../../moonstone/lib/Panel'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.ScrollerTextSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Panel, classes: 'enyo-fit', title: 'Text Scrolling Sample', titleBelow: 'Scroller buttons are focusable', headerComponents: [
			{kind: IconButton}
		], components: [
			{kind: Divider, content: 'Terms of Service'},
			{kind: Scroller, fit:true, horizontal: 'hidden', style: 'margin-bottom:20px;', components: [
				{kind: BodyText, name: 'text'}
			]},
			{kind: FittableColumns, noStretch:true, components: [
				{fit:true, components: [
					{kind: ToggleButton, name: 'lengthToggle', content: 'Long Text', value:true},
					{kind: ToggleButton, name: 'spotToggle', content: 'Spot Paging Controls', value:false},
					{kind: ToggleButton, name: 'hideToggle', content: 'Hide Paging Controls when fit', value:false}
				]},
				{kind: Button, content: 'Sign me Up!'}
			]}
		]}
	],
	longText: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
	shortText: 'The quick brown fox jumped over the lazy dog.',
	bindings: [
		{from: '$.lengthToggle.value', to: '$.text.content', transform: function (val) { return val ? this.longText : this.shortText; } },
		{from: '$.spotToggle.value', to: '$.scroller.spotlightPagingControls' },
		{from: '$.hideToggle.value', to: '$.scroller.hideScrollColumnsWhenFit' }
	]
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableColumns":113,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],262:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	Divider = require('../../../moonstone/lib/Divider'),
	SelectableItem = require('../../../moonstone/lib/SelectableItem');

module.exports = kind({
	name: 'moon.sample.SelectableItemSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-hspacing', controlClasses: 'moon-5h', components: [
				{components: [
					{kind: Divider, content: 'Selectable Items'},
					{kind: SelectableItem, content: 'Option 1', selected: true, onActivate: 'itemChanged'},
					{kind: SelectableItem, content: 'Option 2', onActivate: 'itemChanged'},
					{kind: SelectableItem, disabled: true, content: 'Disabled', onActivate: 'itemChanged'},
					{kind: SelectableItem, content: 'Option 4', selected: true, onActivate: 'itemChanged'},
					{kind: SelectableItem, content: 'Option 5 is very very very long', onActivate: 'itemChanged'}
				]},
				{components: [
					{kind: Divider, content: 'Selectable Item Group'},
					{kind: Group, onActivate: 'groupChanged', components: [
						{kind: SelectableItem, content: 'Group Option 1'},
						{kind: SelectableItem, content: 'Group Option 2'},
						{kind: SelectableItem, disabled: true, content: 'Disabled'},
						{kind: SelectableItem, content: 'Group Option 4'},
						{kind: SelectableItem, content: 'Group Option 5', selected: true}
					]}
				]},
				{components: [
					{kind: Group, onActivate: 'groupChanged', components: [
						{kind: Divider, content: 'Selectable Items with long text truncation'},
						{kind: SelectableItem, content: 'Option 1 with long text truncation', onActivate: 'itemChanged'},
						{kind: SelectableItem, content: 'Option 2 with long text truncation', onActivate: 'itemChanged'},
						{kind: SelectableItem, disabled: true, content: 'Disabled', onActivate: 'itemChanged'},
						{kind: SelectableItem, content: 'Option 4 with long text truncation', selected: true, onActivate: 'itemChanged'},
						{kind: SelectableItem, content: 'Option 5 with long text truncation', onActivate: 'itemChanged'}
					]}
				]}
			]}
		]},
		{components: [
			{kind: Divider, content: 'Result'},
			{name: 'result', content: 'Nothing selected'}
		]}
	],
	itemChanged: function (sender, event) {
		if (!this.hasNode()) {
			return;
		}
		this.$.result.setContent(sender.getContent() + ' was ' + (sender.getActive() ? ' selected.' : 'deselected.'));
	},
	groupChanged: function (sender, event) {
		if (event.originator.getActive()) {
			var selected = event.originator.getContent();
			this.$.result.setContent(selected + ' was selected.');
		}
	}
});
},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SelectableItem":181}],264:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Button = require('../../../moonstone/lib/Button'),
	Divider = require('../../../moonstone/lib/Divider'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	SimplePicker = require('../../../moonstone/lib/SimplePicker');

module.exports = kind({
	name: 'moon.sample.SimplePickerSample',
	kind: FittableRows,
	classes: 'moon moon-sample-padded enyo-unselectable enyo-fit',
	components:[
		{kind: Scroller, fit: true, components: [
			{kind: Divider, content: 'Picker 1 & 2: Animated'},
			{kind: SimplePicker, name: 'picker1', onChange: 'changed', components: [
				{content: 'San Francisco Airport Terminal Gate 1', active: true},
				{content: 'Boston Airport Terminal Gate 2'},
				{content: 'Tokyo Airport Terminal Gate 3'},
				{content: '× ×× ××ª×¢××¤× ×× ×××¨××× ××¨××× × ×××× ×××××'}
			]},
			{kind: SimplePicker, name: 'picker2', onChange: 'changed', components: [
				{content: 'Level 1'},
				{content: 'Level 2', active: true},
				{content: 'Level 3'},
				{content: 'Level 4'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Picker 3: Non-animated'},
			{kind: SimplePicker, block: true, name: 'picker3', animate: false, onChange: 'changed', components: [
				{content: 'Hotmail'},
				{content: 'GMail'},
				{content: 'Yahoo Mail', active: true},
				{content: 'AOL Mail'},
				{content: 'Custom IMAP'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Picker 4: Wrapping'},
			{kind: SimplePicker, block: true, name: 'picker4', animate: false, wrap: true, onChange: 'changed', components: [
				{content: 'Mars'},
				{content: 'Venus'},
				{content: 'Earth'},
				{content: 'Mercury'},
				{content: 'Jupiter'},
				{content: 'Saturn'},
				{content: 'Uranus'},
				{content: 'Neptune'},
				{content: 'Pluto'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Picker 5: Disabled'},
			{kind: SimplePicker, block: true, name: 'picker5', disabled: true, components: [
				{content: 'Enyo'},
				{content: 'Sencha'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Picker 6: Hidden'},
			{kind: SimplePicker, name: 'picker6', onChange: 'changed', showing: false, components: [
				{content: 'San Francisco Airport Terminal Gate 1'},
				{content: 'Boston Airport Terminal Gate 2', active: true},
				{content: 'Tokyo Airport Terminal Gate 3'}
			]},
			{kind: Button, content: 'Toggle Showing', small: true, ontap: 'toggleShowing'}
		]},
		{classes: 'moon-1v'},
		{classes: 'moon-hspacing', components: [
			{components: [
				{kind: Divider, content: 'Modify picker: '},
				{kind: SimplePicker, name: 'which', components: [
					{content: '1'},
					{content: '2'},
					{content: '3'},
					{content: '4'},
					{content: '5'},
					{content: '6'}
				]}
			]},
			{components: [
				{kind: Divider, content: 'Add item: '},
				{classes: 'moon-hspacing', components: [
					{kind: InputDecorator, components: [
						{kind: Input, name: 'addInput', placeholder: 'content', classes: 'moon-2h'}
					]},
					{kind: Button, content: 'Add', small: true, ontap: 'addItem'}
				]}
			]},
			{components: [
				{kind: Divider, content: 'Set index: '},
				{classes: 'moon-hspacing', components: [
					{kind: InputDecorator, components: [
						{kind: Input, name: 'changeInput', placeholder: 'index', classes: 'moon-1h'}
					]},
					{kind: Button, content: 'Go', small: true, ontap: 'changeItem'}
				]}
			]},
			{components: [
				{kind: Divider, content: 'Delete current item: '},
				{kind: Button, content: 'Delete', small: true, ontap: 'destroyItem'}
			]}
		]},
		{components: [
			{kind: Divider, content: 'Result'},
			{kind: BodyText, name: 'result', content: 'No change yet'}
		]}
	],
	toggleShowing: function () {
		this.$.picker6.setShowing(!this.$.picker6.showing);
	},
	changed: function (sender, event) {
		this.$.result.setContent(sender.name + ' changed to ' + event.content + ' (' + event.index + ')');
	},
	changeItem: function (sender, event) {
		var picker = this.$['picker' + (this.$.which.getSelectedIndex()+1)];
		var val = parseInt(this.$.changeInput.getValue(),10);
		var len = picker.getClientControls().length - 1;
		if (isNaN(val) || val < 0 || val > len) {
			this.$.result.setContent(picker.name + ' value must be an integer between 0-' + len);
		} else {
			picker.setSelectedIndex(val);
		}
	},
	addItem: function (sender, event) {
		if (!this.$.addInput.getValue()) {
			this.$.result.setContent('Please insert content value.');
			return;
		}
		var picker = this.$['picker' + (this.$.which.getSelectedIndex()+1)];
		picker.createComponent({content:this.$.addInput.getValue()}).render();
		this.$.result.setContent('\'' + this.$.addInput.getValue() + '\' is added to ' + picker.name);
	},
	destroyItem: function (sender, event) {
		var picker = this.$['picker' + (this.$.which.getSelectedIndex()+1)];
		var sel = picker.getSelected();
		if (sel) {
			sel.destroy();
		}
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SimplePicker":184}],265:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Button = require('../../../moonstone/lib/Button'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	Divider = require('../../../moonstone/lib/Divider'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	Slider = require('../../../moonstone/lib/Slider');

module.exports = kind({
	kind: FittableRows,
	name: 'moon.sample.SliderSample',
	classes: 'moon enyo-unselectable enyo-fit',
	bindings: [
		{from: '.$.slider1.value', to: '.$.slider2.value'},
		{from: '.$.slider1.bgProgress', to: '.$.slider2.bgProgress'}
	],
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Slider 1: Default'},
			{name: 'slider1', kind: Slider, showPercentage: false, value: 25, bgProgress: 35, onChanging: 'sliderChanging', onChange: 'sliderChanged'},

			{kind: Divider, content: 'Slider 2: Disabled, Bound to Slider 1'},
			{name: 'slider2', kind: Slider, disabled: true},

			{kind: Divider, content: 'Slider 3: Custom Popup Content'},
			{name: 'slider3', kind: Slider, classes: 'rgb-sample-slider',
				popupColor: 'rgb(0, 0, 25)', value: 25, bgProgress: 150, min: 0, max: 255,
				onChanging: 'customChanging', onChange: 'customChanged', onAnimateFinish: 'customAnimateFinish'
			},

			{kind: Divider, content: 'Slider 4: Negative Values'},
			{name: 'slider4', kind: Slider,
				value: 0, min: -100, max: 100, showPercentage: false, onChanging: 'sliderChanging', onChange: 'sliderChanged'
			},

			{kind: Divider, content: 'Change Value'},
			{classes: 'moon-hspacing', components: [
				{kind: InputDecorator, components: [
					{name: 'valueInput', kind: Input, placeholder: 'Value', classes: 'moon-1h', value: 20}
				]},
				{kind: Button, small:true, content: 'Set', ontap: 'changeValue'},
				{kind: Button, small:true, content: '-', ontap: 'decValue'},
				{kind: Button, small:true, content: '+', ontap: 'incValue'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Change Background Progress'},
			{classes: 'moon-hspacing', components: [
				{kind: InputDecorator, components: [
					{name: 'progressInput', kind: Input, placeholder: 'Progress', classes: 'moon-1h', value: 30}
				]},
				{kind: Button, small:true, content: 'Set', ontap: 'changeProgress'},
				{kind: Button, small:true, content: '-', ontap: 'decProgress'},
				{kind: Button, small:true, content: '+', ontap: 'incProgress'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Change Increment (applies only to dragging, 0 for disable)'},
			{classes: 'moon-hspacing', components: [
				{kind: InputDecorator, components: [
					{name: 'incrementInput', kind: Input, placeholder: 'Increment', classes: 'moon-1h', value: 0}
				]},
				{kind: Button, small:true, content: 'Set', ontap: 'changeIncrement'}
			]},
			{classes: 'moon-1v'},

			{kind: Divider, content: 'Options'},
			{classes: 'moon-8h', defaultKind: CheckboxItem, components: [
				{name: 'lockBarSetting',        checked: true,     content: 'Lock Bar to Knob', onchange: 'changeLockbar'},
				{name: 'animateSetting',        checked: true,     content: 'Animated',        onchange: 'animateActivate'},
				{name: 'noPopupSetting',        checked: false,    content: 'Hide Popup',      onchange: 'changeStatusBubble'},
				{name: 'tapableSetting',        checked: true,     content: 'Tapable',         onchange: 'changeTapable'},
				{name: 'constrainSetting',      checked: false,    content: 'Constrain to Background Progress', onchange: 'changeConstrain'},
				{name: 'elasticSetting',        checked: false,    content: 'Elastic Effect',  onchange: 'changeElastic'},
				{name: 'showPercentageSetting', checked: false,    content: 'Show Percentage', onchange: 'changePercentage'}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{name: 'result', content: 'No slider moved yet.'}
	],
	create: function () {
		FittableRows.prototype.create.apply(this, arguments);
		this.changeLockbar();
		this.animateActivate();
		this.changeStatusBubble();
		this.changeTapable();
		this.changeConstrain();
		this.changeElastic();
	},
	rendered: function () {
		FittableRows.prototype.rendered.apply(this, arguments);
		this.updateSlider3Popup(this.$.slider3.getValue());
	},
	//* @protected
	changeValue: function (sender, event) {
		var v = this.$.valueInput.getValue();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setValue(v);
			}
		}
	},
	incValue: function () {
		this.$.valueInput.setValue(Math.min(parseInt(this.$.valueInput.getValue() || 0, 10) + 10, 100));
		this.changeValue();
	},
	decValue: function () {
		this.$.valueInput.setValue(Math.max(parseInt(this.$.valueInput.getValue() || 0, 10) - 10, 0));
		this.changeValue();
	},
	changeProgress: function (sender, event) {
		var v = parseInt(this.$.progressInput.getValue(), 10);

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setBgProgress(v);
			}
		}
	},
	changeIncrement: function (sender, event) {
		var v = parseInt(this.$.incrementInput.getValue(), 10);

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setIncrement(v);
			}
		}
	},
	incProgress: function () {
		this.$.progressInput.setValue(Math.min(parseInt(this.$.progressInput.getValue() || 0, 10) + 10, 100));
		this.changeProgress();
	},
	decProgress: function () {
		this.$.progressInput.setValue(Math.max(parseInt(this.$.progressInput.getValue() || 0, 10) - 10, 0));
		this.changeProgress();
	},
	sliderChanging: function (sender, event) {
		this.$.result.setContent(sender.name + ' changing: ' + Math.round(event.value));
	},
	sliderChanged: function (sender, event) {
		this.$.result.setContent(sender.name + ' changed to ' + Math.round(sender.getValue()) + '.');
	},
	customChanging: function (sender, event) {
		this.updateSlider3Popup(event.value);
		this.sliderChanging(sender, event);
	},
	customChanged: function (sender, event) {
		this.updateSlider3Popup(sender.getValue());
		this.sliderChanged(sender, event);
	},
	customAnimateFinish: function (sender, event) {
		this.updateSlider3Popup(event.value);
	},
	updateSlider3Popup: function (inValue) {
		var color = 'rgb(0, 0, ' + Math.round(inValue) + ')';
		this.$.slider3.setPopupContent(color);
		this.$.slider3.setPopupColor(color);
	},
	changeLockbar: function (sender, event) {
		var ck = this.$.lockBarSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setLockBar(ck);
			}
		}
		return true;
	},
	animateActivate: function (sender, event) {
		var ck = this.$.animateSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setAnimate(ck);
			}
		}
		return true;
	},
	changeStatusBubble: function (sender, event) {
		var ck = this.$.noPopupSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setNoPopup(ck);
			}
		}
		return true;
	},
	changeTapable: function (sender, event) {
		var ck = this.$.tapableSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setTappable(ck);
			}
		}
		return true;
	},
	changeConstrain: function (sender, event) {
		var ck = this.$.constrainSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setConstrainToBgProgress(ck);
			}
		}
		return true;
	},
	changeElastic: function (sender, event) {
		var ck = this.$.elasticSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setElasticEffect(ck);
			}
		}
		return true;
	},
	changePercentage: function (sender, event) {
		var ck = this.$.showPercentageSetting.getChecked();

		for (var i in this.$) {
			if (this.$[i].kind == Slider) {
				this.$[i].setShowPercentage(ck);
			}
		}
		return true;
	}
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/Slider":185}],266:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Icon = require('../../../moonstone/lib/Icon'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	Spinner = require('../../../moonstone/lib/Spinner');

module.exports = kind({
	name: 'moon.sample.SpinnerSample',
	classes: 'moon enyo-unselectable enyo-fit',
	kind: Scroller,
	components: [
		{kind: Divider, content: 'Spinner'},
		{kind: Spinner},
		{kind: Divider, content: 'Spinner with Content'},
		{kind: Spinner, content: 'Loading...'},
		{kind: Divider, content: 'Spinner Centered in its Container'},
		{style: 'text-align: center', components: [
			{kind: Spinner, content: 'Loading...'}
		]},
		{kind: Divider, content: 'Spinner Centered Horizontally and Vertically in its Container'},
		{classes: 'absolute-container', components: [
			{kind: Spinner, content: 'Loading...', center: true}
		]},
		{classes: 'moon-1v'},
		{kind: Divider, content: 'Spinner Only Centered Horizontally in its Container'},
		{classes: 'absolute-container', components: [
			{kind: Spinner, content: 'Loading...', center: true, middle: false}
		]},
		{classes: 'moon-1v'},
		{kind: Divider, content: 'Spinner with Looooong Content'},
		{kind: Spinner, content: 'Loading so much content... This might take some arbitrary amount of time. Could be long, could be short. Who knows?'},
		{kind: Divider, content: 'Spinner with Components Inside'},
		{kind: Spinner, components: [
			{kind: Icon, icon: 'fullscreen'},
			{content: 'Fullscreen mode is loading'},
			{kind: Icon, icon: 'exitfullscreen'}
		]}
	]
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Icon":153,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/Spinner":186}],269:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	CaptionDecorator = require('../../../moonstone/lib/CaptionDecorator'),
	Divider = require('../../../moonstone/lib/Divider'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.ToggleButtonSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-toggle-button-sample-wrapper', components: [
				{kind: Divider, content: 'Toggle Buttons: '},
				{kind: ToggleButton, toggleOnLabel: 'wifi is on', toggleOffLabel: 'wifi is off', ontap: 'buttonTapped'},
				{kind: ToggleButton, uppercase: false, toggleOnLabel: 'Internet connected', toggleOffLabel: 'Internet disconnected', ontap: 'buttonTapped'},
				{kind: ToggleButton, disabled: true, toggleOnLabel: 'Disabled Active Button', toggleOffLabel: 'Disabled Inactive Button', ontap: 'buttonTapped'},
				{kind: ToggleButton, disabled: true, value: true, content: 'Disabled Active Button', ontap: 'buttonTapped'},
				{kind: ToggleButton, content: 'Set-top box', ontap: 'buttonTapped'},
				{kind: ToggleButton, small: true, content: 'Small Toggle', ontap: 'buttonTapped'},
				{kind: ToggleButton, small: true, disabled: true, toggleOnLabel: 'Small Disabled Active Button', toggleOffLabel: 'Small Disabled Inactive Button', ontap: 'buttonTapped'},
				{classes: 'moon-1v'},
				{kind: Divider, content: 'Toggle Buttons are set on programmically by default: '},
				{kind: ToggleButton, value: true, toggleOnLabel: 'English', toggleOffLabel: 'Spanish', ontap: 'buttonTapped'},
				{kind: ToggleButton, value: true, content: 'Notifications', ontap: 'buttonTapped'},
				{kind: ToggleButton, small: true, value: true, content: 'Small Button', ontap: 'buttonTapped'},
				{classes: 'moon-1v'},
				{kind: Divider, content: 'Captioned Buttons: '},
				{kind: CaptionDecorator, side: 'top', content: 'Pow', components: [
					{kind: ToggleButton, toggleOnLabel: 'is A', toggleOffLabel: 'not A', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'right', content: 'Boom', components: [
					{kind: ToggleButton, toggleOnLabel: 'is B', toggleOffLabel: 'not B', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'bottom', content: 'Crash', components: [
					{kind: ToggleButton, toggleOnLabel: 'is C', toggleOffLabel: 'not C', ontap: 'buttonTapped'}
				]},
				{kind: CaptionDecorator, side: 'left', content: 'Bang', components: [
					{kind: ToggleButton, toggleOnLabel: 'is D', toggleOffLabel: 'not D', ontap: 'buttonTapped'}
				]},
				{classes: 'moon-1v'},
				{kind: Divider, content: 'Grouped Buttons: '},
				{kind: Group, classes: 'moon-toggle-button-sample-group', components: [
					{kind: ToggleButton, content: 'Apple', ontap: 'buttonTapped'},
					{kind: ToggleButton, toggleOnLabel: 'Ripened Banana', toggleOffLabel: 'Raw Banana', value: true, ontap: 'buttonTapped'},
					{kind: ToggleButton, toggleOnLabel: 'Sweet Saskatoonberry', toggleOffLabel: 'Bitter Saskatoonberry', ontap: 'buttonTapped'},
					{kind: ToggleButton, small: true, toggleOnLabel: 'Blue Blueberry', toggleOffLabel: 'Red Raspberry', ontap: 'buttonTapped'}
				]}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'notice', content: 'No action yet.'}
	],
	buttonTapped: function (sender, event) {
		var labeltext = sender.get('uppercase') ? utils.toUpperCase(sender.getContent()) : sender.getContent();
		var postString = sender.value ? ' is selected' : ' is unselected';
		if (!sender.toggleOnLabel || !sender.toggleOffLabel) {
			labeltext='\''+labeltext+'\'' + postString;
		} else {
			labeltext='\''+labeltext+'\' selected.';
		}
		this.$.notice.setContent(labeltext);
	}
});

},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/CaptionDecorator":125,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],270:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem');

module.exports = kind({
	name: 'moon.sample.ToggleItemSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-hspacing', controlClasses: 'moon-5h', components: [
				{components: [
					{kind: Divider, content: 'Toggle Items'},
					{kind: ToggleItem, content: 'Option 1', checked: true, onchange: 'itemChanged'},
					{kind: ToggleItem, content: 'Option 2', onchange: 'itemChanged'},
					{kind: ToggleItem, disabled: true, content: 'Disabled', onchange: 'itemChanged'},
					{kind: ToggleItem, disabled: true, checked: true, content: 'Disabled Checked'},
					{kind: ToggleItem, content: 'Option 4', checked: true, onchange: 'itemChanged'},
					{kind: ToggleItem, content: 'This is a verrry long option 5', onchange: 'itemChanged'}
				]},
				{components: [
					{kind: Divider, content: 'Toggle Item Group'},
					{kind: Group, onActivate: 'groupChanged', components: [
						{kind: ToggleItem, content: 'Group Option 1'},
						{kind: ToggleItem, content: 'Group Option 2', checked: true},
						{kind: ToggleItem, disabled: true, content: 'Disabled'},
						{kind: ToggleItem, content: 'Group Option 4'},
						{kind: ToggleItem, content: 'Group Option 5'}
					]}
				]}
			]}
		]},
		{components: [
			{kind: Divider, content: 'Result'},
			{kind: BodyText, name: 'result', content: 'Nothing selected'}
		]}
	],
	itemChanged: function (sender, event) {
		this.$.result.setContent(sender.getContent() + ' is ' + (sender.getChecked() ? ' selected.' : 'deselected.'));
	},
	groupChanged: function (sender, event) {
		if (event.toggledControl.getChecked()) {
			var selected = event.toggledControl.getContent();
			this.$.result.setContent(selected + ' is selected.');
		}
	}
});
},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleItem":192}],207:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Item = require('../../../moonstone/lib/Item'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.ActivityPanelsSample',
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
		{name: 'panels', kind: Panels, pattern: 'activity', classes: 'enyo-fit', style: 'z-index: 1000;', brandingSrc: 'assets/default-movie.png', components: [
			{title: 'First Panel', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', headerComponents: [
				{kind: ToggleButton, small:true, content:'Medium', name:'mediumHeaderToggle', ontap: 'typeTapped'},
				{kind: ToggleButton, small:true, content:'Small', name:'smallHeaderToggle', ontap: 'typeTapped'}
			], components: [
				{kind: Scroller, fit:true, components: [
					{kind: Item, content: 'Item One', ontap: 'next1'},
					{kind: Item, content: 'Item Two', ontap: 'next1'},
					{kind: Item, content: 'Item Three', ontap: 'next1'},
					{kind: Item, content: 'Item Four', ontap: 'next1'},
					{kind: Item, content: 'Item Five', ontap: 'next1'},
					{kind: Item, content: 'Item Six', ontap: 'next1'},
					{kind: Item, content: 'Item Seven', ontap: 'next1'},
					{kind: Item, content: 'Item Eight', ontap: 'next1'},
					{kind: Item, content: 'Item Nine', ontap: 'next1'},
					{kind: Item, content: 'Item Eleven', ontap: 'next1'},
					{kind: Item, content: 'Item Twelve', ontap: 'next1'},
					{kind: Item, content: 'Item Thirteen', ontap: 'next1'},
					{kind: Item, content: 'Item Fourteen', ontap: 'next1'},
					{kind: Item, content: 'Item Fifteen', ontap: 'next1'},
					{kind: Item, content: 'Item Sixteen', ontap: 'next1'},
					{kind: Item, content: 'Item Seventeen', ontap: 'next1'},
					{kind: Item, content: 'Item Eighteen', ontap: 'next1'},
					{kind: Item, content: 'Item Nineteen', ontap: 'next1'},
					{kind: Item, content: 'Item Twenty', ontap: 'next1'}
				]}
			]},
			{title: 'Second Panel', defaultSpotlightControl: 'defaultControl', classes: 'moon-7h', joinToPrev: true, components: [
				{kind: Item, content: 'Item One', ontap: 'next2'},
				{kind: Item, content: 'Item Two', ontap: 'next2'},
				{name: 'defaultControl', kind: Item, content: 'Item Three (default focus for panel)', ontap: 'next2'},
				{kind: Item, content: 'Item Four', ontap: 'next2'},
				{kind: Item, content: 'Item Five', ontap: 'next2'}
			]},
			{title: 'Third Panel', classes: 'moon-7h', titleBelow:'Type \'go\' to transition', headerOptions: {inputMode:true}, onInputHeaderChange:'inputChanged', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next3'},
				{kind: Item, content: 'Item Two', ontap: 'next3'},
				{kind: Item, content: 'Item Three', ontap: 'next3'},
				{kind: Item, content: 'Item Four', ontap: 'next3'},
				{kind: Item, content: 'Item Five', ontap: 'next3'}
			]},
			{title: 'Fourth', classes: 'moon-7h', joinToPrev: true, titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next4'},
				{kind: Item, content: 'Item Two', ontap: 'next4'},
				{kind: Item, content: 'Item Three', ontap: 'next4'},
				{kind: Item, content: 'Item Four', ontap: 'next4'},
				{kind: Item, content: 'Item Five', ontap: 'next4'}
			]},
			{title: 'Fifth', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next5'},
				{kind: Item, content: 'Item Two', ontap: 'next5'},
				{kind: Item, content: 'Item Three', ontap: 'next5'},
				{kind: Item, content: 'Item Four', ontap: 'next5'},
				{kind: Item, content: 'Item Five', ontap: 'next5'}
			]},
			{title: 'Sixth Panel with a very long title', classes: 'moon-7h', joinToPrev: true, titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next6'},
				{kind: Item, content: 'Item Two', ontap: 'next6'},
				{kind: Item, content: 'Item Three', ontap: 'next6'},
				{kind: Item, content: 'Item Four', ontap: 'next6'},
				{kind: Item, content: 'Item Five', ontap: 'next6'}
			]},
			{title: 'Seventh', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One'},
				{kind: Item, content: 'Item Two'},
				{kind: Item, content: 'Item Three'},
				{kind: Item, content: 'Item Four'},
				{kind: Item, content: 'Item Five'}
			]}
		]}
	],
	// custom next handler for each panel to avoid switching from one active panel
	// to another with no visible change for demo
	next1: function(inSender, inEvent) {
		this.$.panels.setIndex(2);
		return true;
	},
	next2: function(inSender, inEvent) {
		this.$.panels.setIndex(2);
		return true;
	},
	next3: function(inSender, inEvent) {
		this.$.panels.setIndex(5);
		return true;
	},
	next4: function(inSender, inEvent) {
		this.$.panels.setIndex(5);
		return true;
	},
	next5: function(inSender, inEvent) {
		this.$.panels.setIndex(7);
		return true;
	},
	next6: function(inSender, inEvent) {
		this.$.panels.setIndex(7);
		return true;
	},
	inputChanged: function(inSender, inEvent) {
		if (inEvent.originator.getValue() == 'go') {
			this.next3();
		}
	},
	typeTapped: function(inSender, inEvent) {
		var i,
			val = inSender.get('value'),
			buttonType = inSender.content.toLowerCase(),
			types = ['large', 'medium', 'small'];

		// If our button was `true`, use that type, otherwise revert to large.
		this.$.panel.set('headerType', val ? buttonType.toLowerCase() : types[0]);
		// Unset all other buttons
		for (i = 0; i < types.length; i++) {
			if (buttonType != types[i] && this.$[types[i] + 'HeaderToggle']) {
				this.$[types[i] + 'HeaderToggle'].set('value', false);
			}
		}
	}
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],208:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Spotlight = require('../../../spotlight');

var
	ChannelInfo = require('../../../moonstone/lib/ChannelInfo'),
	Clock = require('../../../moonstone/lib/Clock'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Item = require('../../../moonstone/lib/Item'),
	Panels = require('../../../moonstone/lib/Panels'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem'),
	VideoInfoBackground = require('../../../moonstone/lib/VideoInfoBackground'),
	VideoInfoHeader = require('../../../moonstone/lib/VideoInfoHeader'),
	VideoPlayer = require('../../../moonstone/lib/VideoPlayer');

module.exports = kind({
	name: 'moon.sample.ActivityPanelsWithVideoSample',
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
        {name: 'player', kind: VideoPlayer, src: 'http://media.w3.org/2010/05/bunny/movie.mp4', poster: 'assets/video-poster.png', autoplay: true, showing: false, infoComponents: [
			{kind: VideoInfoBackground, orient: 'left', background: true, fit: true, components: [
				{
					kind: ChannelInfo,
					channelNo: '13',
					channelName: 'AMC',
					classes: 'moon-2h', 
					components: [
						{content: '3D'},
						{content: 'Live'},
						{content: 'REC 08:22', classes: 'moon-video-player-info-redicon '}
					]
				},
				{
					kind: VideoInfoHeader,
					title: 'Downton Abbey - Extra Title',
					subTitle: 'Mon June 21, 7:00 - 8:00pm',
					subSubTitle: 'R - TV 14, V, L, SC',
					description: 'The series, set in the Youkshire country estate of Downton Abbey, depicts the lives of the aristocratic Crawley famiry and'
				}
			]},
			{kind: VideoInfoBackground, orient: 'right', background: true, components: [
				{kind: Clock}
			]}
		], components: [
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'}
		]},
		{name: 'panels', kind: Panels, pattern: 'activity', classes: 'enyo-fit', useHandle: true, onShowingChanged: 'panelsShowingChanged', components: [
			{title: 'First Panel', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next1'},
				{kind: Item, content: 'Item Two', ontap: 'next1'},
				{kind: Item, content: 'Item Three', ontap: 'next1'},
				{kind: Item, content: 'Item Four', ontap: 'next1'},
				{kind: ToggleItem, content: 'Show/Hide Side Handle', checked: true,  onchange: 'handleShowingChanged'}
			]},
			{title: 'Second Panel', classes: 'moon-7h',
				joinToPrev: true, components: [
				{kind: Item, content: 'Item One', ontap: 'next2'},
				{kind: Item, content: 'Item Two', ontap: 'next2'},
				{kind: Item, content: 'Item Three', ontap: 'next2'},
				{kind: Item, content: 'Item Four', ontap: 'next2'},
				{kind: Item, content: 'Item Five', ontap: 'next2'}
			]},
			{title: 'Third Panel', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next3'},
				{kind: Item, content: 'Item Two', ontap: 'next3'},
				{kind: Item, content: 'Item Three', ontap: 'next3'},
				{kind: Item, content: 'Item Four', ontap: 'next3'},
				{kind: Item, content: 'Item Five', ontap: 'next3'}
			]},
			{title: 'Fourth', classes: 'moon-7h', joinToPrev: true, titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next4'},
				{kind: Item, content: 'Item Two', ontap: 'next4'},
				{kind: Item, content: 'Item Three', ontap: 'next4'},
				{kind: Item, content: 'Item Four', ontap: 'next4'},
				{kind: Item, content: 'Item Five', ontap: 'next4'}
			]},
			{title: 'Fifth', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next5'},
				{kind: Item, content: 'Item Two', ontap: 'next5'},
				{kind: Item, content: 'Item Three', ontap: 'next5'},
				{kind: Item, content: 'Item Four', ontap: 'next5'},
				{kind: Item, content: 'Item Five', ontap: 'next5'}
			]},
			{title: 'Sixth', classes: 'moon-7h', joinToPrev: true, titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One', ontap: 'next6'},
				{kind: Item, content: 'Item Two', ontap: 'next6'},
				{kind: Item, content: 'Item Three', ontap: 'next6'},
				{kind: Item, content: 'Item Four', ontap: 'next6'},
				{kind: Item, content: 'Item Five', ontap: 'next6'}
			]},
			{title: 'Seventh', classes: 'moon-7h', titleBelow:'Sub-title', subTitleBelow:'Sub-sub title', components: [
				{kind: Item, content: 'Item One'},
				{kind: Item, content: 'Item Two'},
				{kind: Item, content: 'Item Three'},
				{kind: Item, content: 'Item Four'},
				{kind: Item, content: 'Item Five'}
			]}
		]}
	],
	rendered: function() {
		this.inherited(arguments);
		Spotlight.spot(this.$.panels);
	},
	// custom next handler for each panel to avoid switching from one active panel
	// to another with no visible change for demo
	next1: function(inSender, inEvent) {
		this.$.panels.setIndex(2);
		return true;
	},
	next2: function(inSender, inEvent) {
		this.$.panels.setIndex(2);
		return true;
	},
	next3: function(inSender, inEvent) {
		this.$.panels.setIndex(5);
		return true;
	},
	next4: function(inSender, inEvent) {
		this.$.panels.setIndex(5);
		return true;
	},
	next5: function(inSender, inEvent) {
		this.$.panels.setIndex(7);
		return true;
	},
	next6: function(inSender, inEvent) {
		this.$.panels.setIndex(7);
		return true;
	},
	handleShowingChanged: function(inSender, inEvent) {
		this.$.panels.setHandleShowing(inSender.getChecked());
	},
	panelsShowingChanged: function (sender, event) {
		// Hiding the VideoPlayer when it would be obscured by the Panels avoids UI performance
		// issues caused by the GPU being occupied rendering video frames that aren't visible.
		this.$.player.set('showing', !event.showing);
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/ChannelInfo":126,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/ToggleItem":192,"../../../moonstone/lib/VideoInfoBackground":198,"../../../moonstone/lib/VideoInfoHeader":199,"../../../moonstone/lib/VideoPlayer":200,"../../../spotlight":275}],210:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	IconButton = require('../../../moonstone/lib/IconButton'),
	Item = require('../../../moonstone/lib/Item'),
	Panels = require('../../../moonstone/lib/Panels'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator');

module.exports = kind({
	name: 'moon.sample.AlwaysViewingPanelsSample',
	classes: 'moon enyo-fit enyo-unselectable',
	style: 'background: gray url(\'http://lorempixel.com/1920/1080/\')',
	components: [
		{name: 'panels', kind: Panels, pattern: 'alwaysviewing', classes: 'enyo-fit', useHandle: false, components: [
			{title: 'First Panel', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Second Panel', titleBelow: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', subTitleBelow: 'Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.', headerComponents: [
				{kind: TooltipDecorator, components: [
					{kind: Tooltip, content: 'Tooltip', position: 'above'},
					{kind: IconButton}
				]}
			], components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Third Panel', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Fourth', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Fifth', joinToPrev: true, titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Sixth', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Seventh', joinToPrev: true, titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One'},
				{kind: Item, content: 'Item Two'},
				{kind: Item, content: 'Item Three'},
				{kind: Item, content: 'Item Four'},
				{kind: Item, content: 'Item Five'}
			]}
		]}
	],
	next: function(inSender, inEvent) {
		this.$.panels.next();
		return true;
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195}],211:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	ChannelInfo = require('../../../moonstone/lib/ChannelInfo'),
	Clock = require('../../../moonstone/lib/Clock'),
	ContextualPopup = require('../../../moonstone/lib/ContextualPopup'),
	ContextualPopupDecorator = require('../../../moonstone/lib/ContextualPopupDecorator'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Item = require('../../../moonstone/lib/Item'),
	Panels = require('../../../moonstone/lib/Panels'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator'),
	VideoInfoBackground = require('../../../moonstone/lib/VideoInfoBackground'),
	VideoInfoHeader = require('../../../moonstone/lib/VideoInfoHeader'),
	VideoPlayer = require('../../../moonstone/lib/VideoPlayer');

module.exports = kind({
    name: 'moon.sample.AlwaysViewingPanelsWithVideoSample',
    classes: 'moon enyo-fit enyo-unselectable',
    components: [
        {name: 'player', kind: VideoPlayer, src: 'http://media.w3.org/2010/05/bunny/movie.mp4', poster: '$lib/moonstone/samples/assets/video-poster.png', autoplay: true, infoComponents: [
			{kind: VideoInfoBackground, orient: 'left', background: true, fit: true, components: [
				{
					kind: ChannelInfo,
					channelNo: '13',
					channelName: 'AMC',
					classes: 'moon-2h', 
					components: [
						{content: '3D'},
						{content: 'Live'},
						{content: 'REC 08:22', classes: 'moon-video-player-info-redicon '}
					]
				},
				{
					kind: VideoInfoHeader,
					title: 'Downton Abbey - Extra Title',
					subTitle: 'Mon June 21, 7:00 - 8:00pm',
					subSubTitle: 'R - TV 14, V, L, SC',
					description: 'The series, set in the Youkshire country estate of Downton Abbey, depicts the lives of the aristocratic Crawley famiry and'
				}
			]},
			{kind: VideoInfoBackground, orient: 'right', background: true, components: [
				{kind: Clock}
			]}
		], components: [
			{kind: IconButton, src: '$lib/moonstone/images/video-player/icon-placeholder.png'},
			{kind: TooltipDecorator, components: [
				{kind: ContextualPopupDecorator, components: [
					{kind: Button, content: 'Popup'},
					{
						kind: ContextualPopup,
						classes: 'moon-3h moon-6v',
						components: [
							{kind: Item, content: 'Item 1'},
							{kind: Item, content: 'Item 2'},
							{kind: Item, content: 'Item 3'}
						]
					}
				]},
				{kind: Tooltip, floating:true, content: 'I\'m a tooltip for a button.'}
			]},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
			{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'}
		]},
        {name: 'panels', kind: Panels, pattern: 'alwaysviewing', classes: 'enyo-fit', showing: false, components: [
            {title: 'First Panel', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: ToggleItem, content: 'Show/Hide Side Handle', checked: true,  onchange: 'handleShowingChanged'}
			]},
			{title: 'Second Panel', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
            {title: 'Third Panel', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
            {title: 'Fourth', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
            {title: 'Fifth', joinToPrev: true, titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
            {title: 'Sixth', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
            {title: 'Seventh', joinToPrev: true, titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', classes: 'moon-7h', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]}
		]}
	],
	next: function(inSender, inEvent) {
		this.$.panels.next();
		return true;
	},
	handleShowingChanged: function(inSender, inEvent) {
		this.$.panels.setHandleShowing(inSender.getChecked());
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/ChannelInfo":126,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/ContextualPopup":130,"../../../moonstone/lib/ContextualPopupDecorator":132,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/ToggleItem":192,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195,"../../../moonstone/lib/VideoInfoBackground":198,"../../../moonstone/lib/VideoInfoHeader":199,"../../../moonstone/lib/VideoPlayer":200}],223:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	Drawers = require('../../../moonstone/lib/Drawers'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	Item = require('../../../moonstone/lib/Item'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moons.sample.DrawerSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{
			name: 'drawers',
			kind: Drawers,
			drawers: [
				{
					name: 'partialDrawer',
					open: false,
					controlsOpen: false,
					onActivate: 'partialDrawerChanged',
					onDeactivate: 'partialDrawerChanged',
					handle: {name: 'handleButton', content: 'Partial drawer with long text truncation'},
					components: [
						{kind: Panel, classes: 'enyo-fit', title: 'Partial Drawer', components: [
							{kind: Item, content: 'Item One'},
							{kind: Item, content: 'Item Two'}
						]}
					],
					controlDrawerComponents: [
						{classes: 'moon-hspacing', components: [
							{kind: Button, name: 'openMoreButton', content: 'Open More', ontap: 'openMainDrawer'},
							{kind: Button, content: 'Close', ontap: 'close'}
						]}
					]
				},
				{
					name: 'searchDrawer',
					handle: {content: 'Full drawer'},
					components: [
						{kind: Panel, classes: 'enyo-fit', title: 'Full Drawer', components: [
							{kind: Item, content: 'Item One'},
							{kind: Item, content: 'Item Two'}
						]}
					]
				}
			],
			components: [
				{
					name: 'panels',
					kind: Panels,
					pattern: 'activity',
					classes: 'enyo-fit',
					components: [
						{title: 'First Panel', classes: 'moon-7h', components: [
							{kind: Scroller, horizontal: 'hidden', classes: 'enyo-fill', components: [
								{kind: ExpandablePicker, onChange: 'pickerChangedImg', content: 'Select Image', components: [
									{content: 'Music',value: 'assets/drawer_icon.png'},
									{content: 'LG', value: 'assets/lg.png'},
									{content: 'HTML5', value: 'assets/html5.png'},
									{content: 'CSS3', value: 'assets/css3.png'},
									{content: 'Default', value: '', active: true}
								]},
								{kind: ExpandablePicker, onChange: 'pickerChangedIcon', content: 'Select Icon', components: [
									{content: 'Drawer', value: 'drawer'},
									{content: 'FullScreen', value: 'fullscreen'},
									{content: 'Circle', value: 'circle'},
									{content: 'Stop', value: 'stop'},
									{content: 'Play', value: 'play'},
									{content: 'Pause', value: 'pause'},
									{content: 'Forward', value: 'forward'},
									{content: 'Default', value: '', active: true}
								]},
								{kind: Item, content: 'Item One', ontap: 'next'},
								{kind: Item, content: 'Item Two', ontap: 'next'}
							]}
						]},
						{title: 'Second Panel', classes: 'moon-7h', components: [
							{kind: Item, content: 'Item One', ontap: 'next'},
							{kind: Item, content: 'Item Two', ontap: 'next'},
							{kind: Item, content: 'Item Three', ontap: 'next'},
							{kind: Item, content: 'Item Four', ontap: 'next'},
							{kind: Item, content: 'Item Five', ontap: 'next'}
						]},
						{title: 'Third Panel', classes: 'moon-7h', components: [
							{kind: Item, content: 'Item One', ontap: 'next'},
							{kind: Item, content: 'Item Two', ontap: 'next'},
							{kind: Item, content: 'Item Three', ontap: 'next'},
							{kind: Item, content: 'Item Four', ontap: 'next'},
							{kind: Item, content: 'Item Five', ontap: 'next'}
						]},
						{title: 'Fourth Panel', classes: 'moon-7h', components: [
							{kind: Item, content: 'Item One', ontap: 'next'},
							{kind: Item, content: 'Item Two', ontap: 'next'},
							{kind: Item, content: 'Item Three', ontap: 'next'},
							{kind: Item, content: 'Item Four', ontap: 'next'},
							{kind: Item, content: 'Item Five', ontap: 'next'}
						]},
						{title: 'Fifth Panel', classes: 'moon-7h', components: [
							{kind: Item, content: 'Item One', ontap: 'next'},
							{kind: Item, content: 'Item Two', ontap: 'next'},
							{kind: Item, content: 'Item Three', ontap: 'next'},
							{kind: Item, content: 'Item Four', ontap: 'next'},
							{kind: Item, content: 'Item Five', ontap: 'next'}
						]}
					]
				}
			]
		}
	],
	next: function (sender, event) {
		this.$.panels.next();
		return true;
	},
	openMainDrawer: function () {
		this.$.partialDrawer.setOpen(true);
	},
	close: function () {
		if (this.$.partialDrawer.getOpen()) {
			this.$.partialDrawer.setOpen(false);
		} else {
			this.$.partialDrawer.setControlsOpen(false);
		}
	},
	partialDrawerChanged: function () {
		this.$.openMoreButton.setShowing(!this.$.partialDrawer.getOpen());
	},
	pickerChangedImg:function (sender, event){
		this.$.drawers.set('src', event.selected.value);
	},
	pickerChangedIcon:function (sender, event){
		this.$.drawers.set('icon', event.selected.value);
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Drawers":140,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180}],232:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Repeater = require('../../../enyo/lib/Repeater');

var
	IconButton = require('../../../moonstone/lib/IconButton'),
	Item = require('../../../moonstone/lib/Item'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.HeaderAutoCollapsingSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Panels, classes: 'enyo-fit', pattern: 'activity', components: [
			{kind: Panel, classes: 'moon-6h', collapsingHeader: true, title: 'Scroll Me', titleBelow: 'To test the auto-collapsing', subTitleBelow: 'Feature of moon.Panel', headerComponents: [
				{kind: IconButton, icon: 'check'},
				{kind: IconButton, icon: 'arrowlargeright'}
			], components: [
				{kind: Scroller, fit: true, components: [
					{kind: Repeater, count: 50, onSetupItem: 'setupItem', components: [
						{kind: Item, ontap: 'next'}
					]}
				]}
			]},
			{kind: Panel, classes: 'moon-6h', joinToPrev: true, collapsingHeader: true, title: 'Me too', titleBelow: 'Another header', subTitleBelow: 'That collapses on scroll', headerComponents: [
				{kind: IconButton, icon: 'check'},
				{kind: IconButton, icon: 'arrowlargeright'}
			], components: [
				{kind: Scroller, fit: true, components: [
					{kind: Repeater, count: 50, onSetupItem: 'setupItem', components: [
						{kind: Item, ontap: 'next'}
					]}
				]}
			]},
			{kind: Panel, classes: 'moon-6h', collapsingHeader: true, title: 'Yet another', headerComponents: [
				{kind: IconButton, icon: 'check'},
				{kind: IconButton, icon: 'arrowlargeright'}
			], components: [
				{kind: Scroller, fit: true, components: [
					{kind: Repeater, count: 50, onSetupItem: 'setupItem', components: [
						{kind: Item, ontap: 'next'}
					]}
				]}
			]}
		]}
	],
	setupItem: function (sender, event) {
		event.item.$.item.setContent('Scrolling content ' + event.index);
	},
	next: function (sender) {
		this.$.panels.setIndex(this.$.panels.getPanelIndex(sender)+1);
	}
});
},{"../../../enyo/lib/Repeater":58,"../../../enyo/lib/kind":96,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180}],241:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

 var
 	FittableRows = require('../../../layout/lib/FittableRows');

 var
 	BodyText = require('../../../moonstone/lib/BodyText'),
 	Divider = require('../../../moonstone/lib/Divider'),
 	IconButton = require('../../../moonstone/lib/IconButton'),
 	InputHeader = require('../../../moonstone/lib/InputHeader'),
 	Panel = require('../../../moonstone/lib/Panel'),
 	Panels = require('../../../moonstone/lib/Panels');

module.exports = kind({
	name: 'moon.sample.InputHeaderSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit moon-input-header-sample',
	components: [
		{kind: Panels, pattern: 'none', fit: true, components: [
			{
				kind: Panel,
				classes: 'moon-10h',
				headerOptions: {kind: InputHeader, components: [
					{kind: IconButton, icon: 'check'},
					{kind: IconButton, icon: 'arrowlargeright'}
				]},
				onInputHeaderInput: 'handleInput',
				onInputHeaderChange: 'handleChange',
				title:'Input Header',
				titleAbove: '01',
				titleBelow: 'Sub Header',
				subTitleBelow: 'Sub-sub Header'
			},
			{
				kind: Panel,
				classes: 'moon-8h',
				joinToPrev: true,
				headerOptions: {kind: InputHeader, components: [
					{kind: IconButton, icon: 'check'},
					{kind: IconButton, icon: 'arrowlargeright'}
				]},
				onInputHeaderInput: 'handleInput',
				onInputHeaderChange: 'handleChange',
				headerType: 'medium',
				title:'Small Input Header',
				titleAbove: '02',
				titleBelow: 'Sub Header',
				subTitleBelow: 'Sub-sub Header'
			}
		]},
		{kind: Divider, content: 'Result', classes: 'moon-input-header-sample-result'},
		{kind: BodyText, name: 'console', content: 'Input: '}
	],
	handleInput: function (sender, event) {
		this.$.console.setContent('Input: ' + event.originator.getValue());
		return true;
	},
	handleChange: function (sender, event) {
		this.$.console.setContent('Change: ' + event.originator.getValue());
		return true;
	}
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/InputHeader":160,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170}],251:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Group = require('../../../enyo/lib/Group');

var
	FittableLayout = require('../../../layout/lib/FittableLayout'),
	FittableColumnsLayout = FittableLayout.Columns;

var
	Button = require('../../../moonstone/lib/Button'),
	ChannelInfo = require('../../../moonstone/lib/ChannelInfo'),
	Clock = require('../../../moonstone/lib/Clock'),
	Divider = require('../../../moonstone/lib/Divider'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	SelectableItem = require('../../../moonstone/lib/SelectableItem'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton'),
	VideoFullscreenToggleButton = require('../../../moonstone/lib/VideoFullscreenToggleButton'),
	VideoInfoBackground = require('../../../moonstone/lib/VideoInfoBackground'),
	VideoInfoHeader = require('../../../moonstone/lib/VideoInfoHeader'),
	VideoPlayer = require('../../../moonstone/lib/VideoPlayer');

module.exports = kind({
	name: 'moon.sample.PanelsVideoPlayerSample',
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
		{name: 'panels', kind: Panels, pattern: 'activity', classes: 'enyo-fit', components: [
			{kind: Panel, title: 'Video', classes: 'moon-4h', components: [
				{kind: Divider, content: 'Select video content'},
				{name: 'vidContents', kind: Group, style: 'margin-top: 20px;', components: [
					{kind: SelectableItem, content: 'Counter', onActivate: 'webMovieCounter'},
					{kind: SelectableItem, selected: true, content: 'Bunny', onActivate: 'webMovieBunny'},
					{kind: SelectableItem, content: 'Sintel', onActivate: 'webMovieSintel'},
					{kind: SelectableItem, content: 'Error URL', onActivate: 'error'}
				]},
				{classes: 'moon-vspacing-m', components: [
					{kind: Button, content: 'Unload', ontap: 'unload'},
					{kind: Button, content: 'Reload', ontap: 'load'},
					{kind: ToggleButton, name: 'autoplayToggle', content: 'AutoPlay'}
				]}
			]},
			{kind: Panel, joinToPrev: true, title: 'Player', layoutKind: FittableColumnsLayout, classes: 'moon-7h', components: [
				{
					fit: true,
					components: [{
						name: 'player',
						kind: VideoPlayer,
						inline:true,
						classes: 'moon-8h',
						poster: '$lib/moonstone/samples/assets/video-poster.png',
						infoComponents: [{
							kind: VideoInfoBackground,
							orient: 'left',
							fit: true,
							components: [
								{
									kind: ChannelInfo,
									channelNo: '13',
									channelName: 'AMC',
									classes: 'moon-2h',
									components: [
										{content: '3D'},
										{content: 'Live'},
										{content: 'REC 08:22', classes: 'moon-video-player-info-redicon'}
									]
								},
								{
									kind: VideoInfoHeader,
									title: 'Downton Abbey',
									subTitle: 'Mon June 21, 7:00 - 8:00pm',
									subSubTitle: 'R - TV 14, V, L, SC',
									description: 'The series, set in the Youkshire country estate of Downton Abbey, depicts the lives of the aristocratic Crawley famiry and'
								}
							]
						}, {
							kind: VideoInfoBackground,
							orient: 'right',
							components: [
								{kind: Clock}
							]
						}],
						components: [
							{kind: VideoFullscreenToggleButton},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'},
							{kind: IconButton, src: 'images/video-player/icon-placeholder.png'}
						]
					}]
				}
			]}
		]}
	],
	bindings: [
		{from: '.$.autoplayToggle.value', to: '.$.player.autoplay'}
	],
	unload: function () {
		this.$.player.unload();
	},
	load: function () {
		this.$.player.unload();
		this.$.player.setSources(this.sources);
	},
	webMovieCounter: function (sender, event) {
		if (!event.originator.active) {
			return;
		}
		// Set source by sources array
		this.sources = [
			{src: "http://media.w3.org/2010/05/video/movie_300.mp4", type: "video/mp4"},
			{src: 'http://media.w3.org/2010/05/video/movie_300.ogv', type: 'video/ogg'},
			{src: 'http://media.w3.org/2010/05/video/movie_300.webm', type: 'video/webm'}
		];
		this.$.player.setSources(this.sources);
		this.$.videoInfoHeader.setTitle('Ticking Counter Video');
	},
	webMovieBunny: function (sender, event) {
		if (!event.originator.active) {
			return;
		}
		// Set source by sources array
		this.sources = [
			{src: "http://media.w3.org/2010/05/bunny/movie.mp4", type: "video/mp4"},
			{src: "http://media.w3.org/2010/05/bunny/movie.ogv", type: "video/ogg"}
		];
		this.$.player.setSources(this.sources);
		this.$.videoInfoHeader.setTitle('Bunny Video');
	},
	webMovieSintel: function (sender, event) {
		if (!event.originator.active) {
			return;
		}
		// Set source by sources array
		this.sources = [
			{src: 'http://media.w3.org/2010/05/sintel/trailer.mp4', type: 'video/mp4'},
			{src: 'http://media.w3.org/2010/05/sintel/trailer.ogv', type: 'video/ogg'},
			{src: 'http://media.w3.org/2010/05/sintel/trailer.webm', type: 'video/webm'}
		];
		this.$.player.setSources(this.sources);
		this.$.videoInfoHeader.setTitle('The Sintel Video');
	},
	error: function (sender, event) {
		if (!event.originator.active) {
			return;
		}
		this.src = 'http://foo.bar';
		this.$.player.setSrc(this.src);
		this.$.videoInfoHeader.setTitle('Error video');
	}
});

},{"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableLayout":114,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/ChannelInfo":126,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/SelectableItem":181,"../../../moonstone/lib/ToggleButton":191,"../../../moonstone/lib/VideoFullscreenToggleButton":197,"../../../moonstone/lib/VideoInfoBackground":198,"../../../moonstone/lib/VideoInfoHeader":199,"../../../moonstone/lib/VideoPlayer":200}],252:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	CardArranger = require('../../../layout/lib/CardArranger');

var
	Panels = require('../../../moonstone/lib/Panels'),
	Item = require('../../../moonstone/lib/Item');

module.exports = kind({
	name: 'moon.sample.PanelsWithCardArrangerSample',
	classes: 'moon enyo-fit',
	components: [
		{name: 'panels', kind: Panels, arrangerKind: CardArranger, animate: false, classes: 'enyo-fit', components: [
			{title: 'First', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Second', joinToPrev: true, components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Third', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Fourth', joinToPrev: true, components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Fifth', joinToPrev: true, components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Sixth Panel with a very long title', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Seventh', joinToPrev: true, components: [
				{kind: Item, content: 'Item One'},
				{kind: Item, content: 'Item Two'},
				{kind: Item, content: 'Item Three'},
				{kind: Item, content: 'Item Four'},
				{kind: Item, content: 'Item Five'}
			]}
		]}
	],
	next: function (sender, event) {
		this.$.panels.next();
		return true;
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/CardArranger":109,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170}],253:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	CarouselArranger = require('../../../layout/lib/CarouselArranger');

var
	Panels = require('../../../moonstone/lib/Panels'),
	Item = require('../../../moonstone/lib/Item');

module.exports = kind({
	name: 'moon.sample.PanelsWithCarouselArrangerSample',
	classes: 'moon enyo-fit',
	components: [
		{name: 'panels', kind: Panels, arrangerKind: CarouselArranger, classes: 'enyo-fit full', components: [
			{title: 'First', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Second', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Third', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Fourth', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Fifth', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Sixth', components: [
				{kind: Item, content: 'Item One', ontap: 'next'},
				{kind: Item, content: 'Item Two', ontap: 'next'},
				{kind: Item, content: 'Item Three', ontap: 'next'},
				{kind: Item, content: 'Item Four', ontap: 'next'},
				{kind: Item, content: 'Item Five', ontap: 'next'}
			]},
			{title: 'Seventh', components: [
				{kind: Item, content: 'Item One'},
				{kind: Item, content: 'Item Two'},
				{kind: Item, content: 'Item Three'},
				{kind: Item, content: 'Item Four'},
				{kind: Item, content: 'Item Five'}
			]}
		]}
	],
	next: function(inSender, inEvent) {
		this.$.panels.next();
		return true;
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/CarouselArranger":110,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170}],254:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	CardArranger = require('../../../layout/lib/CardArranger'),
	FittableColumns = require('../../../layout/lib/FittableColumns'),
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Button = require('../../../moonstone/lib/Button'),
	Divider = require('../../../moonstone/lib/Divider'),
	FormCheckbox = require('../../../moonstone/lib/FormCheckbox'),
	Item = require('../../../moonstone/lib/Item'),
	Panels = require('../../../moonstone/lib/Panels'),
	Popup = require('../../../moonstone/lib/Popup'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.PopupSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Divider, content: 'Popups'},

		{classes: 'moon-hspacing moon-vspacing-s', components: [
			{kind: Button, content: 'Basic Popup', ontap: 'showPopup', popup: 'basicPopup'},
			{kind: Button, content: 'Direct Popup', ontap: 'showPopup', popup: 'directPopup', direct: true},
			{kind: Button, content: 'Long Popup', ontap: 'showPopup', popup: 'longPopup'}
		]},
		{classes: 'moon-hspacing moon-vspacing-s', components: [
			{kind: Button, content: 'Scroller Popup', ontap: 'showPopup', popup: 'scrollerPopup'},
			{kind: Button, content: 'Button in Popup', ontap: 'showPopup', popup: 'buttonPopup'},
			{kind: Button, content: 'Panels in Popup', ontap: 'showPopup', popup: 'panelsPopup'}
		]},

		{name: 'basicPopup', kind: Popup, content: 'Popup...'},
		// The directPopup only works when we programmatically call 'showDirect' or 'hideDirect'. So, we set autoDismiss as false here.
		{name: 'directPopup', kind: Popup, autoDismiss: false, components: [
			{content: 'Direct Popup'},	
			{kind: Button, content: 'Hide Direct', ontap: 'hidePopup', popup: 'directPopup', direct: true}
		]},
		{name: 'longPopup', kind: Popup, allowHtml: true, content: 'Don\'t go changing, to try and please me  <br>You never let me down before  <br>Don\'t imagine you\'re too familiar  <br>And I don\'t see you anymore  <br>I wouldn\'t leave you in times of trouble  <br>We never could have come this far I took the good times, I\'ll take the bad times I\'ll take you just the way you are Don\'t go trying some new fashion Don\'t change the color of your hair You always have my unspoken passion Although I might not seem to care I don\'t want clever conversation I never want to work that hard I just want someone that I can talk to I want you just the way you are. I need to know that you will always be The same old someone that I knew What will it take till you believe in me The way that I believe in you.'},
		{name: 'scrollerPopup', kind: Popup, components: [
			{kind: Button, content: 'Button Outside Scroller'},
			{kind: Scroller, style: 'height:170px;margin-top:10px;', components: [
				{kind: Item, content: 'Test Item 1'},
				{kind: Item, content: 'Test Item 2'},
				{kind: Item, content: 'Test Item 3'},
				{kind: Item, content: 'Test Item 4'},
				{kind: Item, content: 'Test Item 5'},
				{kind: Item, content: 'Test Item 6'},
				{kind: Item, content: 'Test Item 7'},
				{kind: Item, content: 'Test Item 8'},
				{kind: Item, content: 'Test Item 9'},
				{kind: Item, content: 'Test Item 10'}
			]}
		]},
		{name: 'buttonPopup', kind: Popup, floating: true, components: [
			{kind: Divider, content: 'Buttons in popup example'},
			{classes: 'moon-hspacing', components: [
				{kind: Button, content: 'Hello'},
				{kind: Button, content: 'Goodbye'},
				{kind: ToggleButton, content: 'SpotlightModal', ontap: 'buttonToggled'}
			]}
		]},
		{name: 'panelsPopup', kind: Popup, floating: true, components: [
			{kind: Panels, name: 'panels', defaultKind: FittableRows, arrangerKind: CardArranger, animate:false, classes: 'moon-12v', components: [
				{components: [
					{kind: Divider, content: 'Step 1: Terms of Service'},
					{kind: Scroller, fit: true, spotlightPagingControls: true, horizontal: 'hidden', style: 'margin-bottom:20px;', components: [
						{kind: BodyText, content: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'}
					]},
					{kind: FittableColumns, components: [
						{fit: true, components: [
							{kind: FormCheckbox, content: 'I agree', style: 'display:inline-block;'}
						]},
						{kind: ToggleButton, content: 'SpotlightModal', ontap: 'panelsToggled'},
						{kind: Button, content: 'Sign me Up!', ontap: 'panelNext'}
					]}
				]},
				{components: [
					{kind: Divider, content: 'Step 2'},
					{kind: BodyText, fit: true, content: 'All done.  Thanks for signing up!'},
					{kind: Button, content: 'Previous', ontap: 'panelPrev'}
				]}
			]}
		]}
	],
	popupActivator: null,
	showPopup: function (sender) {
		this.hidePopups();
		var p = this.$[sender.popup];
		if (p) {
			if(sender.direct) {
				p.showDirect();
			} else {
				p.show();
			}
		}
	},
	hidePopup: function (sender) {
		var p = this.$[sender.popup];
		if(p) {
			if(sender.direct) {
				p.hideDirect();
			} else {
				p.hide();
			}
		}
	},
	hidePopups: function () {
		this.$.basicPopup.hide();
		this.$.longPopup.hide();
		this.$.buttonPopup.hide();
	},
	buttonToggled: function (sender, event) {
		this.$.buttonPopup.setSpotlightModal(sender.getActive());
		this.$.buttonPopup.setAutoDismiss(!sender.getActive());
	},
	panelsToggled: function (sender, event) {
		this.$.panelsPopup.setSpotlightModal(sender.getActive());
		this.$.panelsPopup.setAutoDismiss(!sender.getActive());
	},
	panelNext: function () {
		this.$.panels.next();
	},
	panelPrev: function () {
		this.$.panels.previous();
	}
});

},{"../../../enyo/lib/kind":96,"../../../layout/lib/CardArranger":109,"../../../layout/lib/FittableColumns":113,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/FormCheckbox":148,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Popup":171,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],225:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	Divider = require('../../../moonstone/lib/Divider'),
	ExpandableDataPicker = require('../../../moonstone/lib/ExpandableDataPicker'),
	FormCheckbox = require('../../../moonstone/lib/FormCheckbox'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'moon.sample.ExpandableDataPickerSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{name: 'picker', kind: ExpandableDataPicker, content: 'Expandable Data Picker', noneText: 'Nothing Selected', components: [
				{bindings: [
					{from: '.model.label', to: '.content'}
				]}
			]},
			{kind: Divider, content:'Options'},
			{kind: FormCheckbox, content: 'Multiple Selection', prop: 'multipleSelection', onchange: 'checked'},
			{kind: FormCheckbox, content: 'Auto Collapse', prop: 'autoCollapseOnSelect', checked: true, onchange: 'checked'}
		]}
	],
	create: function () {
		FittableRows.prototype.create.apply(this, arguments);
		this.$.picker.set('collection', new Collection([
			{label: 'first'},
			{label: 'second'},
			{label: 'third'}
		]));
	},
	checked: function (sender, event) {
		this.$.picker.set(sender.prop, sender.checked);
	}
});

},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandableDataPicker":141,"../../../moonstone/lib/FormCheckbox":148,"../../../moonstone/lib/Scroller":180}],217:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Button = require('../../../moonstone/lib/Button'),
	ContextualPopup = require('../../../moonstone/lib/ContextualPopup'),
	ContextualPopupDecorator = require('../../../moonstone/lib/ContextualPopupDecorator'),
	Divider = require('../../../moonstone/lib/Divider'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Item = require('../../../moonstone/lib/Item'),
	RadioItem = require('../../../moonstone/lib/RadioItem'),
	RadioItemGroup = require('../../../moonstone/lib/RadioItemGroup'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.ontextualPopupSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{
			kind: ContextualPopupDecorator,
			style: 'position: absolute; left: 0px; top: 0px;',
			components:
			[
				{content: 'Average'},
				{
					kind: ContextualPopup,
					classes: 'moon-2h moon-8v',
					components: [
						{content: 'Item 1'},
						{content: 'Item 2'},
						{content: 'Item 3'}
					]
				}
			]
		},
		{kind: ContextualPopupDecorator, style: 'position: absolute; right: 0px; top: 0px;', components: [
			{content: 'Small', small:true},
			{kind: ContextualPopup}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; right: 0px; top: 13%;', components: [
			{content: 'Nested Radio', small:true},
				{name: 'nestedRadioPopup', kind: ContextualPopup, components:[
					{name: 'nestedRadioGroup', kind: RadioItemGroup, components: [
						{content: 'Creek', selected: true},
						{content: 'River'},
						{content: 'Ocean'}
					]},
					{components:[
						{content: 'Radio Group Value'},
						{name: 'nestedRadioValue'}
					]},
					{name: 'nestedRadioDismissButton',
					 kind: ToggleButton,
					 style: 'margin-top:5px',
					 small: true,
					 toggleOnLabel: 'select dismiss on',
					 toggleOffLabel: 'select dismiss off'
					}
				]}
			]
		},
		{kind: ContextualPopupDecorator, style: 'position: absolute; left: 0px; top: 25%;', components: [
			{content: 'Left'},
			{
				kind: ContextualPopup,
				classes: 'moon-3h moon-4v',
				components: [
					{content: 'Item 1'},
					{content: 'Item 2'},
					{content: 'Item 3'}
				]
			}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; right: 0px; top: 25%;', components: [
			{content: 'Right', small:true},
			{kind: ContextualPopup, components: [
				{content: 'Outside scroller', kind: Item},
				{classes: 'moon-8h moon-6v', components: [
					{kind: Scroller, classes: 'enyo-fill', components: [
						{content: 'testing 1', kind: Item},
						{content: 'testing 2', kind: Item},
						{content: 'testing 3', kind: Item},
						{content: 'testing 4', kind: Item},
						{content: 'testing 5', kind: Item},
						{content: 'testing 6', kind: Item},
						{content: 'testing 7', kind: Item},
						{content: 'testing 8', kind: Item},
						{content: 'testing 9', kind: Item},
						{content: 'testing 10', kind: Item},
						{content: 'testing 12', kind: Item},
						{content: 'testing 13', kind: Item},
						{content: 'testing 14', kind: Item},
						{content: 'testing 15', kind: Item},
						{content: 'testing 16', kind: Item},
						{content: 'testing 17', kind: Item},
						{content: 'testing 18', kind: Item},
						{content: 'testing 19', kind: Item}
					]}

				]}
			]}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; left: 0px; top: 45%;', components: [
			{content: 'Wide'},
			{kind: ContextualPopup, classes: 'moon-6h moon-4v', components: [
				{kind: Scroller, classes: 'enyo-fill', components:[
					{content: 'testing 1'},
					{content: 'testing 2'}
				]}
			]}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; right: 0px; top: 45%;', components: [
			{content: 'Long but Small Button with truncation', small:true},
			{kind: ContextualPopup, components: [
				{content: 'Outside scroller', kind: Item},
				{classes: 'moon-16v', components: [
					{kind: Scroller, classes: 'enyo-fill', components: [
						{content: 'testing 1', kind: Item},
						{content: 'testing 2', kind: Item},
						{content: 'testing 3', kind: Item},
						{content: 'testing 4', kind: Item},
						{content: 'testing 5', kind: Item},
						{content: 'testing 6', kind: Item},
						{content: 'testing 7', kind: Item},
						{content: 'testing 8', kind: Item},
						{content: 'testing 9', kind: Item},
						{content: 'testing 10', kind: Item},
						{content: 'testing 12', kind: Item},
						{content: 'testing 13', kind: Item},
						{content: 'testing 14', kind: Item},
						{content: 'testing 15', kind: Item},
						{content: 'testing 16', kind: Item},
						{content: 'testing 17', kind: Item},
						{content: 'testing 18', kind: Item},
						{content: 'testing 19', kind: Item}
					]}

				]}
			]}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; left: 0px; top: 65%;', components: [
			{content: 'Deactivated', disabled:true},
			{kind: ContextualPopup, classes: 'moon-6h moon-4v', components: [
				{kind: Scroller, classes: 'enyo-fill', components:[
					{content: 'testing 1'},
					{content: 'testing 2'}
				]}
			]}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; right: 0px; top: 65%;', components: [
			{content: 'Small Deactivated', small:true, disabled:true},
			{kind: ContextualPopup, classes: 'moon-6h moon-4v', components: [
				{kind: Scroller, classes: 'enyo-fill', components:[
					{content: 'testing 1'},
					{content: 'testing 2'}
				]}
			]}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; left: 0px; bottom: 0px;', components: [
			{content: 'Spotlight Modal'},
			{
				kind: ContextualPopup,
				name: 'buttonPopup',
				classes: 'moon-8h moon-8v',
				modal: true,
				autoDismiss: false,
				spotlightModal: true,
				components: [
					{kind: Scroller, horizontal: 'auto', classes: 'enyo-fill', components: [
						{kind: Button, content: 'Button'},
						{kind: ToggleButton, content: 'SpotlightModal', value: true, ontap: 'buttonToggled'},
						{tag: 'br'},
						{tag: 'br'},
						{kind: InputDecorator, spotlight: true, components: [
							{kind: Input, placeholder: 'USERNAME'}
						]}
					]}
				]
			}
		]},
		{kind: ContextualPopupDecorator, style: 'position: absolute; right: 0px; bottom: 0px;', components: [
			{content: 'Spottable', small:true},
			{
				kind: ContextualPopup,
				classes: 'moon-9h moon-4v',
				components: [
					{kind: Scroller, horizontal: 'auto', classes: 'enyo-fill', components: [
						{kind: Button, content: 'Button 1'},
						{kind: Button, content: 'Button 2'},
						{kind: Button, content: 'Button 3'}
					]}
				]
			}
		]},
		{style: 'position: absolute; left: 30%; top: 25%;', components: [
			{kind: Divider, content: 'Button Position', classes: 'radioItemFont'},
			{kind: InputDecorator, components: [
				{kind: Input, style: 'width: 120px', name: 'leftInput', placeholder: 'left (px or %)', classes: 'radioItemFont'}
			]},
			{kind: InputDecorator, components: [
				{kind: Input, style: 'width: 120px', name: 'topInput', placeholder: 'top (px or %)', classes: 'radioItemFont'}
			]},
			{kind: Button, small: true, content: 'Set Position', ontap: 'setPosition'}
		]},
		{style: 'position: absolute; left: 30%; top: 50%; ', components: [
			{kind: Divider, content: 'Popup Direction', classes: 'radioItemFont'},
			{kind: RadioItemGroup, onActivate: 'groupChanged', components: [
				{content: 'none', classes: 'radioItemFont'},
				{content: 'left', classes: 'radioItemFont'},
				{content: 'right', classes: 'radioItemFont'},
				{content: 'top', classes: 'radioItemFont'},
				{content: 'bottom', classes: 'radioItemFont'}
			]}
		]},
		{kind: ContextualPopupDecorator, name: 'directionButton', style: 'position: absolute; left: 40%; top: 70%;', components: [
			{content: 'Direction'},
			{
				kind: ContextualPopup,
				name: 'directionContext',
				classes: 'moon-4v',
				components: [
					{kind: Scroller, horizontal: 'auto', classes: 'enyo-fill', components: [
						{kind: Button, content: 'Button 1'},
						{kind: Button, content: 'Button 2'}
					]}
				]
			}
		]}
	],
	bindings: [
		{from: '.$.nestedRadioGroup.active.content', to: '.$.nestedRadioValue.content', transform: function(val){
			this.dismissRadioSelection();
			return val;
		}}
	],
	buttonToggled: function(inSender, inEvent) {
		this.$.buttonPopup.setSpotlightModal(inSender.getActive());
		this.$.buttonPopup.setAutoDismiss(!inSender.getActive());
	},
	dismissRadioSelection: function(){
		if(this.$.nestedRadioDismissButton.value) this.$.nestedRadioPopup.hide();
	},
	setPosition: function(){
		this.$.directionButton.applyStyle('left', this.$.leftInput.getValue() === '' ? '40%' : this.$.leftInput.getValue());
		this.$.directionButton.applyStyle('top', this.$.topInput.getValue() === '' ? '70%' : this.$.topInput.getValue());
	},
	groupChanged: function(inSender, inEvent) {
		if(inEvent.originator.getActive() && inEvent.originator.kind === RadioItem) {
			var selected = inEvent.originator.getContent();
			this.$.directionContext.set('direction', selected);
		}
	}
});
},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/ContextualPopup":130,"../../../moonstone/lib/ContextualPopupDecorator":132,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/RadioItem":174,"../../../moonstone/lib/RadioItemGroup":175,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191}],257:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	RadioItem = require('../../../moonstone/lib/RadioItem'),
	RadioItemGroup = require('../../../moonstone/lib/RadioItemGroup');

module.exports = kind({
	name: 'moon.sample.RadioItemSample',
	classes: 'moon enyo-unselectable enyo-fit',
	kind: FittableRows,
	components: [
		{fit: true, components: [
			{kind: Divider, content: 'Radio Items'},
			{style: 'margin: 0 10px', onActivate: 'buttonActivated', components: [
				{kind: RadioItem, content: 'Cat'},
				{kind: RadioItem, content: 'Dog'},
				{kind: RadioItem, content: 'Whale', disabled: true},
				{kind: RadioItem, content: 'Monte Verde Golden Toad'}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Radio Item Group'},
			{kind: RadioItemGroup, onActivate: 'buttonActivated', components: [
				{content: 'Raspberry'},
				{content: 'Blackberry'},
				{content: 'Strawberry', disabled: true},
				{content: 'Persimmon is botanical berries'}
			]},
			{classes: 'moon-1v'},
			{kind: Divider, content: 'Pre-selected Radio Item Group'},
			{kind: RadioItemGroup, onActivate: 'buttonActivated', components: [
				{content: 'Creek'},
				{content: 'River', selected: true},
				{content: 'Waterfall', disabled: true},
				{content: 'Ocean is big big big water'}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', content: 'No action yet.'}
	],
	buttonActivated: function (sender, event) {
		var originator = event.originator,
			str = 'The \'';
		
		if (!originator || !this.hasNode()) {
			return;
		}
			
		str += (event.originator.getActive() && event.originator.kind === 'moon.RadioItem') ? originator.getContent() : originator.name;
		str +=  '\' item is selected.';
		
		this.$.result.setContent(str);
	}
});
},{"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/RadioItem":174,"../../../moonstone/lib/RadioItemGroup":175}],214:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	hooks = require('../../../enyo/lib/hooks'),
	updateLocale = hooks.updateLocale;

var
	FittableColumns = require('../../../layout/lib/FittableColumns'),
	FittableRows = require('../../../layout/lib/FittableRows');

var
	ilib = require('../../../enyo-ilib');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Button = require('../../../moonstone/lib/Button'),
	Calendar = require('../../../moonstone/lib/Calendar'),
	DatePicker = require('../../../moonstone/lib/DatePicker'),
	Divider = require('../../../moonstone/lib/Divider'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Scroller = require('../../../moonstone/lib/Scroller');

module.exports = kind({
	name: 'smoon.sample.CalendarSample',
	classes: 'moon enyo-unselectable enyo-fit',
	kind: FittableColumns,
	components: [
		{components: [
			{kind: Calendar, name: 'calendar', onChange: 'changed'}
		]},
		{kind: FittableRows, fit: true, components: [
			{kind: Scroller, fit:true, components: [
				{kind: Divider, content: 'Set value: '},
				{classes: 'moon-hspacing', components: [
					{kind: InputDecorator, classes: 'moon-2h', components: [
						{kind: Input, name: 'yearInput', classes: 'moon-calendar-sample-input', placeholder: 'Year'}
					]},
					{kind: InputDecorator, classes: 'moon-2h', components: [
						{kind: Input, name: 'monthInput', classes: 'moon-calendar-sample-input', placeholder: 'Month'}
					]},
					{kind: InputDecorator, classes: 'moon-2h', components: [
						{kind: Input, name: 'dayInput', classes: 'moon-calendar-sample-input', placeholder: 'Day'}
					]}
				]},
				{classes: 'moon-hspacing', components: [
					{kind: Button, small:true, content: 'Set Date', ontap: 'setDate'},
					{kind: Button, small:true, content: 'Reset to Current', ontap: 'resetDate'}
				]},
				{classes: 'moon-1v'},
				{classes: 'moon-7h', components: [
					{kind: DatePicker, name: 'picker', noneText: 'Pick a Date', content: 'Pick a Date'},
					{kind: ExpandablePicker, name: 'localePicker', noneText: 'No Language Selected', content: 'Choose Locale', onChange: 'setLocale', components: [
						{content: 'Use Default Locale', active: true},
						{content: 'ko-KO'}, //Korea, firstDayOfWeek: 1
						{content: 'zh-TW'},
						{content: 'fa-IR'}, // Iran, persian calendar
						{content: 'th-TH'}, //Thailand
						{content: 'en-US'}, //United States, firstDayOfWeek: 0
						{content: 'und-AE'}, //United Arab Emirates, firstDayOfWeek: 6
						{content: 'und-AG'}, //Antigua and Barbuda, firstDayOfWeek: 0
						{content: 'und-CA'}, //Canada, firstDayOfWeek: 0
						{content: 'it-CH'}, //Italian
						{content: 'en-MX'},
						{content: 'de-DE'}, // Germany, firstDayOfWeek: 1
						{content: 'fr-FR'}, // France, firstDayOfWeek: 1
						{content: 'fr-CA'},
						{content: 'it-IT'}, // Italy, firstDayOfWeek: 1
						{content: 'es-ES'}, // Spain, firstDayOfWeek: 1
						{content: 'es-MX'}
					]},
					{name: 'dowLengthPicker', kind: ExpandablePicker, content: 'Choose DOW Label Length', onChange: 'setLabelLength', components: [
						{content: 'short', active: true},
						{content: 'medium'},
						{content: 'long'},
						{content: 'full'}
					]},
					{name: 'dowLabelClass', kind: ExpandablePicker, content: 'Choose DOW Label Class', onChange: 'setLabelStyle', components: [
						{content: 'Default', active: true, className: ''},
						{content: 'Divider', className: 'moon-divider moon-divider-text'},
						{content: 'Smaller font', className: 'moon-calendar-picker-day small'}
					]}
				]}
			]},
			{kind: Divider, content: 'Result'},
			{kind: BodyText, name: 'result', content: 'No change yet'}
		]}
	],
	bindings: [
		{from: '.$.calendar.value', to: '.$.picker.value', oneWay:false}
	],
	create: function(){
		this.inherited(arguments);
		if (!ilib) {
			this.$.localePicker.hide();
			this.$.dowLengthPicker.hide();
			this.log('iLib not present -- hiding locale & dow length picker');
		} else {
			this.df = new ilib.DateFmt({
				type: 'datetime',
				time: 'hmsa',
				date: 'dmy',
				useNative: false,
				length: 'short'
			});
		}

		if (this.$.localePicker.selected) {
			this.setLocale(null, {selected: this.$.localePicker.selected});
		}
	},

	updateCurrentString: function (date) {
		var formatted = ilib ? this.df.format(date) : date.toDateString();
		this.$.result.setContent('Current Date' + ' changed to ' + formatted);
	},

	setLocale: function(inSender, inEvent){
		if (ilib) {
			var locale = inEvent.selected.content,
				val = (locale == 'Use Default Locale') ? null : locale;
			updateLocale(locale);
			this.$.calendar.setLocale(val);
			this.$.picker.setLocale(val);

			this.df = new ilib.DateFmt({
				type: 'datetime',
				time: 'hmsa',
				date: 'dmy',
				useNative: false,
				length: this.$.dowLengthPicker.selected.content
			});
			this.updateCurrentString(this.$.calendar.getValue());
		}
		return true;
	},
	setLabelLength: function(inSender, inEvent){
		if (inEvent.content){
			this.$.calendar.setDayOfWeekLength(inEvent.content);
			if (ilib) {
				this.df = new ilib.DateFmt({
					type: 'datetime',
					time: 'hmsa',
					date: 'dmy',
					useNative: false,
					length: inEvent.content
				});
			}
			this.updateCurrentString(this.$.calendar.getValue());
			this.removeLabelItem(this.$.dowLabelClass, inEvent, 'Divider', 'full');
		}
		return true;
	},
	setLabelStyle: function(inSender, inEvent){
		if (inEvent.content){
			this.$.calendar.setDayOfWeekClasses(inEvent.selected.className);
			this.removeLabelItem(this.$.dowLengthPicker, inEvent, 'full', 'Divider');
		}
		return true;
	},
	removeLabelItem: function (inControl, inEvent, inLabelName1, inLabelName2) {
		var i,
			c = inControl.getClientControls();
		for (i = 0; i < c.length; i++) {
			if (c[i].content == inLabelName1) {
				c[i].addRemoveClass('moon-calendar-dow-lable-nodisplay', Boolean(inEvent.content == inLabelName2));
			}
		}
	},
	changed: function(inSender, inEvent) {
		if (this.$.result && inEvent.value) {
			this.updateCurrentString(inEvent.value);
		}
	},
	setDate: function(inSender, inEvent){
		var year = isNaN(parseInt(this.$.yearInput.getValue(), 0)) ? this.$.picker.value.getFullYear() : parseInt(this.$.yearInput.getValue(), 0);
		var month = isNaN(parseInt(this.$.monthInput.getValue(), 0)) ? this.$.picker.value.getMonth() : parseInt(this.$.monthInput.getValue(), 0) - 1;
		var day = isNaN(parseInt(this.$.dayInput.getValue(), 0)) ? this.$.picker.value.getDate() : parseInt(this.$.dayInput.getValue(), 0);
		this.$.calendar.setValue(new Date(year, month, day));
	},
	resetDate: function() {
		this.$.calendar.setValue(null);
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/hooks":92,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableColumns":113,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/Calendar":124,"../../../moonstone/lib/DatePicker":135,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Scroller":180}],220:[function(require,module,exports){
var
	hooks = require('../../../enyo/lib/hooks'),
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	ilib = require('../../../enyo-ilib');

var
	Scroller = require('../../../moonstone/lib/Scroller'),
	DatePicker = require('../../../moonstone/lib/DatePicker'),
	Button = require('../../../moonstone/lib/Button'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	Divider = require('../../../moonstone/lib/Divider'),
	BodyText = require('../../../moonstone/lib/BodyText');

module.exports = kind({
	name: 'moons.sample.DatePickerSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-7h moon-vspacing-s', components: [
				{kind: DatePicker, name: 'picker', noneText: 'Pick a Date', content: 'Date', onChange: 'changed'},
				{kind: Button, name: 'buttonReset', content: 'Reset Date', small: true, ontap: 'resetTapped'},
				{kind: DatePicker, name: 'disabledPicker', disabled: true, noneText: 'Disabled Date Picker', content: 'Disabled Date'},
				{classes: 'moon-hspacing', components: [
					{kind: InputDecorator, classes: 'moon-2h', components: [
						{kind: Input, name: 'yearInput', classes: 'moon-date-picker-sample-input', placeholder: 'Year'}
					]},
					{kind: InputDecorator, classes: 'moon-2h', components: [
						{kind: Input, name: 'monthInput', classes: 'moon-date-picker-sample-input', placeholder: 'Month'}
					]},
					{kind: InputDecorator, classes: 'moon-2h', components: [
						{kind: Input, name: 'dayInput', classes: 'moon-date-picker-sample-input', placeholder: 'Day'}
					]}
				]},
				{classes: 'moon-hspacing', components: [
					{kind: Button, small: true, content: 'Set Date', ontap: 'setDate'},
					{kind: Button, small: true, content: 'Reset to Current', ontap: 'resetDate'}
				]},
				{name: 'localePicker', kind: ExpandablePicker, noneText: 'No Locale Selected', content: 'Choose Locale', onChange: 'setLocale', components: [
					{content: 'Use Default Locale', active: true},
					{content: 'ko-KR'},
					{content: 'zh-TW'},
					{content: 'fa-IR'},
					{content: 'ar-SA'},
					{content: 'ur-IN'},
					{content: 'th-TH'},	//Thailand
					{content: 'en-US'},
					{content: 'jp-JP'},
					{content: 'en-CA'},
					{content: 'en-IE'},
					{content: 'en-GB'},
					{content: 'en-MX'},
					{content: 'de-DE'},
					{content: 'fr-FR'},
					{content: 'fr-CA'},
					{content: 'it-IT'},
					{content: 'es-ES'},
					{content: 'es-MX'},
					{content: 'es-US'}
				]}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', content: 'No change yet'}
	],
	create: function(){
		this.inherited(arguments);
		if (!ilib) {
			this.$.localePicker.hide();
			this.log('iLib not present -- hiding locale picker');
		}
	},
	setLocale: function(inSender, inEvent){
		if (ilib) {
			var locale = inEvent.selected.content,
				val = (locale == 'Use Default Locale') ? null : locale;
			hooks.updateLocale(locale);
			this.$.picker.setLocale(val);
			this.$.disabledPicker.setLocale(val);
		}
		return true;
	},
	setDate: function() {
		var current = this.$.picker.value || new Date();
		var year = isNaN(parseInt(this.$.yearInput.getValue(), 0)) ? current.getFullYear() : parseInt(this.$.yearInput.getValue(), 0);
		var month = isNaN(parseInt(this.$.monthInput.getValue(), 0)) ? current.getMonth() : parseInt(this.$.monthInput.getValue(), 0) - 1;
		var day = isNaN(parseInt(this.$.dayInput.getValue(), 0)) ? current.getDate() : parseInt(this.$.dayInput.getValue(), 0);
		this.$.picker.setValue(new Date(year, month, day));
	},
	resetDate: function() {
		this.$.picker.setValue(new Date());
	},
	changed: function(inSender, inEvent) {
		if (this.$.result && inEvent.value){
			this.$.result.setContent(inEvent.name + ' changed to ' + inEvent.value.toDateString());
		}
	},
	resetTapped: function(inSender, inEvent) {
		this.$.picker.set('value', null);
		return true;
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/hooks":92,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/DatePicker":135,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Scroller":180}],143:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	Control = require('../../../enyo/lib/Control');

var
	Spotlight = require('../../../spotlight');

var
	ExpandableListDrawer = require('../ExpandableListDrawer'),
	ExpandableListItem = require('../ExpandableListItem'),
	Item = require('../Item'),
	Marquee = require('../Marquee'),
	MarqueeText = Marquee.Text,
	SimpleIntegerPicker = require('../SimpleIntegerPicker');

/**
* Fires when the currently selected item changes.
*
* @event moon.ExpandableIntegerPicker#onChange
* @type {Object}
* @property {Number} value - The value of the currently selected item.
* @property {String} content -  The content of the currently selected item.
*
* @public
*/

/**
* {@link moon.ExpandableIntegerPicker}, which extends {@link moon.ExpandableListItem},
* is a drop-down picker menu that prompts the user to make a selection from a range of
* integer-based options.
*
* The value of the currently selected item is available in the picker's
* [value]{@link moon.ExpandableIntegerPicker#value} property.
*
* When the picker is minimized, the content of the currently selected item is
* displayed as subtext below the picker label.
*
* @class moon.ExpandableIntegerPicker
* @extends moon.ExpandableListItem
* @ui
* @public
*/
module.exports = kind(
	/** @lends moon.ExpandableIntegerPicker.prototype */ {

	/**
	* @private
	*/
	name: 'moon.ExpandableIntegerPicker',

	/**
	* @private
	*/
	kind: ExpandableListItem,

	/**
	* @private
	*/
	classes: 'moon-expandable-integer-picker',

	/**
	* @private
	*/
	events: {

		/**
		* {@link moon.ExpandableIntegerPicker#onChange}
		*/
		onChange: ''
	},

	/**
	* @private
	* @lends moon.ExpandableIntegerPicker.prototype
	*/
	published: {
		/**
		* Initial value of the picker.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		value: 0,

		/**
		* Minimum value of the picker.
		*
		* @type {Number}
		* @default 0
		* @public
		*/
		min: 0,

		/**
		* Maximum value of the picker.
		*
		* @type {Number}
		* @default 9
		* @public
		*/
		max: 9,

		/**
		* Amount by which to increment/decrement.
		*
		* @type {Number}
		* @default 1
		* @public
		*/
		step: 1,

		/**
		* Unit/label to be appended to the end of the number.
		*
		* @type {String}
		* @default 'sec'
		* @public
		*/
		unit: 'sec'
	},

	/**
	* @private
	*/
	lockBottom: true,

	/**
	* @private
	*/
	autoCollapse: true,

	/**
	* @private
	*/
	handlers: {
		requestScrollIntoView: 'requestScrollIntoView'
	},

	/**
	* @private
	*/
	components: [
		{name: 'headerWrapper', kind: Item, classes: 'moon-expandable-picker-header-wrapper', onSpotlightFocus: 'headerFocus', ontap: 'expandContract', components: [
			// headerContainer required to avoid bad scrollWidth returned in RTL for certain text widths (webkit bug)
			{name: 'headerContainer', kind: Control, classes: 'moon-expandable-list-item-header moon-expandable-picker-header', components: [
				{name: 'header', kind: MarqueeText}
			]},
			{name: 'currentValue', kind: MarqueeText, classes: 'moon-expandable-picker-current-value'}
		]},
		{name: 'drawer', kind: ExpandableListDrawer, resizeContainer:false, classes:'moon-expandable-list-item-client indented', components: [
			{name: 'picker', kind: SimpleIntegerPicker, deferInitialization: true, onSelect: 'toggleActive', onChange: 'pickerValueChanged'}
		]}
	],

	/**
	* @private
	*/
	bindings: [
		{from: '.min', to: '.$.picker.min', oneWay: false},
		{from: '.max', to: '.$.picker.max', oneWay: false},
		{from: '.step', to: '.$.picker.step'},
		{from: '.unit', to: '.$.picker.unit'},
		{from: '.disabled', to: '.$.headerWrapper.disabled'}
	],

	/**
	* @private
	*/
	create: function () {
		ExpandableListItem.prototype.create.apply(this, arguments);
		this.requestPickerReflow();
		this.valueChanged();
	},

	/**
	* @private
	*/
	requestPickerReflow: function () {
		this._needsPickerReflow = true;
	},

	/**
	* Intentionally using an observer instead of a binding since the order of applying `value`,
	* `min`, and `max` is important. Bindings are processed after `create()` so calling this
	* in `create()` guarantees it runs first.
	*
	* @private
	*/
	valueChanged: function () {
		this.$.picker.set('value', this.value);
	},

	/**
	* Change handler
	*
	* @private
	*/
	openChanged: function () {
		ExpandableListItem.prototype.openChanged.apply(this, arguments);
		this.setActive(this.getOpen());
		this.$.currentValue.set('showing', !this.open);
		if (this.open && this._needsPickerReflow) {
			this.$.picker.reflow();
			this._needsPickerReflow = false;
		}
	},

	/**
	* If picker is open, closes and spots header; if picker is closed, opens and unspots.
	*
	* @private
	*/
	toggleActive: function () {
		if (this.getOpen()) {
			this.setActive(false);
			if (!Spotlight.getPointerMode()) {
				Spotlight.spot(this.$.headerWrapper);
			}
		} else {
			this.setActive(true);
		}
	},

	/**
	* Catch onChange events from the picker and update the value as it may have been clamped
	* by the picker's `step` property. Firing its own event so `content` can be fixed because
	* it may not have synced to SimpleIntegerPicker before this fires (e.g. the first time).
	*
	* @private
	*/
	pickerValueChanged: function (sender, event) {
		var content = this.unit? event.value + ' ' + this.unit : event.value;
		this.set('value', event.value);
		this.$.currentValue.set('content', content);

		this.doChange({
			value: this.value,
			content: content
		});

		return true;
	},

	/**
	* @private
	*/
	spotlightDown: function (inSender, inEvent) {
		if (this.getLockBottom() && (inEvent.originator === this.$.picker) && this.getOpen()) {
			return true;
		}
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../moonstone":119,"../../../spotlight":275,"../ExpandableListDrawer":144,"../ExpandableListItem":145,"../Item":162,"../Marquee":166,"../SimpleIntegerPicker":183}],263:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	Control = require('../../../enyo/lib/Control');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Divider = require('../../../moonstone/lib/Divider'),
	FormCheckbox = require('../../../moonstone/lib/FormCheckbox'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	SimpleIntegerPicker = require('../../../moonstone/lib/SimpleIntegerPicker'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moon.sample.SimpleIntegerPickerSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components:[
		{kind: Scroller, fit: true, components: [
			{kind: Divider, content: 'Simple Integer Picker'},
			{kind: SimpleIntegerPicker, name: 'picker1', value:3, min:-10, max:10, step: 1, unit: 'sec', onChange: 'change'},

			{kind: Divider, content: 'Options'},
			{kind: FormCheckbox, content: 'Animate', checked: true, prop: 'animate', onchange: 'checked'},
			{kind: FormCheckbox, content: 'Wrap', prop: 'wrap', onchange: 'checked'},
			{kind: FormCheckbox, content: 'Padding (3 digits)', onchange: 'paddingChecked'},
			{kind: FormCheckbox, content: 'Labeled (sec)', checked: true, onchange: 'labelChecked'},
			{kind: FormCheckbox, content: 'Disabled', prop: 'disabled', onchange: 'checked'}
		]},
		{kind: ToggleButton, content: 'Toggle RTL', ontap: 'buttonTapped'},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', content: 'No action yet.'}
	],
	change: function (sender, event) {
		this.$.result.setContent(sender.name + ' changed to ' + event.content + ' (' + event.value + ')');
	},
	buttonTapped: function (sender, event) {
		if (sender.getActive()) {
			Control.prototype.rtl = true;
			dom.addBodyClass('enyo-locale-right-to-left');
		} else {
			Control.prototype.rtl = false;
			dom.removeClass(document.body, 'enyo-locale-right-to-left');
		}
	},
	checked: function (sender, event) {
		this.$.picker1.set(sender.prop, sender.checked);
	},
	paddingChecked: function (sender, event) {
		this.$.picker1.set('digits', sender.checked? 3 : null);
		this.$.picker1.render();
	},
	labelChecked: function (sender, event) {
		this.$.picker1.set('unit', sender.checked? 'sec' : null);
		this.$.picker1.render();
	}
});
},{"../../../enyo/lib/Control":26,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/FormCheckbox":148,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SimpleIntegerPicker":183,"../../../moonstone/lib/ToggleButton":191}],268:[function(require,module,exports){
var
	hooks = require('../../../enyo/lib/hooks'),
	kind = require('../../../enyo/lib/kind');

var
	FittableRows = require('../../../layout/lib/FittableRows');

var
	ilib = require('../../../enyo-ilib');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Button = require('../../../moonstone/lib/Button'),
	DatePicker = require('../../../moonstone/lib/DatePicker'),
	Divider = require('../../../moonstone/lib/Divider'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	TimePicker = require('../../../moonstone/lib/TimePicker');

module.exports = kind({
	name: 'moon.sample.TimePickerSample',
	kind: FittableRows,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Scroller, fit: true, components: [
			{classes: 'moon-7h moon-vspacing-s', components: [
				{kind: DatePicker, name: 'pickerDateLinked', noneText: 'Pick a Date', content: 'Linked Date', onChange: 'dateChanged'},
				{kind: TimePicker, name: 'pickerTimeLinked', noneText: 'Pick a Time', content: 'Linked Time', meridiemEnable: true, onChange: 'timeChanged'},
				{kind: TimePicker, name: 'pickerTime', noneText: 'Pick a Time', content: 'Time', meridiemEnable: true, onChange: 'timeChanged'},
				{kind: Button, name: 'buttonReset', content: 'Reset Time', small: true, ontap: 'resetTapped'},
				{kind: TimePicker, name: 'pickerDisabled', meridiemEnable: true, disabled: true, noneText: 'Disabled Time Picker', content: 'Disabled Time'},
				{kind: ExpandablePicker, name: 'pickerLocale', noneText: 'No Locale Selected', content: 'Choose Locale', onChange: 'setLocale', components: [
					{content: 'Use Default Locale', active: true},
					{content: 'ko-KR'},
					{content: 'zh-TW'},
					{content: 'fa-IR'},
					{content: 'ar-SA'},
					{content: 'ur-IN'},
					{content: 'th-TH'},	//Thailand
					{content: 'en-US'},
					{content: 'jp-JP'},
					{content: 'en-CA'},
					{content: 'en-IE'},
					{content: 'en-GB'},
					{content: 'en-MX'},
					{content: 'de-DE'},
					{content: 'fr-FR'},
					{content: 'fr-CA'},
					{content: 'it-IT'},
					{content: 'es-ES'},
					{content: 'es-MX'},
					{content: 'es-US'}
				]}
			]}
		]},
		{kind: Divider, content: 'Result'},
		{kind: BodyText, name: 'result', content: 'No change yet'}
	],
	bindings: [
		{from: '.value', to: '.$.pickerDateLinked.value', oneWay:false},
		{from: '.value', to: '.$.pickerTimeLinked.value', oneWay:false}
	],
	create: function (){
		FittableRows.prototype.create.apply(this, arguments);
		if (!ilib) {
			this.$.pickerLocale.hide();
			this.log('iLib not present -- hiding locale picker');
		}
		this.set('value', new Date('Mar 09 2014 01:59'));
	},
	setLocale: function (sender, event){
		if (ilib) {
			var locale = event.selected.content,
				val = (locale == 'Use Default Locale') ? null : locale;
			hooks.updateLocale(locale);
			this.$.pickerDateLinked.setLocale(val);
			this.$.pickerTimeLinked.setLocale(val);
			this.$.pickerTime.setLocale(val);
			this.$.pickerDisabled.setLocale(val);
			this.$.result.setContent('locale changed to ' + locale);
		}
		return true;
	},
	timeChanged: function (sender, event) {
		if (this.$.result && event.value){
			var timeArray = event.value.toTimeString().split(': ');
			this.$.result.setContent(event.name + ' changed to ' + timeArray[0] + ': ' + timeArray[1]);
		}
	},
	dateChanged: function (sender, event) {
		if (this.$.result && event.value){
			this.$.result.setContent(event.name + ' changed to ' + event.value.toDateString());
		}
	},
	resetTapped: function (sender, event) {
		this.$.pickerTime.set('open', false);
		this.$.pickerTime.set('value', null);
		return true;
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/hooks":92,"../../../enyo/lib/kind":96,"../../../layout/lib/FittableRows":115,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/DatePicker":135,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/TimePicker":190}],133:[function(require,module,exports){
require('../../../moonstone');

var
	kind = require('../../../enyo/lib/kind'),
	dom = require('../../../enyo/lib/dom'),
	util = require('../../../enyo/lib/utils'),
	ri = require('../../../enyo/lib/resolution'),
	DataGridList = require('../../../enyo/lib/DataGridList');

var
	Spotlight = require('../../../spotlight');

var
	DataList = require('../DataList'),
	DataListSpotlightSupport = DataList.SpotlightSupport,
	Scroller = require('../Scroller'),
	ScrollStrategy = require('../ScrollStrategy');

/**
* {@link moon.DataGridList} is an {@link enyo.DataGridList} with Moonstone visual
* styling applied.
*
* @class moon.DataGridList
* @extends enyo.DataGridList
* @mixes moon.DataListSpotlightSupport
* @ui
* @public
*/
var MoonDataGridList = module.exports = kind(
	/** @lends moon.DataGridList.prototype */ {

	/**
	* @private
	*/
	name: 'moon.DataGridList',

	/**
	* @private
	*/
	kind: DataGridList,

	/**
	* @private
	*/
	mixins: [DataListSpotlightSupport],

	/**
	* @private
	*/
	noDefer: true,

	/**
	* @private
	*/
	allowTransitions: false,

	/**
	* @private
	*/
	spotlight: true,

	/**
	* @private
	*/
	scrollerOptions: { kind: Scroller, vertical:'scroll', horizontal: 'hidden' },

	/**
	* @private
	*/
	handlers: {
		onSpotlightFocus   : 'handleSpotlightFocus',
		onSpotlightBlur    : 'handleSpotlightBlur',
		onSpotlightFocused : 'handleSpotlightFocused'
	},

	/**
	* @private
	*/
	initContainer: function() {
		// Our delegate relies on scroll column metrics, so we
		// need to ask the scroller to measure the columns for us
		this.scrollerOptions.measureScrollColumns = true;
		DataGridList.prototype.initContainer.apply(this, arguments);
	},

	/**
	* @private
	*/
	constructor: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			// scale px values for current resolution
			this.spacing = ri.scale(this.spacing);
			this.minWidth = ri.scale(this.minWidth);
			this.minHeight = ri.scale(this.minHeight);
		};
	}),

	/**
	* @private
	*/
	handleSpotlightFocus: function (inSender, inEvent) {
		var c = inEvent.originator;
		var isClientControl = this.getClientControls().indexOf(c) >= 0;
		if(isClientControl) {
			var zIndex = parseInt(dom.getComputedStyleValue(c.hasNode(), 'z-index'), 10) || 0;
			c.applyStyle('z-index', zIndex + 1);
		}
	},

	/**
	* @private
	*/
	handleSpotlightBlur: function (inSender, inEvent) {
		var c = inEvent.originator;
		var isClientControl = this.getClientControls().indexOf(c) >= 0;
		if(isClientControl) {
			setTimeout(this.bindSafely(function () {
				c.applyStyle('z-index', null);
			}), 0);
		}
	},

	/**
	* @private
	*/
	handleSpotlightFocused: function (inSender, inEvent) {
		if (!Spotlight.getPointerMode()) {
			if (inEvent.index < this.indexBoundFirstRow) {
				this.$.scroller.scrollToTop();
			} else if (inEvent.index > this.indexBoundLastRow) {
				this.$.scroller.scrollToBottom();
			}
		}
	}
});

/**
* Overload the delegate strategy to incorporate measurements for our scrollers
* when they are visible.
*
* @private
*/
var p = MoonDataGridList.delegates.verticalGrid = util.clone(DataGridList.delegates.vertical);
kind.extendMethods(p, {
	/**
	* Overriding refresh() to stop scroller and stop scrolling.
	*
	* @method
	* @private
	*/
	refresh: kind.inherit(function (sup) {
		return function (list) {
			sup.apply(this, arguments);
			list.$.scroller.stop();
		};
	}),

	/**
	* Overriding scrollToControl() to specify Moonstone-specific scroller options.
	* No need to call the super method, so we don't wrap in enyo.inherit().
	*
	* @method
	* @private
	*/
	scrollToControl: function(list, control) {
		list.$.scroller.scrollToControl(control, false, false, true);
	},

	/**
	* Overriding scrollTo() to specify Moonstone-specific scroller options.
	* No need to call the super method, so we don't wrap in enyo.inherit().
	*
	* @method
	* @private
	*/
	scrollTo: function(list, x, y) {
		list.$.scroller.scrollTo(x, y, false);
	},

	/**
	* moon.ScrollStrategy dynamically shows / hides scroll controls
	* depending on whether there's enough content to scroll. It also
	* "steals" space from the scrollable content area to make room
	* for the controls. This means we need to calculate whether scroll
	* controls will be required before generating list pages so that we
	* can adjust our metrics accordingly.
	*
	* We do this by overriding the width() method, so that we can
	* subtract the width of the scroll column in cases where we
	* calculate that we'll need to scroll.
	*
	* @method
	* @private
	*/
	width: kind.inherit(function (sup) {
		return function (list) {
			var w = sup.apply(this, arguments),
				s = list.$.scroller,
				v = s.getVertical(),
				a, b, r, h;
			if (s.spotlightPagingControls) {
				a = true;
			}
			else if (v === 'auto') {
				b = s.getScrollBounds();
				this.calculateMetrics(list, w);
				r = Math.ceil(list.collection.length / list.columns);
				h = r * this.childSize(list);
				a = (h > b.clientHeight);
			}
			else {
				a = (v === 'scroll');
			}
			if (a) {
				w = w - ScrollStrategy.vScrollColumnSize;
				this.calculateMetrics(list, w);
			}
			return w;
		};
	})
}, true);
},{"../../../enyo/lib/DataGridList":29,"../../../enyo/lib/dom":87,"../../../enyo/lib/kind":96,"../../../enyo/lib/resolution":104,"../../../enyo/lib/utils":106,"../../../moonstone":119,"../../../spotlight":275,"../DataList":134,"../ScrollStrategy":178,"../Scroller":180}],209:[function(require,module,exports){
var
	hooks = require('../../../enyo/lib/hooks'),
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection'),
	DataRepeater = require('../../../enyo/lib/DataRepeater'),
	Router = require('../../../enyo/lib/Router');

var
	ilib = require('../../../enyo-ilib');

var
	Button = require('../../../moonstone/lib/Button'),
	ContextualPopup = require('../../../moonstone/lib/ContextualPopup'),
	ContextualPopupDecorator = require('../../../moonstone/lib/ContextualPopupDecorator'),
	DataList = require('../../../moonstone/lib/DataList'),
	Divider = require('../../../moonstone/lib/Divider'),
	Item = require('../../../moonstone/lib/Item'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem');

var locales = [
	{locale: 'local', title: '', selected: true},
	{locale: 'en-US', title: '<span class="light">- US English</span>'},
	{locale: 'ko-KR', title: '<span class="light">- Korean</span>'},
	{locale: 'th-TH', title: '<span class="light">- Thai, with tall characters</span>'},
	{locale: 'ar-SA', title: '<span class="light">- Arabic, RTL and standard font</span>'},
	{locale: 'ur-PK', title: '<span class="light">- Urdu, RTL and custom Urdu font</span>'},
	{locale: 'zh-Hant-HK', title: '<span class="light">- Traditional Chinese, custom Hant font</span>'},
	{locale: 'ja-JP', title: '<span class="light">- Japanese, custom Japanese font</span>'}
];

var LocaleItem = kind({
	kind: ToggleItem,
	handleTapEvent: false,
	observers: {
		updateTitle: ['locale', 'title']
	},
	updateTitle: function() {
		this.set('content', this.locale + ' ' + this.title);
	}
});

var appRouter = kind({
	kind: Router,
	history: true,
	routes: [
		{path: ':sampleName/:locale', handler: 'handleRoute'},
		{path: ':sampleName', handler: 'handleRoute'},
		{path: '/:locale', handler: 'handleRouteLocaleOnly'}
	],
	events: {
		onRouteChange: ''
	},
	handleRoute: function (sampleName, locale) {
		this.doRouteChange({sampleName: sampleName, locale: locale || 'local'});
	},
	handleRouteLocaleOnly: function (locale) {
		this.handleRoute({sampleName: null, locale: locale});
	}
});

/**
* _Moonstone Sample_ is a tool for displaying and interacting with sample code in the Moonstone
* user interface library. This tool can display a list of all samples and load individual
* samples. The URL to access samples accepts a sample-name and an optional internationalization
* locale to load the sample in. When browsing through and running the samples, the URL will
* automatically update as necessary.
*
* Some example URLs:
* * Sample.html
* * Sample.html#ButtonSample
* * Sample.html#ButtonSample/ar-SA
*
* If you'd like to add a sample to the list, you'll need to include it, and any related files,
* in the _package.js_ file in this directory. Be sure to name your file the same as your
* sample's kind.
*
* **Example:** _ContextualPopupSample.js_
* ```
* enyo.kind({
*     name: 'moon.sample.ContextualPopupSample',
*     ...
* });
* ```
*
* @namespace moon.sample
*/
module.exports = kind({
	name: 'moon.sample.All',
	classes: 'moon enyo-unselectable enyo-fit',
	themes: {
		'dark': 'moonstone-dark.css',
		'light': 'moonstone-light.css'
	},
	published: {
		sample: null,
		samples: null,
		locale: 'local',
		theme: 'dark',
		location: function () {
			var s = this.get('sample') || ''	,
				locale = this.get('locale');
			return s + ((!locale || locale == 'local') ? '' : '/' + locale);
		}
	},
	components: [
		{classes: 'moon-sample-persistant-hotspot', components: [
			{classes: 'moon-sample-persistant-frame', spotlight: 'container', components: [
				{kind: Button, content: 'Reload', small: true, spotlight: false, classes: 'moon-sample-persistant-locale-button', ontap: 'reload'},
				{kind: Button, content: 'Back to List', small: true, spotlight: false, classes: 'moon-sample-persistant-locale-button', ontap: 'backToList'},
				{kind: ContextualPopupDecorator, components: [
					{kind: Button, content: 'Set Locale', small: true, spotlight: false, classes: 'moon-sample-persistant-locale-button'},
					{name: 'localePopup', kind: ContextualPopup, classes: 'moon-sample-locale-popup', components: [
						{content: 'Set Locale', kind: Divider},
						{name: 'localeRepeater', kind: DataRepeater, ontap: 'localeListTapped', selection: true, groupSelection: true, selectionProperty: 'selected', containerOptions: {kind: Scroller, classes: 'enyo-fill'}, fit: true, components: [
							{kind: LocaleItem, allowHtml: true, bindings: [
								{from:'model.locale', to: 'locale'},
								{from:'model.title', to: 'title'},
								{from:'model.selected', to: 'checked'}
							]}
						]}
					]}
				]},
				{kind: ToggleButton, toggleOffLabel: 'Dark Theme', toggleOnLabel: 'Light Theme', small: true, ontap: 'handleThemeTap'}
			]}
		]},
		{name: 'home'},
		{name: 'router', kind: appRouter, history: true, triggerOnStart: true}
	],
	bindings: [
		{from: 'locales', to: '$.localeRepeater.collection'}
	],
	listTools: [
		{kind: Panels, pattern: 'activity', classes: 'enyo-fit', components: [
			{kind: Panel, title: 'Samples', headerType: 'small',
				components: [
					{name: 'list', kind: DataList, components: [
						{kind: Item, ontap: 'chooseSample', classes: 'enyo-border-box', bindings: [
							{from: 'model.label', to: 'content'}
						]}
					]}
				]
			}
		]}
	],
	handlers: {
		onRouteChange: 'handleRoute'
	},
	computed: {
		location: ['sample', 'locale']
	},
	initComponents: kind.inherit(function (sup) {
		return function () {
			sup.apply(this, arguments);
			this.themeNodeStore = {};
		};
	}),
	create: kind.inherit(function (sup) {
		return function () {
			this.locales = new Collection(locales);
			sup.apply(this, arguments);

			this.initializeThemes();
		};
	}),
	createList: function () {
		var samples = this.get('samples'),
			sorted = Object.keys(samples).sort(),
			dataList = [];
		for (var i = 0; i < sorted.length; i++) {
			var sampleName = sorted[i],
				sample = samples[sampleName];

			dataList.push({sample: sample, name: sampleName, label: sampleName.replace(/(.*)Sample$/i, '$1')});
		}
		if (!this.$.list) {
			this.$.home.createComponents(this.listTools, {owner: this});
		}
		this.render();
		if (dataList.length) {
			var c = new Collection(dataList);
			this.$.list.set('collection', c);
		}
	},
	localeListTapped: function (sender, ev) {
		var locale = ev.model.get('locale');
		if (locale) {
			this.set('locale', locale);
		}
	},
	handleRoute: function (sender, ev) {
		this.set('sample', ev.sampleName);
		this.set('locale', ev.locale);
	},
	localeChanged: function (oldLocale, newLocale) {
		console.log('Setting Locale:', newLocale);
		if (this.$.localePopup && this.$.localePopup.get('showing')) {
			this.$.localePopup.hide();
		}
		this.locales.find(function(elem) { return elem.get('locale') == newLocale; }).set('selected', true);
		hooks.updateLocale(newLocale);
		this.$.router.trigger({location: this.get('location'), change: true});
	},
	sampleChanged: function (was, is) {
		if (was) {
			this.$[was].destroy();
		}

		if (this.get('sample')) {
			this.openSample();
		} else {
			// We have no sample, just render out the list.
			this.activateList();
		}
	},
	activateList: function () {
		console.log('%cList all of the Samples', 'color:green');
		this.disableAllStylesheets();
		if (this.$.sample) {
			this.$.sample.destroy();
		}
		this.$.home.show();
		if (!this.$.home.hasNode() || !this.$.home.hasNode().children.length) {
			// We've never been generated, lets fix that.
			this.createList();
		}
		this.render();
	},
	backToList: function () {
		this.set('sample', null);
		this.$.router.trigger({location: this.get('location'), change: true});
		this.checkLocale();
	},
	reload: function () {
		window.location.reload();
	},
	chooseSample: function (sender, ev) {
		this.set('sample', ev.model.get('name'));
		this.checkLocale();
	},
	openSample: function () {
		var s = this.get('sample'),
			loc;

		// this.disableAllStylesheets();

		if (s) {
			// Enable the stylesheet
			// this.enableStylesheet(s);

			loc = this.get('location');
			this.$.router.trigger({location: loc, change: true});
			this.$.home.hide();
			this.createComponent({name: s, kind: this.samples[s]}).render();
			console.log('%c Created and Launched Sample', 'color:green;');

		} else {
			this.createList();
		}
	},
	enableStylesheet: function (name) {
		var i, sheets = document.getElementsByClassName(name);
		for (i = 0; i < sheets.length; i++) {
			sheets[i].disabled = false;
		}
		return sheets.length;
	},
	disableAllStylesheets: function () {
		var sheets = document.getElementsByClassName('sample-style');
		for (var i = 0; i < sheets.length; i++) {
			sheets[i].disabled = true;
		}
	},
	initializeThemes: function () {
		var i,
			theme = this.get('theme'),
			cs = document.getElementsByTagName('link');

		for (i = 0; i < cs.length; i++) {
			if (cs[i].href.indexOf(this.themes[theme]) > 0) {
				// Save our current theme's node
				this.themeNodeStore[theme] = cs[i];
				// Setup the other themes' nodes
				for (var t in this.themes) {
					if (t != theme) {
						// Generate the new theme paths based on the existing (found) theme path
						var tn = this.createNode('link', {
							href: cs[i].href.replace(this.themes[theme], this.themes['light']),
							rel: 'stylesheet',
							disabled: true
						});
						// Add it to the store and append to the head, already disabled
						this.themeNodeStore[t] = tn;
						this.appendToHead(tn);
					}
				}
				return this.themeNodeStore[theme];
			}
		}
	},
	themeChanged: function (oldTheme, newTheme) {
		this.themeNodeStore[oldTheme].disabled = true;
		this.themeNodeStore[newTheme].disabled = false;
	},
	handleThemeTap: function (sender, ev) {
		this.set('theme', ev.originator.owner.get('value') ? 'light' : 'dark');
	},
	createNode: function (tagName, attrs) {
		var key, node = document.createElement(tagName);
		if (attrs && Object.keys(attrs)) {
			for (key in attrs) {
				if (key.match(/^on\w/) || key == 'disabled') {
					node[key] = attrs[key];
				} else if (key == 'content') {
					node.innerHTML = attrs[key];
				} else {
					node.setAttribute(key, attrs[key]);
				}
			}
		}
		return node;
	},
	appendToHead: function (node) {
		if (typeof node == 'string') {
			document.head.insertAdjacentHTML('beforeend', node );
		} else {
			document.head.appendChild( node );
		}
	},
	checkLocale: function () {
		// Reset locale in the event one of the samples changes it
		if (ilib && ilib.getLocale() != this.locale) {
			this.localeChanged(ilib.getLocale(), this.locale);
		}
	}
});
},{"../../../enyo-ilib":8,"../../../enyo/lib/Collection":22,"../../../enyo/lib/DataRepeater":31,"../../../enyo/lib/Router":61,"../../../enyo/lib/hooks":92,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/ContextualPopup":130,"../../../moonstone/lib/ContextualPopupDecorator":132,"../../../moonstone/lib/DataList":134,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleButton":191,"../../../moonstone/lib/ToggleItem":192}],219:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	utils = require('../../../enyo/lib/utils'),
	Collection = require('../../../enyo/lib/Collection'),
	Control = require('../../../enyo/lib/Control');

var
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	ExpandableInput = require('../../../moonstone/lib/ExpandableInput'),
	DataList = require('../../../moonstone/lib/DataList'),
	Panels = require('../../../moonstone/lib/Panels'),
	Button = require('../../../moonstone/lib/Button'),
	Drawers = require('../../../moonstone/lib/Drawers'),
	CaptionDecorator = require('../../../moonstone/lib/CaptionDecorator'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');

module.exports = kind({
	name: 'moons.sample.DataListSample',
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
		{name: 'drawers', kind: Drawers, drawers: [
			{handle: {}, controlsOpen: true, controlDrawerComponents: [
				{classes: 'moon-hspacing', controlClasses: 'moon-4h', components: [
					{name: 'orientation', kind: ExpandablePicker, selectedIndex: 0, content: 'Orientation', components: [
						{content: 'vertical'},
						{content: 'horizontal'}
					], style: 'vertical-align: top;'},
					{name: 'recordCount', kind: ExpandableInput, content: 'Record Count', value: 1000, onchange: 'updateRecords', style: 'vertical-align: top;'},
					{name: 'scrollIndex', kind: ExpandableInput, value: 0, content: 'Scroll to Index', onblur: 'scrollToIndex', style: 'vertical-align: top;'},
					{name: 'debugging', kind: ExpandablePicker, selectedIndex: 0, content: 'Page Debugging', components: [
						{value: false, content: 'off'},
						{value: true, content: 'on'}
					], style: 'vertical-align: top;'},
					{kind: Button, content: 'Hide', ontap: 'toggleShowing'}
				]}
			]}
		], components: [
			{kind: Panels, pattern: 'activity', classes: 'enyo-fit', components: [
				{name: 'repeaterContainer', kind: Control}
			]}
		]},
		{name: 'collection', kind: Collection}
	],
	bindings: [
		{from: '.$.orientation.selected.content', to: '.orientation'},
		{from: '.$.debugging.selected.value', to: '.repeaterDebugging'},
		{from: '.$.recordCount.value', to: '.recordCount', debug: true, oneWay: false, transform: function (v) {return (v !== undefined && v !== null && !isNaN(v))? v: undefined;}},
		{from: '.$.collection', to: '.$.repeater.collection'},
		{from: '.side', to: '.$.repeater.side'}
	],
	generateRecords: function (amount) {
		var records = this.$.collection.models
			, add = []
			, i = records.length
			, len = (i + (!isNaN(amount)? amount: 0));
		
		for (; i<len; ++i) {
			add.push({
				on: false,
				disabled: Boolean(i % 10 === 0),
				caption: 'Caption ' + i,
				label: 'Label ' + i
			});
		}
		
		return add;
	},
	scrollToIndex: function (sender, event) {
		var newIndex = sender.getValue();
		if (this.isScrolled || newIndex !== this.currentIndex) {
			this.currentIndex = newIndex;
			this.$.drawers.closeDrawers();
			this.$.repeater.scrollToIndex(newIndex);
			this.isScrolled = false;
		}
	},
	scrollStopped: function() {
		this.isScrolled = true;
	},
	toggleShowing: function (sender) {
		var showing = ! this.$.repeater.getShowing();
		this.$.repeater.setShowing(showing);
		sender.set('content', (showing? 'Hide': 'Show'));
	},
	repeaterDebuggingChanged: function () {
		if (this.$.repeater) {
			this.$.repeater.addRemoveClass('debug', this.repeaterDebugging);
		}
	},
	orientationChanged: function () {
		var props = utils.mixin({}, [this.repeaterDefaults, {orientation: this.orientation}]),
			cp    = this.controlParent,
			c;
		if (this.$.repeater) {
			this.$.repeater.destroy();
		}
		this.set('side', this.orientation == 'vertical'? 'left': 'bottom');
		this.controlParent = this.$.repeaterContainer;
		c = this.createComponent(props);
		c.render();
		this.controlParent = cp;
	},
	recordCountChanged: function () {
		var count   = this.get('recordCount'),
			num     = Math.min(Math.max(count, 0), 1000),
			records = this.$.collection.models;
		if (num != count) {
			this.set('recordCount', num);
		}
		if (records.length > num) {
			this.$.collection.remove(records.slice(num));
		} else if (records.length < num) {
			this.$.collection.add(this.generateRecords(Math.abs(records.length - num)));
		}
	},
	repeaterDefaults: {name: 'repeater', kind: DataList, components: [
		{classes: 'enyo-border-box', components: [
			{name: 'caption', kind: CaptionDecorator, components: [
				{name: 'button', kind: ToggleButton}
			]}
		], bindings: [
			{from: '.model.caption', to: '.$.caption.content'},
			{from: '.repeater.side', to: '.$.caption.side'},
			{from: '.model.label', to: '.$.button.content'},
			{from: '.model.disabled', to: '.$.button.disabled'},
			{from: '.model.on', to: '.$.button.value', oneWay: false}
		]}
	], onScrollStop: 'scrollStopped'}
});

},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/Control":26,"../../../enyo/lib/kind":96,"../../../enyo/lib/utils":106,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CaptionDecorator":125,"../../../moonstone/lib/DataList":134,"../../../moonstone/lib/Drawers":140,"../../../moonstone/lib/ExpandableInput":142,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/ToggleButton":191}],234:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection'),
	ProgressiveFilter = require('../../../enyo/lib/ProgressiveFilter');

var
	$L = require('../../../moonstone/lib/i18n'),
	Button = require('../../../moonstone/lib/Button'),
	DataList = require('../../../moonstone/lib/DataList'),
	Divider = require('../../../moonstone/lib/Divider'),
	HighlightText = require('../../../moonstone/lib/HighlightText'),
	InputHeader = require('../../../moonstone/lib/InputHeader'),
	Item = require('../../../moonstone/lib/Item'),
	Marquee = require('../../../moonstone/lib/Marquee'),
	MarqueeItem	= Marquee.Item,
	MarqueeSupport = Marquee.Support,
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller');

// FIXME. RE-IMPLEMENT FILTERING.
// Removed the old Enyo 2.3.0 implementation of collection filters from this sample that was removed
// before 2.4.0 went final. We'll restore filtering to this sample once we have the new filter
// implementation as part of post-2.4.0 work.
module.exports = kind({
	name: 'moon.sample.HighlightTextSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Panels, pattern: 'activity', classes: 'enyo-fit', components: [
			{kind: Panel, title: 'STATIC', titleBelow: 'Simple items', subTitleBelow: 'Case insensitive', classes: 'moon-6h', components: [
				{kind: Scroller, fit: true, components: [
					{kind: Divider, content: 'Standard highlight'},
					{kind: Item, components: [
						{kind: HighlightText, content: 'Very long text to see highlight with marquee', highlight: 'text', mixins: [MarqueeItem]}
					]},
					{kind: Item, components: [
						{kind: HighlightText, content: 'Text to highlight', highlight: 'to'}
					]},
					{kind: Item, components: [
						{kind: HighlightText, content: 'Text to highlight', highlight: 'highlight'}
					]},
					{kind: Divider, content: 'Custom highlight classes'},
					{kind: Item, components: [
						{kind: HighlightText, content: 'Text to highlight', highlight: 'text', highlightClasses: 'highlight-text-sample-red'}
					]},
					{kind: Item, components: [
						{kind: HighlightText, content: 'Text to highlight', highlight: 'to', highlightClasses: 'highlight-text-sample-blue'}
					]},
					{kind: Item, components: [
						{kind: HighlightText, content: 'Text to highlight', highlight: 'highlight', highlightClasses: 'highlight-text-sample-fancy'}
					]},
					{kind: Divider, content: 'Custom control with marquee'},
					{tag: 'div', style: 'border: 2px dotted grey; margin: 5px 10px;', marqueeOnSpotlight: false, marqueeOnRender: true, mixins: [MarqueeSupport], components: [
						{name: 'dynamic', kind: HighlightText, highlight: 'text', mixins: [MarqueeItem], content:$L('Very long text to see highlight with marquee but not using item')}
					]},
					{kind: Button, content: 'Dynamic Content Change', ontap: 'changeContent'}
				]}
			]},
			{name: 'inputPanel', kind: Panel, headerOptions: {kind: InputHeader}, classes: 'moon-6h', joinToPrev: true, oninput: 'search', components: [
				{kind: DataList, fit: true, name: 'list', components: [
					{kind: Item, bindings: [
						{from: '.model.text', to: '.$.text.content'},
						{from: '.controller.text', to: '.$.text.highlight'}
					], components: [
						{kind: HighlightText, name: 'text'}
					]}
				]}
			], title: 'SEARCH', titleBelow: 'Highlighted text in DataList', subTitleBelow: 'Case sensitive'}
		]}
	],
	bindings: [
		{from: '.filteredController', to: '.$.list.collection'},
		{from: '.$.inputPanel.$.header.value', to: '.controller.text'}
	],
	create: function () {
		this.controller = new Collection(this.data);
		this.filteredController = new ProgressiveFilter({
			collection: this.controller,
			method: function (model) {
				return model.get('text').indexOf(this.text) >= 0;
			}
		});
		this.inherited(arguments);
	},
	search: function (sender, event) {
		this.filteredController.reset();
		this.filteredController.text = event.originator.getValue();
		this.filteredController.filter();

		sender.waterfall('onHighlight', {highlight: event.originator.getValue()});
	},
	changeContent: function () {
		this.$.dynamic.setContent('Dynamic content change test, this text should be highlighted.');
	},
	data: [
		{ text: 'proident irure nostrud', isFolder: false },
		{ text: 'adipisicing veniam officia',isFolder: true },
		{ text: 'culpa adipisicing Lorem', isFolder: false },
		{ text: 'dolor ut excepteur', isFolder: false },
		{ text: 'elit veniam nulla', isFolder: true },
		{ text: 'irure laboris irure', isFolder: false },
		{ text: 'non do consectetur', isFolder: false },
		{ text: 'irure dolor laborum', isFolder: true },
		{ text: 'nulla aliqua laborum', isFolder: false },
		{ text: 'elit ad sit', isFolder: false },
		{ text: 'aliqua voluptate nulla', isFolder: false },
		{ text: 'non eiusmod nostrud', isFolder: true },
		{ text: 'elit est ullamco', isFolder: true },
		{ text: 'magna tempor minim', isFolder: true },
		{ text: 'excepteur Lorem id', isFolder: true },
		{ text: 'quis eiusmod aute', isFolder: false },
		{ text: 'proident cillum elit', isFolder: false },
		{ text: 'commodo dolor dolor', isFolder: false },
		{ text: 'amet laborum officia', isFolder: false },
		{ text: 'aute do enim', isFolder: false },
		{ text: 'ut proident elit', isFolder: false },
		{ text: 'ea reprehenderit velit', isFolder: false },
		{ text: 'ipsum aliqua deserunt', isFolder: true },
		{ text: 'ea minim incididunt', isFolder: false },
		{ text: 'reprehenderit amet dolore', isFolder: false },
		{ text: 'velit sunt enim', isFolder: false },
		{ text: 'sunt amet esse', isFolder: false },
		{ text: 'irure laboris voluptate', isFolder: false },
		{ text: 'sit est dolore', isFolder: false },
		{ text: 'eu sit sint', isFolder: true },
		{ text: 'voluptate in ad', isFolder: false },
		{ text: 'dolore ullamco in', isFolder: true },
		{ text: 'incididunt mollit reprehenderit', isFolder: true },
		{ text: 'cupidatat eiusmod deserunt', isFolder: false },
		{ text: 'minim labore veniam', isFolder: false },
		{ text: 'commodo reprehenderit irure', isFolder: false },
		{ text: 'voluptate eiusmod labore', isFolder: true },
		{ text: 'irure sint ullamco', isFolder: true },
		{ text: 'qui cillum fugiat', isFolder: true },
		{ text: 'ex ut do', isFolder: false },
		{ text: 'Lorem Lorem amet', isFolder: true },
		{ text: 'elit commodo consectetur', isFolder: false },
		{ text: 'sit enim nisi', isFolder: false },
		{ text: 'ipsum fugiat voluptate', isFolder: true },
		{ text: 'nisi commodo labore', isFolder: false },
		{ text: 'dolor cillum elit', isFolder: true },
		{ text: 'nisi do exercitation', isFolder: true },
		{ text: 'adipisicing mollit sint', isFolder: true },
		{ text: 'ipsum exercitation ex', isFolder: true },
		{ text: 'duis voluptate do', isFolder: false },
		{ text: 'in do tempor', isFolder: true },
		{ text: 'amet id anim', isFolder: true },
		{ text: 'culpa voluptate sunt', isFolder: true },
		{ text: 'amet do do', isFolder: true },
		{ text: 'sunt fugiat consectetur', isFolder: false },
		{ text: 'in sit consequat', isFolder: true },
		{ text: 'voluptate dolore deserunt', isFolder: true },
		{ text: 'elit sit duis', isFolder: false },
		{ text: 'consectetur laboris in', isFolder: false },
		{ text: 'ipsum aliquip quis', isFolder: true },
		{ text: 'consectetur non ad', isFolder: true },
		{ text: 'id voluptate et', isFolder: false },
		{ text: 'ullamco labore ullamco', isFolder: true },
		{ text: 'ipsum pariatur enim', isFolder: false },
		{ text: 'ea excepteur magna', isFolder: false },
		{ text: 'ullamco enim tempor', isFolder: false },
		{ text: 'ex ex mollit', isFolder: false },
		{ text: 'sunt aliqua cillum', isFolder: true },
		{ text: 'nostrud incididunt commodo', isFolder: false },
		{ text: 'officia quis ut', isFolder: false },
		{ text: 'officia ipsum ipsum', isFolder: false },
		{ text: 'non qui amet', isFolder: true },
		{ text: 'duis quis pariatur', isFolder: false },
		{ text: 'enim dolor incididunt', isFolder: true },
		{ text: 'laboris Lorem anim', isFolder: false },
		{ text: 'pariatur eiusmod non', isFolder: true },
		{ text: 'anim commodo pariatur', isFolder: true },
		{ text: 'veniam anim tempor', isFolder: false },
		{ text: 'quis minim ex', isFolder: false },
		{ text: 'eu aliquip adipisicing', isFolder: false },
		{ text: 'labore est eiusmod', isFolder: true },
		{ text: 'Lorem et eiusmod', isFolder: false },
		{ text: 'voluptate est voluptate', isFolder: false },
		{ text: 'et mollit pariatur', isFolder: true },
		{ text: 'voluptate sunt tempor', isFolder: false },
		{ text: 'enim culpa ad', isFolder: true },
		{ text: 'non duis in', isFolder: true },
		{ text: 'consectetur mollit deserunt', isFolder: true },
		{ text: 'eiusmod laborum eu', isFolder: true },
		{ text: 'nisi nulla consequat', isFolder: false },
		{ text: 'voluptate qui amet', isFolder: false },
		{ text: 'laborum cupidatat in', isFolder: false },
		{ text: 'incididunt dolor dolore', isFolder: false },
		{ text: 'irure sint sunt', isFolder: true },
		{ text: 'elit duis sit', isFolder: false },
		{ text: 'cillum quis commodo', isFolder: true },
		{ text: 'ut elit aliqua', isFolder: false },
		{ text: 'amet ipsum in', isFolder: true },
		{ text: 'minim et pariatur', isFolder: false },
		{ text: 'ea officia nisi', isFolder: false }
	]
});
},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/ProgressiveFilter":57,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/DataList":134,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/HighlightText":151,"../../../moonstone/lib/InputHeader":160,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Marquee":166,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/i18n":203}],224:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Repeater = require('../../../enyo/lib/Repeater');

var
	Divider = require('../../../moonstone/lib/Divider'),
	Item = require('../../../moonstone/lib/Item'),
	ListActions = require('../../../moonstone/lib/ListActions'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator');

module.exports = kind({
	name: 'moon.sample.DynamicPanelsSample',
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
		{name: 'panels', kind: Panels, popOnBack:true, wrap: true, pattern: 'activity', classes: 'enyo-fit'}
	],
	rendered: function () {
		this.inherited(arguments);
		this.pushSinglePanel();
	},
	pushSinglePanel: function() {
		this.$.panels.pushPanels([
			{title: 'Panel ' + this.$.panels.getPanels().length, classes: 'moon-7h', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', components: [
				{kind: Scroller, fit:true, components: [
					{kind: Repeater, count: 30, components: [
						{kind: Item, content: 'Dummy Item', ontap: 'next'}
					]}
				]}
			], headerComponents: [
				{kind: TooltipDecorator, components: [
					{kind: Tooltip, position: 'above', content: 'Test Dynamic Lists'},
					{kind: ListActions, icon: 'drawer', listActions: [
						{action: 'category3', components: [
							{kind: Divider, content: 'Dynamic List Action'},
							{kind: Item, content: 'Dummy Item 1'},
							{kind: Item, content: 'Dummy Item 2'}
						]}
					]}
				]}
			]}
		], {owner: this});
	},
	pushJoinedPanels: function() {
		this.$.panels.pushPanels([
			{title: 'Panel ' + this.$.panels.getPanels().length, classes: 'moon-7h', titleBelow: 'Joined Panel 1', subTitleBelow: 'Sub-sub title', components: [
				{kind: Scroller, fit:true, components: [
					{kind: Repeater, count: 30, components: [
						{kind: Item, content: 'Dummy Item', ontap: 'next'}
					]}
				]}
			]},
			{joinToPrev:true, title: 'Panel ' + (this.$.panels.getPanels().length+1), classes: 'moon-7h', titleBelow: 'Joined Panel 2', subTitleBelow: 'Sub-sub title', components: [
				{kind: Scroller, fit:true, components: [
					{kind: Repeater, count: 30, components: [
						{kind: Item, content: 'Dummy Item', ontap: 'next'}
					]}
				]}
			]}
		], {owner: this});
	},
	pushSeveralPanels: function() {
		this.$.panels.pushPanels([
			{title: 'Panel ' + this.$.panels.getPanels().length, titleBelow: '1 of 3 Panels', subTitleBelow: 'Sub-sub title', components: [
				{kind: Scroller, fit:true, components: [
					{kind: Repeater, count: 5, components: [
						{kind: Item, content: 'Dummy Item', ontap: 'next'}
					]}
				]}
			]},
			{title: 'Panel ' + (this.$.panels.getPanels().length+1), titleBelow: '2 of 3 Panels', subTitleBelow: 'Sub-sub title', components: [
				{kind: Scroller, fit:true, components: [
					{kind: Repeater, count: 10, components: [
						{kind: Item, content: 'Dummy Item', ontap: 'next'}
					]}
				]}
			]},
			{title: 'Panel ' + (this.$.panels.getPanels().length+2), titleBelow: '3 of 3 Panels', subTitleBelow: 'Sub-sub title', components: [
				{kind: Scroller, fit:true, components: [
					{kind: Repeater, count: 15, components: [
						{kind: Item, content: 'Dummy Item', ontap: 'next'}
					]}
				]}
			]}
			// targetIndex with a negative value works in conjunction with the wrap:true property.
			// Negative values count backward from the end while indices greater than the length
			// wrap around and start counting again from the beginning.
		], {owner: this}, {targetIndex: -1});
	},
	next: function() {
		var index = this.$.panels.getIndex();
		var length = this.$.panels.getPanels().length;
		if (index < (length-1)) {
			this.$.panels.next();
		} else if (length % 5 === 0) {
			this.pushSeveralPanels();
		} else if (length % 3 === 0) {
			this.pushJoinedPanels();
		} else {
			this.pushSinglePanel();
		}
	}
});

},{"../../../enyo/lib/Repeater":58,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/ListActions":165,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195}],235:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection'),
	Control = require('../../../enyo/lib/Control'),
	DataRepeater = require('../../../enyo/lib/DataRepeater');

var
	Spotlight = require('../../../spotlight');

var
	Button = require('../../../moonstone/lib/Button'),
	ChannelInfo = require('../../../moonstone/lib/ChannelInfo'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	Clock = require('../../../moonstone/lib/Clock'),
	ContextualPopup = require('../../../moonstone/lib/ContextualPopup'),
	ContextualPopupDecorator = require('../../../moonstone/lib/ContextualPopupDecorator'),
	DataList = require('../../../moonstone/lib/DataList'),
	Divider = require('../../../moonstone/lib/Divider'),
	Drawers = require('../../../moonstone/lib/Drawers'),
	IconButton = require('../../../moonstone/lib/IconButton'),
	Item = require('../../../moonstone/lib/Item'),
	ListActions = require('../../../moonstone/lib/ListActions'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Popup = require('../../../moonstone/lib/Popup'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem'),
	VideoInfoBackground = require('../../../moonstone/lib/VideoInfoBackground'),
	VideoInfoHeader = require('../../../moonstone/lib/VideoInfoHeader'),
	VideoPlayer = require('../../../moonstone/lib/VideoPlayer');

module.exports = kind({
	name: 'dmoon.sample.HistorySample',
	kind: Control,
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
		{
			name: 'drawers',
			kind: Drawers,
			drawers: [
				{
					name: 'partialDrawer',
					open: false,
					controlsOpen: false,
					onActivate: 'partialDrawerChanged',
					onDeactivate: 'partialDrawerChanged',
					handle: {name: 'handleButton', content: 'Partial drawer with long text truncation'},
					components: [
						{kind: Panel, classes: 'enyo-fit', title: 'Partial Drawer', components: [
							{kind: Item, content: 'Item One'},
							{kind: Item, content: 'Item Two'}
						]}
					],
					controlDrawerComponents: [
						{classes: 'moon-hspacing', components: [
							{kind: Button, name: 'openMoreButton', content: 'Open More', ontap: 'openMainDrawer'},
							{kind: Button, content: 'Close', ontap: 'close'}
						]}
					]
				},
				{
					name: 'searchDrawer',
					handle: {content: 'Full drawer'},
					components: [
						{kind: Panel, classes: 'enyo-fit', title: 'Full Drawer', components: [
							{kind: Item, content: 'Item One'},
							{kind: Item, content: 'Item Two'}
						]}
					]
				}
			],
			components: [
				{name: 'player', kind: VideoPlayer, src: 'http://media.w3.org/2010/05/bunny/movie.mp4', poster: 'assets/video-poster.png', autoplay: true, showing: false, infoComponents: [
					{kind: VideoInfoBackground, orient: 'left', background: true, fit: true, components: [
						{
							kind: ChannelInfo,
							channelNo: '13',
							channelName: 'AMC',
							classes: 'moon-2h',
							components: [
								{content: '3D'},
								{content: 'Live'},
								{content: 'REC 08:22', classes: 'moon-video-player-info-redicon '}
							]
						},
						{
							kind: VideoInfoHeader,
							title: 'Downton Abbey - Extra Title',
							subTitle: 'Mon June 21, 7:00 - 8:00pm',
							subSubTitle: 'R - TV 14, V, L, SC',
							description: 'The series, set in the Youkshire country estate of Downton Abbey, depicts the lives of the aristocratic Crawley famiry and'
						}
					]},
					{kind: VideoInfoBackground, orient: 'right', background: true, components: [
						{kind: Clock}
					]}
				], components: [
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'},
					{kind: IconButton, small: false, classes: 'moon-icon-video-round-controls-style'}
				]},
				{name: 'panels', kind: Panels, pattern: 'activity', classes: 'enyo-fit', useHandle: true, onShowingChanged: 'panelsShowingChanged', components: [
					{title: 'First Panel', classes: 'moon-7h', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', components: [
						{kind: Item, content: 'Item One', ontap: 'next1'},
						{kind: Item, content: 'Item Two', ontap: 'next1'},
						{kind: Item, content: 'Item Three', ontap: 'next1'},
						{kind: Item, content: 'Item Four', ontap: 'next1'},
						{kind: ToggleItem, content: 'Show/Hide Side Handle', checked: true,  onchange: 'handleShowingChanged'}
					]},
					{title: 'Second Panel', classes: 'moon-7h',
						joinToPrev: true, components: [
						{kind: Item, content: 'Item One', ontap: 'next2'},
						{kind: Item, content: 'Item Two', ontap: 'next2'},
						{kind: Item, content: 'Item Three', ontap: 'next2'},
						{kind: Item, content: 'Item Four', ontap: 'next2'},
						{kind: Item, content: 'Item Five', ontap: 'next2'}
					]},
					{title: 'Third Panel', classes: 'moon-7h', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', components: [
						{kind: Item, content: 'Item One', ontap: 'next3'},
						{kind: Item, content: 'Item Two', ontap: 'next3'},
						{kind: Item, content: 'Item Three', ontap: 'next3'},
						{kind: Item, content: 'Item Four', ontap: 'next3'},
						{kind: Item, content: 'Item Five', ontap: 'next3'}
					]},
					{title: 'Fourth', classes: 'moon-7h', joinToPrev: true, titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', headerComponents: [
						{kind: Button, content: 'Basic Popup', ontap: 'showPopup', popup: 'basicPopup'},
						{kind: ContextualPopupDecorator,	components:	[
							{content: 'ContextualPopup'},
							{kind: ContextualPopup, classes: 'moon-2h moon-8v', components: [
								{content: 'Item 1'},
								{content: 'Item 2'},
								{content: 'Item 3'}
							]}
						]},
						{kind: ContextualPopupDecorator,	components:	[
							{content: 'ContextualPopup'},
							{kind: ContextualPopup, classes: 'moon-2h moon-8v', components: [
								{content: 'Item 1'},
								{content: 'Item 2'},
								{content: 'Item 3'}
							]}
						]}
					], components: [
						{kind: Item, content: 'Item One', ontap: 'next4'},
						{kind: Item, content: 'Item Two', ontap: 'next4'},
						{kind: Item, content: 'Item Three', ontap: 'next4'},
						{kind: Item, content: 'Item Four', ontap: 'next4'},
						{kind: Item, content: 'Item Five', ontap: 'next4'},
						{name: 'basicPopup', kind: Popup, content: 'Popup...'},
						{name: 'directPopup', kind: Popup, autoDismiss: false, components: [
							{content: 'Direct Popup'},
							{kind: Button, content: 'Hide Direct', ontap: 'hidePopup', popup: 'directPopup', direct: true}
						]}
					]},
					{title: 'Fifth', classes: 'moon-7h', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', components: [
						{kind: Item, content: 'Item One', ontap: 'next5'},
						{kind: Item, content: 'Item Two', ontap: 'next5'},
						{kind: Item, content: 'Item Three', ontap: 'next5'},
						{kind: Item, content: 'Item Four', ontap: 'next5'},
						{kind: Item, content: 'Item Five', ontap: 'next5'}
					]},
					{title: 'Sixth', classes: 'moon-7h', joinToPrev: true, titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', headerComponents: [
						//* List actions with default width
						{kind: ListActions, name: 'listActions', icon: 'drawer', proportionalWidth: true, listActions: [
							{action: 'category2', components: [
								{kind: Divider, content: 'Category 2 (DataList)'},
								{kind: DataList, name: 'list', fit: true, components: [
									{kind: CheckboxItem, bindings: [{from: '.model.name', to: '.content'}]}
								]}
							]},
							{action: 'category1', components: [
								{kind: Divider, content: 'Category 1 (DataRepeater)'},
								{kind: DataRepeater, containerOptions: {kind: Scroller, classes: 'enyo-fill'}, name: 'repeater', fit: true, components: [
									{kind: ToggleItem, bindings: [{from: '.model.name', to: '.content'}]}
								]}
							]}
						]}
					], components: [
						{kind: Item, content: 'Item One', ontap: 'next6'},
						{kind: Item, content: 'Item Two', ontap: 'next6'},
						{kind: Item, content: 'Item Three', ontap: 'next6'},
						{kind: Item, content: 'Item Four', ontap: 'next6'},
						{kind: Item, content: 'Item Five', ontap: 'next6'}
					]},
					{title: 'Seventh', classes: 'moon-7h', titleBelow: 'Sub-title', subTitleBelow: 'Sub-sub title', components: [
						{kind: Item, content: 'Item One'},
						{kind: Item, content: 'Item Two'},
						{kind: Item, content: 'Item Three'},
						{kind: Item, content: 'Item Four'},
						{kind: Item, content: 'Item Five'}
					]}
				]}
			]
		}
	],
	create: function () {
		Control.prototype.create.apply(this, arguments);
		this.$.list.set('collection', new Collection([
			{name: 'Red'},
			{name: 'White'},
			{name: 'Blue'},
			{name: 'Black'}
		]));
		this.$.repeater.set('collection', new Collection([
			{name: 'Santa Clara'},
			{name: 'San Francisco'},
			{name: 'Seoul'}
		]));
	},
	rendered: function () {
		Control.prototype.rendered.apply(this, arguments);
		Spotlight.spot(this.$.panels);
	},
	// custom next handler for each panel to avoid switching from one active panel
	// to another with no visible change for demo
	next1: function (sender, event) {
		this.$.panels.setIndex(2);
		return true;
	},
	next2: function (sender, event) {
		this.$.panels.setIndex(2);
		return true;
	},
	next3: function (sender, event) {
		this.$.panels.setIndex(5);
		return true;
	},
	next4: function (sender, event) {
		this.$.panels.setIndex(5);
		return true;
	},
	next5: function (sender, event) {
		this.$.panels.setIndex(7);
		return true;
	},
	next6: function (sender, event) {
		this.$.panels.setIndex(7);
		return true;
	},
	handleShowingChanged: function (sender, event) {
		this.$.panels.setHandleShowing(sender.getChecked());
	},
	panelsShowingChanged: function (sender, event) {
		// Hiding the VideoPlayer when it would be obscured by the Panels avoids UI performance
		// issues caused by the GPU being occupied rendering video frames that aren't visible.
		this.$.player.set('showing', !event.showing);
	},
	showPopup: function (sender) {
		var p = this.$[sender.popup];
		if (p) {
			if(sender.direct) {
				p.showDirect();
			} else {
				p.show();
			}
		}
	},
	close: function () {
		if (this.$.partialDrawer.getOpen()) {
			this.$.partialDrawer.setOpen(false);
		} else {
			this.$.partialDrawer.setControlsOpen(false);
		}
	}
});

},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/Control":26,"../../../enyo/lib/DataRepeater":31,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/ChannelInfo":126,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/Clock":129,"../../../moonstone/lib/ContextualPopup":130,"../../../moonstone/lib/ContextualPopupDecorator":132,"../../../moonstone/lib/DataList":134,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/Drawers":140,"../../../moonstone/lib/IconButton":154,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/ListActions":165,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Popup":171,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/ToggleItem":192,"../../../moonstone/lib/VideoInfoBackground":198,"../../../moonstone/lib/VideoInfoHeader":199,"../../../moonstone/lib/VideoPlayer":200,"../../../spotlight":275}],247:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection'),
	DataRepeater = require('../../../enyo/lib/DataRepeater'),
	Group = require('../../../enyo/lib/Group');

var
	BodyText = require('../../../moonstone/lib/BodyText'),
	Button = require('../../../moonstone/lib/Button'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	DataList = require('../../../moonstone/lib/DataList'),
	Divider = require('../../../moonstone/lib/Divider'),
	ListActions = require('../../../moonstone/lib/ListActions'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	SelectableItem = require('../../../moonstone/lib/SelectableItem'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem'),
	Tooltip = require('../../../moonstone/lib/Tooltip'),
	TooltipDecorator = require('../../../moonstone/lib/TooltipDecorator');

module.exports = kind({
	name: 'moon.sample.ListActionsSample',
	kind: Panels,
	pattern: 'activity',
	classes: 'moon enyo-unselectable enyo-fit',
	handlers: {
		onActivate: 'activateHandler'
	},
	components: [
		{kind: Panel, headerType: 'medium', title: 'List Actions Sample', headerComponents: [
			{kind: TooltipDecorator, components: [
				{kind: Tooltip, position: 'above', content: 'Test Dynamic Lists'},

				//* List actions with default width
				{kind: ListActions, disabled: true, name: 'listActions', icon: 'drawer', listActions: [
					{action: 'category3', components: [
						{kind: Divider, content: 'Category 3 (DataList)'},
						{kind: DataList, name: 'list', fit:true, components: [
							{kind: CheckboxItem, bindings: [{from: '.model.name', to: '.content'}]}
						]}
					]},
					{action: 'category2', components: [
						{kind: Divider, content: 'Category 2 (DataRepeater)'},
						{kind: DataRepeater, containerOptions:{kind: Scroller, classes: 'enyo-fill'}, name: 'repeater', fit:true, components: [
							{kind: ToggleItem, bindings: [{from: '.model.name', to: '.content'}]}
						]}
					]},
					{action: 'category1', components: [
						{kind: Divider, content: 'Category 1 (Static)'},
						{kind: Scroller, fit: true, components: [
							{kind: Group, name: 'group', highlander: true, defaultKind: SelectableItem, components: [
								{content: 'Just Released'},
								{content: 'Recommended'},
								{content: 'Top Rated'}
							]}
						]}
					]}
				]}
			]},
			{kind: TooltipDecorator, components: [
				{kind: Tooltip, position: 'above', content: 'Dummy List Actions'},

				//* List actions with proportional width
				{kind: ListActions, proportionalWidth: true, iconSrc: 'assets/icon-list.png', listActions: [
					{action: 'Cost', components: [
						{kind: Divider, content: 'Cost'},
						{kind: Scroller, defaultKind: ToggleItem, fit: true, components: [
							{content: '$'},
							{content: '$$'},
							{content: '$$$'}
						]}
					]},
					{action: 'Flavor', components: [
						{kind: Divider, content: 'Flavor'},
						{kind: Scroller, defaultKind: CheckboxItem, fit: true, components: [
							{content: 'Spicy'},
							{content: 'Sweet'},
							{content: 'Sour'},
							{content: 'Salty', checked: true},
							{content: 'Savory'},
							{content: 'Bland'},
							{content: 'Umami'},
							{content: 'Bitter'}
						]}
					]}
				]}
			]},
			{kind: TooltipDecorator, components: [
				{kind: Tooltip, position: 'above', content: 'Test Auto Collapse'},

				//* List actions with auto-collapsing
				{kind: ListActions, autoCollapse: true, iconSrc: 'assets/icon-list.png', listActions: [
					{action: 'AutoCollapseTest', components: [
						{kind: Divider, content: 'Try Auto-collapse'},
						{kind: Scroller, fit: true, components: [
							{kind: Group, highlander: true, defaultKind: CheckboxItem, components: [
								{content: 'Select'},
								{content: 'One'},
								{content: 'To'},
								{content: 'Auto'},
								{content: 'Collapse'},
								{content: 'This'},
								{content: 'List'},
								{content: 'Actions'},
								{content: 'Menu'}
							]}
						]}
					]}
				]}
			]}
		], components: [
			{components: [
				{kind: Button, small:true, content: 'Add Option to Category 1', ontap: 'addToStatic'},
				{kind: Button, small:true, content: 'Add Option to Category 2', ontap: 'addToRepeater'},
				{kind: Button, small:true, content: 'Add Option to Category 3', ontap: 'addToList'},
				{classes: 'moon-1v'},
				{kind: Button, small:true, content: 'Breadcrumb Panel', ontap: 'toggleBreadcrumb'},
				{kind: ToggleButton, small: true, toggleOnLabel: 'Header Type: Small', toggleOffLabel: 'Header Type: Medium', ontap: 'toggleHeaderSize'},
				{name: 'toggleDisabledListActions', kind: ToggleButton, small: true, toggleOnLabel: 'ListActions: Disabled', toggleOffLabel: 'ListActions: Enabled', value: true}
			]},
			{fit: true},
			{kind: Divider, content: 'List Action Event'},
			{kind: BodyText, name: 'console', content: 'Event'}
		]},
		{kind: Panel, title: 'Header', components: [
			{kind: Button, small:true, content: 'Go Back', ontap: 'toggleBreadcrumb'}
		]}
	],
	bindings: [
		{from: '$.toggleDisabledListActions.value', to: '$.listActions.disabled'}
	],
	activateHandler: function (sender, event) {
		if (event && event.action) {
			if (event.originator instanceof SelectableItem) {
				this.$.console.setContent(
					event.action + ': ' +
					event.originator.getContent() + ' was ' +
					(event.originator.getSelected() ? 'selected' : 'unselected')
				);
			} else {	// moon.CheckboxItem or moon.ToggleItem
				this.$.console.setContent(
					event.action + ': ' +
					event.toggledControl.getContent() + ' was ' +
					(event.originator.getChecked() ? 'selected' : 'unselected')
				);
			}
		}

		// Log the active state of the ListAction drawer
		if (event.originator instanceof ListActions) {
			this.$.console.setContent(event.originator.name + ' is now ' + (event.originator.getOpen() ? 'open' : 'closed'));
		}
	},
	addToStatic: function () {
		this.optionNumber = (this.optionNumber || 0) + 1;
		this.$.group.createComponent({content: 'Option ' + this.optionNumber}).render();
	},
	addToList: function () {
		this.optionNumber = (this.optionNumber || 0) + 1;
		this.$.list.collection.add({name: 'Option ' + this.optionNumber});
	},
	addToRepeater: function () {
		this.optionNumber = (this.optionNumber || 0) + 1;
		this.$.repeater.collection.add({name: 'Option ' + this.optionNumber});
	},
	toggleBreadcrumb: function () {
		this.setIndex(this.getIndex() > 0 ? 0 : 1);
	},
	toggleHeaderSize: function () {
		this.getActive().setHeaderType(this.getActive().getHeaderType() == 'small' ? 'medium': 'small');
	},
	create: function () {
		Panels.prototype.create.apply(this, arguments);
		this.$.list.set('collection', new Collection([
			{name: 'SAT 1'},
			{name: 'SAT 2'},
			{name: 'SAT 3'},
			{name: 'OTHER S1'},
			{name: 'OTHER S2'}
		]));
		this.$.repeater.set('collection', new Collection([
			{name: 'Comedy'},
			{name: 'Action'},
			{name: 'Drama'},
			{name: 'Family'},
			{name: 'Fantasy'},
			{name: 'Science Fiction'}
		]));
	}
});
},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/DataRepeater":31,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone/lib/BodyText":121,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/DataList":134,"../../../moonstone/lib/Divider":138,"../../../moonstone/lib/ListActions":165,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SelectableItem":181,"../../../moonstone/lib/ToggleButton":191,"../../../moonstone/lib/ToggleItem":192,"../../../moonstone/lib/Tooltip":194,"../../../moonstone/lib/TooltipDecorator":195}],228:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection'),
	Control = require('../../../enyo/lib/Control'),
	Group = require('../../../enyo/lib/Group');

var
	DatePicker = require('../../../moonstone/lib/DatePicker'),
	ExpandableDataPicker = require('../../../moonstone/lib/ExpandableDataPicker'),
	ExpandableInput = require('../../../moonstone/lib/ExpandableInput'),
	ExpandableIntegerPicker = require('../../../moonstone/lib/ExpandableIntegerPicker'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	TimePicker = require('../../../moonstone/lib/TimePicker');

module.exports = kind({
	name: 'moon.sample.ExpandablePickerSample',
	kind: Control,
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Panels, pattern: 'activity', classes: 'enyo-fit', components: [
			{kind: Panel, name: 'nonGroupedPanel', onChange: 'pickerChanged', title: 'Expandable', headerType: 'medium', titleBelow: 'Not grouped', style: 'width:50%;', components: [
				{kind: Scroller, horizontal: 'hidden', classes: 'enyo-fill', components: [
					{style: 'max-width: 500px;', components: [
						{kind: ExpandablePicker, noneText: 'Nothing selected', content: 'Expandable Picker', allowHtml:true, components: [
							{content: 'English'},
							{content: 'Spanish'},
							{content: 'French'},
							{content: 'German'},
							{content: 'Italian'},
							{content: 'Japanese'},
							{content: 'Symbols <span style=\'color:orange;\'>&#x2620; &#x2764; &#x2619;</span>', allowHtml:true}
						]},
						{kind: ExpandablePicker, content: 'Pre-selected Picker', components: [
							{content: 'On', active: true},
							{content: 'Off'}
						]},
						{kind: ExpandablePicker, multipleSelection: true, noneText: 'Nothing selected', content: 'Non-auto-collapsing', autoCollapseOnSelect: false, components: [
							{content: 'Item 1'},
							{content: 'Item 2', active: true},
							{content: 'Item 3', active: true}
						]},
						{kind: ExpandablePicker, noneText: 'Nothing selected with loooooooooooooooooooooooooong text truncation', content: 'Expandable Picker with looooooooooooooooooooooooooong text truncation', components: [
							{content: 'Looooooooooooooooooooooooooooooooooooooooooooong Item 1'},
							{content: 'Looooooooooooooooooooooooooooooooooooooooooooong Item 2'},
							{content: 'Looooooooooooooooooooooooooooooooooooooooooooong Item 3'}
						]},
						{kind: ExpandablePicker, disabled:true, content: 'Disabled Picker', components: [
							{content: 'Item 1'},
							{content: 'Item 2', active: true},
							{content: 'Item 3'}
						]},
						{kind: ExpandablePicker, content: 'Pre-expanded picker', open: true, components: [
							{content: 'Item 1'},
							{content: 'Item 2', active: true},
							{content: 'Item 3'}
						]},
						{kind: ExpandableIntegerPicker, autoCollapse: true, content: 'Integer Picker', value: 7, min: 3, max: 15, step: 1, unit: 'elephants'},
						{kind: ExpandableIntegerPicker, disabled:true, autoCollapse: true, content: 'Disabled Integer Picker', value: 2, min: 1, max: 15, unit: 'sec'},
						{kind: DatePicker, noneText: 'Pick a Date', content: 'Date Picker'},
						{kind: TimePicker, noneText: 'Pick a Date', content: 'Time Picker'},
						{kind: ExpandableInput, noneText: 'Enter text', content: 'Expandable Input', placeholder: 'Enter text'},
						{kind: ExpandableDataPicker, content: 'Expandable Data Picker', noneText: 'Nothing Selected', components: [
							{bindings: [
								{from: '.model.label', to: '.content'}
							]}
						]},
						{kind: ExpandablePicker, content: 'Initially Hidden Items Picker', renderItemsOnShow: true, components: [
							{content: 'Item 1'},
							{content: 'Item 2', active: true},
							{content: 'Item 3'}
						]}
					]}
				]}
			]},
			{kind: Panel, name: 'groupedPanel', onChange: 'pickerChanged', title: 'Pickers', headerType: 'medium', titleBelow: 'Grouped', joinToPrev:true, components: [
				{kind: Group, tag:null, highlander: true, components: [
					{kind: Scroller, horizontal: 'hidden', classes: 'enyo-fill', components: [
						{style: 'max-width: 500px;', components: [
							{kind: ExpandablePicker, noneText: 'Nothing selected', content: 'Expandable Picker', allowHtml:true, components: [
								{content: 'English'},
								{content: 'Spanish'},
								{content: 'French'},
								{content: 'German'},
								{content: 'Italian'},
								{content: 'Japanese'},
								{content: 'Symbols <span style=\'color:orange;\'>&#x2620; &#x2764; &#x2619;</span>', allowHtml:true}
							]},
							{kind: ExpandablePicker, content: 'Pre-selected Picker', components: [
								{content: 'On', active: true},
								{content: 'Off'}
							]},
							{kind: ExpandablePicker, content: 'Non-auto-collapsing', autoCollapseOnSelect: false, components: [
								{content: 'Item 1'},
								{content: 'Item 2', active: true},
								{content: 'Item 3'}
							]},
							{kind: ExpandablePicker, noneText: 'Nothing selected with loooooooooooooooooooooooooong text truncation', content: 'Expandable Picker with looooooooooooooooooooooooooong text truncation', components: [
								{content: 'Looooooooooooooooooooooooooooooooooooooooooooong Item 1'},
								{content: 'Looooooooooooooooooooooooooooooooooooooooooooong Item 2'},
								{content: 'Looooooooooooooooooooooooooooooooooooooooooooong Item 3'}
							]},
							{kind: ExpandablePicker, disabled:true, content: 'Disabled Picker', components: [
								{content: 'Item 1'},
								{content: 'Item 2', active: true},
								{content: 'Item 3'}
							]},
							{kind: ExpandablePicker, content: 'Pre-expanded picker', open: true, components: [
								{content: 'Item 1'},
								{content: 'Item 2', active: true},
								{content: 'Item 3'}
							]},
							{kind: ExpandableIntegerPicker, autoCollapse: true, content: 'Integer Picker', value: 7, min: 3, max: 15, step: 1, unit: 'elephants'},
							{kind: ExpandableIntegerPicker, disabled:true, autoCollapse: true, content: 'Disabled Integer Picker', value: 2, min: 1, max: 15, unit: 'sec'},
							{kind: DatePicker, noneText: 'Pick a Date', content: 'Date Picker'},
							{kind: TimePicker, noneText: 'Pick a Date', content: 'Time Picker'},
							{kind: ExpandableInput, noneText: 'Enter text', content: 'Expandable Input', placeholder: 'Enter text'},
							{kind: ExpandableDataPicker, content: 'Expandable Data Picker', noneText: 'Nothing Selected', components: [
								{bindings: [
									{from: '.model.label', to: '.content'}
								]}
							]},
							{kind: ExpandablePicker, content: 'Initially Hidden Items Picker', renderItemsOnShow: true, components: [
								{content: 'Item 1'},
								{content: 'Item 2', active: true},
								{content: 'Item 3'}
							]}
						]}
					]}
				]}
			]}
		]}
	],
	create: function () {
		Control.prototype.create.apply(this, arguments);

		var c = new Collection([
			{label: 'Item 1'},
			{label: 'Item 2'},
			{label: 'Item 3'},
			{label: 'Item 4'},
			{label: 'Item 5'}
		]);

		this.$.expandableDataPicker.set('collection', c);
		this.$.expandableDataPicker2.set('collection', c);
	},
	pickerChanged: function (sender, event) {
		var value,
			picker = event.originator.getContent();
		if (event.originator instanceof ExpandablePicker) {
			value = event.content;
			sender.setSubTitleBelow(picker + ' changed to \'' + value + '\'');
		} else if ((event.originator instanceof ExpandableIntegerPicker) ||
					(event.originator instanceof DatePicker) ||
					(event.originator instanceof TimePicker) ||
					(event.originator instanceof ExpandableInput)) {
			value = event.originator.getValue();
			sender.setSubTitleBelow(picker + ' changed to \'' + value + '\'');
		}
	},
	// when called, go into loop of opening/closing pickers every second
	stressTest: function () {
		var pickers = [
			'datePicker',
			'datePicker2',
			'expandableInput',
			'expandableInput2',
			'expandableIntegerPicker',
			// disabled 'expandableIntegerPicker2',
			'expandableIntegerPicker3',
			// disabled 'expandableIntegerPicker4',
			'expandablePicker',
			'expandablePicker2',
			'expandablePicker3',
			'expandablePicker4',
			// disabled 'expandablePicker5',
			'expandablePicker6',
			'expandablePicker7',
			'expandablePicker8',
			'expandablePicker9',
			'expandablePicker10',
			// disabled 'expandablePicker11',
			'expandablePicker12',
			'timePicker',
			'timePicker2',
			'expandableDataPicker',
			'expandableDataPicker2'
		];
		var index = 0;
		var opened = false;
		setInterval(this.bindSafely(function() {
			if (opened) {
				this.$[pickers[index++]].setOpen(false);
			} else {
				this.$[pickers[index]].setOpen(true);
			}
			opened = !opened;
			index = index % pickers.length;
		}), 1000);
	}
});

},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/Control":26,"../../../enyo/lib/Group":37,"../../../enyo/lib/kind":96,"../../../moonstone/lib/DatePicker":135,"../../../moonstone/lib/ExpandableDataPicker":141,"../../../moonstone/lib/ExpandableInput":142,"../../../moonstone/lib/ExpandableIntegerPicker":143,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/TimePicker":190}],261:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind');

var
	Accordion = require('../../../moonstone/lib/Accordion'),
	Button = require('../../../moonstone/lib/Button'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	DatePicker = require('../../../moonstone/lib/DatePicker'),
	ExpandableInput = require('../../../moonstone/lib/ExpandableInput'),
	ExpandableIntegerPicker = require('../../../moonstone/lib/ExpandableIntegerPicker'),
	ExpandablePicker = require('../../../moonstone/lib/ExpandablePicker'),
	ExpandableText = require('../../../moonstone/lib/ExpandableText'),
	FormCheckbox = require('../../../moonstone/lib/FormCheckbox'),
	Input = require('../../../moonstone/lib/Input'),
	InputDecorator = require('../../../moonstone/lib/InputDecorator'),
	Item = require('../../../moonstone/lib/Item'),
	Panel = require('../../../moonstone/lib/Panel'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	SelectableItem = require('../../../moonstone/lib/SelectableItem'),
	SimplePicker = require('../../../moonstone/lib/SimplePicker'),
	TimePicker = require('../../../moonstone/lib/TimePicker'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton'),
	ToggleItem = require('../../../moonstone/lib/ToggleItem');

module.exports = kind({
	name: 'moon.sample.ScrollerVerticalSample',
	classes: 'moon enyo-unselectable enyo-fit',
	components: [
		{kind: Panel, classes: 'enyo-fit', headerType: 'medium', title: 'Vertical Scroller', headerComponents: [
			{content: 'Spacing: ', classes: 'moon-header-client-text'},
			{kind: SimplePicker, name: 'spacingPicker', classes: 'moon-4h', onChange: 'spacingChanged', components: [
				{content: 'default', spacingClass: ''},
				{content: 'small', spacingClass: 'moon-vspacing-s', active:true},
				{content: 'medium', spacingClass: 'moon-vspacing-m'},
				{content: 'large', spacingClass: 'moon-vspacing-l'}
			]}
		], components: [
			{ kind: Scroller, classes: 'enyo-fill', components: [
				{name: 'wrapper', classes: 'moon-6h moon-vspacing-s', components: [
					{kind: ExpandablePicker, noneText: 'Select a language', autoCollapse: true, content: 'Expandable Picker', classes: 'moon-expandable-picker-wrapper', components: [
						{content: 'English'},
						{content: 'Spanish'},
						{content: 'French'},
						{content: 'German'},
						{content: 'Italian'},
						{content: 'Japanese'}
					]},
					{kind: ExpandableInput, content: 'Expandable Input', noneText: 'No Input'},
					{kind: ExpandableIntegerPicker, content: 'Expandable Integer Picker', value: 7, min: 3, max: 15, step: 1, unit: 'elephants'},
					{kind: DatePicker, noneText: 'Pick a Date', content: 'Date Picker'},
					{kind: TimePicker, noneText: 'Pick a Time', content: 'Time Picker'},
					{kind: CheckboxItem, content: 'Checkbox Item 1'},
					{kind: CheckboxItem, content: 'Checkbox Item 2'},
					{kind: CheckboxItem, content: 'Checkbox Item 3'},
					{kind: SelectableItem, content: 'Selectable Item 1'},
					{kind: SelectableItem, content: 'Selectable Item 2'},
					{kind: SelectableItem, content: 'Selectable Item 3'},
					{kind: CheckboxItem, content: 'Checkbox Item 4 (right)', checkboxOnRight:true},
					{kind: CheckboxItem, content: 'Checkbox Item 5 (right)', checkboxOnRight:true},
					{kind: CheckboxItem, content: 'Checkbox Item 6 (right)', checkboxOnRight:true},
					{kind: ToggleItem, content: 'Toggle Item 1'},
					{kind: ToggleItem, content: 'Toggle Item 2'},
					{kind: ToggleItem, content: 'Toggle Item 3'},
					{kind: FormCheckbox, content: 'Form Checkbox 1'},
					{kind: FormCheckbox, content: 'Form Checkbox 2'},
					{kind: FormCheckbox, content: 'Form Checkbox 3'},
					{kind: Item, content: 'Item 1'},
					{kind: Item, content: 'Item 1'},
					{kind: Button, content: 'Button 1'}, {tag: 'br'},
					{kind: Button, content: 'Button 2'}, {tag: 'br'},
					{kind: Button, content: 'Button 3'}, {tag: 'br'},
					{kind: Item, content: 'Item 1'},
					{kind: Item, content: 'Item 1'},
					{kind: ToggleButton, content: 'Toggle Button 1'}, {tag: 'br'},
					{kind: ToggleButton, content: 'Toggle Button 2'}, {tag: 'br'},
					{kind: ToggleButton, content: 'Toggle Button 3'}, {tag: 'br'},
					{kind: InputDecorator, components: [
						{kind: Input, placeholder: 'Input'}
					]},
					{kind: InputDecorator, components: [
						{kind: Input, placeholder: 'Input'}
					]},
					{kind: InputDecorator, components: [
						{kind: Input, placeholder: 'Input'}
					]},
					{kind: Accordion, content: 'Accordion 1', defaultKind: SelectableItem, components: [
						{content: 'Item One'},
						{content: 'Item Two'}
					]},
					{kind: Accordion, content: 'Accordion 2', defaultKind: SelectableItem, components: [
						{content: 'Item Three'},
						{content: 'Item Four'}
					]},
					{kind: Accordion, content: 'Accordion 3', defaultKind: SelectableItem, components: [
						{content: 'Item Five'},
						{content: 'Item Six'}
					]},
					{kind: Item, content: 'Item 1'},
					{kind: Item, content: 'Item 2'},
					{kind: Item, content: 'Item 3'},
					{kind: Item, content: 'Item 4'},
					{kind: ExpandableText, content: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'},
					{kind: Item, content: 'Item 5'},
					{kind: Item, content: 'Item 6'},
					{kind: Item, content: 'Item 7'},
					{kind: Item, content: 'Item 8'},
					{kind: ExpandableText, content: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'},
					{kind: Item, content: 'Item 9'},
					{kind: Item, content: 'Item 10'},
					{kind: Item, content: 'Item 11'},
					{kind: Item, content: 'Item 12'},
					{kind: ExpandableText, content: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'},
					{kind: Item, content: 'Item 13'},
					{kind: Item, content: 'Item 14'},
					{kind: Item, content: 'Item 15'},
					{kind: Item, content: 'Item 16'},
					{kind: Item, content: 'Item 17'},
					{kind: Item, content: 'Item 18'},
					{kind: Item, content: 'Item 19'},
					{kind: Item, content: 'Item 20'},
					{kind: Item, content: 'Item 21'},
					{kind: Item, content: 'Item 22'},
					{kind: ExpandablePicker, noneText: 'Select a language', autoCollapse: true, content: 'Expandable Picker', classes: 'moon-expandable-picker-wrapper', components: [
						{content: 'English'},
						{content: 'Spanish'},
						{content: 'French'},
						{content: 'German'},
						{content: 'Italian'},
						{content: 'Japanese'}
					]},
					{kind: ExpandableInput, content: 'Expandable Input', noneText: 'No Input'},
					{kind: ExpandableIntegerPicker, content: 'Expandable Integer Picker', value: 7, min: 3, max: 15, step: 1, unit: 'elephants'},
					{kind: DatePicker, noneText: 'Pick a Date', content: 'Date Picker'},
					{kind: TimePicker, noneText: 'Pick a Time', content: 'Time Picker'},
					{kind: Accordion, content: 'Accordion 1', components: [
						{content: 'Item One'},
						{content: 'Item Two'}
					]},
					{kind: Accordion, content: 'Accordion 2', components: [
						{content: 'Item Three'},
						{content: 'Item Four'}
					]},
					{kind: Accordion, content: 'Accordion 3', components: [
						{content: 'Item Five'},
						{content: 'Item Six'}
					]}
				]}
			]}
		]}
	],
	create: function() {
		this.inherited(arguments);
		this.spacingChanged();
	},
	spacingChanged: function(inSender, inEvent) {
		if (this.lastSpacingClass) {
			this.$.wrapper.removeClass(this.lastSpacingClass);
		}
		var c = this.$.spacingPicker.getSelected().spacingClass;
		this.$.wrapper.addClass(c);
		this.lastSpacingClass = c;
	}
});

},{"../../../enyo/lib/kind":96,"../../../moonstone/lib/Accordion":120,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/DatePicker":135,"../../../moonstone/lib/ExpandableInput":142,"../../../moonstone/lib/ExpandableIntegerPicker":143,"../../../moonstone/lib/ExpandablePicker":146,"../../../moonstone/lib/ExpandableText":147,"../../../moonstone/lib/FormCheckbox":148,"../../../moonstone/lib/Input":158,"../../../moonstone/lib/InputDecorator":159,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SelectableItem":181,"../../../moonstone/lib/SimplePicker":184,"../../../moonstone/lib/TimePicker":190,"../../../moonstone/lib/ToggleButton":191,"../../../moonstone/lib/ToggleItem":192}],218:[function(require,module,exports){
var
	kind = require('../../../enyo/lib/kind'),
	Collection = require('../../../enyo/lib/Collection');

var
	Button = require('../../../moonstone/lib/Button'),
	CheckboxItem = require('../../../moonstone/lib/CheckboxItem'),
	ContextualPopup = require('../../../moonstone/lib/ContextualPopup'),
	ContextualPopupButton = require('../../../moonstone/lib/ContextualPopupButton'),
	ContextualPopupDecorator = require('../../../moonstone/lib/ContextualPopupDecorator'),
	DataList = require('../../../moonstone/lib/DataList'),
	DataGridList = require('../../../moonstone/lib/DataGridList'),
	GridListImageItem = require('../../../moonstone/lib/GridListImageItem'),
	Item = require('../../../moonstone/lib/Item'),
	Panel = require('../../../moonstone/lib/Panel'),
	Panels = require('../../../moonstone/lib/Panels'),
	RadioItemGroup = require('../../../moonstone/lib/RadioItemGroup'),
	Scroller = require('../../../moonstone/lib/Scroller'),
	SelectionOverlaySupport = require('../../../moonstone/lib/SelectionOverlaySupport'),
	ToggleButton = require('../../../moonstone/lib/ToggleButton');



var GridSampleItem = kind({
	name: 'moon.sample.GridSampleItem',
	kind: GridListImageItem,
	mixins: [SelectionOverlaySupport],
	selectionOverlayVerticalOffset: 35,
	subCaption: 'Sub Caption',
	bindings: [
		{from: '.model.text', to: '.caption'},
		{from: '.model.subText', to: '.subCaption'},
		{from: '.model.url', to: '.source'}
	]
});

module.exports = kind({
	name: 'moon.sample.DataGridListSample',
	kind: Panels,
	pattern: 'activity',
	classes: 'moon enyo-fit enyo-unselectable',
	components: [
		{kind: Panel, classes: 'moon-6h', title: 'Menu', components: [
			{kind: Item, content: 'Scroll'},
			{kind: Item, content: 'the'},
			{kind: Item, content: 'Data Grid List'},
			{kind: Item, content: 'to'},
			{kind: Item, content: 'the'},
			{kind: Item, content: 'Right!'}
		]},
		{kind: Panel, joinToPrev: true, title: 'Data Grid List', headerComponents: [
			{kind: ToggleButton, content: 'Selection', name: 'selectionToggle'},
			{kind: ContextualPopupDecorator, components: [
				{kind: ContextualPopupButton, content: 'Selection Type'},
				{kind: ContextualPopup, classes: 'moon-4h', components: [
					{kind: RadioItemGroup, name: 'selectionTypeGroup', components: [
						{content: 'Single', value: 'single', selected: true},
						{content: 'Multiple', value: 'multi'},
						{content: 'Group', value: 'group'}
					]}
				]}
			]},
			{kind: Button, content: 'Refresh', ontap: 'refreshItems'},
			{kind: ContextualPopupDecorator, components: [
				{kind: ContextualPopupButton, content: 'Popup List'},
				{kind: ContextualPopup, classes: 'moon-6h moon-8v', components: [
					{kind:DataList, components: [
						{kind:CheckboxItem, bindings: [
							{from: '.model.text', to: '.content'},
							{from: '.model.selected', to: '.checked', oneWay: false}
						]}
					]}
				]}
			]}
		], components: [
			{name: 'gridList', fit: true, spacing: 20, minWidth: 180, minHeight: 270, kind: DataGridList, scrollerOptions: { kind: Scroller, vertical: 'scroll', horizontal: 'hidden', spotlightPagingControls: true }, components: [
				{ kind: GridSampleItem }
			]}
		]}
	],
	bindings: [
		{from: '.collection', to: '.$.dataList.collection'},
		{from: '.collection', to: '.$.gridList.collection'},
		{from: '.$.selectionTypeGroup.active', to: '.$.gridList.selectionType',
			transform: function (selected) {
				return selected && selected.value;
			}
		},
		{from: '.$.selectionToggle.value', to: '.$.gridList.selection', oneWay: false}
	],
	create: function () {
		Panels.prototype.create.apply(this, arguments);
		// we set the collection that will fire the binding and add it to the list
		this.set('collection', new Collection(this.generateRecords()));
	},
	generateRecords: function () {
		var records = [],
			idx     = this.modelIndex || 0;
		for (; records.length < 500; ++idx) {
			var title = (idx % 8 === 0) ? ' with long title' : '';
			var subTitle = (idx % 8 === 0) ? 'Lorem ipsum dolor sit amet' : 'Subtitle';
			records.push({
				selected: false,
				text: 'Item ' + idx + title,
				subText: subTitle,
				url: 'http://placehold.it/300x300/' + Math.floor(Math.random()*0x1000000).toString(16) + '/ffffff&text=Image ' + idx
			});
		}
		// update our internal index so it will always generate unique values
		this.modelIndex = idx;
		return records;
	},
	refreshItems: function () {
		// we fetch our collection reference
		var collection = this.get('collection');
		// we now remove all of the current records from the collection
		collection.remove(collection.models);
		// and we insert all new records that will update the list
		collection.add(this.generateRecords());
	}
});
},{"../../../enyo/lib/Collection":22,"../../../enyo/lib/kind":96,"../../../moonstone/lib/Button":123,"../../../moonstone/lib/CheckboxItem":128,"../../../moonstone/lib/ContextualPopup":130,"../../../moonstone/lib/ContextualPopupButton":131,"../../../moonstone/lib/ContextualPopupDecorator":132,"../../../moonstone/lib/DataGridList":133,"../../../moonstone/lib/DataList":134,"../../../moonstone/lib/GridListImageItem":149,"../../../moonstone/lib/Item":162,"../../../moonstone/lib/Panel":169,"../../../moonstone/lib/Panels":170,"../../../moonstone/lib/RadioItemGroup":175,"../../../moonstone/lib/Scroller":180,"../../../moonstone/lib/SelectionOverlaySupport":182,"../../../moonstone/lib/ToggleButton":191}],274:[function(require,module,exports){
var
	ready = require('../../../enyo/lib/ready'),
	Sampler = require('./All'),
	samples = {
		AccordionSample						: require('./AccordionSample'),
		ActivityPanelsSample				: require('./ActivityPanelsSample'),
		ActivityPanelsWithVideoSample		: require('./ActivityPanelsWithVideoSample'),
		AlwaysViewingPanelsSample			: require('./AlwaysViewingPanelsSample'),
		AlwaysViewingPanelsWithVideoSample	: require('./AlwaysViewingPanelsWithVideoSample'),
		BodyTextSample						: require('./BodyTextSample'),
		ButtonSample						: require('./ButtonSample'),
		CalendarSample						: require('./CalendarSample'),
		CheckboxItemSample					: require('./CheckboxItemSample'),
		ClockSample							: require('./ClockSample'),
		ContextualPopupSample				: require('./ContextualPopupSample'),
		DataGridListSample					: require('./DataGridListSample'),
		DataListSample						: require('./DataListSample'),
		DatePickerSample					: require('./DatePickerSample'),
		DialogSample						: require('./DialogSample'),
		DividerSample						: require('./DividerSample'),
		DrawerSample						: require('./DrawerSample'),
		DynamicPanelsSample					: require('./DynamicPanelsSample'),
		ExpandableDataPickerSample			: require('./ExpandableDataPickerSample'),
		ExpandableInputSample				: require('./ExpandableInputSample'),
		ExpandableListItemSample			: require('./ExpandableListItemSample'),
		ExpandablePickerSample				: require('./ExpandablePickerSample'),
		ExpandableTextSample				: require('./ExpandableTextSample'),
		FontSample							: require('./FontSample'),
		FormCheckboxSample					: require('./FormCheckboxSample'),
		HeaderAutoCollapsingSample			: require('./HeaderAutoCollapsingSample'),
		HeaderSample						: require('./HeaderSample'),
		HighlightTextSample					: require('./HighlightTextSample'),
		HistorySample						: require('./HistorySample'),
		IconButtonSample					: require('./IconButtonSample'),
		IconSample							: require('./IconSample'),
		ImageBadgeSample					: require('./ImageBadgeSample'),
		ImageItemSample						: require('./ImageItemSample'),
		ImageSample							: require('./ImageSample'),
		InputHeaderSample					: require('./InputHeaderSample'),
		InputSample							: require('./InputSample'),
		IntegerPickerSample					: require('./IntegerPickerSample'),
		ItemSample							: require('./ItemSample'),
		ItemOverlaySample					: require('./ItemOverlaySample'),
		LabeledTextItemSample				: require('./LabeledTextItemSample'),
		ListActionsSample					: require('./ListActionsSample'),
		MarqueeSample						: require('./MarqueeSample'),
		ObjectActionHorizontalTypeSample	: require('./ObjectActionHorizontalTypeSample'),
		ObjectActionVerticalTypeSample		: require('./ObjectActionVerticalTypeSample'),
		PanelsVideoPlayerSample				: require('./PanelsVideoPlayerSample'),
		PanelsWithCardArrangerSample		: require('./PanelsWithCardArrangerSample'),
		PanelsWithCarouselArrangerSample	: require('./PanelsWithCarouselArrangerSample'),
		PopupSample							: require('./PopupSample'),
		ProgressButtonSample				: require('./ProgressButtonSample'),
		ProgressSample						: require('./ProgressSample'),
		RadioItemSample						: require('./RadioItemSample'),
		Scroller2dSample					: require('./Scroller2dSample'),
		ScrollerHorizontalSample			: require('./ScrollerHorizontalSample'),
		ScrollerTextSample					: require('./ScrollerTextSample'),
		ScrollerVerticalSample				: require('./ScrollerVerticalSample'),
		SelectableItemSample				: require('./SelectableItemSample'),
		SimpleIntegerPickerSample			: require('./SimpleIntegerPickerSample'),
		SimplePickerSample					: require('./SimplePickerSample'),
		SliderSample						: require('./SliderSample'),
		SpinnerSample						: require('./SpinnerSample'),
		TableSample							: require('./TableSample'),
		TimePickerSample					: require('./TimePickerSample'),
		ToggleButtonSample					: require('./ToggleButtonSample'),
		ToggleItemSample					: require('./ToggleItemSample'),
		TooltipSample						: require('./TooltipSample'),
		VideoPlayerInlineSample				: require('./VideoPlayerInlineSample'),
		VideoPlayerSample					: require('./VideoPlayerSample')
	};

ready(function () {
	new Sampler({samples: samples}).renderInto(document.body);
});
},{"../../../enyo/lib/ready":103,"./AccordionSample":206,"./ActivityPanelsSample":207,"./ActivityPanelsWithVideoSample":208,"./All":209,"./AlwaysViewingPanelsSample":210,"./AlwaysViewingPanelsWithVideoSample":211,"./BodyTextSample":212,"./ButtonSample":213,"./CalendarSample":214,"./CheckboxItemSample":215,"./ClockSample":216,"./ContextualPopupSample":217,"./DataGridListSample":218,"./DataListSample":219,"./DatePickerSample":220,"./DialogSample":221,"./DividerSample":222,"./DrawerSample":223,"./DynamicPanelsSample":224,"./ExpandableDataPickerSample":225,"./ExpandableInputSample":226,"./ExpandableListItemSample":227,"./ExpandablePickerSample":228,"./ExpandableTextSample":229,"./FontSample":230,"./FormCheckboxSample":231,"./HeaderAutoCollapsingSample":232,"./HeaderSample":233,"./HighlightTextSample":234,"./HistorySample":235,"./IconButtonSample":236,"./IconSample":237,"./ImageBadgeSample":238,"./ImageItemSample":239,"./ImageSample":240,"./InputHeaderSample":241,"./InputSample":242,"./IntegerPickerSample":243,"./ItemOverlaySample":244,"./ItemSample":245,"./LabeledTextItemSample":246,"./ListActionsSample":247,"./MarqueeSample":248,"./ObjectActionHorizontalTypeSample":249,"./ObjectActionVerticalTypeSample":250,"./PanelsVideoPlayerSample":251,"./PanelsWithCardArrangerSample":252,"./PanelsWithCarouselArrangerSample":253,"./PopupSample":254,"./ProgressButtonSample":255,"./ProgressSample":256,"./RadioItemSample":257,"./Scroller2dSample":258,"./ScrollerHorizontalSample":259,"./ScrollerTextSample":260,"./ScrollerVerticalSample":261,"./SelectableItemSample":262,"./SimpleIntegerPickerSample":263,"./SimplePickerSample":264,"./SliderSample":265,"./SpinnerSample":266,"./TableSample":267,"./TimePickerSample":268,"./ToggleButtonSample":269,"./ToggleItemSample":270,"./TooltipSample":271,"./VideoPlayerInlineSample":272,"./VideoPlayerSample":273}]},{},[274])


//# sourceMappingURL=samples.js.map